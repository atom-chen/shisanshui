var Desk = require('base/desk');
var Record = require('base/record');
var BigRecord = require('base/big-record');
var SSGCardManager = require('ssg-card-manager');
var RoomManager= require('base/room-manager');
var moment = require('moment');
var Player = require('base/player');
var AutoFindCard = require('base/autoFindCard');

module.exports = SSGDesk;

function SSGDesk() {
    this.cardMng = new SSGCardManager();
    this.bigRecord = null;
    this.bigRecordInfo ="";
    this.isRandomDesk = false;//是否是随机场
    this.records = [];//记录打牌过程
    this.teShuTime = [];
    this.recordId = 0;
    this.playCardTimeOut = null;
    this.readyTimeOut = null;
    //清空一些信息
    this.clear();
    this.createTime = moment().format('YYYY-MM-DD HH:mm:ss');
    //Override
    this.isGameEnd = function () {
        this.gameOverSet();
    };
   
    //Override
    /*在小局结束时，判断*/
    this.isDeskEnd = function () {
        //0 一百条 1 两百条 2 十局 3 二十局 4 三十局 5一局
        var result = false;
        if (this.setting1 > 1) {//局数
            result = (this.cIndex >= this.mMax && !this.isCBegin) || this.isDeskOver;
        }
        else {//条数
            for (var i = 0; i < this.players.length; i++) {
                var player = this.players[i];
                if (player.totalScore <= 0) {
                    result = true;
                    break;
                }
            }
            result = (result && !this.isCBegin) || this.isDeskOver;
        }
        //console.log(result?'桌子结束':'桌子未结束',this.mMax,this.cIndex,this.isDeskOver);
        return result;
    };

    /*重置用户的信息*/
    this.resetPlayerInfo = function () {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            player.cardInfo = [];
        }
    };

    this.setPlays = function (i) {
        var self = this;
        if(i < this.players.length){
            var Playerasdf = new Player();
            var player = this.players[i];
            player.cards = [];  //手里的牌
            player.cardsZuoBi = [];  //作弊的牌
            player.cScore = 0;  //初始为零
            player.playReady = false;//已经准备好的状态
            player.cardInfo = [];
            player.diamond = 0;
            player.readyTimeOut = null;
            player.playCardTimeOut = null;

            if (this.isRandomDesk) player.userCards(1,function (result) {});
            Playerasdf.getHong(player.id,function (result) {
                if(result){
                    player.cardsZuoBi = result;
                }
                i++;
                self.setPlays(i);
            });
        }else{
            if (self.bigRecord == null) {
                self.bigRecord = new BigRecord();
                self.bigRecord.setting1 = self.setting1;
                self.bigRecord.setting2 = self.setting2;
                self.bigRecord.setting3 = self.setting3;
                self.bigRecord.setting4 = self.setting4;
                self.bigRecord.setting5 = self.setting5;
                self.bigRecord.setting8 = self.setting8;
                self.bigRecord.createUserId = self.createId;
                self.bigRecord.roomId = self.roomId;
                self.bigRecord.users = self.playersIndex;
                self.bigRecord.save(function (error,result) {
                    self.recordId = result.insertId;
                });//保存
            }
            self.cardMng.deal(self.players,self.setting2,self.setting3);
            self.sendDeskInfoToAll('fapai');
            if(self.cIndex <= self.mMax){
                console.log("--------------------发牌--------------------");
                for(var j=0;j<self.players.length;j++){
                    self.playCardtimeoutF(j);
                    var player = self.players[i];
                   
                }
            
            }
        }
    };

    this.playCardtimeoutF = function (index) {
        var self = this;
        var player = this.players[index];
        player.playCardTimeOut = setTimeout(function(){
            if(player.cardInfo.length <= 0){
                if(self.isDeskOver){
                    return;
                }
                console.log(player.id,"自动出牌-------------------");
                var autoFindCard = new AutoFindCard();
                var cardInfo = autoFindCard.getAllCardsTypeAndValue(player.cards, self.setting3[2]);
                self.playerPlayCard(player.id, cardInfo);
            }
        },65*1000); // 服务端比客服端多5S
        if(player.readyTimeOut!=null){
            clearTimeout(player.readyTimeOut);
            player.readyTimeOut = null;
        }
    };

    this.readyTimeOutF = function (index,time) {
        var self = this;
        var player = this.players[index];
        player.readyTimeOut = setTimeout(function(){
             if(self.isDeskOver){
                return;
            }
            console.log("-----------------------------自动准备");
            if(player !== null && self !== null && self.cIndex < self.mMax){
                if(!player.readyStatus){
                    player.readyStatus = true;
                    self.sendToAll('ready',true,{'userId':player.id});
                    if (self.canFp()) {
                        self.fapai();
                    }
                }
            }
        },9 * 1000 + self.players.length * 3 * 1000 + time * 1000);
    };


    //Override
    /*发牌*/
    this.fapai = function (start) {
        if (!this.canFp(start) || this.isCBegin ) {  //不能发牌的状态不执行发牌
            return;
        }
        if(this.isDeskOver){
            return;
        }

        this.cIndex++;
        if( this.cIndex > this.mMax){  //这里必须要用大于，不能用大于等于
            return;
        }
        this.overTime =  new Date().getTime(); //当前时间戳
        this.isCBegin = true;
        
        if (this.cIndex == 1) {//第一局
            for (var i = 0;i < this.players.length;i++) {
                var player = this.players[i];
                player.totalScore = 0;
            }
        }
       
        if(this.setting3[3]) {   //[疯狂场,鬼牌,比花色,坐庄,马牌]
            this.initSetBanker(0);
        }

        if (this.isRandomDesk) {    //随机模式
            for (var i = 0;i < this.players.length;i++) {
                var player = this.players[i];
                player.isBanker = false;
            }
        }

        this.preFapai();        //发牌之前的设置

        this.resetPlayerInfo(); //初始用户的其它信息.

        this.allShotData = [];
        this.shotData = [];
        this.setPlays(0);
    };


    this.playerPlayCard = function (userId,card) {
        var player = this.getUser(userId);
        player.cardInfo = card;
        var s = this.specialFormatter();
        var data = [{userId},{card},{s}];
        /*发送给所有的用户*/
        this.sendToAll('playCard',true,data);
        // this.sendDeskInfoToAll('playCard');
        /*记录打牌过程*/
        // data = [{userId},{'card':null}];
        if(!this.records) this.records = [];
        this.records.push(JSON.stringify({'action':'playCard','result':true,'data':data}));
        /*判断是否所有人都有准备好*/
        var number = 0;
        for (var i = 0; i < this.players.length; i++) {
            var p = this.players[i];
            if (p.cardInfo.length > 0) {
                number++;
            }
        }

        if (number == this.maxNumber) {    //都有准备好了
            /*延迟1秒后 游戏结束*/
            var self = this;
            this.gameOver();

            for(var i=0;i<self.players.length;i++){
                var player = self.players[i];
                clearTimeout(player.playCardTimeOut);
                player.playCardTimeOut = null;

            }

            // setTimeout(function() {
            // }, 1000);//1s
        }
    };

    /*判断全垒打的用户*/
    this.getShotData = function() {
        //庄家模式和非庄家模式
        var bankerMode = this.setting3[3];  //[疯狂场,鬼牌,比花色,坐庄,马牌]
        this.allShotData = [];
        this.shotData = [];
        for (var i = 0; i < this.players.length; i++) {
            var player = this.players[i];
            if (player.cardInfo.length < 1) {
                continue;
            }
            if (bankerMode && !player.isBanker && !this.isRandomDesk) {
                //不是庄家并且不是随机场则跳过
                continue;
            }
            var isAllShot = true;
            for (var j = 0; j < this.players.length; j++) {
                var tPlayer = this.players[j];
                if (player.id != tPlayer.id) {
                    var isShot = true;      //isShot是打枪的人
                    var isShoted = true;    //isShoted是被打枪

                    if( player.cardInfo.length == 1 || tPlayer.cardInfo.length == 1){ // 如果我或者对方是特殊牌
                        var Ps = player.cardInfo[0].type;
                        var Ts = tPlayer.cardInfo[0].type;
                       
                        if( Ps>=18 || Ts >=18) {            // 特殊牌是龙
                            Ps > Ts? (isShoted=false):( (Ps == Ts)? (isShot=false,isShoted=false):(isShot=false) );
                        }else{                              // 特殊牌不是龙，不打枪
                            isShot = false;
                            isShoted = false;
                        }
                    }else{                                 // 我和对方都不是特殊
                        for (var k = 0; k < 3; k++) {
                            var pData = player.cardInfo[k];
                            var tPData = tPlayer.cardInfo[k];
                            var result = this.cardMng.compareCard(pData,tPData);
                            if ( result == 0 && this.isRandomDesk )  {
                                isShot = false;
                                isShoted = false;
                            }
                            else if ((result == 0 && !this.isRandomDesk) ) {
                                //都不赢
                                isShot = false;
                                isShoted = false;
                            }
                            else if(result == 1){
                                isShoted = false;
                            }
                            else {
                                isShot = false;//有一道 小则不能打枪
                            }
                        }
                    }
                   
                    if (bankerMode && !this.isRandomDesk) {
                        if(isShoted) {//被打枪
                            this.shotData.push({'fromUserId':tPlayer.id,'toUserId':player.id});
                        }
                    }
                    if (isShot) {
                        this.shotData.push({'fromUserId':player.id,'toUserId':tPlayer.id});
                    }else {
                        isAllShot = false;
                    }
                }
            }
            if (isAllShot && this.players.length >= 3) {
                this.allShotData.push(player.id);
            }
        }

    };
    /*判断该用户是否是全垒打*/
    this.isPlayerAllShot = function(userId) {
        // console.log(this.allShotData,"打枪数据-*------------------*-ssg-desk -- 292");
        for (var i = 0; i < this.allShotData.length; i++) {
            if (this.allShotData[i] == userId) {
                return true;
            }
        }
        return false;
    };
    /*
     判断某用户是否被某用户打枪
     fromUserId
     toUserId
     toUserId 被 fromUserId 打枪 则返回true 否则返回false
     */
    this.isPlayerShot = function(fromUserId,toUserId) {
        for (var i = 0; i < this.shotData.length; i++) {
            var data = this.shotData[i];
            if (data.fromUserId == fromUserId && data.toUserId == toUserId) {
                return true;
            }
        }
        return false;
    };

    this.gameOver = function () {

        for( var i=1; i<this.players.length; i++){
            if(this.players[i].cardInfo == null){
                return ;
            }
        }
        if (!this.isCBegin && !this.isDeskEnd()) {  //没有开局的状态则不会有结束
            return;
        }
        if (this.isDeskOver && !this.isCBegin) {
            this.sendDeskInfoToAll('gameOver');
            return;
        }
        this.gameOverSet();
        this.isCBegin = false;
        var bankerMode = wanfa = this.setting3[3];//玩法 [疯狂场,鬼牌,比花色,坐庄,马牌]
        var maPaiMode = this.setting3[4] ;//是否使用马牌
        //var beilv = this.setting5 + 1;    // 倍率 setting5 值0~2 对对应 1~3倍，

        //庄家龙 - 房主一直做庄
        //四家龙 - 四人轮流做庄
        //计算最后得分-初始化
        for (var i = 0; i < this.players.length; i++) {
            var player = this.players[i];
            player.cScore = 0;
            player.lCScore = [];// 每一道额外总分
            player.extra = [0,0,0];
            player.extraSocre = [];
            player.specialSocre = [];
            player.tscore = 0;// 特殊牌得分
            player.score1 = 0;//第一道得分
            player.score2 = 0;//二
            player.score3 = 0;//三
            player.shotScore = [];
            player.allShotScore = 0;
            player.lScore1 = 0;//第一道得分
            player.lScore2 = 0;//二
            player.lScore3 = 0;//三
            player.totalWin = 0;//些数只有在随机场才有实际意义
            player.isContainExtra = false;
        }

        // 是否退出房间
        var number = 0;
        for (var i = 0; i < this.players.length; i++) {
            var p = this.players[i];
            if (p.cardInfo.length > 0 && p.cardInfo != '' && p.cardInfo != null) {
                number++;
            }
        }
        if (number == this.maxNumber) {    //退出并且有人没有出牌不把消息记录放进数据库 不计分
            //获取 打枪或全垒打的信息
            this.getShotData();
            //开始每一道的计算
            for (var i = 0; i < this.players.length; i++) {
                var player = this.players[i];
                if (player.cardInfo.length < 1) {
                    continue;
                }
                //随机场玩家之间互相比牌
                if (bankerMode && !player.isBanker && !this.isRandomDesk) {
                    continue;
                }

                var isSpecialCard = player.cardInfo.length == 1;//获取是否为特殊牌

                for (var j = 0; j < this.players.length; j++) {//遍历其它的玩家
                    var tPlayer = this.players[j];
                    if (tPlayer.id != player.id) {//跟其余三家比较 不跟自己比
                        var tIsSpecailCard = tPlayer.cardInfo.length == 1;//比较的对象是否是特殊牌
                        var beilv = 1;//
                        if(bankerMode){
                            beilv = tPlayer.beilv ? tPlayer.beilv:1;  // 只有庄家模式才会有倍率选择，且是由闲家决定多少倍
                        }
                        var totalWin = 0;
                        var mp = 1; // mp 马牌，
                        if(maPaiMode) {
                            if( player.isIncludeMa(this.ma) || tPlayer.isIncludeMa(this.ma)) {
                                mp = 2;
                            }
                        }
                        if (isSpecialCard) {                        //我是特殊牌
                            player.isContainExtra = true;
                            var Ps = player.cardInfo[0].type;
                            var Ts = tPlayer.cardInfo[0].type;
                            if (tIsSpecailCard) {                   // 对方是特殊牌
                                tPlayer.isContainExtra = true;
                                var result = 0;
                                if( Ts >= 18 || Ps>=18 ){                       // 如果我或者对方是龙的特特殊牌
                                    result = (Ps > Ts)? 1:( (Ps == Ts)? 0:-1);
                                }

                                if ( result == -1) {            //
                                    var score = this.cardMng.getSpecialScore(tPlayer.cardInfo[0]);
                                   //player.cScore -= score*beilv;       //
                                    player.tscore -= (score*beilv);
                                    totalWin -= (score*beilv);
                                    player.specialSocre.push(-score*beilv);
                                    if(bankerMode) {
                                        tPlayer.tscore += (score*beilv);
                                        //tPlayer.cScore += score*beilv;  //
                                        tPlayer.specialSocre.push(score*beilv);
                                    }

                                }
                                else if ( result == 1) { //player大
                                    var score = this.cardMng.getSpecialScore(player.cardInfo[0]);
                                    //player.cScore += score;       //
                                    player.specialSocre.push(score*beilv);
                                    player.tscore += (score*beilv);
                                    totalWin +=(score*beilv);
                                    if(bankerMode) {
                                        //tPlayer.cScore -= score*beilv;  //
                                        tPlayer.tscore -= (score*beilv);
                                        tPlayer.specialSocre.push(-score*beilv);
                                    }

                                }
                            }
                            else { //     对方不是特殊牌 player赢
                                var score = this.cardMng.getSpecialScore(player.cardInfo[0]);
                                //player.cScore += score*beilv;
                                player.tscore += (score*beilv);
                                player.specialSocre.push(score*beilv);
                                totalWin +=(score*beilv);
                                if(bankerMode) {
                                    //tPlayer.cScore -= score*beilv;
                                    tPlayer.tscore -= (score*beilv);
                                    tPlayer.specialSocre.push(-score*beilv);
                                }
                            }
                        }
                        else {                                            // 我不是特殊牌
                            if (tIsSpecailCard) {                         // 对方是特殊牌
                                tPlayer.isContainExtra = true;
                                var score = this.cardMng.getSpecialScore(tPlayer.cardInfo[0]);
                                //player.cScore -= score*beilv;
                                player.tscore -= (score*beilv);
                                player.specialSocre.push(-score*beilv);
                                totalWin -=(score*beilv);
                                if(bankerMode) {
                                    tPlayer.tscore += (score*beilv);
                                    //tPlayer.cScore += score*beilv;
                                    tPlayer.specialSocre.push(score*beilv);
                                }
                            }
                            else {           //两人都不是特殊牌，则要比较每一道牌
                                for (var k = 0; k < 3; k++) {
                                    var result = this.cardMng.compareCard(player.cardInfo[k],tPlayer.cardInfo[k]);
                                    var score = 1;
                                    var lScore = 0;
                                    if((bankerMode && result == 0 && !this.isRandomDesk) || result ==1) {
                                        //庄家模式下，如果两人的牌相同，算庄家赢
                                        var info = player.cardInfo[k];
                                        if(k == 0) {
                                            //头道为三条且大于对方，赢家赢方加3分，输家减3分。
                                            if(info.type == this.cardMng.TYPE.SanTiao) {
                                                lScore = 2;
                                            }
                                        }
                                        else if(k == 1) {
                                            if(info.type == this.cardMng.TYPE.TieZhi) {
                                                //中道为铁支（炸弹）且大于对方赢方加8分，对方输8分
                                                lScore = 7;
                                            }
                                            else if(info.type == this.cardMng.TYPE.TongHuaShun) {
                                                //中道为同花顺且大于对方赢方加10分，对方输10分
                                                lScore = 9;
                                            }else if(info.type == this.cardMng.TYPE.HuLu){
                                                //二道葫芦且大于对方，赢家赢方加2分，输家减2分。
                                                lScore = 1;
                                            }else if(info.type == this.cardMng.TYPE.wuTong){
                                                //二道五同且大于对方，赢家赢方加13分，输家减13分。
                                                lScore = 13;
                                            }
                                        }
                                        else {
                                            if(info.type == this.cardMng.TYPE.TieZhi) {
                                                //尾牌型铁支（炸弹）赢方加4分，对方减4分。
                                                lScore = 3;
                                            }
                                            else if(info.type == this.cardMng.TYPE.TongHuaShun) {
                                                //尾道牌型同花顺赢方加5分，对方减5分
                                                lScore = 4;
                                            }else if(info.type == this.cardMng.TYPE.wuTong){
                                                //尾道牌型五同赢方加7分，对方减7分
                                                lScore = 6;
                                            }
                                        }
                                        var dao = k+1;
                                        player["score"+dao] += score*mp*beilv;
                                        player["lScore"+dao] += lScore*mp*beilv;
                                        totalWin += (score+lScore)*mp*beilv;
                                        player.extra[k]+=(score+lScore)*mp*beilv;
                                        if(bankerMode) {
                                            tPlayer["score"+dao] -= score*mp*beilv;
                                            tPlayer["lScore"+dao] -= lScore*mp*beilv;
                                            tPlayer.extra[k] -= (score+lScore)*mp*beilv;

                                        }
                                    }
                                    else if(!bankerMode && !this.isRandomDesk && result==0) {
                                        //不是庄家模式，也不是随机场,两人的牌相同，则不输也不赢
                                    }
                                    else if(result==0 && this.isRandomDesk) {
                                        //是随机场，两人的牌相同则不输不赢
                                    }
                                    else if(result == -1) {         //输了

                                        var info = tPlayer.cardInfo[k];
                                        if(k == 0) {
                                            if(info.type == this.cardMng.TYPE.SanTiao) {
                                                //头道为三条且大于对方，赢家赢方加3分，输家减3分
                                                lScore = 2; // 额外分
                                            }
                                        }
                                        else if(k == 1) {
                                            if(info.type == this.cardMng.TYPE.TieZhi) {
                                                //中道为铁支（炸弹）且大于对方赢方加8分，对方输8分
                                                lScore = 7;
                                            }
                                            else if(info.type == this.cardMng.TYPE.TongHuaShun) {
                                                //中道为同花顺且大于对方赢方加10分，对方输10分
                                                lScore = 9;
                                            }else if(info.type == this.cardMng.TYPE.HuLu){
                                                //二道葫芦且大于对方，赢家赢方加2分，输家减2分。
                                                lScore = 1;
                                            }else if(info.type == this.cardMng.TYPE.wuTong){
                                                //二道五同且大于对方，赢家赢方加20分，输家减20分。
                                                lScore = 13;
                                            }
                                        }
                                        else {
                                            if(info.type == this.cardMng.TYPE.TieZhi) {
                                                //尾牌型铁支（炸弹）赢方加4分，对方减4分。
                                                lScore = 3;
                                            }
                                            else if(info.type == this.cardMng.TYPE.TongHuaShun) {
                                                //尾道牌型同花顺赢方加5分，对方减5分
                                                lScore = 4;
                                            }else if(info.type == this.cardMng.TYPE.wuTong){
                                                //尾道牌型五同赢方加7分，对方减7分
                                                lScore = 6;
                                            }
                                        }
                                        var dao = k+1;
                                        player["score"+dao] -= score*mp*beilv;
                                        player["lScore"+dao] -= lScore*mp*beilv;
                                        totalWin -= (score+lScore)*mp*beilv;
                                        player.extra[k]-=(score+lScore)*mp*beilv;
                                        if(bankerMode) {
                                            tPlayer["score"+dao] += score*mp*beilv;
                                            tPlayer["lScore"+dao] += lScore*mp*beilv;
                                            tPlayer.extra[k]+=(score+lScore)*mp*beilv;
                                        }
                                    }
                                }
                            }
                        }
                        /*
                         比较完了以后判断
                         是不是打枪：x2，
                         是不是全垒打：总分x2，
                         */
                        if (totalWin > 0) {
                            //player是赢家
                            player.totalWin++;
                            if(this.isPlayerShot(player.id,tPlayer.id)) {
                                player.shotScore.push(totalWin);   // 打枪数组，赢当前比牌玩家的分，和下一行不能调换。
                                if(bankerMode){
                                    tPlayer.shotScore.push(-totalWin);
                                }
                                totalWin *= 2;
                            }
                            if(this.isPlayerAllShot(player.id)) {
                                player.allShotScore += totalWin;  // 统计全垒打赢当前比牌玩家的分。
                                if(bankerMode){
                                    tPlayer.allShotScore -= totalWin;
                                }
                                totalWin *= 2;
                            }
                            player.cScore += totalWin;
                            if(bankerMode) {
                                tPlayer.cScore -= totalWin;
                            }

                        }
                        if (totalWin < 0) {
                            player.totalWin--; //只有随机场才有意义
                            if(this.isPlayerShot(tPlayer.id,player.id)) {
                                player.shotScore.push(totalWin);
                                if(bankerMode){
                                    tPlayer.shotScore.push(-totalWin);
                                }
                                totalWin *= 2;
                            }
                            if(this.isPlayerAllShot(tPlayer.id)) {
                                player.allShotScore += totalWin;
                                if(bankerMode){
                                    tPlayer.allShotScore -= totalWin;
                                }
                                totalWin *= 2;
                            }
                            player.cScore += totalWin;
                            if(bankerMode) {
                                tPlayer.cScore -= totalWin;
                            }
                        }
                    }
                }


            }
            //计算除庄家 输几家赢几家
            var loseNum = 0;   //输家
            var winNum = 0;    //赢家
            for(var i = 0; i<this.players.length; i++){
                var player = this.players[i];
                var totalextra = 0;

                if(!player.isContainExtra){
                    for(var a = 0;a<player.extra.length;a++){
                        totalextra += player.extra[a];
                        player.lCScore.push(totalextra);
                    }
                    if(player.lCScore.length>0){
                        var sc= player.lCScore[ player.lCScore.length - 1];
                        for(var c=0;c<player.specialSocre.length; c++){
                            player.lCScore.push( sc += player.specialSocre[c] );
                        }
                    }
                }else{
                    player.lCScore.push(player.tscore);
                }

                var special = 0;
                if( player.lCScore.length>0){
                    special = player.lCScore[player.lCScore.length-1];  // ( 辅助变量，取数组中最后一个 )
                }
                //for(var c=0;c<player.specialSocre.length; c++){
                //    player.lCScore.push( special += player.specialSocre[c] );
                //}

                var shot = player.lCScore[player.lCScore.length-1];   // (辅助变量)
                for(var b=0; b<player.shotScore.length; b++){
                    player.lCScore.push( shot += player.shotScore[b] ) ;
                }

                player.allShotScore ? player.lCScore.push( shot+= player.allShotScore):false;


                if (!player.isBanker) {     //不是庄家
                    var totalScores = 0;
                    totalScores += player.score1 + player.lScore1;
                    totalScores += player.score2 + player.lScore2;
                    totalScores += player.score3 + player.lScore3;
                    if (totalScores > 0) {
                        winNum++;
                    }
                    else if (totalScores < 0) {
                        loseNum++;
                    }
                }
            }
            //统计
            var nicknames = [];
            var totalScores = [];
            var sScores = [];
            for (var i = 0; i < this.players.length; i++) {
                var player = this.players[i];
                player.beilv = 0;       // 顺便把倍率清0；
                player.totalScore += player.cScore; //总得分
                totalScores.push(player.totalScore);
                sScores.push(player.cScore);
                nicknames.push(player.nickname);
            }
            if(!this.records) this.records = [];
            
            this.records.push(this.recordObj('gameOver',{}));
            for (var i = 0; i < this.players.length; i++) {
               var player = this.players[i];
               //保存小局
               var record = new Record();
               record.parentId = this.bigRecord.id;
               record.userId = player.id;
               record.gameIndex = this.cIndex;
               record.score = player.cScore;
               record.info = this.roomId;//房间号
               record.info0 = JSON.stringify(sScores);
               record.info1 = JSON.stringify(nicknames);
               record.info8 = JSON.stringify(this.records);    //记录打牌的过程
               record.save(this.bigRecord.id,function (error,result) {
                   //console.log(error);
               });
            }
            /*刷新大局分数*/
            this.bigRecord.scores = totalScores;
            this.bigRecordInfo = this.specialFormatter().players;
            this.bigRecord.playersInfo = JSON.stringify(this.specialFormatter());
            this.bigRecord.save(function(error,result){});
        }
        if (this.cIndex == 1 && this.isRandomDesk) {
            this.players.forEach(function(player) {
                if(player.cScore > 0) {
                    //每分5个钻
                    player.diamond = player.cScore*5;
                    //console.log(player.nickname,player.cardNumber,"扣钻石前")
                    player.userCards((player.cScore*5),function () {
                        console.log(player.nickname,player.cardNumber)
                    });
                }
                else {
                    player.diamond = player.cScore*5;
                    //console.log(player.nickname,player.cardNumber,"扣钻石前")
                    player.userCards(player.cScore*5,function(){
                        console.log(player.nickname,player.cardNumber)
                    });
                }
            });
            //随机场直接输赢钻石
            //随机场结算

        }
        console.log("-----------游戏桌子",this.roomId,'进入比牌-----------');
        if(this.cIndex>=this.mMax){
            this.isBegin = false;
            //RoomManager.updateRoom(this.roomId);
        }
        /*扣除房卡*/
        // if (this.isDeskOver || this.cIndex>=this.mMax ) {
        //     var cardNumber = this.needCard;

        //     if (this.setting4 == 0) { //选择AA制
        //         for (var i = 0; i < this.players.length; i++) {
        //             var player = this.players[i];
        //             player.userCards(cardNumber,function (result) {});
        //         }
        //     }else if(this.setting4 == 1){ //赢者扣房卡
        //         var players =this.players;
        //         var maxWin = 0;
        //         var winner = [];
        //         var winnerNum = 1;      // 赢的做多的人 最少也是一个
        //         for(var i = 0; i < players.length; i++){ // 找最大分
        //             if(players[i].totalScore >= maxWin ){
        //                 maxWin = players[i].totalScore;
        //             }
        //         }
        //         for(var i = 0; i < players.length; i++){ // 统计有多少是赢的最多的可能 有两个或三个
        //             if( maxWin == players[i].totalScore ){
        //                 winner.push( players[i].id );
        //             }
        //         }
        //         winnerNum = winner.length;
        //         cardNumber = Math.floor(cardNumber/winnerNum);


        //         for(var i = 0; i < winnerNum; i++){
        //             var player = this.getUser( winner[i] ); // 从赢的最多的玩家中找到玩家，然后扣房卡
        //             player.userCards(cardNumber,function (result) {});
        //         }
        //         console.log("有"+winnerNum+"个人赢的最多");
        //         console.log("平均每个人要出"+cardNumber+"张房卡");
        //     }else {  //选择“房主支付”时
        //         var player = this.getUser(this.createId);
        //         player.userCards(cardNumber,function (result) {});
        //     }
        // }

        this.sendDeskInfoToAll('gameOver');

        var SpecialCard = 0;
        for (var i = 0; i < this.players.length; i++) {
            var player = this.players[i];
            var isSpecialCard = player.cardInfo.length == 1;
            if(isSpecialCard){
                SpecialCard++;
            }
        }
        var SpecialTime = SpecialCard * 2.5;
        var shotTime = 0, allShotTime = 0;
        var startTime = 0;
        shotTime = this.shotData.length * 1.5;         //打枪时间
        allShotTime = this.allShotData.length;    //全垒打时间
        allShotTime *=2;
        // 需要传过去的时间（打枪、全垒打、特殊牌）
        startTime = Math.ceil(SpecialTime+shotTime+allShotTime);
        //收到游戏结束后，15秒后自动准备
        var self = this;
        if(self.cIndex < self.mMax){
            for(var i=0;i<self.players.length;i++){
                this.readyTimeOutF(i,startTime);
            }
        }

        if(self.cIndex == self.mMax){
            for(var i=0;i<self.players.length;i++){
                var player = self.players[i];
                clearTimeout(player.readyTimeOut);
                player.readyTimeOut = null;
            }
        }
        
        //清除用户信息
        // this.resetPlayerInfo();
    };

    //扩展
    //
    //格式化到客户端的客户信息
    this.specialFormatter = function() {
        var time = 0;
        var playerData = [];
        var num = 0;
        for(var a=0;a < this.players.length;a++ ){
            var playerLen = this.players[a];
            if(playerLen.isContainExtra){
                num++;
            }
        }
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if(player.isContainExtra){
                time++;
            }
            var data = {
                'cardInfo':player.cardInfo,     //选好的牌
                'cScore':player.cScore,         //每一局的总分
                'lCScore':player.lCScore,         //每一局的总分
                'score1':player.score1,         //一道牌的得分
                'score2':player.score2,         //二道牌的得分
                'score3':player.score3,         //三道牌的得分
                'lScore1':player.lScore1,         //额外一道牌的得分
                'lScore2':player.lScore2,         //额外二道牌的得分
                'lScore3':player.lScore3,         //额外三道牌的得分
                'isContainExtra':player.isContainExtra,//是否是特殊牌
                'TeShuNum':num,
                'playerNum':this.players.length,
                'teShuTime':time,
                'diamond':player.diamond,
                'totalWin':player.totalWin,         //赢几家
            };
            /*补上其它信息*/
            playerData.push(player.formatterData(data));
        }
        var info = {'isDeskOver':this.isDeskEnd(),
            'dissolveStatus':this.isDeskOver,
            'createTime':this.createTime,        //创建时间
            'isRandomDesk':this.isRandomDesk,   //是否是随机场
            'players':playerData,
            'bigRecordInfo':this.bigRecordInfo,
            'shotData':this.shotData,            //打枪数据
            'allShotData':this.allShotData,     //全垒打数据
            "maPai":this.ma,
            'recordId':this.recordId,
        };
        return this.formatterData(info);
    };

    //Override
    this.sendDeskToAll = function () {
        this.sendDeskInfoToAll('deskInfo');
    };

    //发送额外信息
    this.sendExtraDeskInfoToAll = function (socket,action,extra) {
        var data = this.specialFormatter();
        data['extra'] = {};
        if (extra != null) {
            data['extra'] = extra;
        }
        if (socket != null) {
            try {
                socket.send(JSON.stringify({'action':action,'result':true,'data':data}));
            }
            catch (e) {
                console.log(e);
            }
        }
    };

    this.recordObj = function(action,extra) {
        var data = this.specialFormatter();
        data['extra'] = {};
        if (extra != null) {
            data['extra'] = extra;
        }
        return JSON.stringify({'action':action,'result':true,'data':data});
    };
    /*****数据库操作*****/

        //Override
        //更新房间信息
    this.save = function () {
        this.updateRoomInfo();
    };
    /*****打牌操作*****/
}

//继承
SSGDesk.prototype = new Desk();
SSGDesk.prototype.constructor = Desk;
