
var moment = require('moment');

module.exports = Desk;

function Desk() {
    this.clear = function () {
        this.setting1 = "";
        this.setting2 = "";
        this.setting3 = "";// 玩法 [疯狂场,鬼牌,比花色,坐庄,马牌]
        this.setting4 = "";
        this.setting5 = "";     //设置
        this.setting8 = "";
        this.hasPayed = false;    // 是否已经支付房卡
        this.baseScore = 0;     //底分
        this.maxNumber = 4;     //几个人
        //noinspection JSUnresolvedVariable
        this.players = [];      //用户信息
        this.playersIndex = []; //每个方位的用户
        this.createId = "";     //创建者
        this.answerInfo = [];   //请求退出其它用户的回答记录
        this.roomId = "";       //房间号
        this.id = 0;            //数据库对应id
        this.needCard = 2;
        this.isBegin = false;   //牌局是否开始
        this.isCBegin = false;  //当前牌局是否开始
        this.mMax = 8;          //最大局数
        this.cIndex = 0;        //当前局数
        this.readyOverTime = "";
        this.isDeskOver = false;
        this.dissolveTimer = -1;
        this.dissolveUserId = -1;
        this.isDissolving = false;
        this.isRandomDesk = false;//随机做
        this.readyTimeOut = null; //自动准备定时器
        this.playCardTimeOut = null; //自动比牌定时器
        this.playersIndexAyy = []//用户座位
    };

    this.isGameEnd = function () {
        return true;
    };

    this.isDeskEnd = function () {
        return true;
    };

    /***** 业务逻辑 *****/

    //格式化到客户端的桌子信息
    this.formatterData = function(info) {
        var cTime = moment().format('YYYY-MM-DD HH:mm:ss');
        // var playersIndexAyy = [0,1,2,3,4,5];
        // var v = b;
        // for(var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
        var data = {
            'setting1':this.setting1,//局数
            'setting2':this.setting2,//人数
            'setting3':this.setting3,//玩法[疯狂场,鬼牌,比花色,坐庄,马牌]
            'setting4':this.setting4,//房费 0为平摊
            'setting5':this.setting5,
            'setting6':this.setting6,
            'setting7':this.setting7,
            'setting8':this.setting8,
            'time':cTime,
            'baseScore':this.baseScore,
            'maxNumber':this.maxNumber,
            'playersIndex':this.playersIndex,
            'playersIndexAyy':this.playersIndexAyy,//用户座位
            'createId':this.createId,
            'roomId':this.roomId,
            'isBegin':this.isBegin,
            'isCBegin':this.isCBegin,
            'mMax':this.mMax,
            "needCard":this.needCard,
            'cIndex':this.cIndex,
            'dissolveUserId':this.dissolveUserId,
            'isDissolving':this.isDissolving,
            'dissolveLeftTime':this.dissolveLeftTime,
            'dissolveAnswerInfo':this.answerInfo,};
        for (var key in info) {
            data[key] = info[key];
        }
        // console.log(data,"data信息 --------------------------base/data--70");
        return data;
    };
    //定制的客户端桌子信息
    this.specialFormatter = function () {

    };

    this.sendDeskInfoToAll = function (action) {
        this.sendToAll(action,true,this.specialFormatter());
    };

    this.initSetBanker = function (site) {
        //在没有庄的情况下才有用
        var hasBanker = false;
        for (var i = 0;i <  this.players.length;i++) {
            var player = this.players[i];
            if (player.isBanker) hasBanker = true;
        }

        if (!hasBanker) {
            if (site > -1) {
                this.players[site].isBanker = true;
            }
            else {
                var index = Math.floor(Math.random() * this.players.length);
                this.players[index].isBanker = true;
            }
        }
    };

    this.isAllReady = function () {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if (!player.readyStatus) {
                return false;
            }
        }
        return true;
    };
    
    this.allSelectBL = function (){
        for (var i=0;i<this.players.length;i++){
            if(this.createId != this.players[i].id){
                if(this.players[i].beilv ==0){
                    return false;
                }
            }
        }
        return true;
    };
    /*发牌*/
    this.preFapai = function () {
        this.isCBegin = true;
        this.isBegin = true;
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            player.cards = [];
            player.cScore = 0;//当前局得分0
        }
    };

    this.fapai = function () {

    };
    this.playlen = function() {
        return this.players.length;
    }

    //开始游戏
    this.startGame = function (start){  
        if(start){
            //if(this.players.length<2 || this.setting3!=0){
            if(this.players.length<2){
                return false;
            }else{
                for(var i=0;i<this.players.length;i++){
                    this.players[i].readyStatus=true;
                }
                this.maxNumber = this.players.length;
                return true ; 
            }
        }else{
            return false;
        }
    };

    this.canFp = function (start) {
        // if(this.players.length == this.maxNumber){
        //     return ( this.isAllReady()) || this.startGame(start);
        // }else{
        //     if(this.players.length < 2){ 
        //         return false;
        //     }
        //     return this.isAllReady() || this.startGame(start);     
        // };
        //console.log(this.startGame(start),"--------------------------169??");
        return (this.setting3[3] && this.setting5>0 ) ? (this.allSelectBL()):(this.isAllReady()&& (this.players.length == this.maxNumber)) || this.startGame(start);
        //return (this.isAllReady()&& (this.players.length == this.maxNumber)) || this.startGame(start);
    };

    this.resetPlayerInfo = function (extra) {
               
    };

    //游戏结束
    this.gameOver = function (extra) {
               
    };
    this.gameOverSet = function () {
        this.isCBegin = false;
         
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            player.readyStatus = false;
            if (this.isDeskEnd()) {
                //player.roomId = '';
              
            }

        }
     
                
    };

    //判断用户是否存在这个桌子
    this.isUserExist = function (userId) {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if (player.id == userId) {
                return true;
            }
        }
        return false;
    };

    this.nextUser = function (userId) {
        var index = this.getUserIndex(userId);
        if (index + 1 >= this.players.length) {
            return this.players[0];
        }
        return this.players[index + 1];
    };

    //获取用户
    this.getUser = function (userId) {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if (player.id == userId) {
                return player;
            }
        }
        return null;
    };

    //获取用户位置
    this.getUserIndex = function (userId) {
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            if (player.id == userId) {
                return i;
            }
        }
        return -1;
    };

    //更新用户位置信息
    this.updateRoomInfo = function () {
        this.playersIndex = [];
        for (var i = 0;i < this.players.length;i++) {
            var player = this.players[i];
            this.playersIndex.push(player.id);
        }
    };

    //加入房间
    this.joinDesk = function (playerObj,ws) {
        playerObj.socket = ws;
        if (this.isUserExist(playerObj.id)) {//用户存在
            var player = this.getUser(playerObj.id);
            player.socket = ws;
            player.roomId = this.roomId;
            return true;
        }
        else {//用户不存在
            if (this.players.length < this.maxNumber) {
                console.log("用户",playerObj.nickname,"加入房间");
                playerObj.roomId = this.roomId;
                playerObj.cScore = 0;
                playerObj.totalScore = 0;
                /*if (this.setting1 == 0) {
                    playerObj.totalScore = 100;
                }
                else if (this.setting1 == 1) {
                    playerObj.totalScore = 200;
                }*/
                playerObj.cards = [];
                playerObj.isBanker = false;
                
                playerObj.cardInfo = [];
                playerObj.lCScore = [];// 每一道额外总分
                playerObj.extra = [0,0,0];
                playerObj.extraSocre = [];
                playerObj.specialSocre = [];
                playerObj.tscore = 0;// 特殊牌得分
                playerObj.score1 = 0;//第一道得分
                playerObj.score2 = 0;//二
                playerObj.score3 = 0;//三
                playerObj.shotScore = [];
                playerObj.allShotScore = 0;
                playerObj.lScore1 = 0;//第一道得分
                playerObj.lScore2 = 0;//二
                playerObj.lScore3 = 0;//三
                playerObj.totalWin = 0;//些数只有在随机场才有实际意义
                playerObj.isContainExtra = false;

                this.players.push(playerObj);
                this.save();
                this.sendDeskToAll();
                return true;
            }
        }
        return false;
    };

    //退出房间
    this.leaveDesk = function (userId) {
        if (this.isBegin) return;//开局了不能退出
        if (userId == this.createId) {//房主离开则解散房间
            this.dissolveDesk(userId);
            return;
        }
        var index = this.getUserIndex(userId);
        var player = this.players[index];//清空用户与房间的关联
        if(!player){
            return;
        }
        player.cards = [];
        player.fCards = [];
        player.roomId = "";
        player.readyStatus = false;
        this.players.splice(index,1);
        this.sendDeskToAll();
        this.save();
    };

    //解散房间
    this.dissolveDesk = function (userId) {
        if (userId != this.createId && !this.isRandomDesk) {
            return false;
        }

        this.clearPlayers();
        this.sendToAll('dissolveDesk',true,{});
        this.players.splice(0,this.players.length);
        this.save();
        return true;
    };

    //
    this.clearPlayers = function () {
        for (var i = 0;i < this.players;i++) {//清空用户与房间的关联
            var player = this.players[i];
            player.cards = [];
            player.fCards = [];
            player.roomId = "";
            player.isMyTurn = false;
            player.readyStatus = false;
            //console.log(player.readyTimeOut);
            //console.log("---------------------");
            if(player.readyTimeOut != null){        // 清掉自动准备定时器
                //console.log("-----------------------------------清掉自动准备定时器");
                clearTimeout(player.readyTimeOut);
                player.readyTimeOut = null;
            }
            if( player.playCardTimeOut != null){    // 清掉自动理牌定时器
                clearTimeout(player.playCardTimeOut);
                player.playCardTimeOut = null;
            }
        }
    };

    //请求退出房间
    this.requestDissolve = function (userId) {
        if (this.isDissolving) {//正在解散
            var player = this.getUser(userId);
            try {
                player.socket.send(JSON.stringify({'action':'requestDissolve','result':false,'data':{'reason':'isDissolving'}}));
            } catch (e) {

            } finally {

            }
            return;
        }
        this.dissolveUserId = userId;
        //初始化选择的信息
        this.answerInfo = [];
        for (var i = 0;i < this.players.length;i++) {
            this.answerInfo[i] = -1;
        }
        this.answerInfo[this.getUserIndex(userId)] = 1;

        this.dissolveLeftTime = 60;//解散剩余时间
        this.isDissolving = true;
        if (this.dissolveTimer != -1) {
            clearInterval(this.dissolveTimer);
            this.dissolveTimer = -1;
        }
        this.dissolveTimer = setInterval(function(){
            this.dissolveLeftTime--;//时间减1
            // console.log(this.dissolveLeftTime);
            if (this.dissolveLeftTime <= 0) {
                clearInterval(this.dissolveTimer);
                this.dissolveTimer = -1;
                this.isDissolving = false;
                //游戏结束
                this.isDeskOver = true;
                this.gameOver({});
                this.resetPlayerInfo();
            }
        }.bind(this),1000);//1s一次

        var info = {'userId':userId,'info':this.answerInfo};
        this.sendToAll('requestDissolve',true,info);
    };

    //回答请求退出房间
    //-1 表示未回答 1表示答应 0表示不答应
    this.answerDissolve = function (userId,answer) {
        var index = this.getUserIndex(userId);
        if (index >= 0 && index < this.players.length) {//正确的位置
            this.answerInfo[index] = answer;
            console.log(this.answerInfo);
            var info = {'userId':userId};
            if (answer == 0) {//用户不答应
                this.sendToAll('requestDissolveResult',false,info);
                //console.log('解散失败');
                /*清除定时器*/
                if (this.dissolveTimer != -1) {
                    clearInterval(this.dissolveTimer);
                    this.dissolveTimer = -1;
                    this.isDissolving = false;
                }
            }
            else if (answer == 1) {//用户答应
                
                var info = {'userId':userId,'info':this.answerInfo};
                this.sendToAll('requestDissolve',true,info);

                var numberAnswer = 0;
                for (var i = 0;i < this.answerInfo.length;i++) {
                    if (this.answerInfo[i] == 1) {
                        numberAnswer++;
                    }
                }
                console.log(numberAnswer+"answerInfo length="+this.answerInfo.length);
                //大家都同意
                if (numberAnswer == this.answerInfo.length) {
                    // this.sendToAll('requestDissolveResult',true,{});
                    console.log('解散成功');
                    this.isDeskOver = true;
                    this.gameOver({});
                    this.resetPlayerInfo();
                    /*清除定时器*/
                    if (this.dissolveTimer != -1) {
                        clearInterval(this.dissolveTimer);
                        this.dissolveTimer = -1;
                        this.isDissolving = false;
                    }
                }
                else {
                    var info = {'userId':userId,'info':this.answerInfo};
                    this.sendToAll('answerDissolve',true,info);
                }
            }
        }
    };

    //发送状态改变消息
    this.sendOnlineStatus = function (userId,status) {
        var info = {'userId':userId,'status':status};
        this.sendToAll('sendOnlineStatus',true,info);
    };

    //发送文字消息
    this.sendTextMessage = function (userId,msg) {
        var info = {'userId':userId,'msg':msg};
        this.sendToAll('sendText',true,info);
    };
    // 发送表情
    this.sendEmojiMessage = function(userId,emoji){
        var info = {'userId':userId,'emoji':emoji};
        this.sendToAll('sendEmoji',true,info);
    }
    //发送图片消息
    this.sendImageMessage = function (userId,picId) {
        var info = {'userId':userId,'picId':picId};
        this.sendToAll('sendImage',true,info);
    };

    //发送音频消息
    this.sendAudioMessage = function (userId,url) {
        var info = {'userId':userId,'url':url};
        this.sendToAll('sendAudioMessage',true,info);
    },

    //发送点对点的消息
    this.sendP2PMessage = function (fromUserId,toUserId,msg) {
        var info = {'fromUserId':fromUserId,'toUserId':toUserId,'msg':msg};
        this.sendToAll('sendP2PMessage',true,info);
    };

    //发送消息给所有用户
    this.sendToAll = function (action,result,info) {
        for (var i = 0; i < this.players.length; i++) {
            var player = this.players[i];
            if (player.socket != null) {
                try {
                    player.socket.send(JSON.stringify({'action':action,'result':result,'data':info}));
                }
                catch (e) {
                    // console.log(e);
                }
            }
            else {
                // console.log(JSON.stringify({'action':action,'result':result,'data':info}));
            }
        }
    };

    this.sendStr = function (action,result,info) {
        return JSON.stringify({'action':action,'result':result,'data':info});
    };

    this.sendObj = function (action,result,info) {
        return {'action':action,'result':result,'data':info};
    };

    this.sendDeskToAll = function () {

    };

    /*****数据库操作*****/

    //更新房间信息
    this.save = function () {
        if (this.roomMng != null) {
            if (this.players.length == 0) {
                this.roomMng.users = '';
                this.roomMng.status = '0';
                this.roomMng.save();
            }
            else {
                this.roomMng.users = this.playersIndex();
               
                this.roomMng.save();
            }
        }
    };

     this.save1 = function () {
                this.roomMng.users = '';
                this.roomMng.status = '0';
                this.roomMng.save();

    };
}
