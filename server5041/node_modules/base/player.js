
var db = require('base/dbmanager');
var moment = require('moment');

module.exports = Player;

function Player() {
    //基本数据
    this.id = 0;
    this.nickname = "";
    this.openId = "";
    this.unionid = "";
    this.avatarUrl = "";
    this.sex = "";
    this.cardNumber = 0;
    this.onlineStatus = 0;
    this.wechat = '';
    this.phone = '';
    this.inviteCode = 0;
    this.ipAddress = "";
    this.lastLoginTime = "";
    this.createAt = "";
    this.updateAt = "";
    this.hong = 0;             // 好牌几率
    this.beilv = 0;             // 倍率
    this.socket = null;//网络长链接
    this.connection = null;//数据库链接
    this.cards = [];//用户所拥有的牌
    this.roomId = "";//用户所在的房间
    this.readyStatus = false;//准备状态
    this.totalScore = 0;//总分数
    this.cScore = 0;//当前局的分数
    this.isBanker = false;//是否是庄
    this.fCards = [];//打出去的牌
    this.readyTimeOut = null; //自动准备定时器
    this.playCardTimeOut = null; //自动比牌定时器
    /***** 业务逻辑 *****/

    //格式化到客户端的客户信息 可以再附加信息
    this.formatterData = function(info) {
        var data = {'id':this.id,
                'nickname':this.nickname,
                'openId':this.openId,
                'avatarUrl':this.avatarUrl,
                'wechat':this.wechat,
                'phone':this.phone,
                'sex':this.sex,
                'hong':this.hong,
                'beilv':this.beilv,
                'cardNumber':this.cardNumber,
                'onlineStatus':this.onlineStatus,
                'inviteCode':this.inviteCode,
                'ipAddress':this.ipAddress,
                'lastLoginTime':this.lastLoginTime,
                'createAt':this.createAt,
                'updateAt':this.updateAt,
                'cards':this.cards,
                'roomId':this.roomId,
                'readyStatus':this.readyStatus,
                'totalScore':this.totalScore,
                'cScore':this.cScore,
                'isBanker':this.isBanker};
        for (var key in info) {
            data[key] = info[key];
        }
        // console.log(data.roomId,"房间号-----------------------player.js--56");
        return data;
    };

    //用户使用一张房卡
    this.useCard = function (callback) {
        this.userCards(1,callback);
    };

    this.userCards = function (cardNumber,callback) {
        if (this.id.length < 1) {
            callback(false);
            return;
        }
        this.updateCardNumber(cardNumber,this.id,function (error,result) {
            if (!error) {
                callback(true);
            }
        });
    };

    /*****数据库操作*****/

    //注册用户
   this.save = function (isRegister,unionid,openid,avtarUrl,sex,nickname,ipAddress,callback) {
        if (openid == null || openid.length < 1) {
            return false;
        }
        if(isRegister) {
            this.getNewId(function (id) {
                var cTime = moment().format('YYYY-MM-DD HH:mm:ss');
                var sql = "INSERT INTO " +
                    "users(id,openId,unionid,avatarUrl,sex,nickname,cardNumber,coin,createAt,updateAt,lastLoginTime,ipAddress,onlineStatus) " +
                    "VALUES (?,?,?,?,?,?,30,30,?,?,?,?,1)";
                var sqlParam = [id,openid,unionid,avtarUrl,sex,nickname,cTime,cTime,cTime,ipAddress];
                db.query(sql,sqlParam,function (error,result) {
                    if (error) {
                        console.log('[LOGIN INSERT ERROR] - ',error.message);
                        return;
                    }
                    callback(error,result);
                });
            }.bind(this));
        }
        else{//如果不是注册进行更新操作
            var cTime = moment().format('YYYY-MM-DD HH:mm:ss');
            var sql = "UPDATE users SET avatarUrl = ?,sex = ?,nickname = ?,ipAddress = ?,updateAt = ?,lastLoginTime = ?,onlineStatus = ? WHERE openId = ?";
            var sqlParam = [avtarUrl,sex,nickname,ipAddress,cTime,cTime,1,openid];
            db.query(sql,sqlParam,function (error,result) {
                if (error) {
                    console.log('[LOGIN UPDATE ERROR] - ',error.message);
                    return;
                }
                callback(error,result);
            });
        }
        //执行

    };
    this.getNewId = function (callback) {
        var ctorId = function () {
            var id = 1+Math.floor(Math.random()*10);
            id += "";
            while (id.length<5) {
                id += Math.floor(Math.random()*10);
            }
            return parseInt(id);
        };
        var id = ctorId();
        var sql = "select * from users where id=?";
        db.query(sql,[id],function (err,rows) {
            if(err) {
                console.error("[SELECT ERROR] -",err);
                return;
            }
            if(rows.length > 0) {
                this.getNewId(callback);
                return;
            }
            callback(id);
        }.bind(this));
    };


    this.selectUserInfo = function (unionid,openid,avtarUrl,sex,nickname,ipAddress,callback) {
         if (openid == null || openid.length < 1) {
            callback(null);
            return;
        }
        //查询openid对应的用户是否存在
        var sql = "SELECT COUNT(*) FROM users WHERE openId = ?";
        var sqlParam = [openid];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {
            if (error) {
                console.log('wxLogin [SELECT ERROR] - ',error.message);
                return;
            }
            var count = result[0]['COUNT(*)'];
            if (count == 0) {//注册用户
                self.save(true,unionid,openid,avtarUrl,sex,nickname,ipAddress,function (error,result) {
                    self.getUserInfo(openid,callback);
                });
            }
            else {//登录用户
                self.save(false,unionid,openid,avtarUrl,sex,nickname,ipAddress,function (error,result) {
                    self.getUserInfo(openid,callback);
                });
            }
        });
    }
    //用户登录
    this.wxLogin = function (unionid,openid,avtarUrl,sex,nickname,ipAddress,callback) {
        // 这里是为老客户没有unionid而做的
        this.unionid = unionid;
        var self = this;
        /*---------------------通过unionId找openid实现信息同步--------------------------*/
        if(unionid){
            var sql = "select openid from users where unionid = ?";
            db.query(sql,[unionid],function (error,result) {
                if(error){
                   consoel.log("[SELECT ERROR] - ",error.message);
                }
                if(result.length>0){
                    openid = result[0].openid;
                }
                self.selectUserInfo(unionid,openid,avtarUrl,sex,nickname,ipAddress,callback);
            })
        }
        /*----------------------------------------------------------------------------*/
        // if (openid == null || openid.length < 1) {
        //     callback(null);
        //     return;
        // }
        // //查询openid对应的用户是否存在
        // var sql = "SELECT COUNT(*) FROM users WHERE openId = ?";
        // var sqlParam = [openid];
        // var self = this;
        // db.query(sql,sqlParam,function (error,result) {
        //     if (error) {
        //         console.log('wxLogin [SELECT ERROR] - ',error.message);
        //         return;
        //     }
        //     var count = result[0]['COUNT(*)'];
        //     if (count == 0) {//注册用户
        //         self.save(true,unionid,openid,avtarUrl,sex,nickname,ipAddress,function (error,result) {
        //             self.getUserInfo(openid,callback);
        //         });
        //     }
        //     else {//登录用户
        //         self.save(false,unionid,openid,avtarUrl,sex,nickname,ipAddress,function (error,result) {
        //             self.getUserInfo(openid,callback);
        //         });
        //     }
        //     //经测试证明，这是个巨坑
        //     //self.getUserInfo(openid,callback);
        // });
    };

    // 更新用户信息(微信号和手机号)
    this.updateUserInfo = function(wx,phone,id,callback){
        var cTime = moment().format('YYYY-MM-DD HH:mm:ss');
        var sql = "update users set wechat =?, phone = ?,hasChange = 1 where id=? and hasChange = 0";
        var sqlParam = [wx,phone,id];
        db.query(sql,sqlParam,function (error,result){
            if(error){
                console.log(' [update ERROR] - ',error.message);
                return;
            }
            callback(result);
        })
    }

    //获取代理验证码
    this.selectCode = function(inviteCode,userId,callback){
        if( inviteCode && inviteCode.length == 6 ){   // 用户没有邀请码就去代理查询邀请码
            var sql = "SELECT inviteCode FROM agent WHERE inviteCode =?";
            db.query(sql,inviteCode,function (error,result){
                if(error){
                    console.log('inviteCode [SELECT ERROR] - ',error.message);
                    return;
                }
                callback(result);
            })
        }else{      // 有邀请码就返回空数据
            callback('','');
        }
    };

    // 更新验证码
    this.updateCode = function(inviteCode,userId,callback){
        this.selectCode(inviteCode,userId,function(result){
            if( result!='' && inviteCode.length == 6){  //用户没有绑定邀请码
                var sql = "UPDATE users SET inviteCode =?,cardNumber=cardNumber+5 WHERE id =? AND inviteCode=''";
                var sqlParam = [inviteCode,userId];
                db.query(sql,sqlParam,function(error,result){
                    if(error){
                        console.log('inviteCode [SELECT ERROR] - ',error.message);
                        return;
                    }
                    callback(result);
                })
            }else{
                callback('');
            }
        });
    };

    //分享领取砖石
    this.sharePng = function (uid,callback) {
        if (uid == null || uid.length < 1) {
            callback(null);
            return;
        }
        //查询openid对应的用户是否存在
        var sql = "SELECT shareTime FROM users WHERE id = ? ";
        var cTime = moment().format('YYYY-MM-DD');
        var sqlParam = [uid];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {
            if (error) {
                console.log('wxLogin [SELECT ERROR] - ',error.message);
                return;
            }
            var shareTime = result[0].shareTime;
           
            if (shareTime == cTime) {//已经领取过了
                callback(0);//已经领取过了
            }
            else {//登录用户
                self.updateCardNumberAdd(58,cTime,uid,function (error,result) {
                    if (!error) {
                        callback(1);
                    }
                });
            }
            // self.getUserInfo(openid,callback);
        });
    };
    this.updateCardNumberAdd = function (cardNum,cTime,id,callback) {
        var sql = "UPDATE users SET cardNumber = cardNumber+?,shareTime = ? WHERE id = ?";
        var sqlParam = [cardNum,cTime,id];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {
            if (!error) {
                //self.cardNumber = cardNumber;
            }
            callback(error,result);
        });
    };
    //更新用户在线状态
    this.updateOnlineStatus = function (onlineStatus,id) {
        this.onlineStatus = onlineStatus;
        var sql = "UPDATE users SET onlineStatus = ? WHERE id = ?";
        var sqlParam = [onlineStatus,id];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {

        });
    };
    this.updateCardNumber = function (cardNum,id,callback) {
        var sql = "UPDATE users SET cardNumber = cardNumber-? WHERE id = ?";
        var sqlParam = [cardNum,id];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {
            if (!error) {
                //self.cardNumber = cardNumber;
            }
            callback(error,result);
        });
    };
    //获取用户信息
    this.getUserInfo = function (openId,callback) {
        var sql = "SELECT * FROM users WHERE openId = ?";
        var sqlParam = [openId];
        var self = this;
        db.query(sql,sqlParam,function (error,result) {
            if (error) {
                console.log('getUserInfo [SELECT ERROR] - ',error.message);
                return;
            }
            if (result.length > 0) {
                var data = result[0];
                self.id = data['id'];
                self.nickname = data['nickname'];
                self.openId = data['openId'];
                self.unionid = data['unionid'];
                self.phone = data['phone'];
                self.wechat = data['wechat'];
                self.sex = data['sex'];
                self.hong = data['hong'];
                self.avatarUrl = data['avatarUrl'];
                self.cardNumber = data['cardNumber'];
                self.updateAt = moment(data['updateAt']).format("YYYY-MM-DD HH:mm:ss");
                self.createAt = moment(data['createAt']).format("YYYY-MM-DD HH:mm:ss");
                self.lastLoginTime = moment(data['lastLoginTime']).format("YYYY-MM-DD HH:mm:ss");
                self.coin = data['coin'];
                self.onlineStatus = data['onlineStatus'];
                self.level = data['level'];
                self.inviteCode = data['inviteCode'];
                self.ipAddress = data['ipAddress'];
            }
            
            /*----------------------------------------------------*/
            // 此处用于更新没有unionid的老玩家 , 有就不用管了
            if(self.unionid && !data['unionid']){
                self.updateUnionid(self.unionid,self.openId);
            }
            /*----------------------------------------------------*/
            callback(self);
        });
    };

    // 此处用于更新没有unionid的老玩家 , 有就不用管了
    this.updateUnionid = function(unionid,openid){
        var sql = "update users set unionid = ? where openid = ? and unionid = '' ";
        var sqlParam = [unionid,openid];
        db.query(sql,sqlParam,function (error,result) {
            if(error){
                console.log('Unionid [UPDATE ERROR] -',error.message);
            }
        })

    }

    //从用户手中删除一张牌
    this.deleteCard = function (card) {
        // console.log(card,this.cards);
        var index = -1;
        for (var i = 0;i < this.cards.length;i++) {
            var tCard = this.cards[i];
            if (tCard.suit == card.suit && tCard.number == card.number) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            this.cards.splice(index,1);
            return true;
            // console.log('删除成功!当前有牌',this.cards.length);
        }
        return false;
    };
    //是否包含马牌
    this.isIncludeMa = function(ma) {
        var suit = ['s','h','c','d'];  
        for(var i in this.cards){
            //s表示黑桃
            if(this.cards[i].number == ma[1] && this.cards[i].suit ==suit[ ma[0]-1 ] ) {
                return true;
            }
        }
      
        return;
    };
    
    this.getHong = function (id,callback) {
        var sql = "SELECT hong FROM users WHERE id = ?";
        var sqlParam = [id];
        db.query(sql,sqlParam,function (error,result) {
            if (error) {
                console.log('getUserInfo [SELECT ERROR] - ',error.message);
                return;
            }
            var sql1 = "UPDATE users SET hong = '' WHERE id = ?";
            db.query(sql1,sqlParam,function(){});

            if(result && result.length > 0 && result[0].hong){
                var s = JSON.parse(result[0].hong);
                callback(s);
            }else{
                callback(null)
            }

        });


    };
}
