function AutoFindCard() {

    /*根据点数统计牌*/
    this.getSamescoresCount = function (cards) {

        var cardNumbers = {};

        for (var prop in cards) {

            if (cardNumbers[cards[prop].scores]) {

                cardNumbers[cards[prop].scores]++;

            } else {

                cardNumbers[cards[prop].scores] = 1;

            }

        }

        return cardNumbers;
    };

    /*找出最大的那张牌*/
    this.findMaxNumber = function (cards) {
        var getSamePointCount = this.getSamescoresCount(cards.slice());
        var index = 0,
            result = 0;
        for (var prop in getSamePointCount) {

            var number = getSamePointCount[prop];

            if (index < number) {

                index = number;

                result = parseInt(prop);
            }

            if (index == number && result < parseInt(prop)) {

                result = parseInt(prop);
            }

        }
        return result;
    };

    /*排序从多到少 大到小*/
    this._typeCardsSortByScores = function (cards) {

        var cardsGui = [];

        for (var i = 0; i < cards.length; i++) {

            var number = cards[i].scores;

            if (number >= 20) {

                var cardGui = cards.splice(i, 1)[0];

                cardsGui.push(cardGui);

            }

        }

        cards.forEach(function (i) {
            if (i.scores == 1) i.scores = 14;
        })

        var scoresHelper = this.getSamescoresCount(cards);

        var newCards = cards.slice().sort(function (card1, card2) {

            var numberOfCard1 = scoresHelper[card1.scores];

            var numberOfCard2 = scoresHelper[card2.scores];

            if (numberOfCard2 != numberOfCard1) return numberOfCard2 - numberOfCard1;

            var scores1 = card1.scores == 1 ? 14 : card1.scores;

            var scores2 = card2.scores == 1 ? 14 : card2.scores;

            scores1 += card1.color / 10;

            scores2 += card2.color / 10;

            return scores2 - scores1;
        });

        newCards.forEach(function (i) {
            if (i.scores == 14) i.scores = 1;
        })

        newCards = cardsGui.concat(newCards);

        return newCards;
    };

    /*从所有牌中删除手牌
     * cardsAyy array 持有牌
     * cards array 所有牌
     * */
    this._delCards = function (cardsAyys, card) {
        cardsAyys = cardsAyys || [];
        if (cardsAyys.length == 0) return card;

        var cards = card.filter(function (i) {
            return i;
        });

        var cardsAyy = cardsAyys.filter(function (i) {
            return i;
        });

        for (var i = 0; i < cardsAyy.length; i++) {//从所有牌中删除取出的牌

            var id = cardsAyy[i].id;

            for (var j = 0; j < cards.length; j++) {

                var cardsId = cards[j].id;

                if (cardsId == id) {

                    cards.splice(j, 1)

                    break;
                }

            }

        }

        return cards || [];
    };

    /*把一个A转换成14*/
    this._convertOneToA = function (cardModes, isOneBreak) {
        for (var i = 0; i < cardModes.length; i++) {
            var index = cardModes[i];
            if (index.scores == 1) {
                index.scores = 14;
                if (isOneBreak) break;
            }
        }
        return cardModes;
    };

    /*找出鬼牌*/
    this.contain20 = function (cards) {
        if (cards.length <= 0) {
            return [];
        }
        var newCard = cards.filter(function (card) {//重新赋值cards
            if (card.scores >= 20) {
                return true;
            }
        });
        return newCard || [];
    };

    /*根据点数寻找牌索引*/
    this._findScoresLength = function (cards, length) {

        if (cards.length < length) return [];

        var obj = cards.reduce(function (obj, card, index) {

            var pointIndexs = obj[card.scores] || [];

            obj[card.scores] = pointIndexs;

            pointIndexs.push(index);

            return obj;

        }, {});

        var result = [];

        for (var prop in obj) {

            var pointIndexs = obj[prop];

            while (pointIndexs.length > length && length != 0) {//有多的分割多个数组

                var splices = pointIndexs.splice(0, length);

                if (splices.length >= length) result.push(splices);

            }

            if (pointIndexs.length >= length) result.push(pointIndexs);

        }
        return result.length > 0 ? result : [];
    };

    /*根据花色寻找牌索引*/
    this._findSuitLength = function (cards) {

        var obj = cards.reduce(function (obj, card, index) {

            var pointIndexs = obj[card.suit] || [];

            obj[card.suit] = pointIndexs;

            pointIndexs.push(index);

            return obj;

        }, {});

        var result = [];

        for (var prop in obj) {

            var pointIndexs = obj[prop] || [];

            if (pointIndexs.length >= 3) result.push(pointIndexs);

        }

        return result.length > 0 ? result : [];
    };

    /*寻找牌复数牌*/
    this._findFuShuCard = function (cards, length) {

        var re = [];

        var index = this._findScoresLength(cards, length);

        if (index.length >= 1) re = index.slice();

        if (re.length >= 1) {

            var result = this._findCards(re, cards);

            return result || [];

        } else {

            return [];

        }

    };

    /*根据索引寻找牌*/
    this._findCards = function (indexs, cards) {

        var cardsAyy = [];
        for (var j = 0; j < indexs.length; j++) {

            var indexAyyay = indexs[j];

            var indexAyy = [];

            for (var i = 0; i < indexAyyay.length; i++) {

                var index = indexAyyay[i];

                if (cards[index]) indexAyy.push(cards[index]);

            }

            cardsAyy.push(indexAyy);

        }

        return cardsAyy;
    };

    /*牌去重*/
    this.GetRepeatFwxmmc = function (ary1) {

        ary1.sort(function (a, b) {
            return b.id - a.id;
        });//数组排序

        var newCard = [],

            cardNumber = []; //红心

        for (var i = 0; i < ary1.length; i++) {

            if (ary1[i]) {

                if (cardNumber.indexOf(ary1[i].id) == -1) {

                    cardNumber.push(ary1[i].id);

                    newCard.push(ary1[i]);

                }
            }

        }

        return newCard || [];

    }

    /*找出同花顺*/
    this._findTongHuaShun = function (card, length) {
        if (!length) length = 5;

        if (card.length < length) return [];

        var card20 = this.contain20(card) || [],
            cards = this._delCards(card20, card),
            colorS = [], //黑桃
            colorH = [], //红心
            colorC = [], //梅花
            colorD = [], //方块
            scoresS = [], //黑桃
            scoresH = [], //红心
            scoresC = [], //梅花
            scoresD = []; //方块
        for (var i = 0; i < cards.length; i++) {

            if (cards[i].suit == 's') {

                if (scoresS.indexOf(cards[i].scores) == -1) {

                    scoresS.push(cards[i].scores);

                    colorS.push(cards[i]);
                }

            }
            else if (cards[i].suit == 'h') {

                if (scoresH.indexOf(cards[i].scores) == -1) {

                    scoresH.push(cards[i].scores);

                    colorH.push(cards[i]);
                }
            }
            else if (cards[i].suit == 'c') {

                if (scoresC.indexOf(cards[i].scores) == -1) {

                    scoresC.push(cards[i].scores);

                    colorC.push(cards[i]);
                }
            }
            else if (cards[i].suit == 'd') {

                if (scoresD.indexOf(cards[i].scores) == -1) {

                    scoresD.push(cards[i].scores);

                    colorD.push(cards[i]);

                }
            }
        }

        var suit = [colorS, colorH, colorC, colorD];

        var colorSum = [];    //总共有几种花色 [5,3,0....]

        for (var i = 0; i < suit.length; i++) {

            if (suit[i].length >= parseInt(5 - card20.length)) {

                suit[i].sort(function (a1, a2) {
                    return a1.scores - a2.scores;
                })

                colorSum.push(suit[i]);
            }
        }

        var result = [];

        for (var i = 0; i < colorSum.length; i++) {

            var s = colorSum[i]


            for (var t = 0; t < card20.length + 1; t++) {

                var num = length - t;

                for (var start = 0; (start + num) <= s.length; ++start) {

                    var subCards = s.slice(start, start + num);

                    var bool = parseInt(subCards[num - 1]['scores']) - parseInt(subCards[0]['scores']) < 5 || this.isKQJAnd123(subCards);

                    if (bool) {

                        subCards = subCards.concat(card20.slice(0, t));

                        var indexs = [];

                        subCards.forEach(function (ca) {

                            for (var q = 0; q < card.length; q++) {

                                var r = card[q];

                                if (r === ca) {

                                    indexs.push(r);

                                    break;

                                }

                            }

                        });

                        result.push(indexs);

                    }

                }

            }
        }

        if (result.length > 0) {

            return result || [];

        }
        else {
            return [];
            // var convertedCards = this._convertOneToA(card, true);

            // if (card === convertedCards) {

            //     card.forEach(function (ca) {
            //         ca.scores = ca.number;
            //     });

            //     return [];

            // }

            // return this._findTongHuaShun(convertedCards);

        }
    };

    this.isKQJAnd123 = function(cardModel){
      var is14 = true;//是A K Q J 10 ;

      var is1 = true;//是1 2 3 4 5

      cardModel.forEach(function (card) {
        if (card.scores < 10 && card.scores != 1) is14 = false;
      });//不是A K Q J 10

      cardModel.forEach(function (card) {
        if ((card.scores > 5 && card.scores != 14) && card.scores != 20) is1 = false;
      });//不是1 2 3 4 5});

      return is14 || is1;

    };

    /*找出顺子*/
    this._findShunZi = function (cardModes, length) {

        if (!length) length = 5;

        if (cardModes.length < length) return [];

        var card20 = this.contain20(cardModes);

        var cards = this._delCards(card20, cardModes);

        var newArr = [],
            newArrs = [];

        // 先根据点数去重
        for (var i = 0; i < cards.length; i++) {

            if (newArrs.indexOf(cards[i]['scores']) == -1) {

                newArr.push(cards[i]);

                newArrs.push(cards[i].scores);

            }

        }

        newArr.sort(function (n1, n2) {
            return n1.scores - n2.scores;
        });

        var result = [];

        for (var t = 0; t < card20.length + 1; t++) {

            var num = length - t;

            for (var start = 0; (start + num) <= newArr.length; ++start) {

                var subCards = newArr.slice(start, start + num);

                var bool = parseInt(subCards[num - 1]['scores']) - parseInt(subCards[0]['scores']) < length || this.isKQJAnd123(subCards);

                if (bool) {

                    var indexs = [];

                    subCards = subCards.concat(card20.slice(0, t));

                    subCards.forEach(function (card) {

                        for (var q = 0; q < cardModes.length; q++) {

                            var r = cardModes[q];

                            if (r === card) {

                                indexs.push(r);

                                break;

                            }
                        }

                    });

                    result.push(indexs);
                }
            }

        }

        if (result.length > 0) {

            return result;

        }
        else {
            return [];
            // var convertedCards = this._convertOneToA(cardModes, true);

            // if (cardModes === convertedCards) {

            //     cardModes.forEach(function (ca) {
            //         ca.scores = ca.number;
            //     });

            //     return [];
            // }

            // return this.findShunZi(convertedCards);
        }
    };

    /*找出同花*/
    this._findTongHua = function (card, length) {
        if (!length) length = 5;

        if (card.length < length) return [];

        var card20 = this.contain20(card) || [],
            cards = this._delCards(card20, card),
            colorS = [], //黑桃
            colorH = [], //红心
            colorC = [], //梅花
            colorD = []; //方块

        for (var i = 0; i < cards.length; i++) {

            if (cards[i].suit == 's') {

                colorS.push(cards[i]);

            }
            else if (cards[i].suit == 'h') {

                colorH.push(cards[i]);

            }
            else if (cards[i].suit == 'c') {

                colorC.push(cards[i]);

            }
            else if (cards[i].suit == 'd') {

                colorD.push(cards[i]);

            }
        }

        var suit = [colorS, colorH, colorC, colorD];

        var colorSum = [];    //总共有几种花色 [5,3,0....]

        for (var i = 0; i < suit.length; i++) {

            if (suit[i].length >= parseInt(5 - card20.length)) {

                suit[i].sort(function (a1, a2) {
                    return a1.scores - a2.scores;
                })

                colorSum.push(suit[i]);
            }
        }

        var result = [];

        for (var i = 0; i < colorSum.length; i++) {

            var s = colorSum[i]


            for (var t = 0; t < card20.length + 1; t++) {

                var num = length - t;

                for (var start = 0; (start + num) <= s.length; ++start) {

                    var subCards = s.slice(start, start + num);

                    if (subCards.length == num) {

                        subCards = subCards.concat(card20.slice(0, t));

                        result.push(subCards);

                    }

                }

            }
        }
        return result.length >= 1 ? result : [];

    };

    /*寻找牌五同*/
    this._findWuTong = function (cards) {
        var length = 5,
            result = [],
            card20 = this.contain20(cards) || [];

        if (cards.length < length) return [];

        cards = this._delCards(card20, cards);

        for (var t = 0; t < card20.length + 1; t++) {

            var num = length - t;

            var re = this._findFuShuCard(cards, num);

            for (var i = 0; i < re.length; i++) {

                var arr = re[i];

                re[i] = re[i].concat(card20.slice(0, t));

            }

            result = result.concat(re);
        }
        return result.length >= 1 ? result : [];
    };

    /*寻找牌铁支*/
    this._findTieZhi = function (cards) {
        var length = 4,
            result = [],
            card20 = this.contain20(cards) || [];

        if (cards.length < length) return [];

        cards = this._delCards(card20, cards);

        for (var t = 0; t < card20.length + 1; t++) {

            var num = length - t;

            var re = this._findFuShuCard(cards, num);

            for (var i = 0; i < re.length; i++) {

                var arr = re[i];

                re[i] = re[i].concat(card20.slice(0, t));

            }

            result = result.concat(re);
        }

        return result.length >= 1 ? result : [];
    };

    /*寻找牌葫芦*/
    this._findHuLu = function (cardModes) {
        var length = 5;
        if (cardModes.length < length) {
            return [];
        }
        var sanTiao = this._findSanTiao(cardModes); //三条没有带单牌
        var duiZi = this._findDuiZi(cardModes);   //对子没有带单牌
        if (duiZi.length < 1) {
            return [];
        }
        if (sanTiao.length < 1) {
            return [];
        }
        var result = [];

        sanTiao.forEach(function (i_3) {
            var s = i_3;
            duiZi.forEach(function (i_2) {
                s = i_3.concat(i_2);
                for (var i = 0; i < s.length; i++) {
                    var index = s[i];
                    for (var j = i + 1; j < s.length; j++) {
                        if (index.id === s[j].id) {
                            s = null;
                            break;
                        }
                    }
                    if (s === null) {
                        break;
                    }
                }
                if (s !== null) {
                    result.push(s);
                }
            });
        });
        return result.length > 0 ? result : [];
    };

    /*寻找牌三条*/
    this._findSanTiao = function (cards) {
        var length = 3,
            result = [],
            card20 = this.contain20(cards) || [];

        if (cards.length < length) return [];

        cards = this._delCards(card20, cards);

        for (var t = 0; t < card20.length + 1; t++) {

            var num = length - t;

            var re = this._findFuShuCard(cards, num);

            for (var i = 0; i < re.length; i++) {

                var arr = re[i];

                re[i] = re[i].concat(card20.slice(0, t));

            }

            result = result.concat(re);
        }

        return result.length >= 1 ? result : [];
    };

    /*寻找牌两对*/
    this._findLiangDui = function (cards) {

        if (cards.length < 4) return [];

        var result = [];

        var duiZiCards = this._findFuShuCard(cards, 2);

        for (var i = 0; i < duiZiCards.length; ++i) {

            for (var j = i + 1; j < duiZiCards.length; ++j) {

                var pre = duiZiCards[i];

                var next = duiZiCards[j];

                var s = pre.concat(next);

                s = this.GetRepeatFwxmmc(s);

                if (s.length == 4) result.push(s);

            }
        }

        return result.length >= 1 ? result : [];
    };

    /*寻找牌对子*/
    this._findDuiZi = function (cards) {
        var length = 2,
            result = [],
            card20 = this.contain20(cards) || [];

        if (cards.length < length) return [];

        cards = this._delCards(card20, cards);

        if (card20.length == 1) {
            for (var t = 0; t < card20.length + 1; t++) {

                var num = length - t;

                var re = this._findFuShuCard(cards, num);

                for (var i = 0; i < re.length; i++) {

                    var arr = re[i];

                    re[i] = re[i].concat(card20.slice(0, t));

                }

                result = result.concat(re);
            }
        }
        else if (card20.length == 0) {

            var re = this._findFuShuCard(cards, 2);

            result = result.concat(re);
        }
        return result.length >= 1 ? result : [];
    };

    /*设置牌的类型*/
    this.TYPE = {
        WuLong: 0,
        DuiZi: 1,
        LiangDui: 2,
        SanTiao: 3,
        ShunZi: 4,
        TongHua: 5,
        HuLu: 6,
        TieZhi: 7,
        TongHuaShun: 8,
        WuTong: 9,
    };

    /*获取牌的类型*/
    this.cardsType = function (cards) {
        if (this._findWuTong(cards).length > 0) {
            return this.TYPE.WuTong;
        }
        if (this._findTongHuaShun(cards, 5).length > 0) {
            return this.TYPE.TongHuaShun;
        }
        if (this._findTieZhi(cards).length > 0) {
            return this.TYPE.TieZhi;
        }
        if (this._findHuLu(cards).length > 0) {
            return this.TYPE.HuLu;
        }
        if (this._findTongHua(cards, 5).length > 0) {
            return this.TYPE.TongHua;
        }
        if (this._findShunZi(cards, 5).length > 0) {
            return this.TYPE.ShunZi;
        }
        if (this._findSanTiao(cards).length > 0) {
            return this.TYPE.SanTiao;
        }
        if (this._findLiangDui(cards).length > 0) {
            return this.TYPE.LiangDui;
        }
        if (this._findDuiZi(cards).length > 0) {
            return this.TYPE.DuiZi;
        }
        return this.TYPE.WuLong;
    };

    /*开始设置分数*/
    this._typeScoreOfCards = function (cards) {

        cards.forEach(function (card) {
            if(card && card.number) card.scores = card.number;
        });
        var typeScore = 0;

        if (this._findWuTong(cards).length > 0) {
            typeScore = 9000000000000000;
        }
        else if (this._findTongHuaShun(cards, 5).length > 0) {
            typeScore = 8000000000000000;
        }
        else if (this._findTieZhi(cards).length > 0) {
            typeScore = 7000000000000000;
        }
        else if (this._findHuLu(cards).length > 0) {
            typeScore = 6000000000000000;
        }
        else if (this._findTongHua(cards, 5).length > 0) {
            typeScore = 5000000000000000;
        }
        else if (this._findShunZi(cards, 5).length > 0) {

            typeScore = 4000000000000000;
        }
        else if (this._findSanTiao(cards).length > 0) {
            typeScore = 3000000000000000;
        }
        else if (this._findLiangDui(cards).length > 0) {
            typeScore = 2000000000000000;
        }
        else if (this._findDuiZi(cards).length > 0) {
            typeScore = 1000000000000000;
        }

        return typeScore;
    };

    /*改变鬼牌的分数*/
    this._changeCardScors = function (cardModel) {

        cardModel.forEach(function (card) {
            card.scores = card.number;
        });

        cardModel = this._convertOneToA(cardModel);

        var is14 = true;//是A K Q J 10 ;

        var is1 = true;//是1 2 3 4 5

        cardModel.forEach(function (card) {
            if (card.scores < 10) is14 = false;
        });//不是A K Q J 10

        cardModel.forEach(function (card) {
            if ((card.scores > 5 || card.scores == 14) && card.scores != 20)is1 = false
        });//不是1 2 3 4 5});

        if (is14) { //是A K Q J 10 ;

            cardModel.sort(function (a1, a2) {
                return a2.scores - a1.scores;
            });

            var num = 14,
                scoresAyy = []; //一副牌的分数

            for (var i = 0; i < 5; i++) {

                scoresAyy.push(num);

                num -= 1;

            }

            for (var j = 0; j < scoresAyy.length; j++) {

                for (var i = 0; i < cardModel.length; i++) {

                    var cardScores = cardModel[i].scores;

                    if (cardScores == scoresAyy[j] && cardScores < 15) scoresAyy.splice(j, 1); //删除不是鬼牌的分

                }
            }

            cardModel.forEach(function (card) {
                if (card.scores >= 20) card.scores = scoresAyy.splice(0, 1)[0];
            });//找出选中的牌
        }

        else if (is1) { //是1 2 3 4 5

            cardModel.sort(function (a1, a2) {
                return a2.scores - a1.scores;
            });

            var num = 5,
                scoresAyy = []; //一副牌的分数

            for (var i = 0; i < 5; i++) {

                scoresAyy.push(num);

                num -= 1;
            }

            for (var j = 0; j < scoresAyy.length; j++) {

                for (var i = 0; i < cardModel.length; i++) {

                    var cardScores = cardModel[i].scores;

                    if (cardScores == scoresAyy[j] && cardScores < 15) scoresAyy.splice(j, 1); //删除不是鬼牌的分

                }
            }

            cardModel.forEach(function (card) {
                if (card.scores >= 20) card.scores = scoresAyy.splice(0, 1)[0];
            });//找出选中的牌
        }

        else {
            cardModel.sort(function (a1, a2) {
                return a1.scores - a2.scores;
            });

            var scoresAyy = []; //用来装鬼牌分数

            for (var i = 0; i < 5; i++) {

                var s = parseInt(cardModel[0].scores) + i; //最小的牌的分数

                scoresAyy.push(s);//一副牌的分数

            }

            for (var j = 0; j < scoresAyy.length; j++) {

                for (var i = 0; i < cardModel.length; i++) {

                    var cardScores = cardModel[i].scores;

                    if (cardScores == scoresAyy[j] && cardScores < 15) scoresAyy.splice(j, 1); //删除不是鬼牌的分

                }
            }
            cardModel.forEach(function (card) {
                if (card.scores >= 20) card.scores = scoresAyy.splice(0, 1)[0];
            }); //改变牌的分数
        }

        cardModel = this._convertOneToA(cardModel);

        cardModel.sort(function (a1, a2) {
            return a1.scores - a2.scores;
        });
        return cardModel;
    };

    /*开始计算分数*/
    this.scoreOfCards = function (cards, huaSe) {
        if (!cards) return;
        var isTou = cards.length == 3;

        var typeScore = this._typeScoreOfCards(cards);

        var caleCards = this._convertOneToA(cards.slice());

        var card20 = this.contain20(caleCards);

        var maxScore = this.findMaxNumber(this._delCards(card20, caleCards));//获取除鬼牌外最大的的点数

        caleCards.forEach(function (card) {
            if (card.scores >= 20) card.scores = maxScore;
        });

        var maxScoreColor = 0;

        caleCards.forEach(function (card) {
            if (card.scores == maxScore && maxScoreColor < card.scores) maxScoreColor = card.color;
        });

        card20.forEach(function (card) {
            card.scores = maxScore;
            card.color = maxScoreColor;
        });

        caleCards = this._typeCardsSortByScores(caleCards);

        caleCards = this._convertOneToA(caleCards);

        if (typeScore == 9000000000000000) {//五同

            var totalValue = "";

            for (var i in caleCards) {

                var s = caleCards[i].scores;

                totalValue = (parseInt(s) >= 10 ? s : "0" + s) + totalValue;

            }

            return typeScore + parseInt(totalValue);
        }
        else if (typeScore == 8000000000000000) {
            //有鬼牌的时候要改变鬼牌的分数
            //顺子
            if (card20.length > 0) caleCards = this._changeCardScors(caleCards);

            caleCards = this._typeCardsSortByScores(caleCards);

            caleCards = this._convertOneToA(caleCards);

            var totalValue = "",
                valueColor = "";//牌色

            for (var i in caleCards) {

                var s = caleCards[i].scores;

                totalValue = totalValue + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[i].color;//牌色

                valueColor = valueColor + c;//牌色
            }

            if(huaSe == 0) return typeScore+parseInt(totalValue);

            return typeScore + parseInt(totalValue + valueColor);
        }
        else if (typeScore == 7000000000000000) {//铁支

            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);
        }
        else if (typeScore == 6000000000000000) {//葫芦

            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);

        }
        else if (typeScore == 5000000000000000) {
            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);
        }
        else if (typeScore == 4000000000000000) {
            //顺子
            if (card20.length > 0) caleCards = this._changeCardScors(caleCards);

            caleCards = this._typeCardsSortByScores(caleCards);

            caleCards = this._convertOneToA(caleCards);

            var totalValue = "",
                valueColor = "";//牌色

            for (var i in caleCards) {

                var s = caleCards[i].scores;

                totalValue = totalValue + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[i].color;//牌色

                valueColor = valueColor + c;//牌色
            }

            return typeScore+parseInt(totalValue);

            // if(huaSe == 0) return typeScore+parseInt(totalValue);

            // return typeScore + parseInt(totalValue + valueColor);
        }
        else if (typeScore == 3000000000000000) {//三条，找出是哪张牌有3张

            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            if (isTou) {

                str = str + '0000';

                valueColor = valueColor + '00';

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);

        }
        else if (typeScore == 2000000000000000) {//两对

            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);
        }
        else if (typeScore == 1000000000000000) {//对子
            var str = "",
                valueColor = "";//牌色

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            if (isTou) {

                str = str + '0000';

                valueColor = valueColor + '00';

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);

        }
        else if (typeScore == 0) {
            //乌龙
            var str = "",
                valueColor = "";//牌色
           
            caleCards.sort(function(a,b){return b.scores - a.scores});

            for (var w in caleCards) {

                var s = caleCards[w].scores;

                str = str + (parseInt(s) >= 10 ? s : "0" + s);

                var c = caleCards[w].color;//牌色

                valueColor = valueColor + c;//牌色

            }

            if (isTou) {

                str = str + '0000';

                valueColor = valueColor + '00';

            }

            // if(huaSe == 0) return typeScore+parseInt(str);

            // str = str + valueColor;

            return typeScore + parseInt(str);
        }


    };

    //分别获取type,value,cards  得到的格式应该是这样：{type: 5,value: 50000000,cards:{suit:'s',number: 4},{},{}}
    this.getDaoTypeAndValue = function (cards, huaSe) {
        var result = {
            type: null,
            value: 0
        };
        result.type = this.cardsType(cards);
        result.value = this.scoreOfCards(cards, huaSe);
        cards = this._typeCardsSortByScores(cards);
        result.cards = cards;
        return result;
    };

    /*自动选择牌，由大到小*/
    this.autoSelectCards = function (originCards, maxLength) {

        if (originCards.length <= maxLength) return originCards;

        originCards = this._convertOneToA(originCards);

        var cards = originCards.slice().sort(function (a, b) {
            return a.scores - b.scores;
        });

        var findFuncs = [
            this._findWuTong,
            this._findTongHuaShun,
            this._findTieZhi,
            this._findHuLu,
            this._findTongHua,
            this._findShunZi,
            this._findSanTiao,
            this._findLiangDui,
            this._findDuiZi
        ];

        var cardsArrays = null;

        for (var i = 0; i < findFuncs.length; ++i) {

            var func = findFuncs[i];

            cardsArrays = (func.bind(this))(cards);

            if (cardsArrays && cardsArrays.length > 0) break;

        }
        var targetCards = [];

        if (cardsArrays && cardsArrays.length > 0) {
            // 找出同类型的牌里的分数最大的牌
            var maxScore = 0;

            cardsArrays.forEach(function (tempCards) {

                const score = this.scoreOfCards(tempCards);

                if (score > maxScore) {

                    maxScore = score;

                    targetCards = tempCards;

                }
            }.bind(this));
        }

        /*if (targetCards.length < maxLength) {
         cards = cards.kq_excludes(targetCards);
         while(targetCards.length < maxLength) {
         targetCards.push(cards.pop());
         }
         } else */
        if (targetCards.length > maxLength) {
            targetCards = targetCards.slice(0, maxLength);
        }

        return targetCards || [];
    };

    this.getAllCardsTypeAndValue = function (cards, huaSe) {

        var resultCards = [];

        var cardss = cards.slice();
        
        cardss = this._typeCardsSortByScores(cardss);

        var indexasdf = 2;

        for (var i = 0; i < 3; i++) {

            var length = indexasdf == 0 ? 3 : 5;

            var cardAyy = this.autoSelectCards(cardss, length) || [];

            resultCards[indexasdf] = cardAyy;

            cardss = this._delCards(cardAyy, cardss);

            indexasdf--;
        }
        
        cardss.forEach(function(card){if(card.scores == 1) card.scores = 14;});

        cardss.sort(function(a,b){return b.scores - a.scores;});

        cardss.forEach(function(card){if(card.scores == 14) card.scores = 1;});

        for (var i = 0; i < resultCards.length; i++) {

            var length = i == 0 ? 3 : 5;

            if (resultCards[i].length < length) {

                cardss = this._delCards(resultCards[i], cardss);

                while (resultCards[i].length < length) {

                    resultCards[i].push(cardss.pop());

                }
            }
        }
        var touScore = this.scoreOfCards(resultCards[0], huaSe),
            zhongScore = this.scoreOfCards(resultCards[1], huaSe),
            weiScore = this.scoreOfCards(resultCards[2], huaSe);

        if (!(zhongScore > touScore && zhongScore < weiScore)) resultCards = [];

        if (resultCards.length <= 0) {

            cards.forEach(function (i) {
                if (i.scores == 1) i.scores = 14;
            });

            var card20 = this.contain20(cards);

            cards = this._delCards(card20, cards);

            cards = this._typeCardsSortByScores(cards);

            cards = card20.concat(cards);

            var asdf1 = cards.slice(0, 5);

            var asdf2 = cards.slice(5, 10);

            var asdf3 = cards.slice(10, 13);

            resultCards = [asdf3, asdf2, asdf1]
        }

        var weiDaoCards = resultCards[2];

        var zhongDaoCards = resultCards[1];

        var touDaoCards = resultCards[0];

        var touServerInfo = this.getDaoTypeAndValue(touDaoCards, huaSe);

        var zhongServerInfo = this.getDaoTypeAndValue(zhongDaoCards, huaSe);

        var weiServerInfo = this.getDaoTypeAndValue(weiDaoCards, huaSe);

        var result = [touServerInfo, zhongServerInfo, weiServerInfo];

        return result;
    };
}

module.exports = AutoFindCard;

// // //下面是测试的代码
//  var AutoFindCard = new AutoFindCard();

//  var testCards = [
//      //{suit: "s", number:7, scores:7, color:4, id:1},
//      //{suit: "h", number:7, scores:7, color:3, id:2},
//      //{suit: "h", number:2, scores:2, color:3, id:4},

//      {suit: "s", number:5, scores:5, color:4, id:6},
//      {suit: "h", number:5, scores:5, color:3, id:7},
//      {suit: "c", number:5, scores:5, color:2, id:11},
//      {suit: "s", number:5, scores:5, color:4, id:12},
//      {suit: "h", number:11, scores:11, color:3, id:3},

//     // {suit: "s", number:11, scores:11, color:4, id:13},
//     // {suit: "d", number:5, scores:5, color:1, id:10},
//     //{suit: "h", number:11, scores:11, color:3, id:8},
//     // {suit: "d", number:11, scores:11, color:1, id:5},
//     // {suit: "c", number:11, scores:11, color:2, id:9},
//  ];

// testCards = [
//     {suit: "d", number:3, scores:3, color:1, id:1},
//     {suit: "c", number:3, scores:3, color:2, id:2},
//     {suit: "d", number:4, scores:4, color:1, id:4},

//     {suit: "d", number:5, scores:5, color:1, id:6},
//     {suit: "h", number:2, scores:2, color:3, id:7},
//     {suit: "c", number:2, scores:2, color:2, id:11},
//     {suit: "s", number:2, scores:2, color:4, id:12},
//     {suit: "d", number:20, scores:20, color:1, id:3},

//     {suit: "d", number:9, scores:9, color:1, id:13},
//     {suit: "d", number:10, scores:10, color:1, id:10},
//     {suit: "d", number:11, scores:11, color:1, id:8},
//     {suit: "d", number:12, scores:12, color:1, id:5},
//     {suit: "d", number:13, scores:13, color:1, id:9},
// ];

// testCards = [
//     {suit: "h", number:4, scores:4, color:3, id:1},
//     {suit: "h", number:11, scores:11, color:3, id:2},
//     {suit: "h", number:11, scores:11, color:3, id:4},

//     {suit: "d", number:6, scores:6, color:1, id:6},
//     {suit: "h", number:6, scores:6, color:3, id:7},
//     {suit: "c", number:6, scores:6, color:2, id:11},
//     {suit: "s", number:6, scores:6, color:4, id:12},
//     {suit: "c", number:5, scores:5, color:2, id:3},

//     {suit: "d", number:10, scores:10, color:1, id:13},
//     {suit: "c", number:10, scores:10, color:2, id:10},
//     {suit: "c", number:10, scores:10, color:2, id:8},
//     {suit: "s", number:10, scores:10, color:4, id:5},
//     {suit: "h", number:10, scores:10, color:3, id:9},
// ];
// //var st = AutoFindCard.getAllCardsTypeAndValue(testCards)
// //st.forEach(function(c){
// //    console.log(c)
// //})
// //
// // console.log(AutoFindCard.scoreOfCards(testCards))


// 1030304000012100
// 7020202020511432
// 8131211100911111


