var Card = require('base/card');
var CardManager = require('base/card-manager');

module.exports = SSGCardManager;

function SSGCardManager() {
    /*牌型*/
    this.TYPE = {
        WuLong: 0,      //乌龙
        DuiZi: 1,       //对子
        LiangDui: 2,    //两队
        SanTiao: 3,     //三条
        ShunZi: 4,      //顺子
        TongHua: 5,     //同花
        HuLu: 6,        //葫芦
        TieZhi: 7,      //铁支
        TongHuaShun: 8, //同花顺
        wuTong: 9,          //五同

        SanTaoHua: 10,       //三同花   +6分
        SanShunZi: 11,      //三顺子   +6分
        LiuDuiBan: 12,      //六对半   +6分

        WuDuiSanTiao:13,
        SiTaoSanTiao: 14,   //四套三对
        CouYiSe: 15,

        SanFenTianXia: 16,  //三分天下
        SanTongHuaShun: 17, //三同花顺
        YiTiaoLong: 18,     //一条龙   +52分。
        QingLong: 19,       //青龙     +104分。
    };

    this.cards = [];//所有牌
    this.lz = null;

    this.description = function () {
        console.log('SSGCardManager description');
    };

    /*
     比较两手牌
     两手牌一样 则返回0
     前一手牌 大于 后一手牌 返回1
     前一手牌 小于 后一手牌 返回-1
     */
    this.compareCard = function(cardsInfo,compareCardsInfo) {
        if(cardsInfo==null||compareCardsInfo==null){
            return;
        }
        //牌的类型大于 或者牌的类型相同但是点数要大
        if (cardsInfo.type > compareCardsInfo.type ||
            (cardsInfo.type == compareCardsInfo.type && cardsInfo.value > compareCardsInfo.value)) {
            return 1;
        }
        //牌的类型与点数都相同
        if (cardsInfo.type == compareCardsInfo.type && cardsInfo.value == compareCardsInfo.value) {
            return 0;
        }
        return -1;
    };

    /*
     特殊牌型应该得多少分
     */
    this.getSpecialScore = function(cardInfo) {
        var value = 0;
        switch (cardInfo.type) {
            // case this.TYPE.santiao: //三条
            //     value = 3 ;
            //     break;
            case this.TYPE.SanTaoHua://三同花
                value = 6;
                break;
            case this.TYPE.SanShunZi://三顺子
                value = 6;
                break;
            case this.TYPE.LiuDuiBan://六对半
                value = 6;
                break;
            // case this.TYPE.WuDuiSanTiao://五对三条
            //     value = 9;
            //     break;
            // case this.TYPE.SiTaoSanTiao://四套三条
            //     value = 9;
            //     break;
            // case this.TYPE.CouYiSe://凑一色
            //     value = 12;
            //     break;
            // case this.TYPE.SanFenTianXia://三分天下
            //     value = 24;
            //     break;
            // case this.TYPE.SanTongHuaShun://三同花顺
            //     value = 24;
            //    break;
            case this.TYPE.YiTiaoLong://一条龙
                value = 13;
                break;
            case this.TYPE.QingLong://青龙
                value = 13;
                break;
            default:
                break;
        }
        return value ;
    };

    this.getCards = function (setting2,guipai) {
        this.cards = [];
        var id = 0;
        var types = ['h','d'];
        var type = ['s','h','c','d'];//spade heart club diamond,黑桃，红心，梅花，方块

        var color = [];
        color["s"] = 4;
        color["h"] = 3;
        color["c"] = 2;
        color["d"] = 1;

        for (var i = 0;i < type.length;i++) {//
            for (var j = 1;j< 14;j++) {//
                var card = new Card();
                card.suit = type[i];
                card.number = j;
                card.scores = j;
                card.color = color[type[i]];
                card.id = id;
                id ++;
                this.cards.push(card);
            }
        }

        if(guipai == true){ //鬼牌
            for (var i = 0;i < types.length;i++) {//
                var card = new Card();
                card.suit = types[i];
                card.number = 20;
                card.scores = 20;
                card.color = color[types[i]];
                card.id = id;
                id ++;
                this.cards.push(card);
            }
        }


        if(setting2){ //setting1 0--3 == 4--7人
            for(var a=1; a<=setting2; a++){
                for(var i=1 ; i<14 ; i++) {
                    var card = new Card();
                    card.suit = type[a];
                    card.number = i;
                    card.scores = i;
                    card.color = color[type[a]];
                    card.id = id;
                    id ++;
                    this.cards.push(card);
                }
            }
        }
        //console.log(setting2,"-----------------------145  ???");
        //console.log(this.cards.length,"张牌");
    };
    //洗牌 发牌
    this.deal = function (players,setting1,setting3) {

        this.getCards(setting1 ,setting3[1]);    //获取一副新牌

        // CardManager.shuffle(this.cards);    //洗牌
        this._assignCards(players);

        CardManager.deal(players,this.cards,setting3[0]);
        // players[0].cards = [{suit: "c", number:13},{suit: "h", number:13}, {suit: "s", number:9},//

        //       {suit: "h", number:12}, {suit: "h", number:12},
        //       {suit: "d", number:7}, {suit: "c", number:7}, {suit: "c", number:8},

        //       {suit: "d", number:3}, {suit: "c", number:3},
        //       {suit: "h", number:3}, {suit: "s", number:3}, {suit: "c", number:4}];
        /*players[0].cards = [
         {suit: "s", number:7, scores:7, color:4, id:1},
         {suit: "h", number:7, scores:7, color:3, id:2},
         {suit: "h", number:2, scores:2, color:3, id:4},

         {suit: "s", number:5, scores:5, color:4, id:6},
         {suit: "h", number:5, scores:5, color:3, id:7},
         {suit: "c", number:5, scores:5, color:2, id:11},
         {suit: "s", number:5, scores:5, color:4, id:12},
         {suit: "h", number:11, scores:11, color:3, id:3},

         {suit: "s", number:11, scores:11, color:4, id:13},
         {suit: "d", number:5, scores:5, color:1, id:10},
         {suit: "h", number:11, scores:11, color:3, id:8},
         {suit: "d", number:11, scores:11, color:1, id:5},
         {suit: "c", number:11, scores:11, color:2, id:9},
         ]
         players[1].cards = [
         {suit: "d", number:3, scores:3, color:1, id:1},
         {suit: "c", number:3, scores:3, color:2, id:2},
         {suit: "d", number:4, scores:4, color:1, id:4},

         {suit: "d", number:5, scores:5, color:1, id:6},
         {suit: "h", number:2, scores:2, color:3, id:7},
         {suit: "c", number:2, scores:2, color:2, id:11},
         {suit: "s", number:2, scores:2, color:4, id:12},
         {suit: "d", number:20, scores:20, color:1, id:3},

         {suit: "d", number:9, scores:9, color:1, id:13},
         {suit: "d", number:10, scores:10, color:1, id:10},
         {suit: "d", number:11, scores:11, color:1, id:8},
         {suit: "d", number:12, scores:12, color:1, id:5},
         {suit: "d", number:13, scores:13, color:1, id:9},
         ];*/
        for(var i=0 ; i<players.length ; i++) {
            //console.log(players[i].card,""+players[i].id);
        }

    };

    this._assignCards = function (players) {

        var suitColorMap = new Array(4);

        suitColorMap['s'] = 4;

        suitColorMap['h'] = 3;

        suitColorMap['c'] = 2;

        suitColorMap['d'] = 1;

        var cardNames = this.cards.map(function (card) {

            var cardNumber = card.number;

            var color = suitColorMap[card.suit];

            var number = Math.max(Math.min(cardNumber, 13), 1);

            return color + '_' + number;

        });

        for(var i = 0; i < players.length; i++){

            var player = players[i];

            var waiGuaCardNames = player.cardsZuoBi;

            var type = new Array(4);

            type[4] = 's';

            type[3] = 'h';

            type[2] = 'c';

            type[1] = 'd';

            player.cards = player.cardsZuoBi.map(function (cardName) {

                var arr = cardName.split("_");

                var card = new Card();

                card.suit = type[arr[0]];

                card.number = arr[1];

                return card;

            });

            //console.log(player.cards,"-----------1111111players");

            for(var j = 0; j < waiGuaCardNames.length;j++){//删除选中的牌

                var s = waiGuaCardNames[j];

                var indexs = cardNames.indexOf(s);

                this.cards.splice(indexs,1);

                cardNames.splice(indexs,1);

            }
        }
    };
}


//继承
SSGCardManager.prototype = new CardManager();
SSGCardManager.prototype.constructor = CardManager;
