{"version":3,"sources":["Playback.js"],"names":["Socket","require","Playback","cc","Class","extends","Component","properties","_playbackDatas","_isPlaybacking","statics","instance","onLoad","game","addPersistRootNode","node","setPlaybackDatas","datas","removePlaybackDatas","stopPlayback","isContainPlaybackDatas","startPlayback","error","_executePlayback","unscheduleAllCallbacks","isPlaybacking","startTime","interval","log","filter","string","index","length","indexOf","bind","forEach","data","delay","scheduleOnce","_dispatchResponse","module","exports"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;;AAEA;AACA,IAAMC,WAAWC,GAAGC,KAAH,CAAS;AACtBC,WAASF,GAAGG,SADU;;AAGtBC,cAAY;AACVC,oBAAgB,IADN,EACc;AACxBC,oBAAgB;AAFN,GAHU;;AAQtBC,WAAS;AACPC,cAAU;AADH,GARa;;AAYtBC,UAAQ,kBAAY;AAClBV,aAASS,QAAT,GAAoB,IAApB;AACAR,OAAGU,IAAH,CAAQC,kBAAR,CAA2B,KAAKC,IAAhC;AACD,GAfqB;;AAiBtB;AACAC,oBAAkB,0BAAUC,KAAV,EAAiB;AACjC,SAAKT,cAAL,GAAsBS,KAAtB;AACD,GApBqB;;AAsBtB;AACAC,uBAAqB,+BAAY;AAC/B,SAAKF,gBAAL,CAAsB,IAAtB;AACA,SAAKG,YAAL;AACD,GA1BqB;;AA4BtB;AACAC,0BAAwB,kCAAY;AAClC,WAAO,KAAKZ,cAAL,IAAuB,IAA9B;AACD,GA/BqB;;AAiCtB;AACAa,iBAAe,yBAAY;AACzB;AACA;;AAEA,SAAKZ,cAAL,GAAsB,IAAtB;;AAEA,QAAI,CAAC,KAAKD,cAAV,EAA0B;AACxBL,SAAGmB,KAAH,CAAS,aAAT;AACA,WAAKH,YAAL;AACA;AACD;;AAED,SAAKI,gBAAL;AACD,GA/CqB;;AAiDtB;AACAJ,gBAAc,wBAAY;AACxB,SAAKV,cAAL,GAAsB,KAAtB;AACA,SAAKe,sBAAL;AACD,GArDqB;;AAuDtB;AACAC,iBAAe,yBAAY;AACzB,WAAO,KAAKhB,cAAZ;AACD,GA1DqB;;AA4DtB;AACAc,oBAAkB,4BAAY;AAC5B,QAAIG,YAAY,GAAhB;AACA,QAAIC,WAAW,GAAf;AACAxB,OAAGyB,GAAH,CAAO,KAAKpB,cAAZ;;AAEA;AACA;AACA;AACA,SAAKA,cAAL,GAAsB,KAAKA,cAAL,CAAoBqB,MAApB,CAA2B,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACvE,UAAIA,SAAS,KAAKvB,cAAL,CAAoBwB,MAApB,GAA6B,CAA1C,EAA6C;AAC3C,eAAO,IAAP;AACD;;AAED,aAAQF,OAAOG,OAAP,CAAe,oBAAf,KAAwC,CAAC,CAAjD;AACD,KANgD,CAM/CC,IAN+C,CAM1C,IAN0C,CAA3B,CAAtB;;AAQA,SAAK1B,cAAL,CAAoB2B,OAApB,CAA4B,UAAUC,IAAV,EAAgBL,KAAhB,EAAuB;AACjD,UAAIM,QAAQX,YAAYK,QAAQJ,QAAhC;AACA,UAAII,SAAS,KAAKvB,cAAL,CAAoBwB,MAApB,GAA6B,CAA1C,EAA6C;AAC3C;AACAK,gBAAQX,YAAY,CAACK,QAAQ,CAAT,IAAcJ,QAA1B,GAAqC,CAA7C;AACD;;AAED,WAAKW,YAAL,CAAkB,YAAY;AAC5BnC,WAAGyB,GAAH,CAAO,0BAAP,EAAmCG,KAAnC;AACA/B,eAAOW,QAAP,CAAgB4B,iBAAhB,CAAkCH,IAAlC;AACD,OAHD,EAGGC,KAHH;AAKD,KAZ2B,CAY1BH,IAZ0B,CAYrB,IAZqB,CAA5B;AAcD;;AA3FqB,CAAT,CAAjB;;AA+FAM,OAAOC,OAAP,GAAiBvC,QAAjB","file":"Playback.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\Playback","sourcesContent":["const Socket = require('socket');\n\n// 用于回放的组件\nconst Playback = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n      _playbackDatas: null,   // 用于回放的数据\n      _isPlaybacking: false,\n    },\n\n    statics: {\n      instance: null,\n    },\n\n    onLoad: function () {\n      Playback.instance = this;\n      cc.game.addPersistRootNode(this.node);\n    },\n\n    // 设置回放数据\n    setPlaybackDatas: function (datas) {\n      this._playbackDatas = datas;\n    },\n\n    // 清空回放数据。同时会清空回放\n    removePlaybackDatas: function () {\n      this.setPlaybackDatas(null);\n      this.stopPlayback();\n    },\n\n    // 是否包含回放数据\n    isContainPlaybackDatas: function () {\n      return this._playbackDatas != null;\n    },\n\n    // 开始回放\n    startPlayback: function () {\n      // 模拟 socket 接收到了事件即可\n      //cc.log(\"Playback 开始回放\");\n\n      this._isPlaybacking = true;\n\n      if (!this._playbackDatas) {\n        cc.error(\"想回放，却没有回放数据\");\n        this.stopPlayback();\n        return;\n      }\n\n      this._executePlayback();\n    },\n\n    // 停止回放\n    stopPlayback: function () {\n      this._isPlaybacking = false;\n      this.unscheduleAllCallbacks();\n    },\n\n    // 是否正在回放\n    isPlaybacking: function () {\n      return this._isPlaybacking;\n    },\n\n    // 执行真正的回放操作\n    _executePlayback: function () {\n      let startTime = 1.0;\n      let interval = 3.0;\n      cc.log(this._playbackDatas);\n\n      // 在某些特殊情况下\n      // 回放数据里会包含两套 gameOver action\n      // 所以需要过滤掉其中一个\n      this._playbackDatas = this._playbackDatas.filter(function(string, index) {\n        if (index == this._playbackDatas.length - 1) {\n          return true;\n        }\n\n        return (string.indexOf('\"action\":\"gameOver') == -1);\n      }.bind(this));\n\n      this._playbackDatas.forEach(function (data, index) {\n        var delay = startTime + index * interval;\n        if (index == this._playbackDatas.length - 1) {\n          // 如果是最后一个，则应该只间隔一秒\n          delay = startTime + (index - 1) * interval + 1;\n        }\n\n        this.scheduleOnce(function () {\n          cc.log(\"回放开始模拟 Socket 接收到服务器消息, \", index);\n          Socket.instance._dispatchResponse(data);\n        }, delay);\n\n      }.bind(this));\n\n    },\n\n});\n\nmodule.exports = Playback;\n"]}