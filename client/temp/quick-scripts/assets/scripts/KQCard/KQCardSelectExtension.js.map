{"version":3,"sources":["KQCardSelectExtension.js"],"names":["KQCard","require","KQCardFindTypeExtension","autoSelectCards","originCards","maxLength","length","forEach","card","scores","cards","slice","sort","a","b","findFuncs","findWuTong","findTongHuaShun","findTieZhi","findHuLu","findTongHua","findShunZi","findSanTiao","findLiaDui","findDuiZi","indexArrays","i","func","bind","indexs","maxScore","tempCards","tempIndexs","map","index","score","scoreOfCards","targetCards","testAutoSelect"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,0BAA0BD,QAAQ,yBAAR,CAAhC;;AAEA;;AAEA;;;;;;;AAOAD,OAAOG,eAAP,GAAyB,UAASC,WAAT,EAAsBC,SAAtB,EAAiC;AACtD,QAAID,YAAYE,MAAZ,IAAsBD,SAA1B,EAAqC;AACjC,eAAOD,WAAP;AACH;AACDA,gBAAYG,OAAZ,CAAoB,UAASC,IAAT,EAAc;AAC9B,YAAGA,KAAKC,MAAL,IAAe,CAAlB,EAAoB;AAChBD,iBAAKC,MAAL,GAAc,EAAd;AACH;AACJ,KAJD;AAKA,QAAIC,QAAQN,YAAYO,KAAZ,GAAoBC,IAApB,CAAyB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC9C,eAAOD,EAAEJ,MAAF,GAAWK,EAAEL,MAApB;AACH,KAFW,CAAZ;;AAIA,QAAIM,YAAY,CACZf,OAAOgB,UADK,EAEZhB,OAAOiB,eAFK,EAGZjB,OAAOkB,UAHK,EAIZlB,OAAOmB,QAJK,EAKZnB,OAAOoB,WALK,EAMZpB,OAAOqB,UANK,EAOZrB,OAAOsB,WAPK,EAQZtB,OAAOuB,UARK,EASZvB,OAAOwB,SATK,CAAhB;;AAYA,QAAIC,cAAc,IAAlB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIX,UAAUT,MAA9B,EAAsC,EAAEoB,CAAxC,EAA2C;AACvC,YAAIC,OAAOZ,UAAUW,CAAV,CAAX;AACAD,sBAAeE,KAAKC,IAAL,CAAU5B,MAAV,CAAD,CAAoBU,KAApB,CAAd;AACA,YAAIe,eAAeA,YAAYnB,MAAZ,GAAqB,CAAxC,EAA2C;AACvC;AACH;AACJ;;AAED,QAAIuB,SAAS,EAAb;AACA,QAAIJ,eAAeA,YAAYnB,MAAZ,GAAqB,CAAxC,EAA2C;AACvC;AACA,YAAIwB,WAAW,CAAf;AACAL,oBAAYlB,OAAZ,CAAoB,sBAAc;AAC9B,gBAAMwB,YAAYC,WAAWC,GAAX,CAAe;AAAA,uBAASvB,MAAMwB,KAAN,CAAT;AAAA,aAAf,CAAlB;AACJ,gBAAMC,QAAQnC,OAAOoC,YAAP,CAAoBL,SAApB,CAAd;AACA,gBAAII,QAAQL,QAAZ,EAAsB;AAClBA,2BAAWK,KAAX;AACAN,yBAASG,UAAT;AACH;AACJ,SAPG;AAQH;;AAED,QAAIK,cAAcR,OAAOI,GAAP,CAAW,UAASC,KAAT,EAAgB;AACzC,eAAOxB,MAAMwB,KAAN,CAAP;AACH,KAFiB,CAAlB;;AAIA;;;;;cAKU,IAAIG,YAAY/B,MAAZ,GAAqBD,SAAzB,EAAoC;AAC1CgC,sBAAcA,YAAY1B,KAAZ,CAAkB,CAAlB,EAAqBN,SAArB,CAAd;AACH;;AAED,WAAOgC,eAAe,EAAtB;AACH,CA9DD;;AAgEArC,OAAOsC,cAAP,GAAwB,UAAS5B,KAAT,EAAgB,CAEvC,CAFD","file":"KQCardSelectExtension.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\KQCard","sourcesContent":["const KQCard = require('KQCard');\nconst KQCardFindTypeExtension = require('KQCardFindTypeExtension');\n\n// 牌自动选择的扩展\n\n/**\n * 自动选择牌，由大到小\n *\n * @param  {[KQCard]} originCards  被选择的原始牌数组\n *\n * @return {[KQCard]}\n */\nKQCard.autoSelectCards = function(originCards, maxLength) {\n    if (originCards.length <= maxLength) {\n        return originCards;\n    }\n    originCards.forEach(function(card){\n        if(card.scores == 1){\n            card.scores = 14;\n        }\n    });\n    let cards = originCards.slice().sort(function(a,b){\n        return a.scores - b.scores;\n    });\n\n    let findFuncs = [\n        KQCard.findWuTong,\n        KQCard.findTongHuaShun,\n        KQCard.findTieZhi,\n        KQCard.findHuLu,\n        KQCard.findTongHua,\n        KQCard.findShunZi,\n        KQCard.findSanTiao,\n        KQCard.findLiaDui,\n        KQCard.findDuiZi\n    ];\n\n    let indexArrays = null;\n    for (let i = 0; i < findFuncs.length; ++i) {\n        let func = findFuncs[i];\n        indexArrays = (func.bind(KQCard))(cards);\n        if (indexArrays && indexArrays.length > 0) {\n            break;\n        }\n    }\n\n    var indexs = [];\n    if (indexArrays && indexArrays.length > 0) {\n        // 找出同类型的牌里的分数最大的牌\n        var maxScore = 0;\n        indexArrays.forEach(tempIndexs => {\n            const tempCards = tempIndexs.map(index => cards[index]);\n        const score = KQCard.scoreOfCards(tempCards);\n        if (score > maxScore) {\n            maxScore = score;\n            indexs = tempIndexs;\n        }\n    });\n    }\n\n    let targetCards = indexs.map(function(index) {\n        return cards[index];\n    });\n\n    /*if (targetCards.length < maxLength) {\n     cards = cards.kq_excludes(targetCards);\n     while(targetCards.length < maxLength) {\n     targetCards.push(cards.pop());\n     }\n     } else */if (targetCards.length > maxLength) {\n        targetCards = targetCards.slice(0, maxLength);\n    }\n\n    return targetCards || [];\n};\n\nKQCard.testAutoSelect = function(cards) {\n\n};"]}