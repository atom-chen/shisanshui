{"version":3,"sources":["GameResult.js"],"names":["KQCard","require","AudioManager","ResultStatus","WIN","DRAW","LOSE","GameResult","cc","Class","extends","Component","properties","winNode","Node","loseNode","drawNode","contentNode","resultItems","_deskInfo","_userId","_closeCallback","onLoad","_hideResultItems","showResults","deskInfo","currentUserId","resultStatus","_resultStatus","active","instance","playWin","playLose","node","getComponent","alert","setDismissCallback","bind","playerInfos","players","sort","p1","p2","cScore","itemComps","map","forEach","itemComp","index","length","user","updateWithPlayerInfo","isRandomDesk","cards","_cardsFromUser","setCards","setCloseCallback","callback","cardInfo","cardInfoItem","cardsFromArray","reduce","array","subCards","concat","acitve","find","id","score","diamond","module","exports"],"mappings":"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","file":"GameResult.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\Play","sourcesContent":["const KQCard = require('KQCard');\nconst AudioManager = require('AudioManager');\n\nlet ResultStatus = {\n  WIN: 2,\n  DRAW: 1,\n  LOSE: 0,\n};\n\n\nlet GameResult = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    winNode: cc.Node,\n    loseNode: cc.Node,\n    drawNode: cc.Node,\n    contentNode: cc.Node,\n\n    resultItems: [cc.Node],\n\n    _deskInfo: null,\n    _userId: null,\n    _closeCallback: null,\n  },\n\n  // use this for initialization\n  onLoad: function () {\n    this._hideResultItems();\n  },\n\n  showResults: function (deskInfo, currentUserId) {\n    this._deskInfo = deskInfo;\n    this._userId = currentUserId;\n\n    let resultStatus = this._resultStatus();\n    this.contentNode.active = true;\n    this.winNode.active =  (resultStatus == ResultStatus.WIN);\n    this.drawNode.active = (resultStatus == ResultStatus.DRAW);\n    this.loseNode.active = (resultStatus == ResultStatus.LOSE);\n\n    if (this.winNode.active) {\n      AudioManager.instance.playWin();\n    } else if (this.loseNode.active) {\n      AudioManager.instance.playLose();\n    }\n\n    this.node.getComponent('alert').alert();\n    this.node.getComponent('alert').setDismissCallback(function () {\n      this._closeCallback\n    }.bind(this));\n\n    let playerInfos = deskInfo.players.sort(function (p1, p2) {\n      return p2.cScore - p1.cScore;\n    });\n    let itemComps = this.resultItems.map(function (node) {\n      return node.getComponent('ResultItem');\n    });\n    itemComps.forEach(function (itemComp, index) {\n      itemComp.node.active = index < playerInfos.length;\n      if (!itemComp.node.active) {\n        return;\n      }\n\n      let user = playerInfos[index];\n      itemComp.updateWithPlayerInfo(user, deskInfo.isRandomDesk);\n      let cards = this._cardsFromUser(user);\n      itemComp.setCards(cards);\n    }.bind(this));\n  },\n\n  setCloseCallback: function (callback) {\n    this._closeCallback = callback;\n  },\n\n  _cardsFromUser: function (user) {\n    let cards = user.cardInfo.map(function (cardInfoItem) {\n      return KQCard.cardsFromArray(cardInfoItem.cards);\n    }).reduce(function (array, subCards) {\n      return array.concat(subCards);\n    }, []);\n\n    return cards;\n  },\n\n  _hideResultItems: function () {\n    this.resultItems.forEach(function (node) {\n      node.acitve = false;\n    });\n  },\n\n  _resultStatus: function() {\n    let playerInfos = this._deskInfo.players;\n    let user = playerInfos.find(function (user) {\n      return user.id == this._userId;\n    }.bind(this));\n\n    let score = user.cScore;\n    if (this._deskInfo.isRandomDesk) {\n      // 如果是随机场的话，应该用钻石来判断输赢\n      score = user.diamond;\n    }\n\n    if (score > 0) {\n      return ResultStatus.WIN;\n    } else if (score < 0) {\n      return ResultStatus.LOSE;\n    }\n\n    return ResultStatus.DRAW;\n  },\n});\n\nmodule.exports = GameResult;\n"]}