require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"ArrayExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '4fd85NSsFJLd4qHrH0UjHzl', 'ArrayExtension');
// scripts\Extensions\ArrayExtension.js

// 给 Array 添加方法
// arr.find(...)
// arr.findIndex(...)
// arr.includes(e)
// arr.unique(equalFunction, isNewArray)
// Array.from
// Array.equal
// arr.isEqual(otherArray, isStrict)
// Array.sortByNumber
// arr.findSubArrayIndexs([])   用于查找数组内的部分元素的索引
// arr.translationWithStartIndex(startIndex) 将数组内的元素平移
// 如：[1, 2, 3, 4, 5].translationWithStartIndex(3) => [4,5,1,2,3]
// arr.kq_insert(index, e)   插入一个元素
// arr.kq_excludes(array)   // 除了array数组中的元素

module.exports = {};

if (!Array.prototype.find) {
  Array.prototype.find = function (predicate) {
    'use strict';
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}

if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

// https://tc39.github.io/ecma262/#sec-array.prototype.includes
if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    enumerable: false,
    value: function value(searchElement, fromIndex) {

      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If len is 0, return false.
      if (len === 0) {
        return false;
      }

      // 4. Let n be ? ToInteger(fromIndex).
      //    (If fromIndex is undefined, this step produces the value 0.)
      var n = fromIndex | 0;

      // 5. If n ≥ 0, then
      //  a. Let k be n.
      // 6. Else n < 0,
      //  a. Let k be len + n.
      //  b. If k < 0, let k be 0.
      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      // 7. Repeat, while k < len
      while (k < len) {
        // a. Let elementK be the result of ? Get(O, ! ToString(k)).
        // b. If SameValueZero(searchElement, elementK) is true, return true.
        // c. Increase k by 1.
        // NOTE: === provides the correct "SameValueZero" comparison needed here.
        if (o[k] === searchElement) {
          return true;
        }
        k++;
      }

      // 8. Return false
      return false;
    }
  });
}

// unique
if (!Array.prototype.unique) {
  Object.defineProperty(Array.prototype, 'unique', {
    enumerable: false,
    value: function value(equalFunction) {
      var newArray = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      if (newArray) {
        return this._unqiue_new(equalFunction);
      }

      return this._unqiue(equalFunction);
    }
  });

  Object.defineProperty(Array.prototype, '_unqiue_new', {
    enumerable: false,
    value: function value(equalFunction) {
      var array = Array.from(this);

      return array._unqiue(equalFunction);
    }
  });

  Object.defineProperty(Array.prototype, '_unqiue', {
    enumerable: false,
    value: function value(equalFunction) {
      var len = this.length;
      var i = -1;

      while (i++ < len) {
        var j = i + 1;

        for (; j < this.length; ++j) {
          var isEqual = false;
          if (equalFunction) {
            isEqual = equalFunction(this[i], this[j]);
          } else {
            isEqual = this[i] === this[j];
          }

          if (isEqual) {
            this.splice(j--, 1);
          }
        }
      }
      return this;
    }
  });
}

// Production steps of ECMA-262, Edition 6, 22.1.2.1
// Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
if (!Array.from) {
  Array.from = (function () {
    var toStr = Object.prototype.toString;
    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function toInteger(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike /*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError("Array.from requires an array-like object - not null or undefined");
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  })();
}

if (!Array.equal) {
  Array.equal = function (arr1, arr2) {
    var strict = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    if (arr1 === undefined || arr2 === undefined) {
      return false;
    }

    var length = arr1.length;
    if (length !== arr2.length) return false;
    for (var i = 0; i < length; i++) {
      if (strict) {
        if (arr1[i] !== arr2[i]) {
          return false;
        }
      } else {
        var value1 = arr1[i];
        var value2 = arr2[i];
        var result = true;
        if (Array.isArray(value1) && Array.isArray(value2)) {
          result = Array.equal(value1, value2, strict);
        } else {
          result = value1 == value2;
        }
      }
    }

    return true;
  };
}

if (!Array.prototype.isEqual) {
  Object.defineProperty(Array.prototype, 'isEqual', {
    enumerable: false,
    value: function value(otherArray) {
      var strict = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      return Array.equal(this, otherArray, strict);
    }
  });
}

if (!Array.sortByNumber) {
  Array.sortByNumber = function (n1, n2) {
    var asc = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    return (n1 - n2) * (asc ? 1 : -1);
  };
}

if (!Array.prototype.findSubArrayIndexs) {
  Object.defineProperty(Array.prototype, 'findSubArrayIndexs', {
    enumerable: false,
    value: function value(subArray, f) {
      var _this = this;

      var indexs = [];

      var _loop = function () {
        var subValue = subArray[i];
        var findFunc = f || function (thisValue) {
          return subValue === thisValue;
        };
        var index = _this.findIndex(findFunc);
        if (index >= 0) {
          indexs.push(index);
        } else {
          indexs = [];
          return 'break';
        }
      };

      for (var i in subArray) {
        var _ret = _loop();

        if (_ret === 'break') break;
      }

      return indexs.length > 0 ? indexs : null;
    }
  });
}

if (!Array.prototype.translationWithStartIndex) {
  Object.defineProperty(Array.prototype, 'translationWithStartIndex', {
    enumerable: false,
    value: function value(startIndex) {
      if (startIndex == 0) {
        return this;
      }

      if (startIndex >= this.length) {
        return this;
      }

      var pre = this.slice(startIndex);
      var last = this.slice(0, startIndex);
      var result = pre.concat(last);

      return result;
    }
  });
}

if (!Array.prototype.kq_insert) {
  Object.defineProperty(Array.prototype, 'kq_insert', {
    enumerable: false,
    value: function value(index, e) {
      if (e == null) {
        return this;
      }

      if (index >= this.length) {
        this.push(e);
        return;
      }

      this.splice(index, 0, e);

      return this;
    }
  });
}

if (!Array.prototype.kq_excludes) {
  Object.defineProperty(Array.prototype, 'kq_excludes', {
    enumerable: false,
    value: function value(otherArray) {
      if (otherArray == null) {
        return this;
      }

      var result = [];
      this.forEach(function (element) {
        if (!otherArray.includes(element)) {
          result.push(element);
        }
      });

      return result;
    }
  });
}

cc._RFpop();
},{}],"AudioManager":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'dd5deKFuSZAC4Ky0zI4+z6O', 'AudioManager');
// scripts\Audio\AudioManager.js

var manager = require('manager');

var AudioManager = cc.Class({
    'extends': cc.Component,

    properties: {
        hall_bgm: {
            'default': null,
            url: cc.AudioClip
        },

        game_bgm: {
            'default': null,
            url: cc.AudioClip
        },

        compare_bgm: {
            'default': null,
            url: cc.AudioClip
        },

        // 打枪
        daQiang: {
            'default': null,
            url: cc.AudioClip
        },

        buttonClickSure: {
            'default': null,
            url: cc.AudioClip
        },

        fapai: {
            'default': null,
            url: cc.AudioClip
        },

        click_public: {
            'default': null,
            url: cc.AudioClip
        },
        click_cancel: {
            'default': null,
            url: cc.AudioClip
        },
        click_createRoom: {
            'default': null,
            url: cc.AudioClip
        },
        window: {
            'default': null,
            url: cc.AudioClip
        },
        click_weixin_login: {
            'default': null,
            url: cc.AudioClip
        },
        fangPai: {
            'default': null,
            url: cc.AudioClip
        }
    },

    statics: {
        instance: null
    },

    onLoad: function onLoad() {
        AudioManager.instance = this;
        this._registerAppActiveChange();

        this.soundOn = true;
        cc.game.addPersistRootNode(this.node);
        if (cc.game.isPersistRootNode(this.node)) {
            cc.log('添加全局节点成功');
        }
        this.mValue = manager.getMusicValue();
        this.mEValue = manager.getMusicEffectValue();
        this.bgAudioId = -1;
    },

    stopHallMusic: function stopHallMusic() {
        cc.audioEngine.stop(this.bgAudioId);
    },

    playMusic: function playMusic() {
        this.bgAudioId = cc.audioEngine.playMusic(this.hall_bgm, true);
        if (this.bgAudioId != -1) {
            cc.log('play');
            cc.audioEngine.setVolume(this.bgAudioId, this.mValue);
        }
        //cc.audioEngine.playMusic( url, true )
    },

    /*playDeskMusic: function() {
        this.bgAudioId = cc.audioEngine.playMusic( this.game_bgm, true);
        if (this.bgAudioId != -1) {
            cc.audioEngine.setVolume(this.bgAudioId,this.mValue);
        }
    },*/

    playCompareCardsMusic: function playCompareCardsMusic() {
        this.bgAudioId = cc.audioEngine.playMusic(this.compare_bgm, true);
        if (this.bgAudioId != -1) {
            cc.audioEngine.setVolume(this.bgAudioId, this.mValue);
        }
    },

    playDaQiang: function playDaQiang() {
        for (var start = 0; start <= 1.6; start = start + 0.5) {
            this.scheduleOnce((function () {
                this._playSFX(this.daQiang);
            }).bind(this), start);
        }
    },

    // “打枪”
    playHumanDaQiang: function playHumanDaQiang() {
        var sex = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

        var path = "resources/sounds/" + (sex == 1 ? "man" : "woman");
        path = path + "/daqiang1.wav";

        var url = cc.url.raw(path);
        this._playSFX(url);
    },

    playPokerClick: function playPokerClick() {
        var url = cc.url.raw('resources/sounds/public/poker_click.wav');
        this._playSFX(url);
    },

    // 播放全垒打音效
    playHomeRun: function playHomeRun() {
        var sex = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

        var path = this._soundsHumanPath(sex) + "special1.wav";
        var url = cc.url.raw(path);
        this._playSFX(url);
    },

    // 播放发牌音效
    playFaPai: function playFaPai() {
        this._playSFX(this.fapai);
        for (var index = 0; index < 6; index++) {
            this.scheduleOnce((function () {
                this._playSFX(this.fapai);
            }).bind(this), index * 0.1);
        }
    },

    playCardType: function playCardType() {
        var sex = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
        var type = arguments.length <= 1 || arguments[1] === undefined ? -1 : arguments[1];

        // 只播放普通类型的语音
        if (type >= 10 || type < 0) {
            // 10 及以上是特殊牌
            var _path = this._soundsHumanPath(sex) + type + ".wav";
            var _url = cc.url.raw(_path);
            this._playSFX(_url);
            return;
        }

        var path = this._soundsHumanPath(sex) + "common" + (type + 1) + ".wav";
        var url = cc.url.raw(path);
        this._playSFX(url);
    },

    // 播放 开始比牌
    playStartCompare: function playStartCompare() {
        var sex = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

        var path = this._soundsHumanPath(sex) + "start_compare.wav";
        var url = cc.url.raw(path);
        this._playSFX(url);
    },

    playWin: function playWin() {
        var url = cc.url.raw('resources/sounds/openface/win.mp3');
        this._playSFX(url);
    },

    playLose: function playLose() {
        var url = cc.url.raw('resources/sounds/openface/lose.mp3');
        this._playSFX(url);
    },

    _soundsHumanPath: function _soundsHumanPath(sex) {
        var path = "resources/sounds/" + (sex == 1 ? "man" : "woman") + "/";
        return path;
    },

    setBgMusicVolumn: function setBgMusicVolumn(value) {
        this.mValue = value;
        if (this.bgAudioId != -1) {
            cc.audioEngine.setVolume(this.bgAudioId, value);
        }
    },

    setEffectMusicVolum: function setEffectMusicVolum(value) {
        this.mEValue = value;
    },

    /*聊天*/
    playChatAudio: function playChatAudio(sex, str) {
        var index = this.chatTexts().indexOf(str);
        if (index === -1) {
            return;
        }

        var number = (sex == 1 ? 1000 : 2000) + index;
        var path = "resources/sounds/chat/" + number + ".wav";
        var url = cc.url.raw(path);
        this._playSFX(url);
    },

    /*'很高兴和你们一起打牌！',
        '快点儿吧，我等得花儿都谢了~！',
        '急什么，让我想想怎么打！',
        '这牌真好，全垒打有希望啊！',
        '我是一个神枪手，打抢本领大！',
        '这把牌敢不敢再水一点啊！',
        '又输啦！大爷给条活路吧！',
        '你是妹妹 还是哥哥啊',
        '交个朋友吧。。',
        '我有事先走了，下次再玩吧！',
        '再见了 我会想念大家的，，',
        '怎么又断线了  网络怎么这么差啊，，'
    */
    chatTexts: function chatTexts() {
        return ['不要吵了，专心玩游戏吧！', '大家不要走，决战到天亮~！', '大家好，很高兴见到各位！', '各位不好意思，我离开一会！', '和你合作真是太愉快了！', '快点儿啊，都等得我花都谢了！', '你的牌打得太好了！', '你是妹妹 还是哥哥啊', '交个朋友吧。。', '我有事先走了，下次再玩吧！', '再见了 我会想念大家的，，', '怎么又断线了  网络怎么这么差啊，，'];
    },

    pauseMusic: function pauseMusic() {
        this.soundOn = false;
        cc.audioEngine.pauseMusic();
    },

    resumeMusic: function resumeMusic() {
        this.soundOn = true;
        cc.audioEngine.resumeMusic();
    },

    _playSFX: function _playSFX(clip) {
        if (this.soundOn) {
            var audioId = cc.audioEngine.playEffect(clip, false);
            cc.audioEngine.setVolume(audioId, this.mEValue);
            return audioId;
        }

        return null;
    },

    // MARK: 前后台操作
    _registerAppActiveChange: function _registerAppActiveChange() {
        cc.game.on(cc.game.EVENT_HIDE, this._appEnterBackground, this);
        cc.game.on(cc.game.EVENT_SHOW, this._appBecomActive, this);
    },

    /**
      * 进入后台
      */
    _appEnterBackground: function _appEnterBackground() {
        var now = cc.sys.now();
        if (now - this._lastAppEnterBackgroundTime < 100) {
            return;
        }
        this._lastAppEnterBackgroundTime = now;

        this.pauseMusic();
    },

    /**
     * 进入前台 
     */
    _appBecomActive: function _appBecomActive() {
        var now = cc.sys.now();
        if (now - this._lastAppBecomActiveTime < 100) {
            return;
        }
        this._lastAppBecomActiveTime = now;

        this.resumeMusic();
    },

    /*确定按钮音效*/
    playBtnClickSFX: function playBtnClickSFX() {
        this._playSFX(this.buttonClickSure);
    },
    /*公共按钮，按键或者关闭按钮之类的音效*/
    palyBtnPublicSFX: function palyBtnPublicSFX() {
        this._playSFX(this.click_public);
    },

    /*取消按钮音效*/
    palyBtnCancelClickSFX: function palyBtnCancelClickSFX() {
        this._playSFX(this.click_cancel);
    },
    palyBtnCreateRoomSFX: function palyBtnCreateRoomSFX() {
        this._playSFX(this.click_createRoom);
    },
    palyWindowSFX: function palyWindowSFX() {
        this._playSFX(this.window);
    },
    palyWeiXinLoginSFX: function palyWeiXinLoginSFX() {
        this._playSFX(this.click_weixin_login);
    },
    palyFangPaiSFX: function palyFangPaiSFX() {
        this._playSFX(this.fangPai);
    }
});

module.exports = AudioManager;

cc._RFpop();
},{"manager":"manager"}],"CardPrefab":[function(require,module,exports){
"use strict";
cc._RFpush(module, '94cdbrbPc9KRqx+1sHumWI3', 'CardPrefab');
// scripts\CardPrefab.js

var KQCard = require('KQCard');

cc.Class({
  'extends': cc.Component,

  properties: {
    graySprite: cc.Sprite,

    _cardName: null,
    _kqCardMode: null
  },

  // use this for initialization
  onLoad: function onLoad() {
    this.graySprite.node.active = false;
  },

  // 通过牌名设置牌
  setCard: function setCard(cardName) {
    this._setCardName(cardName);

    this._loadCardFrame(cardName, (function (spriteFrame) {
      this.node.getComponent('cc.Sprite').spriteFrame = spriteFrame;
    }).bind(this));
  },

  cardName: function cardName() {
    return this._cardName;
  },

  cardMode: function cardMode() {
    return this._kqCardMode;
  },

  _setCardName: function _setCardName(cardName) {
    this._cardName = cardName;
    this._kqCardMode = new KQCard(cardName);
  },

  // 设置选择状态
  setSelected: function setSelected() {
    var selected = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    this.graySprite.node.active = selected;
  },

  isSelected: function isSelected() {
    return this.graySprite.node.active;
  },

  _cardFullName: function _cardFullName(cardShortName) {
    var cardName = cardShortName;
    if (!cardName.startsWith("public-pic-card-poker")) {
      cardName = "public-pic-card-poker-" + cardName;
    }

    return cardName;
  },

  _loadCardFrame: function _loadCardFrame(cardName, callback) {
    cc.assert(callback);

    cc.loader.loadRes("images/pokerList/pockList", cc.SpriteAtlas, (function (err, atlas) {
      if (err) {
        cc.error(err);
        return;
      }

      cardName = this._cardFullName(cardName);
      var frame = atlas.getSpriteFrame(cardName);
      callback(frame);
    }).bind(this));
  }
});

cc._RFpop();
},{"KQCard":"KQCard"}],"CardTypeCombine":[function(require,module,exports){
"use strict";
cc._RFpush(module, '45c41vwAhFNYYSXDvaKpEP0', 'CardTypeCombine');
// scripts\CardTypeCombine.js

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var KQCard = require('KQCard');
var KQCardFindTypeExtension = require('KQCardFindTypeExtension');
var AudioManager = require('AudioManager');
var play = require('play');
var KQCardScoretsHelper = require('KQCardScoretsHelper');
// 牌类型 component
//
cc.Class({
    'extends': cc.Component,
    statics: {
        instances: null
    },
    properties: {
        cardsLayout: cc.Layout,
        btnDuiZi: cc.Button,
        btnLiangDui: cc.Button,
        btnSanTiao: cc.Button,
        btnShunZi: cc.Button,
        btnTongHua: cc.Button,
        btnHuLu: cc.Button,
        btnTieZhi: cc.Button,
        btnTongHuaShun: cc.Button,
        btnWuTong: cc.Button,
        typeButtonsNode: cc.Node,
        btnDeleteTouDao: cc.Button, // 头道
        btnDeleteZhongDao: cc.Button, // 中道
        btnDeleteWeiDao: cc.Button, // 尾道
        btnCancelAll: cc.Button, // 全部取消
        btnDone: cc.Button, // 确定出牌
        timeNode: cc.Node,
        labelTime: cc.Label,
        layoutTouDao: cc.Layout,
        layoutZhongDao: cc.Layout,
        layoutWeiDao: cc.Layout,

        cardPrefab: cc.Prefab,
        cardTypePrefab: cc.Prefab,
        gongXiNi: cc.Node,
        teShuPai: cc.Node,
        /*#####*/
        wuTong_img: cc.SpriteFrame,
        tongHuaShun_img: cc.SpriteFrame,
        BtnClickGongXiNiComfirm: false, //用于检查用户是否点击了恭喜你页面的确定按钮
        cardsLayoutSortColor: false,
        /*#####*/

        _cardOffsetY: null,

        _kqCardModes: [],
        _allCardModes: [],
        _findCardTypeObject: null, // 用来记录找到的牌型对象

        _finishSelectCardsCallback: null
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.BtnClickGongXiNiComfirm = false;
        this.cardsLayoutSortColor = false;
        this._cardOffsetY = 0;
        this._registerTouchEvents();
        this._registerDaosLayoutClickEvent();
        this.reset();
    },

    /*#####点击空白地方将牌收回去*/
    onClickCardTypeCombineNode: function onClickCardTypeCombineNode() {
        this._resetCardsPositionY();
    },

    _hideDeleteButtons: function _hideDeleteButtons() {
        this.btnDeleteTouDao.node.active = false;
        this.btnDeleteZhongDao.node.active = false;
        this.btnDeleteWeiDao.node.active = false;
    },

    // 重置，回到最初始有状态
    reset: function reset() {
        this._hideDeleteButtons();
        this.clearCards();
        this.timeStop();
        this._typeButtons().forEach(function (button) {
            button.interactable = false;
        });
        this._allCardModes = [];
    },

    cardsLayoutSort: function cardsLayoutSort(e) {
        cc.log(cc.maPai);
        var nodeAyy = e.target.children;
        if (nodeAyy[0].active == true) {
            //按大小
            this.cardsLayoutSortColor = true;
            nodeAyy[0].active = false;
            nodeAyy[1].active = true;
            this._resetCardsPositionX();
            return;
        } else if (nodeAyy[1].active == true) {
            //按花色
            this.cardsLayoutSortColor = false;
            nodeAyy[0].active = true;
            nodeAyy[1].active = false;
            this._resetCardsPositionX();
        }
        //this.cardsLayoutSortColor = nodeAyy[1].active == false;
        //this.cardsLayoutSortColor == true
    },

    addCards: function addCards(cardNames) {
        cc.assert(cardNames);
        this._resetCardsPositionY();
        //cardNames.sort(function(a1,a2){
        //    return a1.split('_')[0] - a2.split('_')[0];
        //})
        cardNames.forEach((function (card, index) {
            this.addCard(card, false, index);
        }).bind(this));
        //this.cardsLayoutSort();
        this._resetCardsPositionX();
        this._reloadKQCardModesInner();
        this._resetTypeButtonEnablesWithModels(this._kqCardModes);
    },

    addCard: function addCard(cardName) {
        var autoChangePositionX = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
        var index = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

        cc.assert(cardName.length > 0);

        var cardPrefab = cc.instantiate(this.cardPrefab);
        cardPrefab.name = cardName;
        if (cc.maPai) {
            var cardMaPai = '3_' + cc.maPai;
            if (cardName == cardMaPai) {
                cardPrefab.color = new cc.Color(226, 145, 145);
            }
        }
        cardPrefab.getComponent('CardPrefab').setCard(cardName, index);
        this.cardsLayout.node.addChild(cardPrefab);
        cardPrefab.setPositionY(this._cardOffsetY);

        if (autoChangePositionX) {
            this._resetCardsPositionX();
        }
        //let newCard = new KQCard(cardName,null,index);
        //let originCard = this._allCardModes.find(function(card) {
        //    return card.isEqual(newCard);
        //});
        //if (originCard == null && !autoChangePositionX) {
        //    this._allCardModes.push(newCard);
        //}
    },

    addCardModes: function addCardModes(cardNames) {
        cc.assert(cardNames.length > 0);
        this._allCardModes = [];
        cardNames.forEach((function (cardName, index) {
            var newCard = new KQCard(cardName, null, index);
            this._allCardModes.push(newCard);
        }).bind(this));
    },

    reloadCards: function reloadCards(cardNames) {
        //cardNames=['1_1', '2_1', '3_11', '1_12', '2_2', '3_2', '4_11', '4_12', '3_13', '2_5', '1_13', '4_3', '1_3'];
        // cardNames=['1_1', '2_1', '3_11', '1_12', '2_2', '3_2', '4_11', '4_12', '3_13', '2_5', '1_13', '4_3', '1_3'];
        //三度同花
        // cardNames=['2_13', '2_5', '2_7', '3_1', '3_2', '3_4', '3_3', '3_13', '1_12', '1_6', '1_1', '1_4', '1_5'];
        //三同花顺
        //  cardNames=['2_1', '2_2', '2_3', '2_4', '2_5', '3_6', '3_7', '3_8', '3_9', '3_10', '4_1', '4_2', '4_3'];
        //一条龙
        // cardNames=['2_1', '2_2', '2_3', '2_4', '2_5', '3_6', '3_7', '3_8', '3_9', '3_10', '1_11', '1_12', '1_13'];
        //三顺子
        //cardNames=['4_1', '3_2', '4_3', '1_7', '4_5', '4_6', '3_9', '4_8', '3_1', '1_13', '4_12', '4_11', '2_10'];
        // cardNames=['3_5', '3_4', '4_3', '1_2', '3_1', '4_9', '3_9', '4_8', '3_10', '1_13', '4_12', '4_11', '2_10'];
        // cardNames=['3_5', '3_4', '4_3', '1_2', '3_1', '4_5', '3_6', '4_8', '3_6', '1_13', '4_12', '4_11', '2_7'];
        //cardNames=['3_4', '3_4', '4_6', '2_20', '1_20', '1_20', '3_6', '4_8', '3_6', '1_8', '4_12', '4_11', '2_20'];
        //三丰天下
        //cardNames=['1_1', '2_1', '3_1', '1_2', '2_2', '3_2', '4_1', '4_2', '3_3', '2_3', '1_3', '4_3', '1_13'];
        //4丰天下
        // cardNames=['1_1', '2_1', '3_1', '1_4', '2_4', '3_2', '4_2', '1_2', '3_4', '2_3', '1_3', '4_3', '1_2'];
        //六岁半
        // cardNames=['1_1', '2_1', '3_11', '1_12', '2_2', '3_2', '4_11', '4_12', '3_13', '2_5', '1_13', '4_3', '1_3'];
        //cardNames=['1_9', '2_11', '3_8', '1_12', '2_2', '3_2', '1_13', '2_5', '3_5','1_4', '2_4', '3_4', '3_10'];
        // cardNames=['4_9', '2_3', '3_4', '3_6', '2_1', '2_4', '2_2', '2_5', '2_13','2_8', '2_10', '2_11', '2_12'];
        //   cardNames=['4_2', '2_3', '3_4', '3_5', '2_1', '2_4', '2_2', '2_5', '2_13','2_8', '2_10', '2_11', '2_12'];
        //cardNames=['4_1', '2_1', '1_4', '3_4', '1_6', '2_6', '1_8', '3_8', '2_8','2_12', '1_12', '2_13', '3_13'];
        // cardNames=['4_9', '2_3', '3_4', '3_6', '2_8', '2_9', '2_10', '2_11', '2_13','3_13', '3_12', '2_12', '1_12'];
        // cardNames=['4_9', '2_9', '3_4', '3_6', '1_8', '2_1', '2_5', '2_4', '2_3','3_13', '3_12', '2_2', '1_12'];
        //cardNames=['3_2', '4_2', '2_4', '3_5', '1_5', '3_7', '2_7', '3_10', '2_1','2_13', '2_10', '2_12', '2_11'];
        //cardNames=['4_2', '4_3', '4_4', '4_5', '4_5', '4_6', '4_12', '4_13', '2_12','3_12', '2_8', '3_8', '2_11'];
        //cardNames=['4_3', '1_3', '4_5', '4_5', '3_5', '2_5', '1_20', '4_11', '3_12','4_12', '4_8', '4_1', '1_12'];
        //cardNames=['4_3', '1_3', '4_5', '4_5', '2_20', '1_20', '1_20', '4_11', '3_12','4_12', '4_8', '4_1', '1_12'];
        //cardNames=['4_10', '4_11', '4_13', '4_5', '2_20', '1_20', '1_20', '4_12', '3_12','4_12', '4_8', '2_12', '1_12'];
        this.clearCards();
        this._kqCardModes = [];
        this.addCards(cardNames);
    },

    clearCards: function clearCards() {
        this.cardsLayout.node.removeAllChildren();
        this.layoutTouDao.node.removeAllChildren();
        this.layoutZhongDao.node.removeAllChildren();
        this.layoutWeiDao.node.removeAllChildren();
    },

    removeCard: function removeCard(cardName) {
        if (!cardName.length) {
            return;
        }

        this.cardsLayout.node.getChildByName(cardName).removeFromParent();
    },

    setFinishSelectCardsCallback: function setFinishSelectCardsCallback(callback) {
        this._finishSelectCardsCallback = callback;
        this.node.active = false;
    },

    _reloadKQCardModesInner: function _reloadKQCardModesInner() {
        this._kqCardModes = this.cardsLayout.node.children.map(function (cardPrefabNode) {
            var cardPrefab = cardPrefabNode.getComponent('CardPrefab');
            return cardPrefab.cardMode();
        }).sort(KQCard.sort);
        this._findCardTypeObject = null;
    },

    _typeButtons: function _typeButtons() {
        return [this.btnDuiZi, this.btnLiangDui, this.btnSanTiao, this.btnShunZi, this.btnTongHua, this.btnHuLu, this.btnTieZhi, this.btnTongHuaShun];
    },

    /*#####*/
    //this.btnWuTong,
    /*#####*/
    _resetTypeButtonEnablesWithModels: function _resetTypeButtonEnablesWithModels(cardModes) {
        /*cardModes.length == 13*/
        cardModes = cardModes || this._kqCardModes;

        /*#####初始化牌*/
        var ButtonsLayoutChilds = this.typeButtonsNode.children;
        for (var i = 0; i < ButtonsLayoutChilds.length; i++) {
            ButtonsLayoutChilds[i].interactable = false;
        }

        this.btnDuiZi.interactable = KQCard.containDuiZi(cardModes);
        this.btnLiangDui.interactable = KQCard.containLiaDui(cardModes);
        this.btnSanTiao.interactable = KQCard.containSanTiao(cardModes);
        this.btnShunZi.interactable = KQCard.containShunZi(cardModes);
        this.btnTongHua.interactable = KQCard.containTongHua(cardModes);
        this.btnHuLu.interactable = KQCard.containHuLu(cardModes);
        this.btnTieZhi.interactable = KQCard.containTieZhi(cardModes);
        this.btnTongHuaShun.interactable = KQCard.containTongHuaShun(cardModes);
        //this.btnWuTong.interactable = KQCard.containWuTong(cardModes);
        //KQCard.isTeShuPai(cardModes)
        //let typeName = KQCard.cardsTypeName(cardModes);
        //KQCard.isLiuDuiBan(cardModes);
        //cc.log(typeName); cc.log('特殊牌name');
        //alert(this.btnShunZi.interactable)
        /*#####如果有多一色，就是设置无同按钮的可交互性*/
        //if(cc.duoYiSe == 0) {
        //    this.wuTongNode = this.typeButtonsNode.getChildByName("btnWuTong");
        //    this.btnWuTong = this.wuTongNode.getComponent(cc.Button);
        //    this.btnWuTong.interactable = KQCard.containWuTong(cardModes);
        //}
        /*#####*/

        this._autoActiveTypeButtons();

        /*#####设置按钮可交互和不可交互时的透明度*/
        for (var i = 0; i < ButtonsLayoutChilds.length; i++) {
            if (ButtonsLayoutChilds[i].getComponent(cc.Button).interactable) {
                ButtonsLayoutChilds[i].opacity = 255;
            } else {
                ButtonsLayoutChilds[i].opacity = 125;
            }
        }
    },

    // 将找到了牌类型的牌突出出来
    _stickOutFindCardType: function _stickOutFindCardType(title, findMethods) {

        // 先根据牌类型找出所有的索引集合
        var findedIndexsArray = null;
        this._findCardTypeObject = this._findCardTypeObject || {};
        if (this._findCardTypeObject.title != title) {
            findedIndexsArray = (findMethods() || []).reverse();

            for (var i = 0; i < findedIndexsArray.length - 1; i++) {
                //删除同类型牌
                var index = findedIndexsArray[i];
                /*if(title == 'liangDui'){
                 let jStringspoint = index.map(function(indexs){
                 return this._kqCardModes[indexs].point;
                 }.bind(this));
                 var isBreak = false;
                 var repNum = jStringspoint.reduce(function(p,n){
                 if(!p[n]){
                 p[n] = 1;
                 }else{
                 p[n] += 1
                 }
                 return p
                 },{});
                 for(var y in repNum){
                 if(repNum[y] >= 3){
                 isBreak = true;
                 }
                 }
                 if(isBreak){
                 cc.log(repNum)
                 cc.log(findedIndexsArray)
                 cc.log(i)
                 cc.log('--------291')
                 findedIndexsArray.splice(i,1);
                 continue;
                 }
                 }*/
                var iString = '';
                for (var j = i + 1; j < findedIndexsArray.length; j++) {
                    var s = findedIndexsArray[j];
                    var jString = '';

                    var iStrings = s.map((function (index) {
                        var cardModel = this._kqCardModes[index];
                        return cardModel.cardName();
                    }).bind(this));

                    var jStrings = index.map((function (indexs) {
                        var cardModel = this._kqCardModes[indexs];
                        return cardModel.cardName();
                    }).bind(this));

                    for (var r = 0; r < index.length; r++) {
                        jString = jString + iStrings[r];
                        iString = iString + jStrings[r];
                    }

                    if (jString == iString) {
                        findedIndexsArray.splice(i, 1);
                        break;
                    }
                }
            }

            this._findCardTypeObject = {
                title: title,
                indexsArray: findedIndexsArray,
                //index: title=="duiZi"?findedIndexsArray.length-1:0
                index: 0
            };
        }

        findedIndexsArray = this._findCardTypeObject.indexsArray;
        if (!findedIndexsArray || findedIndexsArray.length == 0) {
            return;
        }
        // 将已有的突出的牌的位置重置回初始位置
        this._resetCardsPositionY();

        // 计算出要突出的牌数组
        var index = this._findCardTypeObject.index;
        var indexs = findedIndexsArray[index];

        var selectedCardNames = indexs.map((function (index) {
            var cardModel = this._kqCardModes[index];
            return cardModel.cardName();
        }).bind(this));

        //cc.log(selectedCardNames)
        var cardNodes = this.cardsLayout.node.children.filter(function (cardNode) {
            var cardPrefab = cardNode.getComponent('CardPrefab');
            if (selectedCardNames.includes(cardPrefab.cardName())) {
                var nameIndex = selectedCardNames.indexOf(cardPrefab.cardName());
                selectedCardNames.splice(nameIndex, 1);
                return true;
            }
            return false;
        });
        //cc.log(cardNodes)
        //cc.log(index)
        //cc.log(findedIndexsArray)
        //cc.log('----------248')
        // 突出计算出来的牌数组
        this._changeCardPrefabsY(cardNodes);
        // 保存好，用于再次点击了突出下一组牌
        index = (index + 1) % findedIndexsArray.length;
        this._findCardTypeObject.index = index;
    },

    clickDuiZi: function clickDuiZi() {
        this._stickOutFindCardType("duiZi", (function () {
            return KQCard.findDuiZi(this._kqCardModes);
        }).bind(this));
    },

    clickLiangDui: function clickLiangDui() {
        this._stickOutFindCardType("liangDui", (function () {
            return KQCard.findLiaDui(this._kqCardModes);
        }).bind(this));
    },

    clickSanTiao: function clickSanTiao() {
        this._stickOutFindCardType("sanTiao", (function () {
            return KQCard.findSanTiao(this._kqCardModes);
        }).bind(this));
    },

    clickShunZi: function clickShunZi() {
        this._stickOutFindCardType("shunZi", (function () {
            return KQCard.findShunZi(this._kqCardModes);
        }).bind(this));
    },

    clickTongHua: function clickTongHua() {
        this._stickOutFindCardType("tongHua", (function () {
            return KQCard.findTongHua(this._kqCardModes);
        }).bind(this));
    },

    clickHuLu: function clickHuLu() {
        this._stickOutFindCardType("huLu", (function () {
            return KQCard.findHuLu(this._kqCardModes);
        }).bind(this));
    },

    clickTieZhi: function clickTieZhi() {
        this._stickOutFindCardType("tieZhi", (function () {
            return KQCard.findTieZhi(this._kqCardModes);
        }).bind(this));
    },

    /*#####*/
    clickWuTong: function clickWuTong() {
        //console.log("点击了五同按钮");
        this._stickOutFindCardType("wuTong", (function () {
            return KQCard.findWuTong(this._kqCardModes);
        }).bind(this));
    },
    /*#####*/

    clickTongHuaShun: function clickTongHuaShun() {
        this._stickOutFindCardType("tongHuaShun", (function () {
            return KQCard.findTongHuaShun(this._kqCardModes);
        }).bind(this));
    },

    clickCancelAll: function clickCancelAll() {
        this.clickDeleteTouDao();
        this.clickDeleteZhongDao();
        this.clickDeleteWeiDao();
    },

    /*点击完成按钮*/
    clickDone: function clickDone() {
        var touCardModels = this._taoDaoCardModes();
        var zhongCardModes = this._zhongDaoCardModes();
        var weiCardModes = this._weiDaoCardModes();
        this._didSelectedCards(touCardModels, zhongCardModes, weiCardModes);
    },

    /*点击恭喜你页面的确定按钮*/
    onBtnGongXiNiComfirmClick: function onBtnGongXiNiComfirmClick() {
        //记录玩家点击了确定按钮：
        this.BtnClickGongXiNiComfirm = true;
        //先要得到玩家的13张牌 teShuPaiCards[{'number':1,'suit':'s'},{...},{...}]
        var teShuPaiCards = cc.teShuPaiCards;
        console.log(teShuPaiCards);
        var teShuPaiCardsServerInfo = this._convertCardsToServerModel2(teShuPaiCards);
        var result = [teShuPaiCardsServerInfo];
        console.log("点击了恭喜你页面的确定按钮");
        console.log(teShuPaiCardsServerInfo);
        if (this._finishSelectCardsCallback) {
            this._finishSelectCardsCallback(result);
        }
    },

    _didSelectedCards: function _didSelectedCards(touCards, zhongCards, weiCards) {
        touCards = touCards || [];
        zhongCards = zhongCards || [];
        weiCards = weiCards || [];
        var touServerInfo = this._convertCardsToServerModel(touCards);
        var zhongServerInfo = this._convertCardsToServerModel(zhongCards);
        var weiServerInfo = this._convertCardsToServerModel(weiCards);
        var result = [touServerInfo, zhongServerInfo, weiServerInfo];

        if (this._finishSelectCardsCallback) {
            this._finishSelectCardsCallback(result);
        }
    },

    clickDeleteTouDao: function clickDeleteTouDao() {
        this._deleteDaoCardsOfLayout(this.layoutTouDao.node);
    },

    clickDeleteZhongDao: function clickDeleteZhongDao() {
        this._deleteDaoCardsOfLayout(this.layoutZhongDao.node);
    },

    clickDeleteWeiDao: function clickDeleteWeiDao() {
        this._deleteDaoCardsOfLayout(this.layoutWeiDao.node);
    },

    // 计时器事件
    timeStart: function timeStart(duration) {
        cc.assert(duration > 0);
        this.timeStop();
        this.timeNode.active = true;

        this._timeRemainDuration = duration;
        this.labelTime.string = String(duration);
        this.schedule(this._timeMethod, 1, duration);
    },

    timeStop: function timeStop() {
        this.unschedule(this._timeMethod);
        this.timeNode.active = false;
    },

    _timeMethod: function _timeMethod() {
        this._timeRemainDuration = this._timeRemainDuration - 1;

        var remain = Math.max(this._timeRemainDuration, 0);
        this.labelTime.string = remain < 10 && remain > 0 ? '0' + remain : remain;

        if (this._timeRemainDuration <= 0) {
            this.timeStop();
            this._timeOutAutoSelectCards();
            return;
        }
    },

    // 超时后，自动选牌
    _timeOutAutoSelectCards: function _timeOutAutoSelectCards() {
        /**
         * 隐藏恭喜你
         */
        play.gongXiNiShow(false);
        if (typeof cc.teShuPaiCards != "undefined" && cc.teShuPaiCards != null && cc.teShuPaiCards != '') {
            this.onBtnGongXiNiComfirmClick();
            return;
        }

        var _cacleAutoSelectedCards2 = this._cacleAutoSelectedCards();

        var _cacleAutoSelectedCards22 = _slicedToArray(_cacleAutoSelectedCards2, 3);

        var touCardModels = _cacleAutoSelectedCards22[0];
        var zhongCardModes = _cacleAutoSelectedCards22[1];
        var weiCardModes = _cacleAutoSelectedCards22[2];

        if (touCardModels == null || zhongCardModes == null || weiCardModes == null) {
            touCardModels = this._allCardModes.slice(-3);
            zhongCardModes = this._allCardModes.slice(5, 10);
            weiCardModes = this._allCardModes.slice(0, 5);
        }

        cc.log(touCardModels);
        cc.log(zhongCardModes);
        cc.log(weiCardModes);
        cc.log(this._allCardModes);
        cc.log("自动选牌 touCardModels zhongCardModes weiCardModes：");
        this._didSelectedCards(touCardModels, zhongCardModes, weiCardModes);
    },

    _cacleAutoSelectedCards: function _cacleAutoSelectedCards() {
        var cards = this._allCardModes.filter(function (i) {
            return i;
        });
        var resultCards = [];
        for (var i = 1; i < 3; i++) {
            var cardss = KQCard.autoSelectCards(cards, 5);
            cards = cards.kq_excludes(cardss);
            resultCards.push(cardss);
        }
        resultCards.push(cards);
        var touScore = KQCard.scoreOfCards(resultCards[2]);
        var zhongScore = KQCard.scoreOfCards(resultCards[1]);
        var weiScore = KQCard.scoreOfCards(resultCards[0]);
        cc.log(resultCards);
        cc.log(this._allCardModes);
        cc.log("牌分数自动选牌：", touScore, zhongScore, weiScore);
        //let weiCardModes = KQCard.autoSelectCards(cards, 5);
        //cards = cards.kq_excludes(weiCardModes);
        //
        //let zhongCardModes = KQCard.autoSelectCards(cards, 5);
        //
        //let touCardModes = cards.kq_excludes(zhongCardModes);
        //if (touCardModes.length == 3 && zhongCardModes.length == 5 && weiCardModes.length == 5) {
        //    return [touCardModes, zhongCardModes, weiCardModes];
        //}
        if (resultCards[2].length == 3 && resultCards[1].length == 5 && resultCards[0].length == 5) {
            return [resultCards[2], resultCards[1], resultCards[0]];
        }

        return [];
    },

    _convertCardsToServerModel: function _convertCardsToServerModel(cards) {
        var result = {};
        result.type = KQCard.cardsType(cards);
        result.value = KQCard.scoreOfCards(cards);
        if (result.type >= KQCard.TYPE.SanTaoHua && cc.moshi != 1) {
            // 特殊牌
            result.isContainExtra = this._isContainExtraCardsType(result.type, cards);
            //result.isContainExtra = true;
            result.cards = cards;
        } else {
            result.cards = KQCard.convertToServerCards(cards);
        }
        return result;
    },

    /*#####*/
    _convertCardsToServerModel2: function _convertCardsToServerModel2(cards) {
        var result = {};
        result.type = KQCard.cardsType(cards);
        result.value = KQCard.scoreOfCards2(cards);
        if (result.type >= KQCard.TYPE.SanTaoHua && cc.moshi != 1) {
            // 特殊牌
            result.isContainExtra = true;
            result.cards = cards;
        }

        return result;
    },
    /*#####*/
    // 特殊牌里是否还含有特殊牌
    // 包含的情况有：
    // 三桃花 可能含有同花顺
    // 三顺子 可能含有同花顺
    // 六对半 可能含有铁支
    _isContainExtraCardsType: function _isContainExtraCardsType(type, cards) {
        if (type == KQCard.TYPE.SanTaoHua) {
            return KQCard.containTongHuaShun(cards);
        } else if (type == KQCard.TYPE.SanShunZi) {
            return KQCard.containTongHuaShun(cards);
        } else if (type == KQCard.TYPE.LiuDuiBan) {
            return KQCard.containTieZhi(cards);
        }
        return false;
    },

    // 触摸事件
    _registerTouchEvents: function _registerTouchEvents() {
        this.cardsLayout.node.on(cc.Node.EventType.TOUCH_START, this._touchCardLayout.bind(this));
        this.cardsLayout.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchCardLayout.bind(this));
        this.cardsLayout.node.on(cc.Node.EventType.TOUCH_END, this._touchCardLayoutEnd.bind(this));
        this.cardsLayout.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchCardLayoutEnd.bind(this));
    },

    _touchCardLayout: function _touchCardLayout(event) {
        event.bubbles = true;
        var location = event.getLocation();
        var cardPrefab = this._cardPrefabInCardLayoutWithLocation(location);
        if (cardPrefab) {
            cardPrefab.getComponent('CardPrefab').setSelected(true);
            event.stopPropagation();
        }
    },

    _touchCardLayoutEnd: function _touchCardLayoutEnd(event) {
        this._changeSelectedCardPrefabsY();
        this._diseclectCardPrefabs();
    },

    _cardPrefabInCardLayoutWithLocation: function _cardPrefabInCardLayoutWithLocation(location) {
        location = this.cardsLayout.node.convertToNodeSpaceAR(location);
        var cardNodes = this.cardsLayout.node.children.sort(function (cardNode1, cardNode2) {
            var rect1 = cardNode1.getBoundingBox();
            var rect2 = cardNode2.getBoundingBox();
            return rect2.x - rect1.x;
        });
        for (var index in cardNodes) {
            var cardNode = cardNodes[index];

            var rect = cardNode.getBoundingBox();

            if (cc.rectContainsPoint(rect, location)) {
                return cardNode;
            }
        }

        return null;
    },

    _changeSelectedCardPrefabsY: function _changeSelectedCardPrefabsY() {
        var cardNodes = this._selectedCardPrefabs();
        this._changeCardPrefabsY(cardNodes);

        AudioManager.instance.playPokerClick();
    },

    _changeCardPrefabsY: function _changeCardPrefabsY(cardNodes) {
        cardNodes.forEach((function (cardNode) {
            var y = cardNode.getPositionY();
            if (y == this._cardOffsetY) {
                cardNode.setPositionY(this._cardOffsetY + 55);
            } else {
                cardNode.setPositionY(this._cardOffsetY);
            }
        }).bind(this));
    },

    _selectedCardPrefabs: function _selectedCardPrefabs() {
        var includeStickOut = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

        var cardNodes = this.cardsLayout.node.children || [];
        return cardNodes.filter(function (cardNode) {
            var cardPrefab = cardNode.getComponent('CardPrefab');
            var isSelected = cardPrefab.isSelected();
            if (!isSelected && includeStickOut) {
                isSelected = cardNode.getPositionY() > 10;
            }

            return isSelected;
        });
    },

    _diseclectCardPrefabs: function _diseclectCardPrefabs() {
        var cardNodes = this.cardsLayout.node.children;
        cardNodes.forEach(function (node) {
            node.getComponent('CardPrefab').setSelected(false);
        });
    },

    // 重置 cards 的 X
    _resetCardsPositionX: function _resetCardsPositionX() {
        //let interval = 98;
        var interval = 78;
        var cardNodes = this.cardsLayout.node.children || [];
        var length = cardNodes.length;
        if (length == 0) {
            return;
        }

        var middleIndex = length / 2;
        var cardWidth = 154;

        //this.cardsLayoutSort();
        if (this.cardsLayoutSortColor == true) {
            this.cardsLayout.node.children.sort(function (n1, n2) {
                var component1 = n1.getComponent('CardPrefab');
                var component2 = n2.getComponent('CardPrefab');
                return component2.cardMode().color - component1.cardMode().color;
            });
        } else {
            this.cardsLayout.node.children.sort(function (n1, n2) {
                var component1 = n1.getComponent('CardPrefab');
                var component2 = n2.getComponent('CardPrefab');
                return component1.cardMode().sort(component2.cardMode());
            });
        }
        //cardNodes.sort(function (n1, n2) {
        //    let component1 = n1.getComponent('CardPrefab');
        //    let component2 = n2.getComponent('CardPrefab');
        //
        //    return component1.cardMode().sort(component2.cardMode());
        //});

        cardNodes.forEach(function (cardNode, index) {
            cardNode.zIndex = index;
            var x = (index - middleIndex) * interval + cardWidth / 3;
            cardNode.setPositionX(x);
        });
    },

    // 重置 cards 的 X为0
    resetCardsPositionX1: function resetCardsPositionX1() {
        var cardNodes = this.cardsLayout.node.children || [];
        var length = cardNodes.length;
        if (length == 0) {
            return;
        }
        cardNodes.forEach(function (cardNode) {
            cardNode.setPositionY(0);
        });
    },

    _resetCardsPositionY: function _resetCardsPositionY() {
        var cardNodes = this.cardsLayout.node.children || [];
        cardNodes.forEach((function (cardNode) {
            cardNode.setPositionY(this._cardOffsetY);
        }).bind(this));
    },

    // 头、中、尾道 layout 的点击事件
    _registerDaosLayoutClickEvent: function _registerDaosLayoutClickEvent() {
        var layoutTouDao = this.layoutTouDao;
        var layoutZhongDao = this.layoutZhongDao;
        var layoutWeiDao = this.layoutWeiDao;
        var self = this;
        //头道点击
        this.layoutTouDao.node.on(cc.Node.EventType.TOUCH_END, (function (event) {
            this._clickTouDaoLayout(event);
            /*#####点击第二道剩下的牌自动选上去##### begin*/
            //如果剩下的牌小于5张
            if (this.cardsLayout.node.children.length <= 5) {
                //如果尾道填满，把它放入中道
                if (layoutZhongDao.node.children.length < 5 && layoutWeiDao.node.children.length == 5) {
                    // 突出计算出来的牌数组
                    var cardNodes = this.cardsLayout.node.children;
                    self._changeCardPrefabsY(cardNodes);
                    self._addDaoCardToLayout(layoutZhongDao.node);
                }
                //如果中道填满，把它放入尾道
                else if (layoutWeiDao.node.children.length < 5 && layoutZhongDao.node.children.length == 5) {
                        var cardNodes = this.cardsLayout.node.children;
                        self._changeCardPrefabsY(cardNodes);
                        self._addDaoCardToLayout(layoutWeiDao.node);
                    }
            }
            /*#####end*/
        }).bind(this));
        //中道点击
        this.layoutZhongDao.node.on(cc.Node.EventType.TOUCH_END, (function (event) {
            this._clickZhongDaoLayout(event);
            /*#####begin*/
            //中道必须填满才来执行
            if (layoutZhongDao.node.children.length == 5) {
                //如果剩下的牌小于等于5张
                if (this.cardsLayout.node.children.length <= 5) {
                    //如果尾道填满，把它放入头道
                    if (layoutTouDao.node.children.length < 3 && layoutWeiDao.node.children.length == 5) {
                        // 突出计算出来的牌数组
                        var cardNodes = this.cardsLayout.node.children;
                        self._changeCardPrefabsY(cardNodes);
                        self._addDaoCardToLayout(layoutTouDao.node);
                    }
                    //如果头道填满，把它放入尾道
                    else if (layoutWeiDao.node.children.length < 5 && layoutTouDao.node.children.length == 3) {
                            var cardNodes = this.cardsLayout.node.children;
                            self._changeCardPrefabsY(cardNodes);
                            self._addDaoCardToLayout(layoutWeiDao.node);
                        }
                }
            }

            /*#####end*/
        }).bind(this));
        //尾道点击
        this.layoutWeiDao.node.on(cc.Node.EventType.TOUCH_END, (function (event) {
            this._clickWeiDaoLayout(event);
            /*#####begin*/
            //尾道必须填满才来执行
            if (layoutWeiDao.node.children.length == 5) {
                //如果剩下的牌小于等于5张
                if (this.cardsLayout.node.children.length <= 5) {
                    //如果中道填满，把它放入头道
                    if (layoutTouDao.node.children.length < 3 && layoutZhongDao.node.children.length == 5) {
                        // 突出计算出来的牌数组
                        var cardNodes = this.cardsLayout.node.children;
                        self._changeCardPrefabsY(cardNodes);
                        self._addDaoCardToLayout(layoutTouDao.node);
                    }
                    //如果头道填满，把它放入中道
                    else if (layoutZhongDao.node.children.length < 5 && layoutTouDao.node.children.length == 3) {
                            var cardNodes = this.cardsLayout.node.children;
                            self._changeCardPrefabsY(cardNodes);
                            self._addDaoCardToLayout(layoutZhongDao.node);
                        }
                }
            }

            /*#####end*/
        }).bind(this));
    },

    _clickTouDaoLayout: function _clickTouDaoLayout(event) {
        var clickCard = this._daoCardNodeInLayoutWithEvent(this.layoutTouDao.node, event);
        if (clickCard) {
            this._deleteDaoCard(clickCard, true);
            return;
        }
        this._addDaoCardToLayout(this.layoutTouDao.node, 3);
    },

    _clickZhongDaoLayout: function _clickZhongDaoLayout(event) {
        var clickCard = this._daoCardNodeInLayoutWithEvent(this.layoutZhongDao.node, event);
        if (clickCard) {
            this._deleteDaoCard(clickCard, true);
            return;
        }

        this._addDaoCardToLayout(this.layoutZhongDao.node);
    },

    _clickWeiDaoLayout: function _clickWeiDaoLayout(event) {
        var clickCard = this._daoCardNodeInLayoutWithEvent(this.layoutWeiDao.node, event);
        if (clickCard) {
            this._deleteDaoCard(clickCard, true);
            return;
        }
        this._addDaoCardToLayout(this.layoutWeiDao.node);
    },

    _daoCardNodeInLayoutWithEvent: function _daoCardNodeInLayoutWithEvent(node, event) {
        var cardNodes = node.children || [];
        var location = event.getLocation();
        location = node.convertToNodeSpaceAR(location);
        for (var index in cardNodes) {
            var cardNode = cardNodes[index];
            var rect = cardNode.getBoundingBox();
            if (cc.rectContainsPoint(rect, location)) {
                return cardNode;
            }
        }

        return null;
    },

    _addDaoCardToLayout: function _addDaoCardToLayout(node) {
        var maxNumberCard = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

        var cardNodes = node.children || [];
        if (cardNodes.length >= 5) {
            return;
        }

        var remainCount = maxNumberCard - cardNodes.length;
        var selectedCards = this._selectedCardPrefabs(true) || [];
        if (selectedCards.length == 0) {
            return;
        }

        if (selectedCards.length > remainCount) {
            selectedCards = selectedCards.slice(0, remainCount);
        }

        var selectedCardNames = selectedCards.map(function (cardPrefab) {
            return cardPrefab.getComponent('CardPrefab').cardName();
        });

        cardNodes.forEach(function (cardTypeNode) {
            selectedCardNames.push(cardTypeNode.getComponent('CardTypeSprite').cardName());
        });

        var cardModes = selectedCardNames.map(function (cardName, index) {
            return new KQCard(cardName, null, index);
        }).sort(function (c1, c2) {
            return KQCard.sort(c1, c2, false);
        });

        var touCardModes = node == this.layoutTouDao.node ? cardModes : this._taoDaoCardModes();
        var zhongCardModes = node == this.layoutZhongDao.node ? cardModes : this._zhongDaoCardModes();
        var weiCardModes = node == this.layoutWeiDao.node ? cardModes : this._weiDaoCardModes();
        if (!this._isValidCardModes(touCardModes, zhongCardModes, weiCardModes)) {
            return;
        }

        node.removeAllChildren();

        cardModes.forEach((function (cardMode) {
            var cardName = cardMode.cardName();
            var cardTypeSprite = cc.instantiate(this.cardTypePrefab);
            if (cc.maPai) {
                var cardMaPai = '3_' + cc.maPai;
                if (cardName == cardMaPai) {
                    cardTypeSprite.color = new cc.Color(226, 145, 145);
                }
            }
            cardTypeSprite.getComponent('CardTypeSprite').setCard(cardName);
            node.addChild(cardTypeSprite);
        }).bind(this));

        selectedCards.forEach(function (node) {
            node.removeFromParent();
        });
        this._resetCardsPositionY();
        this._resetCardsPositionX();

        this._autoActiveDeleteDaoButtons();

        this._reloadKQCardModesInner();
        this._resetTypeButtonEnablesWithModels();
    },

    // 删除 头、中或尾道中的某中牌
    _deleteDaoCard: function _deleteDaoCard(cardTypeNode) {
        var reloadTypeButtonEnables = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var cardName = cardTypeNode.getComponent('CardTypeSprite').cardName();
        this.addCard(cardName, true);

        this._resetCardsPositionY();

        cardTypeNode.removeFromParent(true);
        this._autoActiveDeleteDaoButtons();

        if (reloadTypeButtonEnables) {
            this._reloadKQCardModesInner();
            this._resetTypeButtonEnablesWithModels();
        }
    },

    // 删除 头道或中道或尾道上所有的 牌
    _deleteDaoCardsOfLayout: function _deleteDaoCardsOfLayout(daoLayout) {
        var cardNodes = Array.from(daoLayout.children);
        cardNodes.forEach(this._deleteDaoCard.bind(this));

        this._reloadKQCardModesInner();
        this._resetTypeButtonEnablesWithModels();
    },

    // 判断能否使用选择中的牌
    // 即：头道要小于中道、中道要小于尾道
    _isValidCardModes: function _isValidCardModes(touCardModes, zhongCardModes, weiCardModes) {
        touCardModes = touCardModes || [];
        zhongCardModes = zhongCardModes || [];
        weiCardModes = weiCardModes || [];
        cc.log(touCardModes.length, zhongCardModes.length, weiCardModes.length);
        if (touCardModes.length < 3 || zhongCardModes.length < 5 || weiCardModes.length < 5) {
            return true;
        }

        var touScore = KQCard.scoreOfCards(touCardModes);
        var zhongScore = KQCard.scoreOfCards(zhongCardModes);
        var weiScore = KQCard.scoreOfCards(weiCardModes);
        cc.log("牌分数：", touScore, zhongScore, weiScore);
        return touScore < zhongScore && zhongScore <= weiScore;
    },

    // 头道上已有的牌
    _taoDaoCardModes: function _taoDaoCardModes() {
        return this._cardModesOfCardPrefabs(this.layoutTouDao.node.children);
    },

    // 中道上已有的牌
    _zhongDaoCardModes: function _zhongDaoCardModes() {
        return this._cardModesOfCardPrefabs(this.layoutZhongDao.node.children);
    },

    // 尾道上已有的牌
    _weiDaoCardModes: function _weiDaoCardModes() {
        return this._cardModesOfCardPrefabs(this.layoutWeiDao.node.children);
    },

    _cardModesOfCardPrefabs: function _cardModesOfCardPrefabs(cardTypeNodes) {
        if (!cardTypeNodes) {
            return [];
        }

        var cardModes = cardTypeNodes.map(function (node) {
            var component = node.getComponent('CardTypeSprite');
            return component.cardMode();
        });

        return cardModes || [];
    },

    // 自动设置 头、中、尾道的删除按钮的可见性
    _autoActiveDeleteDaoButtons: function _autoActiveDeleteDaoButtons() {
        this._autoActiveDeleteDaoButton(this.layoutTouDao.node, this.btnDeleteTouDao.node);
        this._autoActiveDeleteDaoButton(this.layoutZhongDao.node, this.btnDeleteZhongDao.node);
        this._autoActiveDeleteDaoButton(this.layoutWeiDao.node, this.btnDeleteWeiDao.node);
    },

    _autoActiveDeleteDaoButton: function _autoActiveDeleteDaoButton(layout, button) {
        button.active = layout.children.length > 0;
    },

    // 自动设置 “全部取消”、“确定出牌”、“类型选择”按钮的可见性
    _autoActiveTypeButtons: function _autoActiveTypeButtons() {
        var cardNodes = this.cardsLayout.node.children || [];
        var hasCardUnSelected = cardNodes.length > 0;
        this.btnDone.node.active = !hasCardUnSelected;
        this.btnCancelAll.node.active = this.btnDone.node.active;
        this.typeButtonsNode.active = hasCardUnSelected;
    }

});

cc._RFpop();
},{"AudioManager":"AudioManager","KQCard":"KQCard","KQCardFindTypeExtension":"KQCardFindTypeExtension","KQCardScoretsHelper":"KQCardScoretsHelper","play":"play"}],"CardTypeSprite":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e614c0FMndAtrOMcy8/PcZw', 'CardTypeSprite');
// scripts\CardTypeSprite.js

var KQCard = require('KQCard');
cc.Class({
  'extends': cc.Component,

  properties: {
    _cardName: null,
    _cardModel: null
  },

  // use this for initialization
  onLoad: function onLoad() {},

  setCard: function setCard(cardName) {
    this._cardName = cardName;
    this._cardModel = new KQCard(cardName);
    this._loadCardFrame(cardName, (function (spriteFrame) {
      this.node.getComponent('cc.Sprite').spriteFrame = spriteFrame;
    }).bind(this));
  },

  cardName: function cardName() {
    return this._cardName;
  },

  cardMode: function cardMode() {
    return this._cardModel;
  },

  _cardFullName: function _cardFullName(cardShortName) {
    var cardName = cardShortName;
    if (!cardName.startsWith("public-pic-card-poker")) {
      cardName = "public-pic-card-poker-" + cardName;
    }

    return cardName;
  },

  _loadCardFrame: function _loadCardFrame(cardName, callback) {
    cc.assert(callback);

    cc.loader.loadRes("images/pokerList/pockList", cc.SpriteAtlas, (function (err, atlas) {
      if (err) {
        cc.error(err);
        return;
      }

      cardName = this._cardFullName(cardName);
      var frame = atlas.getSpriteFrame(cardName);
      callback(frame);
    }).bind(this));
  }
});

cc._RFpop();
},{"KQCard":"KQCard"}],"ChatMessage":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'dc8980X2ZVNKrH9BsIsSE4D', 'ChatMessage');
// scripts\Chat\ChatMessage.js

// 用于在游戏过程中，展示用户的聊天消息

var ChatMessage = cc.Class({
  "extends": cc.Component,

  properties: {
    richText: cc.RichText,
    spriteBackground: cc.Sprite
  },

  // use this for initialization
  onLoad: function onLoad() {},

  setString: function setString() {
    var string = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
    var autoHide = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    if (string.length == 0) {
      return;
    }

    this.node.active = true;

    var maxWidth = 300;
    var realStr = ChatMessage.parseString(string);

    // 由于 cc.RichText 在指定 maxWidth 后，该结点的 width 会一直
    // 是 maxWidth 值。而在将 maxWidth 指定为0时，其 contentSize.width 会
    // 是内容的真正所需的宽度
    //
    // 所以这里先将 maxWidth 设为 0，获取其实际内容 width 后再调整
    this.richText.maxWidth = 0;
    this.richText.string = realStr;

    var contentWidth = this.richText.node.getContentSize().width;
    if (contentWidth > maxWidth) {
      this.richText.maxWidth = maxWidth;
      this.richText.string = realStr;
      contentWidth = maxWidth;
    }

    this.node.width = contentWidth + 28;
    this.node.height = this.richText.node.getContentSize().height + 20;

    this.spriteBackground.node.width = this.node.width;
    this.spriteBackground.node.height = this.node.height;

    if (autoHide) {
      this.unscheduleAllCallbacks();
      this.scheduleOnce(this._hideNode.bind(this), 3);
    }
  },

  _hideNode: function _hideNode() {
    this.node.active = false;
  }

});

// 将 <bq10> 改为： <img src='bg10'/>
ChatMessage.parseString = function (str) {
  var result = str.replace(/<bq\d{1,2}>/g, function (match) {
    var bq = match.replace("<", " <img src='").replace(">", "'/> ");
    return bq;
  });

  return result;
}, module.exports = ChatMessage;

cc._RFpop();
},{}],"ChatTextRecord":[function(require,module,exports){
"use strict";
cc._RFpush(module, '88d10U9tIpHNK1entoUH0Ju', 'ChatTextRecord');
// scripts\Pefabs\ChatTextRecord.js

cc.Class({
  'extends': cc.Component,

  properties: {},

  // use this for initialization
  onLoad: function onLoad() {},

  setString: function setString(str) {
    this._richText().string = str;
  },

  _richText: function _richText() {
    return this.node.getComponent('cc.RichText');
  }

});

cc._RFpop();
},{}],"CompareCards":[function(require,module,exports){
"use strict";
cc._RFpush(module, '9aa4aH/Ha1JfaEeY5nFj5P1', 'CompareCards');
// scripts\Pefabs\CompareCards.js

var KQCardResHelper = require('KQCardResHelper');
var AudioManager = require('AudioManager');
var KQCard = require('KQCard');

cc.Class({
    'extends': cc.Component,

    properties: {
        touLayout: cc.Layout,
        zhongLayout: cc.Layout,
        weiLayout: cc.Layout,
        labelTouScore: cc.Label,
        labelTouScoreRight: cc.Label,
        labelZhongScore: cc.Label,
        labelZhongScoreRight: cc.Label,
        labelWeiScore: cc.Label,
        labelWeiScoreRight: cc.Label,

        touScroeTitle: cc.Node, //头道字
        zhongScroeTitle: cc.Node, //中道字
        weiScroeTitle: cc.Node, //尾道字

        scoreStyle: 0, // 0 表示分数在左边  1 表示分数在右边 2不显示分数
        _daoLayouts: null, // 头、中、尾集合
        _labelScores: null,
        _scores: null,

        teShuLayout: cc.Layout,
        labelTeShuPaiTitle: cc.Label,
        pNum: 0, //玩家人数
        teShuTime: 0, //特殊牌出牌顺序
        teShuNum: 0, //特殊牌人数
        // [{
        //     'cards':[{'suit':suit,'number':number},{}],//特殊牌不用传
        //     'type':0,
        //     'value':4,
        //     'isContainExtra':true,//is Special 特殊牌传
        //    },
        //    {
        //     'cards':[{'suit':suit,'number':number},{}],
        //     'type':0,
        //     'value':4
        //   }]
        _user: null, // 用于比牌的数据
        _cardsInfo: null,
        _compareIndex: 0 },

    // 将要比较的 索引  0~2
    // use this for initialization
    onLoad: function onLoad() {
        this._daoLayouts = [this.touLayout, this.zhongLayout, this.weiLayout];
        this._labelScores = [[this.labelTouScore, this.labelTouScoreRight], [this.labelZhongScore, this.labelZhongScoreRight], [this.labelWeiScore, this.labelWeiScoreRight]];
        this.reset();

        if (this._scores) {
            this.setScores(this._scores);
        }
    },

    reset: function reset() {
        this._compareIndex = 0;
        this.teShuLayout.node.active = false;
        this.labelTeShuPaiTitle.string = '';
        this.node.children.forEach(function (node) {
            node.active = false;
        });
    },

    _setCardsToLayout: function _setCardsToLayout(layout, cards) {
        var node = layout.node;
        node.children.forEach(function (spriteNode, index) {
            var sprite = spriteNode.getComponent('cc.Sprite');
            var card = cards[index];
            if (!card) {
                return;
            }
            KQCardResHelper.setCardSpriteFrame(sprite, card.cardName());
            spriteNode.color = new cc.Color(255, 255, 255);
            if (cc.maPai) {
                var cardMaPai = '3_' + cc.maPai;
                if (card.cardName() == cardMaPai) {
                    spriteNode.color = new cc.Color(226, 145, 145);
                }
            }
        });
    },

    setCompareData: function setCompareData(user) {
        this._user = user;
        this._cardsInfo = user.cardInfo;
        var cardsInfo = user.cardInfo;
        var cards = cardsInfo.map(function (cardInfoItem) {
            return KQCard.cardsFromArray(cardInfoItem.cards);
        }).reduce(function (array, subCards) {
            return array.concat(subCards);
        }, []);

        //特殊牌
        this.teShuLayout.node.active = false;
        this.labelTeShuPaiTitle.string = '';
        this.pNum = user.playerNum; //玩家人数
        this.teShuTime = user.teShuTime; //特殊牌出牌顺序人数
        this.teShuNum = user.TeShuNum; //特殊牌人数
        var scores = [user.score1 || 0, user.score2 || 0, user.score3 || 0];
        this.setCards(cards);
        this.setScores(scores);
    },

    // 下一个要比较的分数
    // 如果没有要比较的了，则返回 0
    nextCompareScore: function nextCompareScore() {
        if (!this._user) {
            return 0;
        }

        var data = this._cardsInfo[this._compareIndex];
        if (!data) {
            return 0;
        }

        return data.value;
    },

    setTeShuCards: function setTeShuCards(cards, cardsNames) {
        cards.forEach(function (card) {
            if (card.point == 14) {
                card.point = 1;
            }
        });
        var time = (this.pNum - this.teShuNum) * 3 + this.teShuTime; //3 是3道牌的时间
        var typeName = KQCard.cardsTypeName(cardsNames);
        if (typeName == "三同花") {
            cards.sort(KQCard.sortByColor);
        } else {
            cards.sort(KQCard.sortByPoint);
        }
        this.scheduleOnce(function () {
            this.teShuLayout.node.active = true;
            this._setCardsToLayout(this.teShuLayout, cards);
            this.labelTeShuPaiTitle.string = typeName;
            AudioManager.instance.playCardType(this._user.sex, this._cardsInfo[0].type);
        }, time);
    },
    _convertCardsToCardNames: function _convertCardsToCardNames(cards) {
        // [{"suit":"s","number":10}]
        var suitColorMap = ['', 'd', 'c', 'h', 's'];
        return cards.map(function (card) {
            var cardNumber = card.point;
            var color = suitColorMap[card.color];
            var number = Math.max(Math.min(cardNumber, 13), 1);
            return { number: number, suit: color };
        });
    },
    setCards: function setCards(cards) {

        // 不会再有特殊牌了
        this.teShuLayout.node.active = false;

        if (this._user.isContainExtra == true) {
            var cardsNames = this._convertCardsToCardNames(cards);
            if (KQCard.isTeShuPai(cardsNames) && cc.moshi != 1) {
                this.setTeShuCards(cards, cardsNames);
                return;
            }
        }

        var cardSprites = this._allCardSprites();
        cards.forEach(function (kqCard, index) {
            if (index >= cardSprites.length) {
                return;
            }

            var cardSprite = cardSprites[index];

            KQCardResHelper.loadCardSpriteFrame(kqCard.cardName(), function (spriteFrame) {
                cardSprite.spriteFrame = spriteFrame;
                cardSprite.node.color = new cc.Color(255, 255, 255);
                if (cc.maPai) {
                    var cardMaPai = 'public-pic-card-poker-3_' + cc.maPai;
                    if (spriteFrame.name == cardMaPai) {
                        cardSprite.node.color = new cc.Color(226, 145, 145);
                    }
                }
            });
        });
    },

    setScores: function setScores(scores) {
        if (this._labelScores == null) {
            this._scores = scores;
            return;
        }

        var scoreStrings = scores.map(function (score) {
            score = Number(score);
            var result = score > 0 ? "+ " + score : "- " + score * -1;
            return result;
        });

        scoreStrings.forEach((function (string, index) {
            var labels = this._labelScores[index];
            labels.forEach(function (label) {
                label.string = string;
            });
        }).bind(this));
    },

    showTouCards: function showTouCards() {
        if (this._user.isContainExtra == true) {
            return;
        }
        this.touLayout.node.active = true;
        if (this.scoreStyle == 1) {
            this.labelTouScoreRight.node.active = true;
        } else if (this.scoreStyle == 0) {
            this.labelTouScore.node.active = true;
            if (this.touScroeTitle) {
                this.touScroeTitle.active = true;
            }
        }
        var types = this._cardsInfo[this._compareIndex].type == 3 ? 333 : this._cardsInfo[this._compareIndex].type;
        AudioManager.instance.playCardType(this._user.sex, types);
        this._compareIndex += 1;
    },

    showZhongCards: function showZhongCards() {
        if (this._user.isContainExtra == true) {
            return;
        }
        this.zhongLayout.node.active = true;
        if (this.scoreStyle == 1) {
            this.labelZhongScoreRight.node.active = true;
        } else if (this.scoreStyle == 0) {
            this.labelZhongScore.node.active = true;
            if (this.zhongScroeTitle) {
                this.zhongScroeTitle.active = true;
            }
        }
        var types = this._cardsInfo[this._compareIndex].type == 6 ? 555 : this._cardsInfo[this._compareIndex].type;
        AudioManager.instance.playCardType(this._user.sex, types);
        this._compareIndex += 1;
    },

    showWeiCards: function showWeiCards() {
        if (this._user.isContainExtra == true) {
            return;
        }
        this.weiLayout.node.active = true;
        if (this.scoreStyle == 1) {
            this.labelWeiScoreRight.node.active = true;
        } else if (this.scoreStyle == 0) {
            this.labelWeiScore.node.active = true;
            if (this.weiScroeTitle) {
                this.weiScroeTitle.active = true;
            }
        }

        AudioManager.instance.playCardType(this._user.sex, this._cardsInfo[this._compareIndex].type);
        this._compareIndex += 1;
    },

    showNextCards: function showNextCards() {
        this._daoLayouts = [this.touLayout, this.zhongLayout, this.weiLayout];
        var layout = this._daoLayouts.find(function (layout) {
            return !layout.node.active;
        });

        if (layout == this.touLayout) {
            this.showTouCards();
        } else if (layout == this.zhongLayout) {
            this.showZhongCards();
        } else if (layout == this.weiLayout) {
            this.showWeiCards();
        }
    },

    _clearCards: function _clearCards() {
        this._clearLayoutCards(this.touLayout);
        this._clearLayoutCards(this.zhongLayout);
        this._clearLayoutCards(this.weiLayout);
    },

    _clearLayoutCards: function _clearLayoutCards(layout) {
        this._cardSpritesWithLayout(layout).forEach(function (sprite) {
            sprite.spriteFrame = null;
        });
    },

    _cardSpritesWithLayout: function _cardSpritesWithLayout(layout) {
        var node = layout.node;
        return node.children.map(function (node) {
            return node.getComponent('cc.Sprite');
        });
    },

    _allCardSprites: function _allCardSprites() {
        var touCardSprites = this._cardSpritesWithLayout(this.touLayout);
        var zhongCardSprites = this._cardSpritesWithLayout(this.zhongLayout);
        var weiCardSprites = this._cardSpritesWithLayout(this.weiLayout);
        var result = touCardSprites.concat(zhongCardSprites).concat(weiCardSprites);
        return result;
    }

});

cc._RFpop();
},{"AudioManager":"AudioManager","KQCard":"KQCard","KQCardResHelper":"KQCardResHelper"}],"Countdown":[function(require,module,exports){
"use strict";
cc._RFpush(module, '6406dyBk8tKVrlJ1+mg7cLt', 'Countdown');
// scripts\Pefabs\Countdown.js

cc.Class({
    "extends": cc.Component,

    properties: {
        labelTime: cc.Label,

        _callback: null
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.labelTime.string = "0";
    },

    /**
     * 开始倒计时
     * 
     * @param  {Number} time 时长
     * @param  {Function} callback 倒计时的回调
     */
    startCountdown: function startCountdown(time, callback) {
        this.stop();
        this._callback = callback;

        this.node.active = true;
        this.labelTime.string = "" + time;
        this.schedule(this._countDown, 1, time);
    },

    stop: function stop() {
        this.unschedule(this._countDown);
        this.node.active = false;

        if (this._callback) {
            var isTimeout = Number(this.labelTime.string) <= 0;
            var callback = this._callback;
            this._callback = null;
            callback(isTimeout);
        }

        this._callback = null;
    },

    _countDown: function _countDown() {
        var time = Number(this.labelTime.string || "0");
        time = time - 1;

        if (time <= 0) {
            this.stop();
        }

        this.labelTime.string = String(time);
    }

});

cc._RFpop();
},{}],1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":1,"ieee754":3,"isarray":4}],3:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"GameResult":[function(require,module,exports){
"use strict";
cc._RFpush(module, '6a3cdd+2shGlZ+jeI3trSsB', 'GameResult');
// scripts\Play\GameResult.js

var KQCard = require('KQCard');
var AudioManager = require('AudioManager');

var ResultStatus = {
  WIN: 2,
  DRAW: 1,
  LOSE: 0
};

var GameResult = cc.Class({
  'extends': cc.Component,

  properties: {
    winNode: cc.Node,
    loseNode: cc.Node,
    drawNode: cc.Node,
    contentNode: cc.Node,

    resultItems: [cc.Node],

    _deskInfo: null,
    _userId: null,
    _closeCallback: null
  },

  // use this for initialization
  onLoad: function onLoad() {
    this._hideResultItems();
  },

  showResults: function showResults(deskInfo, currentUserId) {
    this._deskInfo = deskInfo;
    this._userId = currentUserId;

    var resultStatus = this._resultStatus();
    this.contentNode.active = true;
    this.winNode.active = resultStatus == ResultStatus.WIN;
    this.drawNode.active = resultStatus == ResultStatus.DRAW;
    this.loseNode.active = resultStatus == ResultStatus.LOSE;

    if (this.winNode.active) {
      AudioManager.instance.playWin();
    } else if (this.loseNode.active) {
      AudioManager.instance.playLose();
    }

    this.node.getComponent('alert').alert();
    this.node.getComponent('alert').setDismissCallback((function () {
      this._closeCallback;
    }).bind(this));

    var playerInfos = deskInfo.players.sort(function (p1, p2) {
      return p2.cScore - p1.cScore;
    });
    var itemComps = this.resultItems.map(function (node) {
      return node.getComponent('ResultItem');
    });
    itemComps.forEach((function (itemComp, index) {
      itemComp.node.active = index < playerInfos.length;
      if (!itemComp.node.active) {
        return;
      }

      var user = playerInfos[index];
      itemComp.updateWithPlayerInfo(user, deskInfo.isRandomDesk);
      var cards = this._cardsFromUser(user);
      itemComp.setCards(cards);
    }).bind(this));
  },

  setCloseCallback: function setCloseCallback(callback) {
    this._closeCallback = callback;
  },

  _cardsFromUser: function _cardsFromUser(user) {
    var cards = user.cardInfo.map(function (cardInfoItem) {
      return KQCard.cardsFromArray(cardInfoItem.cards);
    }).reduce(function (array, subCards) {
      return array.concat(subCards);
    }, []);

    return cards;
  },

  _hideResultItems: function _hideResultItems() {
    this.resultItems.forEach(function (node) {
      node.acitve = false;
    });
  },

  _resultStatus: function _resultStatus() {
    var playerInfos = this._deskInfo.players;
    var user = playerInfos.find((function (user) {
      return user.id == this._userId;
    }).bind(this));

    var score = user.cScore;
    if (this._deskInfo.isRandomDesk) {
      // 如果是随机场的话，应该用钻石来判断输赢
      score = user.diamond;
    }

    if (score > 0) {
      return ResultStatus.WIN;
    } else if (score < 0) {
      return ResultStatus.LOSE;
    }

    return ResultStatus.DRAW;
  }
});

module.exports = GameResult;

cc._RFpop();
},{"AudioManager":"AudioManager","KQCard":"KQCard"}],"GetCardPointsSameCount":[function(require,module,exports){
"use strict";
cc._RFpush(module, '64665arSbVGtqTVZeISv/TD', 'GetCardPointsSameCount');
// scripts\KQCard\GetCardPointsSameCount.js

/*#####*/
//��������һ���������ڵ���ͬ�������Ƶ�����
var GetCardPointsSameCount = function GetCardPointsSameCount(cards) {
    this.cardNumbers = {};
    for (var i in cards) {
        var s;
        if (typeof cards[i].number == 'undefined') {
            s = cards[i].point;
        } else {
            s = cards[i].number;
        }
        if (this.cardNumbers[s]) {
            this.cardNumbers[s]++;
        } else {
            this.cardNumbers[s] = 1;
        }
        //cc.log(this.cardNumbers[cards[i].number])
        //cc.log(cards)
        //cc.log(cards[i].number)
        //cc.log('---7')
    }
    return this.cardNumbers;
};

module.exports = GetCardPointsSameCount;

cc._RFpop();
},{}],"Invit":[function(require,module,exports){
"use strict";
cc._RFpush(module, '37d962bf0NPxaQIYUcZDwR3', 'Invit');
// scripts\Invit.js

var Socket = require('socket');
cc.Class({
  'extends': cc.Component,

  properties: {
    labelNumbers: [cc.Label],
    callbackJoinRoom: null
  },

  // use this for initialization
  onLoad: function onLoad() {
    this.clickClear();
  },

  clickNumber: function clickNumber(event, number) {
    var label = this._lastEmptyLabel();
    if (label) {
      label.string = number;
    } else {
      return;
    }
    var isComplete = this._lastEmptyLabel() == null;
    var inviteNumber = this._roomNumber();
    if (inviteNumber.length == 6) {
      this.callbackJoinRoom = inviteNumber;
    }
  },

  sendCode: function sendCode() {
    //发送邀请码
    var userId = Socket.instance.userInfo.id;
    var inviteNumber = this.callbackJoinRoom;
    console.log(inviteNumber, "------------------------");
    if (inviteNumber.length == 6) {
      Socket.sendInviteCode(inviteNumber, userId);
      this.callbackJoinRoom = ''; //清空邀请码
    }
  },

  clickClear: function clickClear() {
    this.callbackJoinRoom = '';
    this.labelNumbers.forEach(function (label) {
      label.string = "";
    });
  },

  clickDeleteOne: function clickDeleteOne() {
    var label = this._lastNumberLabel();
    if (label) {
      label.string = "";
    }
  },

  _lastEmptyLabel: function _lastEmptyLabel() {
    for (var index in this.labelNumbers) {
      var label = this.labelNumbers[index];
      if (label.string == null || label.string.length <= 0) {
        return label;
      }
    }
    return null;
  },

  _lastNumberLabel: function _lastNumberLabel() {
    for (var index = this.labelNumbers.length - 1; index >= 0; --index) {
      var label = this.labelNumbers[index];
      if (label.string && label.string.length > 0) {
        return label;
      }
    }

    return null;
  },

  _roomNumber: function _roomNumber() {
    return this.labelNumbers.reduce(function (roomNumber, label) {
      return roomNumber + (label.string || "");
    }, "");
  }
});

cc._RFpop();
},{"socket":"socket"}],"KQCardColorsHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'cf1deKQQ4NMMYVV+7xEr9Jf', 'KQCardColorsHelper');
// scripts\KQCard\KQCardColorsHelper.js

// 牌花色帮助类
// 用于计算一个牌数组的花色相同的牌的张数
var KQCardColorsHelper = function KQCardColorsHelper(cards) {
  this.colorNumber = {};

  cards.forEach((function (card) {
    var color = card.color;
    var number = this.colorNumber[color] || 0;
    this.colorNumber[color] = number + 1;
  }).bind(this));
};

// 相同花色的牌的最大数量
KQCardColorsHelper.prototype.maxNumber = function () {
  var result = 0;
  for (var prop in this.colorNumber) {
    var number = this.colorNumber[prop];
    result = Math.max(number, result);
  }

  return result;
};

module.exports = KQCardColorsHelper;

cc._RFpop();
},{}],"KQCardFindTypeExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '54a95JOLVRACIP91XEFodqF', 'KQCardFindTypeExtension');
// scripts\KQCard\KQCardFindTypeExtension.js

var KQCard = require('KQCard');
var ArrayExtension = require('ArrayExtension');
var KQCardPointsHelper = require('KQCardPointsHelper');

module.exports = {};

// 寻找 cardModes 中的 对子
// 这会返回 对子 的索引数组
// 如：[[1, 3], [4, 5]]
KQCard.findDuiZi = function (cardModes) {
  var sDuiZiIndexs = KQCard.findSanTiao(cardModes) || [];
  var result = KQCard._findPointLength(cardModes, 2) || [];
  if (result.length < 2) {
    if (sDuiZiIndexs.length > 0) {
      sDuiZiIndexs.forEach(function (indexs) {
        var s1 = [indexs[0], indexs[1]];
        //var s2 = [indexs[1],indexs[2]];
        //result.push(s2);
        result.push(s1);
      });
    }
    var tresult = KQCard.findGuiPai(cardModes, 2);
    for (var i = 0; i < tresult.length; i++) {
      result.push(tresult[i]);
    }
  }

  result = KQCard.repeat(result);

  return result.length > 0 ? result : [];
};

KQCard._findPointLength = function (cardModes, length) {
  if (cardModes.length < length) {
    return [];
  }

  var obj = cardModes.reduce(function (obj, card, index) {
    var pointIndexs = obj[card.point] || [];
    obj[card.point] = pointIndexs;
    pointIndexs.push(index);
    return obj;
  }, {});

  var result = [];
  for (var prop in obj) {
    var pointIndexs = obj[prop];
    if (pointIndexs.length == length) {
      pointIndexs.sort(function (n1, n2) {
        return n1 - n2;
      });
      result.push(pointIndexs);
    }
  }

  result.sort(function (arr1, arr2) {
    var n1 = arr1[0];
    var n2 = arr2[0];
    return n2 - n1;
  });
  return result.length > 0 ? result : [];
};

// 找 两对 的索引数组
// 如：[[1, 2, 3, 4], [5, 6, 7, 8]]
KQCard.findLiaDui = function (cardModes) {
  var duiZiIndexs = KQCard.findDuiZi(cardModes) || [];
  var duiZiIndex = KQCard.findGuiPai(cardModes, 2) || [];

  if (duiZiIndexs.length < 1 && duiZiIndex.length > 0) {
    duiZiIndex.forEach(function (indexs) {
      duiZiIndexs.unshift(indexs);
    });
  }
  if (duiZiIndexs.length < 2) {
    return [];
  }

  var result = [];
  for (var i = 0; i < duiZiIndexs.length; ++i) {
    for (var j = i + 1; j < duiZiIndexs.length; ++j) {
      if (result.length < 10) {
        var pre = duiZiIndexs[i];
        var next = duiZiIndexs[j];
        var s = pre.concat(next);
        var newS = [];
        for (var q = 0; q < s.length; q++) {
          if (newS.indexOf(s[q]) == -1) {
            newS.push(s[q]);
          } else {
            break;
          }
        }
        if (newS.length == 4) {
          newS.sort(function (n1, n2) {
            return n1 - n2;
          });
          result.unshift(newS);
        }
      } else {
        break;
      }
    }
  }
  result = KQCard.repeat(result);
  if (result.length > 6) {
    result = result.slice(0, 6);
  }
  return result;
};

// 找三条
// 如：[[1, 2, 3]];
KQCard.findSanTiao = function (cardModes) {
  if (cardModes.length < 3) {
    return [];
  }
  var result = KQCard._findPointLength(cardModes, 3) || [];
  //for(var q =0;q<result.length;q++){
  //  var indexs = result[q][0];
  //  if(cardModes[indexs].point >= 20){
  //    result.splice(q,1);
  //  }
  //}
  if (result.length < 2) {
    var tieZhiIndexsArray = KQCard.findTieZhi(cardModes);
    if (tieZhiIndexsArray.length > 0) {
      tieZhiIndexsArray.forEach(function (indexs) {
        //let sanTiaoIndexs1 = [indexs[1], indexs[2], indexs[3]];
        //let sanTiaoIndexs2 = [indexs[0], indexs[1], indexs[3]];
        //let sanTiaoIndexs3 = [indexs[0], indexs[2], indexs[3]];
        var sanTiaoIndexs0 = [indexs[0], indexs[1], indexs[2]];
        result.push(sanTiaoIndexs0);
        //result.unshift(sanTiaoIndexs1);
        //result.unshift(sanTiaoIndexs2);
        //result.unshift(sanTiaoIndexs3);
      });
    }
    var tresult = KQCard.findGuiPai(cardModes, 3);
    for (var i = 0; i < tresult.length; i++) {
      result.push(tresult[i]);
    }
  }
  /*if(result.length < 1){
    // 铁支是包含三条的
    let tieZhiIndexsArray = KQCard.findTieZhi(cardModes);
    if (tieZhiIndexsArray) {
      tieZhiIndexsArray.forEach(function(indexs) {
        //let sanTiaoIndexs1 = [indexs[1], indexs[2], indexs[3]];
        //let sanTiaoIndexs2 = [indexs[0], indexs[1], indexs[3]];
        //let sanTiaoIndexs3 = [indexs[0], indexs[2], indexs[3]];
        let sanTiaoIndexs0 = [indexs[0], indexs[1], indexs[2]];
        result.push(sanTiaoIndexs0);
        //result.unshift(sanTiaoIndexs1);
        //result.unshift(sanTiaoIndexs2);
        //result.unshift(sanTiaoIndexs3);
      });
    }
  }*/

  //if(result.length > 10){
  //  result = result.slice(0,10);
  //}

  result = KQCard.repeat(result);
  return result.length > 0 ? result : [];
};

// 找同花顺
KQCard.findTongHuaShun = function (cardModes) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (cardModes.length < length) {
    return [];
  }
  var result = [];
  var sanShunZi = KQCard.sanShunZi1(cardModes, length);
  if (sanShunZi[0] == null) {
    return false;
  }
  for (var i = 0; i < sanShunZi[0].length; i++) {
    var s = sanShunZi[0][i];
    if (KQCard.isTongHuaShun(s, length)) {
      result.push(sanShunZi[1][i]);
    }
  }
  if (result.length > 0) {
    return result;
  } else {
    return KQCard.findTongHuaShun1(cardModes);
  }
};
KQCard.findTongHuaShun1 = function (cards) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (cards.length < length) {
    return [];
  }
  cards = Array.from(cards);
  var colorS = []; //黑桃
  var colorH = []; //红心
  var colorC = []; //梅花
  var colorD = []; //方块
  var pointS = []; //黑桃
  var pointH = []; //红心
  var pointC = []; //梅花
  var pointD = []; //方块
  for (var i = 0; i < cards.length; i++) {
    if (cards[i].color == '4') {
      if (pointS.indexOf(cards[i].point) == -1) {
        pointS.push(cards[i].point);
        colorS.push(cards[i]);
      }
    } else if (cards[i].color == '3') {
      if (pointH.indexOf(cards[i].point) == -1) {
        pointH.push(cards[i].point);
        colorH.push(cards[i]);
      }
    } else if (cards[i].color == '2') {
      if (pointC.indexOf(cards[i].point) == -1) {
        pointC.push(cards[i].point);
        colorC.push(cards[i]);
      }
    } else if (cards[i].color == '1') {
      if (pointD.indexOf(cards[i].point) == -1) {
        pointD.push(cards[i].point);
        colorD.push(cards[i]);
      }
    }
  }

  var color = [colorS, colorH, colorC, colorD];
  var colorSum = []; //总共有几种花色 [5,3,0....]
  for (var i = 0; i < color.length; i++) {
    if (color[i].length >= 5) {
      color[i].sort(function (a1, a2) {
        return a1.point - a2.point;
      });
      colorSum.push(color[i]);
    }
  }
  var result = [];
  for (var i = 0; i < colorSum.length; i++) {
    var s = colorSum[i];
    for (var start = 0; start + 5 <= s.length; ++start) {
      var subCards = s.slice(start, start + 5);
      if (KQCard.isTongHuaShun(subCards)) {
        (function () {
          var indexs = [];
          subCards.forEach(function (ca) {
            for (var q = 0; q < cards.length; q++) {
              var r = cards[q];
              if (r === ca) {
                indexs.push(q);
                break;
              }
            }
          });
          indexs.sort(Array.sortByPoint);
          result.unshift(indexs);
        })();
      }
    }
  }

  if (result.length > 0) {
    return result;
  } else {
    var convertedCards = KQCard._convertOneToA1(cards);
    if (cards === convertedCards) {
      cards.forEach(function (adfs) {
        if (adfs.point == 14) {
          adfs.point = 1;
          adfs.scores = 1;
        }
      });
      return KQCard.findTongHuaShun20(cards);
    }
    return KQCard.findTongHuaShun1(convertedCards);
  }
  //return result.length > 0 ? result : null;
};
KQCard.findTongHuaShun20 = function (card) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (card.length < length) {
    return false;
  }
  var card20 = KQCard.contain20(card) || [];
  var cards = card.kq_excludes(card20);

  cards = Array.from(cards);
  var colorS = []; //黑桃
  var colorH = []; //红心
  var colorC = []; //梅花
  var colorD = []; //方块
  var pointS = []; //黑桃
  var pointH = []; //红心
  var pointC = []; //梅花
  var pointD = []; //方块
  for (var i = 0; i < cards.length; i++) {
    if (cards[i].color == '4') {
      if (pointS.indexOf(cards[i].point) == -1) {
        pointS.push(cards[i].point);
        colorS.push(cards[i]);
      }
    } else if (cards[i].color == '3') {
      if (pointH.indexOf(cards[i].point) == -1) {
        pointH.push(cards[i].point);
        colorH.push(cards[i]);
      }
    } else if (cards[i].color == '2') {
      if (pointC.indexOf(cards[i].point) == -1) {
        pointC.push(cards[i].point);
        colorC.push(cards[i]);
      }
    } else if (cards[i].color == '1') {
      if (pointD.indexOf(cards[i].point) == -1) {
        pointD.push(cards[i].point);
        colorD.push(cards[i]);
      }
    }
  }

  var color = [colorS, colorH, colorC, colorD];
  var colorSum = []; //总共有几种花色 [5,3,0....]
  for (var i = 0; i < color.length; i++) {
    if (color[i].length >= parseInt(5 - card20.length)) {
      color[i].sort(function (a1, a2) {
        return a1.point - a2.point;
      });
      colorSum.push(color[i]);
    }
  }
  cc.log(colorSum);

  var result = [];
  for (var i = 0; i < colorSum.length; i++) {
    var s = colorSum[i];
    for (var j = 1; j <= card20.length; ++j) {
      var num = 5 - j;
      for (var start = 0; start + num <= s.length; ++start) {
        var subCards = s.slice(start, start + num);
        var bool = parseInt(subCards[num - 1]['scores']) - parseInt(subCards[0]['scores']) < 5;
        if (bool) {
          var newCard20;

          (function () {
            var indexs = [];
            newCard20 = card20.slice(0, j);

            subCards = subCards.concat(newCard20);
            subCards.forEach(function (ca) {
              for (var q = 0; q < card.length; q++) {
                var r = card[q];
                if (r === ca) {
                  indexs.push(q);
                  break;
                }
              }
            });
            indexs.sort(Array.sortByNumber);

            result.unshift(indexs);
          })();
        }
      }
    }
  }
  cc.log(result);
  cc.log('--------357');
  if (result.length > 0) {
    return result;
  } else {
    var convertedCards = KQCard._convertOneToA1(card);
    if (card === convertedCards) {
      return [];
    }
    return KQCard.findTongHuaShun20(convertedCards);
  }
  //return result.length > 0 ? result : null;
};

// 找铁支
// 如：[[1,2,3,4]]
KQCard.findTieZhi = function (cardModes) {
  var result = KQCard._findPointLength(cardModes, 4);
  if (result.length > 0) {
    return result;
  }
  result = [];
  // 五同是包含铁支的
  var wuTongIndexsArray = KQCard.findWuTong(cardModes);
  if (wuTongIndexsArray) {
    wuTongIndexsArray.forEach(function (indexs) {
      var tieZhiIndexs0 = [indexs[0], indexs[1], indexs[2], indexs[3]];
      var tieZhiIndexs1 = [indexs[0], indexs[1], indexs[2], indexs[4]];
      var tieZhiIndexs2 = [indexs[0], indexs[1], indexs[3], indexs[4]];
      var tieZhiIndexs3 = [indexs[0], indexs[2], indexs[3], indexs[4]];
      var tieZhiIndexs4 = [indexs[1], indexs[2], indexs[3], indexs[4]];
      result.push(tieZhiIndexs0);
      result.push(tieZhiIndexs1);
      result.push(tieZhiIndexs2);
      result.push(tieZhiIndexs3);
      result.push(tieZhiIndexs4);
    });
  }
  if (result.length > 10) {
    result = result.slice(0, 10);
  }
  result = KQCard.repeat(result);
  return result.length > 0 ? result : KQCard.findGuiPai(cardModes, 4);
};
//找五同
KQCard.findWuTong = function (cardModes) {
  if (cardModes.length < 5) {
    return [];
  }
  var result = this._findPointLength(cardModes, 5) || [];
  return result.length > 0 ? result : KQCard.findGuiPai(cardModes, 5);
};
// 找顺子
// 如：[[1, 2, 3, 4, 5]]
KQCard.findShunZi = function (cardModes) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (cardModes.length < length) {
    return [];
  }
  if (typeof cardModes[0]['point'] == "undefined") {
    cardModes = KQCard.cardsFromArray(cardModes);
  }
  // 先根据点数去重
  var uniqueCards = cardModes.unique(function (card1, card2) {
    return card1.point == card2.point;
  });
  uniqueCards.sort(KQCard.sortByPoint);

  // 如果有 A，则在最后添加 14
  var cardA = cardModes.find(function (card) {
    return card.point == 1;
  });
  if (cardA) {
    var cardAPlus = new KQCard(cardA);
    cardAPlus.point = 14;
    uniqueCards.push(cardAPlus);
  }

  var result = [];

  // 由于点数是唯一且升序，只需要依次遍历判断是否是顺子即可
  for (var start = 0; start + length <= uniqueCards.length; ++start) {
    var subCards = uniqueCards.slice(start, start + length);
    if (KQCard.isShunZi(subCards, length)) {
      (function () {
        var indexs = [];
        subCards.forEach(function (card) {
          var index = cardModes.findIndex(function (originCard) {

            if (card.point == 14) {
              return originCard.point == 1;
            }

            return card === originCard;
          });
          indexs.push(index);
        });

        indexs.sort(Array.sortByNumber);
        result.push(indexs);
      })();
    }
  }

  // 处理点数重复的情况
  // 比如 A A K Q J 10 这种
  var repeatIndexsArray = KQCard._findRepeatPointIndexsArray(result, cardModes);
  repeatIndexsArray.forEach(function (indexs) {
    result.push(indexs);
  });

  result.sort(function (arr1, arr2) {
    return arr1[0] - arr2[0];
  });

  return result.length > 0 ? result : KQCard.findShunZi20(cardModes);
};
KQCard.findShunZi20 = function (cardModes) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (cardModes.length < length) {
    return false;
  }
  var card20 = KQCard.contain20(cardModes);
  var cards = cardModes.kq_excludes(card20);
  // 先根据点数去重
  var newArr = [];
  var newArrs = [];
  for (var i = 0; i < cards.length; i++) {
    if (newArrs.indexOf(cards[i]['point']) == -1) {
      newArr.push(cards[i]);
      newArrs.push(cards[i].point);
    }
  }

  newArr.sort(function (n1, n2) {
    return n1.point - n2.point;
  });
  var result = [];
  for (var j = 1; j <= card20.length; ++j) {
    var num = length - j;
    for (var start = 0; start + num <= newArr.length; ++start) {
      var subCards = newArr.slice(start, start + num);
      var bool = parseInt(subCards[num - 1]['point']) - parseInt(subCards[0]['point']) < length;
      if (bool) {
        var newCard20;

        (function () {
          var indexs = [];
          newCard20 = card20.slice(0, j);

          subCards = subCards.concat(newCard20);
          subCards.forEach(function (card) {
            for (var q = 0; q < cardModes.length; q++) {
              var r = cardModes[q];
              if (r === card) {
                indexs.push(q);
                break;
              }
            }
          });

          indexs.sort(Array.sortByNumber);
          result.unshift(indexs);
        })();
      }
    }
  }

  if (result.length > 0) {
    return result;
  } else {
    var convertedCards = KQCard._convertOneToA1(cardModes);
    if (cardModes === convertedCards) {
      return false;
    }
    return KQCard.findShunZi20(convertedCards);
  }
};
KQCard._findRepeatPointIndexsArray = function (indexsArray, originCards) {
  var repeatIndexsArray = [];
  indexsArray.forEach(function (indexs) {
    var cards = indexs.map(function (index) {
      return originCards[index];
    });

    cards.forEach(function (card, index) {
      var originIndex = originCards.findIndex(function (originCard) {
        if (typeof card == 'undefined') {
          return;
        }
        if (originCard !== card && originCard.point == card.point) {
          return true;
        }
        return false;
      });

      if (originIndex < 0) {
        return;
      }

      var repeatIndexs = indexs.slice();
      repeatIndexs[index] = originIndex;
      repeatIndexsArray.push(repeatIndexs);
    });
  });

  return repeatIndexsArray;
};

// 找同花
// 如：[[1, 2, 3, 4, 5]]
KQCard.findTongHua = function (cardModes) {
  var length = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

  if (cardModes.length < length) {
    return [];
  }

  var cards = Array.from(cardModes);
  cards.sort(KQCard.sortByColor);

  var result = [];
  for (var start = 0; start + length <= cards.length; ++start) {
    var subCards = cards.slice(start, start + length);
    if (KQCard.isTongHua(subCards, length)) {
      (function () {
        var indexs = [];
        subCards.forEach(function (card) {
          var index = cardModes.findIndex(function (originCard) {
            return card === originCard;
          });
          indexs.push(index);
        });
        //indexs = indexs.length > 5 ? indexs.splice(1,1) : indexs;
        indexs.sort(Array.sortByNumber);
        result.push(indexs);
      })();
    }
  }
  return result.length > 0 ? result : KQCard.findTongHua20(cardModes);
};
KQCard.findTongHua20 = function (cardModes) {
  if (cardModes.length < 5) {
    return false;
  }
  var card20 = KQCard.contain20(cardModes);
  var cards = cardModes.kq_excludes(card20);
  // 先根据点数去重
  cards.sort(KQCard.sortByColor);

  var result = [];
  for (var j = 1; j <= card20.length; ++j) {
    var num = 5 - j;
    for (var start = 0; start + num <= cards.length; ++start) {
      var subCards = cards.slice(start, start + num);
      if (KQCard.isTongHua(subCards, num)) {
        var newCard20;

        (function () {
          var indexs = [];
          newCard20 = card20.slice(0, j);

          subCards = subCards.concat(newCard20);
          subCards.forEach(function (card) {
            for (var q = 0; q < cardModes.length; q++) {
              var r = cardModes[q];
              if (r === card) {
                indexs.push(q);
                break;
              }
            }
          });

          indexs.sort(Array.sortByNumber);
          result.unshift(indexs);
        })();
      }
    }
  }

  return result.length > 0 ? result : [];
};

KQCard.findHuLu = function (cardModes) {
  var length = 5;
  if (cardModes.length < length) {
    return [];
  }

  var p_3 = KQCard.findSanTiao(cardModes);
  var p_4 = KQCard.findTieZhi(cardModes);
  var p2 = KQCard.findDuiZi(cardModes) || [];
  //var p_3 =  this._findPointLength(cardModes, 3) || [];
  //var p_4 = this._findPointLength(cardModes, 4) || [];
  //var p2 = this._findPointLength(cardModes, 2) || [];
  if (p2.length <= 0) {
    if (p_3) {
      p_3.forEach(function (indexs) {
        var sanTiaoIndexs0 = [indexs[0], indexs[1]];
        //let sanTiaoIndexs1 = [indexs[0], indexs[2]];
        var sanTiaoIndexs3 = [indexs[1], indexs[2]];
        p2.push(sanTiaoIndexs0);
        //p2.unshift(sanTiaoIndexs1);
        p2.push(sanTiaoIndexs3);
      });
    }

    if (p_4) {
      p_4.forEach(function (indexs) {
        var sanTiaoIndexs0 = [indexs[0], indexs[1]];
        //let sanTiaoIndexs1 = [indexs[0], indexs[2]];
        //let sanTiaoIndexs2 = [indexs[0], indexs[3]];
        //let sanTiaoIndexs3 = [indexs[1], indexs[2]];
        //let sanTiaoIndexs4 = [indexs[1], indexs[3]];
        var sanTiaoIndexs6 = [indexs[2], indexs[3]];
        p2.push(sanTiaoIndexs0);
        //p2.unshift(sanTiaoIndexs1);
        //p2.unshift(sanTiaoIndexs2);
        //p2.unshift(sanTiaoIndexs3);
        //p2.unshift(sanTiaoIndexs4);
        p2.push(sanTiaoIndexs6);
      });
    }
  }

  if (p2 == null || p_3 == null) {
    return [];
  }
  var tresult = [];
  p2.forEach(function (i_3) {
    var s = i_3;
    p_3.forEach(function (i_2) {
      s = i_3.concat(i_2);
      for (var i = 0; i < s.length - 1; i++) {
        var index = s[i];
        for (var j = i + 1; j < s.length; j++) {
          if (index == s[j]) {
            s = null;
            break;
          }
        }
        if (s == null) {
          break;
        }
      }
      if (s !== null) {
        tresult.push(s);
      }
    });
  });
  if (tresult.length > 10) {
    tresult = tresult.slice(0, 10);
  }
  return tresult.length > 0 ? tresult : KQCard.findHuLu20(cardModes);
};
KQCard.findHuLu20 = function (cardModes) {
  var length = 5;
  if (cardModes.length < length) {
    return [];
  }
  var p_3 = KQCard.findGuiPai(cardModes, 3);
  var p_4 = KQCard.findGuiPai(cardModes, 4);
  var p_2 = KQCard.findGuiPai(cardModes, 2);
  if (p_2 == null) {
    p_2 = [];
  }
  if (p_3) {
    p_3.forEach(function (indexs) {
      var sanTiaoIndexs0 = [indexs[0], indexs[1]];
      var sanTiaoIndexs3 = [indexs[1], indexs[2]];
      p_2.unshift(sanTiaoIndexs0);
      p_2.unshift(sanTiaoIndexs3);
    });
  }

  if (p_4) {
    p_4.forEach(function (indexs) {
      var sanTiaoIndexs0 = [indexs[0], indexs[1]];
      var sanTiaoIndexs6 = [indexs[2], indexs[3]];
      p_2.unshift(sanTiaoIndexs0);
      p_2.unshift(sanTiaoIndexs6);
    });
  }

  if (p_2 == null || p_3 == null) {
    return [];
  }
  var tresult = [];
  p_2.forEach(function (i_3) {
    var s = i_3;
    p_3.forEach(function (i_2) {
      s = i_3.concat(i_2);
      for (var i = 0; i < s.length - 1; i++) {
        var index = s[i];
        for (var j = i + 1; j < s.length; j++) {
          if (index == s[j]) {
            s = null;
            break;
          }
        }
        if (s == null) {
          break;
        }
      }
      if (s !== null) {
        tresult.unshift(s);
      }
    });
  });
  if (tresult.length > 10) {
    tresult = tresult.slice(0, 10);
  }
  return tresult.length > 0 ? tresult : [];
};

KQCard.findGuiPai = function (cardModes) {
  var numBer = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

  var card20 = KQCard.contain20(cardModes).map(function (card) {
    //得到鬼牌的索引
    for (var q = 0; q < cardModes.length; q++) {
      var r = cardModes[q];
      if (r === card) {
        return q;
      }
    }
  });

  var cards = cardModes.kq_excludes(KQCard.contain20(cardModes)); //删除所有牌的鬼牌
  var result = [];
  for (var j = 1; j <= card20.length; ++j) {
    var num = numBer - j; //除鬼牌外 我应该找多少张牌匹配
    var indexs = KQCard._findPointLength(cardModes, num) || [];
    for (var t = 0; t < indexs.length; t++) {
      if (numBer == 2) {
        //是对子的时候把鬼牌和单张匹配都循环一遍
        for (var o = 0; o < card20.length; ++o) {
          var s = indexs[t].concat(card20[o]);
          if (s.length == numBer) {
            result.push(s);
          }
        }
      } else {
        var s = indexs[t].concat(card20.slice(0, j)); //依次相加鬼牌第一次加一张 递增
        if (s.length == numBer) {
          result.push(s);
        }
      }
    }
  }
  if (result.length > 10) {
    result = result.slice(0, 10);
  }
  result = KQCard.repeat(result); //去重
  return result.length > 0 ? result : [];
};

KQCard.repeat = function (result) {
  for (var i = 0; i < result.length; i++) {
    var index = result[i];

    var newAyy = [];
    for (var o = 0; o < index.length; o++) {
      //有重复干掉你
      if (newAyy.indexOf(index[o]) == -1) {
        newAyy.push(index[o]);
      } else {
        result.splice(i, 1);
        break;
      }
    }

    for (var j = i + 1; j < result.length - 1; j++) {
      var s = result[j];
      var jString = '';
      var iString = '';
      for (var r = 0; r < s.length; r++) {
        jString = jString + s[r];
        iString = iString + index[r];
      }
      if (jString == iString) {
        //有重复干掉你
        result.splice(i, 1);
        break;
      }
    }
  }
  return result;
};

KQCard.testFind = function (cardModes) {
  var WuTong = KQCard.findWuTong(cardModes) || [];
  var TongHuaShun = KQCard.findTongHuaShun(cardModes) || [];
  var TieZhi = KQCard.findTieZhi(cardModes) || [];
  var HuLu = KQCard.findHuLu(cardModes) || [];
  var TongHua = KQCard.findTongHua(cardModes) || [];
  var ShunZi = KQCard.findShunZi(cardModes) || [];
  var SanTiao = KQCard.findSanTiao(cardModes) || [];
  var LiaDui = KQCard.findLiaDui(cardModes) || [];
  var DuiZi = KQCard.findDuiZi(cardModes) || [];
  var result = [WuTong, TongHuaShun, TieZhi, HuLu, TongHua, ShunZi, SanTiao, LiaDui, DuiZi];
  return result;
};

cc._RFpop();
},{"ArrayExtension":"ArrayExtension","KQCard":"KQCard","KQCardPointsHelper":"KQCardPointsHelper"}],"KQCardPointsHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, '42d3e866XhHdbkspy3Qytap', 'KQCardPointsHelper');
// scripts\KQCard\KQCardPointsHelper.js

// 牌点数帮助类
// 用来计算一个牌数组内的相同点数的牌的张数
var KQCardPointsHelper = function KQCardPointsHelper(cards) {
    this.pointNumbers = {};
    cards.forEach((function (card) {
        var point = card.point;
        var number = this.pointNumbers[point] || 0;
        this.pointNumbers[point] = number + 1;
    }).bind(this));
};

// 相同点数牌的最大数量
KQCardPointsHelper.prototype.maxNumber = function () {
    var result = 0;
    for (var prop in this.pointNumbers) {
        var number = this.pointNumbers[prop];
        //if(number < 20){
        result = Math.max(number, result);
        //}
    }

    return result;
};

module.exports = KQCardPointsHelper;

/*var cards = [
    {'suit':'s',number:2},
    {'suit':'s',number:2},
    {'suit':'s',number:4},
    {'suit':'s',number:4},
    {'suit':'s',number:6},
    {'suit':'s',number:6},
    {'suit':'s',number:8},
    {'suit':'s',number:8},
    {'suit':'s',number:10},
    {'suit':'s',number:10},
    {'suit':'s',number:12},
    {'suit':'s',number:12},
    {'suit':'s',number:14}
];
var test = new KQCardPointsSame(cards);
console.log(test);*/

cc._RFpop();
},{}],"KQCardResHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'be420vtWaJOHoxQcZwP2xN2', 'KQCardResHelper');
// scripts\KQCard\KQCardResHelper.js

var Helper = {
  loadCardSpriteFrame: function loadCardSpriteFrame(cardName, callback) {
    this._loadCardFrame(cardName, callback);
  },

  setCardSpriteFrame: function setCardSpriteFrame(sprite, cardName) {
    this.loadCardSpriteFrame(cardName, function (spriteFrame) {
      sprite.spriteFrame = spriteFrame;
    });
  },

  _cardFullName: function _cardFullName(cardShortName) {
    var cardName = cardShortName;
    if (!cardName.startsWith("public-pic-card-poker")) {
      cardName = "public-pic-card-poker-" + cardName;
    }

    return cardName;
  },

  _loadCardFrame: function _loadCardFrame(cardName, callback) {
    cc.assert(callback);

    cc.loader.loadRes("images/pokerList/pockList", cc.SpriteAtlas, (function (err, atlas) {
      if (err) {
        callback(null, err);
        return;
      }

      cardName = this._cardFullName(cardName);
      var frame = atlas.getSpriteFrame(cardName);
      callback(frame);
    }).bind(this));
  }
};

module.exports = Helper;

cc._RFpop();
},{}],"KQCardScoreExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '3f5d8wDA+tMPbPd/k4hBAAR', 'KQCardScoreExtension');
// scripts\KQCard\KQCardScoreExtension.js

var KQCard = require('KQCard');
var KQCardFindTypeExtension = require('KQCardFindTypeExtension');
var KQCardColorsHelper = require('KQCardColorsHelper');
var KQCardScoretsHelper = require('KQCardScoretsHelper');

KQCard.scoreOfCards = function (cards) {
  if (cards == null || cards.length == null) {
    cards = [];
  }

  var isTou = cards.length == 3;
  var typeScore = KQCard._typeScoreOfCards(cards);
  var caleCards = KQCard._convertOneToA(cards.slice());
  caleCards.forEach(function (card) {
    if (card.scores == 1) {
      card.scores = 14;
    }
  });
  //caleCards = KQCard.Sort(caleCards);
  var card20 = KQCard.contain20(caleCards);
  var pointHelper = new KQCardScoretsHelper(caleCards.kq_excludes(card20));
  var maxNum = pointHelper.maxNumber() /*-card20.length == 0 ? 1: pointHelper.maxNumber()-card20.length*/;

  var maxScore = 0; //获取除鬼牌外最大的的点数
  for (var i in pointHelper.pointNumbers) {
    if (parseInt(i) > maxScore && pointHelper.pointNumbers[i] == maxNum) {
      maxScore = parseInt(i);
    }
  }
  caleCards.forEach(function (card) {
    if (card.scores >= 20) {
      card.scores = maxScore;
    }
  });
  card20.forEach(function (card) {
    card.scores = maxScore;
  });
  //cc.log(maxNum)
  //cc.log(maxScore)
  //cc.log(caleCards.kq_excludes(card20))
  //cc.log('----35')
  caleCards.sort(KQCard.sort);
  if (typeScore == 9000000000000000) {
    //五同
    caleCards.sort(function (a1, a2) {
      return a2.scores - a1.scores;
    });
    var totalValue = "";
    //var totalColor = "";
    for (var i in caleCards) {
      var s = caleCards[i].scores;
      //var c = caleCards[i].color;
      totalValue = (parseInt(s) >= 10 ? s : "0" + s) + totalValue;
      //totalColor = c+totalColor;
    }
    //totalValue = totalValue+totalColor;
    //cc.log(totalValue)
    //cc.log(parseInt(totalValue))
    //cc.log(typeScore+parseInt(totalValue))
    return typeScore + parseInt(totalValue);
  } else if (typeScore == 8000000000000000) {
    //同花顺比最大的那张，如果两张相同那就是相同
    if (card20.length > 0) {
      //有鬼牌的时候要改变鬼牌的分数
      caleCards = KQCard._changeCardScors(caleCards);
    }
    var totalValue = "";
    var valueColor = ""; //牌色
    for (var i in caleCards) {
      var s = caleCards[i].scores;
      totalValue = (parseInt(s) >= 10 ? s : "0" + s) + totalValue;
      var c = caleCards[i].color; //牌色
      valueColor = c + valueColor; //牌色
    }
    return typeScore + parseInt(totalValue + valueColor);
  } else if (typeScore == 7000000000000000) {
    //铁支,找出那四张是什么牌

    var str = "";
    var oneValue = "";
    var valueColor = ""; //牌色
    var oneValueColor = ""; //牌色
    for (var w in caleCards) {
      if (maxScore == caleCards[w].scores) {
        //三条
        var s = caleCards[w].scores;
        str = (parseInt(s) >= 10 ? s : "0" + s) + str;

        var c = caleCards[w].color; //牌色
        valueColor = c + valueColor; //牌色
      } else {
          var s = caleCards[w].scores;
          oneValue = (parseInt(s) >= 10 ? s : "0" + s) + oneValue;

          var c = caleCards[w].color; //牌色
          oneValueColor = c + oneValueColor; //牌色
        }
    }
    var qwe = '';
    qwe = oneValueColor.substr(0, oneValueColor.length - 1);
    oneValueColor = oneValueColor.substr(oneValueColor.length - 1);
    str = str + oneValue + oneValueColor + valueColor + qwe;
    return typeScore + parseInt(str);
  } else if (typeScore == 6000000000000000) {
    //葫芦
    var str = "";
    var oneValue = "";
    var valueColor = ""; //牌色
    var oneValueColor = ""; //牌色
    for (var w in caleCards) {
      if (maxScore == caleCards[w].scores) {
        //三条
        var s = caleCards[w].scores;
        str = (parseInt(s) >= 10 ? s : "0" + s) + str;

        var c = caleCards[w].color; //牌色
        valueColor = c + valueColor; //牌色
      } else {
          var s = caleCards[w].scores;
          oneValue = (parseInt(s) >= 10 ? s : "0" + s) + oneValue;

          var c = caleCards[w].color; //牌色
          oneValueColor = c + oneValueColor; //牌色
        }
    }

    if (isTou) {
      oneValue = oneValue + '0000';
      oneValueColor = oneValueColor + '00';
    }

    str = str + oneValue + valueColor + oneValueColor;
    return typeScore + parseInt(str);
  } else if (typeScore == 5000000000000000) {
    //同花,有可能需要比5张牌
    var totalScore = "";
    var totalColor = "";
    //var colors = 0;//获取牌的类型颜色
    //for(var i in caleCards) {
    //  if(parseInt(caleCards[i].point) < 20){
    //    colors = parseInt(caleCards[i].color);
    //    break;
    //  }
    //}

    for (var i in caleCards) {
      var paiPoint = parseInt(caleCards[i].point);
      var colors = parseInt(caleCards[i].point) < 20 ? caleCards[i].color : 5;
      totalColor = colors + totalColor;
      totalScore = (paiPoint >= 10 ? paiPoint : "0" + paiPoint) + totalScore;
    }
    return typeScore + parseInt(totalScore + totalColor);
  } else if (typeScore == 4000000000000000) {
    //顺子
    if (card20.length > 0) {
      //有鬼牌的时候要改变鬼牌的分数
      caleCards = KQCard._changeCardScors(caleCards);
    }
    var totalValue = "";
    var valueColor = ""; //牌色
    for (var i in caleCards) {
      var s = caleCards[i].scores;
      totalValue = (parseInt(s) >= 10 ? s : "0" + s) + totalValue;

      var c = caleCards[i].color; //牌色
      valueColor = c + valueColor; //牌色
    }
    return typeScore + parseInt(totalValue + valueColor);
  } else if (typeScore == 3000000000000000) {
    //三条，找出是哪张牌有3张
    //caleCards.sort(KQCard.sort);
    var str = "";
    var oneValue = "";
    var valueColor = ""; //牌色
    var oneValueColor = ""; //牌色
    var oneValueColor20 = ""; //牌色
    for (var w in caleCards) {
      if (maxScore == caleCards[w].scores) {
        //三条
        var s = caleCards[w].scores;
        str = (parseInt(s) >= 10 ? s : "0" + s) + str;

        var c = caleCards[w].color; //牌色
        valueColor = c + valueColor; //牌色
      } else {
          var s = caleCards[w].scores;
          oneValue = (parseInt(s) >= 10 ? s : "0" + s) + oneValue;

          var c = caleCards[w].color; //牌色
          if (parseInt(s) < 20) {
            oneValueColor = c + oneValueColor; //牌色
          } else {
              oneValueColor20 = c + oneValueColor20; //牌色
            }
        }
    }
    if (isTou) {
      oneValue = oneValue + '0000';
      valueColor = valueColor + '00';
    }
    str = str + oneValue + oneValueColor + valueColor + oneValueColor20;
    return typeScore + parseInt(str);
  } else if (typeScore == 2000000000000000) {
    //caleCards.sort(KQCard.sort);
    //两对,有可能需要比5张牌
    var str = "";
    var oneValue = '';
    var valueColor = ""; //牌色
    var oneValueColor = ""; //牌色
    for (var i in pointHelper.pointNumbers) {
      if (pointHelper.pointNumbers[i] == 2) {
        //两对
        for (var w in caleCards) {
          if (i == caleCards[w].scores) {
            var s = caleCards[w].scores;
            str = (parseInt(s) >= 10 ? s : "0" + s) + str;
            var c = caleCards[w].color; //牌色
            valueColor = c + valueColor; //牌色
          }
        }
      } else {
          for (var q in caleCards) {
            //单张加花色
            if (i == caleCards[q].scores) {
              var s = caleCards[q].scores;
              oneValue = (parseInt(s) >= 10 ? s : "0" + s) + oneValue;

              var c = caleCards[q].color; //牌色
              oneValueColor = oneValueColor + c; //牌色
            }
          }
        }
    }
    cc.log(str);
    cc.log(oneValue);
    str = str + oneValue + oneValueColor + valueColor;
    return typeScore + parseInt(str);
  } else if (typeScore == 1000000000000000) {
    //对子
    //caleCards.sort(KQCard.sort);
    var str = "";
    var oneValue = "";
    var oneValueColor = "";
    var valueColor = "";

    if (card20.length > 0) {
      caleCards.sort(function (card1, card2) {
        return card2.point - card1.point;
      });
      caleCards = caleCards.kq_excludes(card20);
      caleCards.forEach(function (card, index) {
        var s = card.scores;
        var c = card.color;
        str = str + (parseInt(s) >= 10 ? s : "0" + s);
        if (index == 0) {
          var s20 = card20[0].scores;
          str = str + (parseInt(s20) >= 10 ? s20 : "0" + s20);
          valueColor = valueColor + c;
          valueColor = valueColor + card20[0].color;
        } else {
          oneValueColor = oneValueColor + c;
        }
      });
      cc.log(str);
      cc.log('--------274');
      if (isTou) {
        str = str + '0000';
        valueColor = valueColor + '00';
      }
      str = str + oneValueColor + valueColor;
      return typeScore + parseInt(str);
    }

    for (var i in pointHelper.pointNumbers) {
      if (pointHelper.pointNumbers[i] == maxNum) {
        //对子
        for (var w in caleCards) {
          //对子加花色
          if (i == caleCards[w].scores) {
            var s = caleCards[w].scores;
            valueColor = caleCards[w].color + valueColor;
            str = (parseInt(s) >= 10 ? s : "0" + s) + str;
          }
        }
      } else {
        for (var q in caleCards) {
          //单张加花色
          if (i == caleCards[q].scores) {
            var s = caleCards[q].scores;
            oneValueColor = caleCards[q].color + oneValueColor;
            oneValue = (parseInt(s) >= 10 ? s : "0" + s) + oneValue;
          }
        }
      }
    }
    //cc.log(oneValueColor)
    //cc.log(valueColor)
    if (isTou) {
      oneValue = oneValue + '0000';
      valueColor = valueColor + '00';
    }
    str = str + oneValue + oneValueColor + valueColor;
    return typeScore + parseInt(str);
  } else if (typeScore == 0) {
    //乌龙
    var valuePoint = "";
    var valueColor = "";
    for (var q in caleCards) {
      var s = caleCards[q].scores;
      var c = caleCards[q].color; //单张加花色
      valuePoint = (parseInt(s) >= 10 ? s : "0" + s) + valuePoint;
      valueColor = c + valueColor;
    }
    if (isTou) {
      valuePoint = valuePoint + '0000';
      valueColor = valueColor + '00';
    }
    valuePoint = valuePoint + valueColor;
    return typeScore + parseInt(valuePoint);
  }

  var cardsTotalPoint = 0;
  caleCards.forEach(function (card) {
    cardsTotalPoint += card.point;
  });

  var result = typeScore + cardsTotalPoint;
  return result;
};
KQCard._changeCardScors = function (cardModel) {
  cardModel.forEach(function (card) {
    card.scores = card.point;
    if (card.scores == 14) {
      card.scores = 1;
    }
  });
  var is14 = false; //是 k q j 10 A;
  var is1 = false; //不是1 2 3 4 5
  cardModel.forEach(function (card) {
    if (card.scores < 9) {
      is14 = true; //不是 k q j 10 A;
      if (card.scores < 6 && card.scores > 1) {
        is1 = true; //是1 2 3 4 5
      }
    }
  });

  if (is14) {
    //不是 k q j 10 A;
    cardModel.forEach(function (card) {
      if (card.scores == 14) {
        card.scores = 1;
      }
    });
  }
  if (is14 && !is1) {
    //不是 k q j 10 A;
    cardModel.sort(function (a1, a2) {
      return a1.scores - a2.scores;
    });

    var scoresAyy = []; //一副牌的分数
    for (var i = 0; i < 5; i++) {
      var s = parseInt(cardModel[0].scores) + i; //最小的牌的分数
      scoresAyy.push(s);
    }
    for (var j = 0; j < scoresAyy.length; j++) {
      for (var i = 0; i < cardModel.length; i++) {
        var cardScores = cardModel[i].scores;
        if (cardScores == scoresAyy[j] && cardScores < 15) {
          scoresAyy.splice(j, 1); //删除不是鬼牌的分
        }
      }
    }
    cardModel.forEach((function (card) {
      //改变牌的分数
      if (card.point >= 20) {
        card.scores = scoresAyy.splice(0, 1)[0];
      }
    }).bind(this));
  } else {
    //是 k q j 10 A;
    cardModel.sort(function (a1, a2) {
      return a2.scores - a1.scores;
    });
    var num = 14;
    if (is1) {
      //是1 2 3 4 5
      num = 5;
    }
    var scoresAyy = []; //一副牌的分数
    for (var i = 0; i < 5; i++) {
      scoresAyy.push(num);
      num -= 1;
    }
    for (var j = 0; j < scoresAyy.length; j++) {
      for (var i = 0; i < cardModel.length; i++) {
        var cardScores = cardModel[i].scores;
        if (cardScores == scoresAyy[j] && cardScores < 15) {
          scoresAyy.splice(j, 1); //删除不是鬼牌的分
        }
      }
    }
    cc.log(scoresAyy);
    cc.log(cardModel);
    cc.log('----------412');
    cardModel.forEach((function (card) {
      //找出选中的牌
      if (card.point >= 20) {
        card.scores = scoresAyy.splice(0, 1)[0];
      }
    }).bind(this));
    cc.log(cardModel);
  }

  cardModel.forEach(function (card) {
    if (card.scores == 1) {
      card.scores = 14;
    }
  });
  cardModel.sort(function (a1, a2) {
    return a1.scores - a2.scores;
  });
  return cardModel;
};
/*#####*/
KQCard.scoreOfCards2 = function (cards) {
  if (cards == null || cards.length == null) {
    cards = [];
  }
  if (typeof cards[0].point == 'undefined') {
    cards = KQCard.cardsFromArray(cards);
  }
  var caleCards = KQCard._convertOneToA(cards.slice());
  caleCards.sort(KQCard.sort);
  //var pointHelper = new KQCardPointsHelper(caleCards);
  var valueStr = "";
  for (var i in caleCards) {
    var s = caleCards[i].point;
    valueStr = (parseInt(s) >= 10 ? s : "0" + s) + valueStr;
    if (i == 4) {
      valueStr = '.' + valueStr;
    }
  }
  //cc.log(Number(valueStr))
  //cc.log(valueStr)
  //cc.log('---------特殊牌算分')
  return valueStr;
};

KQCard._typeScoreOfCards = function (cards) {
  var typeScore = 0;
  if (KQCard.containWuTong(cards)) {
    typeScore = 9000000000000000;
  } else if (KQCard.containTongHuaShun(cards)) {
    typeScore = 8000000000000000;
  } else if (KQCard.containTieZhi(cards)) {
    typeScore = 7000000000000000;
  } else if (KQCard.containHuLu(cards)) {
    typeScore = 6000000000000000;
  } else if (KQCard.containTongHua(cards)) {
    typeScore = 5000000000000000;
  } else if (KQCard.containShunZi(cards)) {
    typeScore = 4000000000000000;
  } else if (KQCard.containSanTiao(cards)) {
    typeScore = 3000000000000000;
  } else if (KQCard.containLiaDui(cards)) {
    typeScore = 2000000000000000;
  } else if (KQCard.containDuiZi(cards)) {
    typeScore = 1000000000000000;
  }

  return typeScore;
};

// 根据牌型进行排序
KQCard._typeCardsSort = function (cards) {
  if (cards == null || cards.length == 0) {
    return cards;
  }
  if (KQCard.containWuTong(cards)) {
    return KQCard._typeCardsSortWutong(cards);
  } else if (KQCard.containTongHuaShun(cards)) {
    return KQCard._typeCardsSortShunZi(cards);
  } else if (KQCard.containTieZhi(cards)) {
    return KQCard._typeCardsSortTieZhi(cards);
  } else if (KQCard.containHuLu(cards)) {
    return KQCard._typeCardsSortHuLu(cards);
  } else if (KQCard.containTongHua(cards)) {
    return KQCard._typeCardsSortTongHua(cards);
  } else if (KQCard.containShunZi(cards)) {
    return KQCard._typeCardsSortShunZi(cards);
  } else if (KQCard.containSanTiao(cards)) {
    return KQCard._typeCardsSortSanTiao(cards);
  } else if (KQCard.containLiaDui(cards)) {
    return KQCard._typeCardsSortLiangDui(cards);
  } else if (KQCard.containDuiZi(cards)) {
    return KQCard._typeCardsSortDuiZi(cards);
  }

  return cards.sort(KQCard.sortByPoint).reverse();
};

KQCard._typeCardsSortShunZi = function (cards) {
  return cards.sort(KQCard.sortByPoint).reverse();
};

KQCard._typeCardsSortTieZhi = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};

/*#####*/
KQCard._typeCardsSortWutong = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};
/*#####*/

KQCard._typeCardsSortHuLu = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};

KQCard._typeCardsSortTongHua = function (cards) {
  return cards.sort(KQCard.sortByPoint).reverse();
};

KQCard._typeCardsSortSanTiao = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};

KQCard._typeCardsSortLiangDui = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};

KQCard._typeCardsSortDuiZi = function (cards) {
  return KQCard._typeCardsSortByNumberOfPoints(cards);
};

KQCard._typeCardsSortByNumberOfPoints = function (cards) {
  var pointHelper = new KQCardScoretsHelper(cards);
  var newCards = cards.slice().sort(function (card1, card2) {
    var numberOfCard1 = pointHelper.pointNumbers[card1.point];
    var numberOfCard2 = pointHelper.pointNumbers[card2.point];

    if (numberOfCard2 != numberOfCard1) {
      return numberOfCard2 - numberOfCard1;
    }

    return card2.point - card1.point;
  });

  return newCards;
};

KQCard.testScore = function () {};

cc._RFpop();
},{"KQCard":"KQCard","KQCardColorsHelper":"KQCardColorsHelper","KQCardFindTypeExtension":"KQCardFindTypeExtension","KQCardScoretsHelper":"KQCardScoretsHelper"}],"KQCardScoretsHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, '3d3b5YPHXhN44h/B0miZFRE', 'KQCardScoretsHelper');
// scripts\KQCard\KQCardScoretsHelper.js

// 牌点数帮助类
// 用来计算一个牌数组内的相同点数的牌的张数
var KQCardScoretsHelper = function KQCardScoretsHelper(cards) {
    this.pointNumbers = {};
    cards.forEach((function (card) {
        var point = card.scores;
        var number = this.pointNumbers[point] || 0;
        this.pointNumbers[point] = number + 1;
    }).bind(this));
};

// 相同点数牌的最大数量
KQCardScoretsHelper.prototype.maxNumber = function () {
    var result = 0;
    for (var prop in this.pointNumbers) {
        var number = this.pointNumbers[prop];
        //if(number < 20){
        result = Math.max(number, result);
        //}
    }

    return result;
};

module.exports = KQCardScoretsHelper;

/*var cards = [
    {'suit':'s',number:2},
    {'suit':'s',number:2},
    {'suit':'s',number:4},
    {'suit':'s',number:4},
    {'suit':'s',number:6},
    {'suit':'s',number:6},
    {'suit':'s',number:8},
    {'suit':'s',number:8},
    {'suit':'s',number:10},
    {'suit':'s',number:10},
    {'suit':'s',number:12},
    {'suit':'s',number:12},
    {'suit':'s',number:14}
];
var test = new KQCardPointsSame(cards);
console.log(test);*/

cc._RFpop();
},{}],"KQCardSelectExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '66642YNpFVIzb+JM2CkwEgS', 'KQCardSelectExtension');
// scripts\KQCard\KQCardSelectExtension.js

var KQCard = require('KQCard');
var KQCardFindTypeExtension = require('KQCardFindTypeExtension');

// 牌自动选择的扩展

/**
 * 自动选择牌，由大到小
 *
 * @param  {[KQCard]} originCards  被选择的原始牌数组
 *
 * @return {[KQCard]}
 */
KQCard.autoSelectCards = function (originCards, maxLength) {
    if (originCards.length <= maxLength) {
        return originCards;
    }
    originCards.forEach(function (card) {
        if (card.scores == 1) {
            card.scores = 14;
        }
    });
    var cards = originCards.slice().sort(function (a, b) {
        return a.scores - b.scores;
    });
    //cc.log(cards)
    //cc.log(originCards)
    //cc.log('--------25')
    //cards.sort(function(a,b){
    //    return a.scores - b.scores;
    //});
    //originCards = KQCard._convertOneToA(originCards);

    var findFuncs = [KQCard.findWuTong, KQCard.findTongHuaShun, KQCard.findTieZhi, KQCard.findHuLu, KQCard.findTongHua, KQCard.findShunZi, KQCard.findSanTiao, KQCard.findLiaDui, KQCard.findDuiZi];

    var indexArrays = null;
    for (var i = 0; i < findFuncs.length; ++i) {
        var func = findFuncs[i];
        indexArrays = func.bind(KQCard)(cards);
        if (indexArrays && indexArrays.length > 0) {
            break;
        }
    }

    var indexs = [];
    if (indexArrays && indexArrays.length > 0) {
        // 找出同类型的牌里的分数最大的牌
        var maxScore = 0;
        indexArrays.forEach(function (tempIndexs) {
            var tempCards = tempIndexs.map(function (index) {
                return cards[index];
            });
            var score = KQCard.scoreOfCards(tempCards);
            if (score > maxScore) {
                maxScore = score;
                indexs = tempIndexs;
            }
        });
    }

    var targetCards = indexs.map(function (index) {
        return cards[index];
    });

    if (targetCards.length < maxLength) {
        cards = cards.kq_excludes(targetCards);
        while (targetCards.length < maxLength) {
            targetCards.push(cards.pop());
        }
    } else if (targetCards.length > maxLength) {
        targetCards = targetCards.slice(o, maxLength);
    }

    return targetCards;
};

KQCard.testAutoSelect = function (cards) {};

cc._RFpop();
},{"KQCard":"KQCard","KQCardFindTypeExtension":"KQCardFindTypeExtension"}],"KQCard":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'c548c0gMf5BGIH4309MULw+', 'KQCard');
// scripts\KQCard\KQCard.js

var KQCardColorsHelper = require('KQCardColorsHelper');
var KQCardPointsHelper = require('KQCardPointsHelper');
var NumberExtension = require('NumberExtension');
var GetCardPointsSameCount = require('GetCardPointsSameCount');

cc = cc || {};
cc.assert = cc.assert || console.assert || function () {};
cc.log = cc.log || console.log || function () {};
cc.error = cc.error || console.error || function () {};

// 牌 Model 类，封装了花色和点数
// 使用：
// new KQCard(22);
var KQCard = function KQCard(point, color, index) {
    this.color = null;
    this.point = null;
    this.sindex = index;
    this._initWithColorAndPoint = function (color, point) {
        if (color == 's') {
            color = 4;
        }
        if (color == 'h') {
            color = 3;
        }
        if (color == 'c') {
            color = 2;
        }
        if (color == 'd') {
            color = 1;
        }

        this.point = Number(point);
        this.scores = Number(point);
        this.color = Number(color);
        this.colorScores = Number(color);

        cc.assert(this.point > 0);
        cc.assert(this.color > 0);
    };

    this._initWithNumber = function (number) {
        this.point = Math.floor(number / 10);
        this.color = number % 10;
        cc.assert(this.point > 0);
        cc.assert(this.color > 0);
    };

    this._initWithObject = function (object) {
        if (object.point) {
            this._initWithColorAndPoint(object.color, object.point);
        } else if (object.suit) {
            this._initWithColorAndPoint(object.suit, object.number);
        }
    };

    this.description = function () {
        return this.cardName();
    };

    this.cardName = function () {
        return this.color + "_" + this.point;
    };

    this.sort = function (otherCard) {
        var asc = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
        var AisMax = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

        return KQCard.sort(this, otherCard, asc, AisMax);
    };

    this.isEqual = function (otherCard) {
        if (!otherCard) {
            return false;
        }
        return this.point == otherCard.point && this.color == otherCard.color && this.sindex == otherCard.sindex;
    };

    if (point && color) {
        this._initWithColorAndPoint(color, point);
        return;
    }

    var number = Number(point);
    if (!Number.isNaN(number)) {
        this._initWithNumber(number);
        return;
    }

    if (typeof point == 'string') {
        // 解析 xxxxd_d 形式
        var found = point.match(/(\.)*\d_\d+/);
        if (found instanceof Array && found.length > 0) {
            var result = found[0];
            var numbers = result.split('_');

            var _color = Number(numbers[0]);
            var _point = Number(numbers[1]);
            this._initWithColorAndPoint(_color, _point);
        }

        return;
    }

    if (typeof point == 'object') {
        this._initWithObject(point);
        return;
    }

    cc.error("初始化错误：" + point + " " + color);
};

// 转换成服务器的牌 model
KQCard.prototype.toServerCard = function () {
    return {
        'suit': this.color,
        'number': this.point
    };
};

KQCard.COLOR_SPADE = 4;
KQCard.COLOR_HEART = 3;
KQCard.COLOR_CLUB = 2;
KQCard.COLOR_DIAMOND = 1;

module.exports = KQCard;

KQCard.cardsFromArray = function (cardNames) {
    return cardNames.map(function (cardName, index) {
        return new KQCard(cardName, null, index);
    });
};

// 将多张牌转换成服务器的形式
KQCard.convertToServerCards = function (cards) {
    return cards.map(function (card) {
        return card.toServerCard();
    });
};

KQCard.TYPE = {
    WuLong: 0,
    DuiZi: 1,
    LiangDui: 2,
    SanTiao: 3,
    ShunZi: 4,
    TongHua: 5,
    HuLu: 6,
    TieZhi: 7,
    TongHuaShun: 8,
    /*#####*/
    WuTong: 9,
    /*#####*/
    SanTaoHua: 10, // 特殊牌
    SanShunZi: 11,
    LiuDuiBan: 12,

    WuDuiSanTiao: 13,
    SiTaoSanTiao: 14,

    CouYiSe: 15,
    SanFenTianXia: 16,
    SanTongHuaShun: 17,
    YiTiaoLong: 18,
    QingLong: 19
};

// 牌类型名
KQCard.cardsTypeName = function (cards) {
    var names = ['乌龙', '对子', '两对', '三条', '顺子', '同花', '葫芦', '铁支', '同花顺', '五同', '三同花', '三顺子', '六对半', '五对三条', '四套三条', '凑一色', '三分天下', '三同花顺', '一条龙', '清龙'];
    var type = KQCard.cardsType(cards);
    return names[type];
};

// 找出牌的类型
KQCard.cardsType = function (cards) {
    if (KQCard.isQingLong(cards)) {
        return KQCard.TYPE.QingLong;
    }

    if (KQCard.isYiTiaoLong(cards)) {
        return KQCard.TYPE.YiTiaoLong;
    }

    if (KQCard.isSanTongHuaShun(cards)) {
        return KQCard.TYPE.SanTongHuaShun;
    }

    if (KQCard.isSanFenTianXia(cards)) {
        return KQCard.TYPE.SanFenTianXia;
    }

    if (KQCard.isLiuDuiBan(cards)) {
        return KQCard.TYPE.LiuDuiBan;
    }

    if (KQCard.isSanTongHua(cards)) {
        return KQCard.TYPE.SanTaoHua;
    }

    if (KQCard.isSanShunZi(cards)) {
        return KQCard.TYPE.SanShunZi;
    }

    if (KQCard.isSanShunZi1(cards)) {
        return KQCard.TYPE.SanShunZi;
    }

    if (KQCard.isCouYiSe(cards)) {
        return KQCard.TYPE.CouYiSe;
    }

    if (KQCard.isWuDuiSanTiao(cards)) {
        return KQCard.TYPE.WuDuiSanTiao;
    }

    if (KQCard.isSiTaoSanTiao(cards)) {
        return KQCard.TYPE.SiTaoSanTiao;
    }

    /*#####*/
    if (KQCard.containWuTong(cards, 5)) {
        return KQCard.TYPE.WuTong;
    }

    //if (KQCard.containWuTong(cards)) {
    //    return KQCard.TYPE.WuTong;
    //}
    //
    //if (KQCard.containWuTong(cards)) {
    //    return KQCard.TYPE.WuTong;
    //}
    /*#####*/

    if (KQCard.containTongHuaShun(cards, 5)) {
        return KQCard.TYPE.TongHuaShun;
    }

    if (KQCard.containTieZhi(cards)) {
        return KQCard.TYPE.TieZhi;
    }

    if (KQCard.containHuLu(cards)) {
        return KQCard.TYPE.HuLu;
    }

    if (KQCard.containTongHua(cards)) {
        return KQCard.TYPE.TongHua;
    }

    if (KQCard.containShunZi(cards)) {
        return KQCard.TYPE.ShunZi;
    }

    if (KQCard.containSanTiao(cards)) {
        return KQCard.TYPE.SanTiao;
    }

    if (KQCard.containLiaDui(cards)) {
        return KQCard.TYPE.LiangDui;
    }

    if (KQCard.containDuiZi(cards)) {
        return KQCard.TYPE.DuiZi;
    }

    return KQCard.TYPE.WuLong;
};

// 判断是否是同花
KQCard.isTongHua = function (cards) {
    var minLength = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

    if (cards.length < minLength) {
        return false;
    }

    var colors = cards.map(function (card) {
        return card.color;
    });

    var color = colors[0];
    for (var index in colors) {
        var e = colors[index];
        if (e != color) {
            return false;
        }
    }
    return true;
};

// 是否包含同花
KQCard.containTongHua = function (cards) {
    var minLength = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

    if (cards.length < minLength) {
        return false;
    }
    if (KQCard.findTongHua(cards).length > 0) {
        return true;
    }
    return false;
    //cards = Array.from(cards);
    //cards.sort(KQCard.sortByColor);
    //
    //for (var start = 0; (start + minLength) <= cards.length; ++start) {
    //    let subCards = cards.slice(start, start + minLength);
    //    if (KQCard.isTongHua(subCards, minLength)) {
    //        return true;
    //    }
    //}

    //return KQCard.containTongHua20(cards);
};
KQCard.containTongHua20 = function (card) {
    if (card.length < 5) {
        return false;
    }
    var card20 = KQCard.contain20(card);
    var cards = card.kq_excludes(card20);
    cards.sort(KQCard.sortByColor);

    for (var j = 1; j <= card20.length; ++j) {
        var num = 5 - j;
        for (var start = 0; start + num <= cards.length; ++start) {
            var subCards = cards.slice(start, start + num);
            if (KQCard.isTongHua(subCards, num)) {
                return true;
            }
        }
    }
    return false;
};
// 判断是否是顺子
KQCard.isShunZi = function (cards) {
    var minLength = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

    if (cards.length < minLength) {
        return false;
    }

    if (KQCard._isShunZiAKQ(cards)) {
        return true;
    }

    var points = cards.map(function (card) {
        return card.point;
    }).sort(function (n1, n2) {
        return n1 - n2;
    });

    var point = points[0];
    for (var index in points) {
        var e = points[index];
        if (e != point) {
            return false;
        }

        point = point + 1;
    }

    return true;
};

// 判断是否是 A K Q J 10 这个顺子
KQCard._isShunZiAKQ = function (cards) {
    var length = cards.length;
    if (length.length < 3) {
        return false;
    }

    var point1s = [1];
    var point14s = [14];
    var pointK = 13;

    Number(length - 1).kq_times(function (times) {
        point1s.push(pointK - times);
        point14s.push(pointK - times);
    });

    return KQCard._isCardsContainPoints(cards, point1s) || KQCard._isCardsContainPoints(cards, point14s);
};

// cards 中是否包含 points 这些点数

KQCard._isCardsContainPoints = function (cards, points) {
    var _loop = function (index) {
        var point = points[index];
        var pointCardIndex = cards.findIndex(function (card) {
            return card.point == point;
        });

        if (pointCardIndex < 0) {
            return {
                v: false
            };
        }
    };

    for (var index = 0; index < points.length; ++index) {
        var _ret = _loop(index);

        if (typeof _ret === 'object') return _ret.v;
    }

    return true;
};
KQCard.contain20 = function (cards) {
    if (typeof cards[0].point == 'undefined') {
        cards = KQCard.cardsFromArray(cards);
    }
    var newCard = cards.filter(function (card) {
        //重新赋值cards
        if (card.point >= 20) {
            return card;
        }
    });
    return newCard || [];
};
// 是否包含顺子
KQCard.containShunZi = function (cards) {
    var minLength = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

    if (cards.length < minLength) {
        return false;
    }
    if (KQCard.findShunZi(cards).length > 0) {
        return true;
    }
    return false;
    //let uniqueCards = cards.unique(function(card1, card2) {
    //    return card1.point == card2.point;
    //});
    //uniqueCards.sort(KQCard.sortByPoint);
    //
    //let minPointCard = uniqueCards[0];
    //if (minPointCard.point == 1) {
    //    let APlusCard = new KQCard(minPointCard);
    //    APlusCard.point = 14;
    //    uniqueCards.push(APlusCard);
    //}
    //
    //for (var start = 0; (start + minLength) <= uniqueCards.length; ++start) {
    //    let subCards = uniqueCards.slice(start, start + minLength);
    //    if (KQCard.isShunZi(subCards, minLength)) {
    //        return true;
    //    }
    //}
    //
    //return KQCard.containShunZi20(cards);
};
/*KQCard.containShunZi20 = function (card) {
    if (card.length < 5) {
        return false;
    }
    var card20 = KQCard.contain20(card);
    var cards = card.kq_excludes(card20);
    // 先根据点数去重
    var newArr = [];
    var newArrs = [];
    for (var i = 0; i < cards.length; i++) {
        if (newArrs.indexOf(cards[i].point) == -1) {
            newArr.push(cards[i]);
            newArrs.push(cards[i].point);
        }
    }
    //newArr.forEach(function(card){
    //    if(card.scores == 14){
    //        card.scores = 1;
    //    }
    //})
    newArr.sort(function (n1, n2) {
        return n1.point - n2.point;
    });
    for(var j = 1;j <= card20.length;++j){
        var num = 5 - j;
        for (var start = 0; (start + num) <= newArr.length; ++start) {
            var subCards = newArr.slice(start, start + num);
            var bool = parseInt(subCards[num-1]['scores']) - parseInt(subCards[0]['scores']) < 5;
            if(bool){
                return true;
            }
        }
    }
    // 由于点数是唯一且升序，只需要依次遍历判断是否是顺子即可
    let convertedCards = KQCard._convertOneToA1(card);
    if (card === convertedCards) {
        return false;
    }
    return KQCard.containShunZi20(convertedCards);
};*/
// 是否是同花顺
KQCard.isTongHuaShun = function (cards) {
    return KQCard.isTongHua(cards) && KQCard.isShunZi(cards);
};

// 是否包含有同花顺
KQCard.containTongHuaShun = function (cards) {
    var minLength = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

    if (cards.length < minLength) {
        return false;
    }
    if (KQCard.findTongHuaShun(cards).length > 0) {
        return true;
    }
    return false;
    //var sanShunZi = KQCard.sanShunZi1(cards,minLength)[0];
    //if(sanShunZi == null){
    //    return false;
    //}
    //var result = false;
    //for(var i=0;i<sanShunZi.length;i++) {
    //    var s = sanShunZi[i];
    //    if (KQCard.isTongHuaShun(s, minLength)) {
    //        return true;
    //    }
    //}
    //return KQCard.containTongHuaShun1(cards);
};
/*KQCard.containTongHuaShun1 = function (cards, minLength = 5) {
    if (cards.length < minLength) {
        return false;
    }
    let tempCards = Array.from(cards).sort(KQCard.sortByColor);
    for (var start = 0; (start + minLength) <= tempCards.length; ++start) {
        let subCards = tempCards.slice(start, start + minLength);
        if (KQCard.isTongHuaShun(subCards, minLength)) {
            return true;
        }
    }

    let convertedCards = KQCard._convertOneToA1(cards);
    if (cards === convertedCards) {
        return KQCard.containTongHuaShun20(cards);
    }
    return KQCard.containTongHuaShun1(convertedCards);
    //return false;
};
KQCard.containTongHuaShun20 = function (card, minLength = 5) {
    if (card.length < minLength) {
        return false;
    }
    var card20 = KQCard.contain20(card) || [];
    var cards = card.kq_excludes(card20);

    cards = Array.from(cards);
    var colorS = []; //黑桃
    var colorH = []; //红心
    var colorC = []; //梅花
    var colorD = []; //方块
    var pointS = []; //黑桃
    var pointH = []; //红心
    var pointC = []; //梅花
    var pointD = []; //方块
    for(var i=0;i<cards.length;i++){
        if(cards[i].color == '4'){
            if(pointS.indexOf(cards[i].point) == -1){
                pointS.push(cards[i].point);
                colorS.push(cards[i]);
            }

        }else if(cards[i].color == '3'){
            if(pointH.indexOf(cards[i].point) == -1){
                pointH.push(cards[i].point);
                colorH.push(cards[i]);
            }
        }else if(cards[i].color == '2'){
            if(pointC.indexOf(cards[i].point) == -1){
                pointC.push(cards[i].point);
                colorC.push(cards[i]);
            }
        }else if(cards[i].color == '1'){
            if(pointD.indexOf(cards[i].point) == -1){
                pointD.push(cards[i].point);
                colorD.push(cards[i]);
            }
        }
    }

    var color = [colorS,colorH,colorC,colorD];
    var colorSum = [];    //总共有几种花色 [5,3,0....]
    for(var i=0;i<color.length;i++){
        if(color[i].length >= parseInt(5 - card20.length)){
            //color[i].forEach(function(ca){
            //    if(ca.scores == 14){
            //        ca.scores = 1;
            //    }
            //})
            color[i].sort(function(a1,a2){
                return a1 - a2;
            })
            colorSum.push(color[i]);
        }
    }

    for(var i=0;i<colorSum.length;i++) {
        var s = colorSum[i]
        for(var j = 1;j <= card20.length;++j){
            var num = 5 - j;
            for (var start = 0; (start + num) <= s.length; ++start) {
                var subCards = s.slice(start, start + num);
                var bool = parseInt(subCards[num-1]['scores']) - parseInt(subCards[0]['scores']) < 5;
                if(bool){
                    return true;
                }
            }
        }
    }



    let convertedCards = KQCard._convertOneToA1(card);
    if (card === convertedCards) {
        return false;
    }
    return KQCard.containTongHuaShun20(convertedCards);
};*/

// 是否是清龙
KQCard.isQingLong = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    /**
     *
     */
    var colorS = []; //黑桃
    var colorH = []; //红心
    var colorC = []; //梅花
    var colorD = []; //方块
    for (var i = 0; i < cards.length; i++) {
        if (cards[i].suit == 's') {
            colorS.push(cards[i]);
        } else if (cards[i].suit == 'h') {
            colorH.push(cards[i]);
        } else if (cards[i].suit == 'c') {
            colorC.push(cards[i]);
        } else if (cards[i].suit == 'd') {
            colorD.push(cards[i]);
        }
    }
    var ls = colorS.length; //黑桃个数
    var lh = colorH.length; //红桃个数
    var lc = colorC.length; //梅花个数
    var ld = colorD.length; //方块个数
    var color = [ls, lh, lc, ld];
    var colorSum = []; //总共有几种花色 [5,3,0....]
    for (var i = 0; i < color.length; i++) {
        if (color[i] != 0) {
            colorSum.push(color[i]);
        }
    }
    if (colorSum.length == 1) {
        if (colorSum[0] == 13) {
            return KQCard.isYiTiaoLong(cards);
        }
    }
    //return KQCard.isTongHuaShun(cards);
    return false;
};

// 是否是一条龙
KQCard.isLong = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }

    return KQCard.isShunZi(cards);
};

/*#####*/
/*是否一条龙*/
KQCard.isYiTiaoLong = function (cards) {
    //cards:{number:1~13 ,'suit':'h'...}
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    if (typeof cards[0].number == 'undefined') {
        cards = KQCard.convertToServerCards(cards);
    }
    var number = cards.map(function (card) {
        return card.number;
    }).sort(function (n1, n2) {
        return n1 - n2;
    });
    for (var i = 0; i < cards.length - 1; i++) {
        if (number[i] != number[i + 1] - 1) {
            return false;
        }
    }
    return true;
};
/*#####*/
/*是否三同花*/
KQCard.isSanTongHua = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    if (typeof cards[0].suit == "undefined") {
        cards = KQCard._convertCardsToCardNames(cards);
    }
    var colorS = []; //黑桃
    var colorH = []; //红心
    var colorC = []; //梅花
    var colorD = []; //方块
    for (var i = 0; i < cards.length; i++) {
        if (cards[i].suit == 's') {
            colorS.push(cards[i]);
        } else if (cards[i].suit == 'h') {
            colorH.push(cards[i]);
        } else if (cards[i].suit == 'c') {
            colorC.push(cards[i]);
        } else if (cards[i].suit == 'd') {
            colorD.push(cards[i]);
        }
    }
    var ls = colorS.length; //黑桃个数
    var lh = colorH.length; //红桃个数
    var lc = colorC.length; //梅花个数
    var ld = colorD.length; //方块个数
    var color = [ls, lh, lc, ld];
    var colorSum = []; //总共有几种花色 [5,3,0....]
    for (var i = 0; i < color.length; i++) {
        if (color[i] != 0) {
            colorSum.push(color[i]);
        }
    }

    //如果牌中包含四种花色就不可能是三同花
    if (colorSum.length == 4) {
        return false;
    }

    //三种花色
    if (colorSum.length == 3) {
        for (var i = 0; i < colorSum.length; i++) {
            if (colorSum[i] != 5 && colorSum[i] != 3) {
                return false;
            }
        }
        return true;
    }
    //两种花色
    else if (colorSum.length == 2) {
            for (var i = 0; i < colorSum.length; i++) {
                if (colorSum[i] != 10 && colorSum[i] != 3 && colorSum[i] != 8 && colorSum[i] != 5) {
                    return false;
                }
            }

            return true;
        }
        //一种花色
        else if (colorSum.length == 1) {
                if (colorSum[0] == 13) {
                    return true;
                }
            }
};
/*是否凑一色*/
KQCard.isCouYiSe = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    if (typeof cards[0].suit == 'undefined') {
        cards = KQCard._convertCardsToCardNames(cards);
    }
    var colorS = []; //黑桃
    var colorH = []; //红心
    for (var i = 0; i < cards.length; i++) {
        if (cards[i].suit == 's' || cards[i].suit == 'c') {
            colorS.push(cards[i]); //全黑
        } else if (cards[i].suit == 'h' || cards[i].suit == 'd') {
                colorH.push(cards[i]); //全红
            }
    }

    //如果牌中包含四种花色就不可能是三同花
    if (colorS.length == 13 || colorH.length == 13) {
        return true;
    }
    //else if(colorH.length == 13){
    //    return true;
    //}
    return false;
};
/*#####*/
// 是否是六对半
KQCard.isLiuDuiBan = function (cards) {
    var length = 12;
    if (cards.length < length) {
        return false;
    }

    var duiZiLength = 2;
    //计算一个牌数组内的相同点数的牌的张数
    var cardNumbers = new GetCardPointsSameCount(cards);
    var numberOfDuiZi = 0;
    var numberOfYi = 0;
    for (var prop in cardNumbers) {
        var value = cardNumbers[prop];
        if (value == duiZiLength) {
            numberOfDuiZi = numberOfDuiZi + 1;
        } else if (value >= 4) {
            numberOfDuiZi = numberOfDuiZi + 2;
        } else if (value == 1) {
            numberOfYi += 1;
        }
    }
    return numberOfDuiZi == 6;
};

KQCard.isWuDuiSanTiao = function (cards) {
    var length = 13;
    if (cards.length < length) {
        return false;
    }

    var duiZiLength = 2;
    var sanTiaoLength = 3;
    //计算一个牌数组内的相同点数的牌的张数
    var cardNumbers = new GetCardPointsSameCount(cards);
    var numberOfDuiZi = 0;
    var numberOfSanTiao = 0;
    for (var prop in cardNumbers) {
        var value = cardNumbers[prop];
        if (value == duiZiLength) {
            numberOfDuiZi = numberOfDuiZi + 1;
        } else if (value == sanTiaoLength) {
            numberOfSanTiao = numberOfSanTiao + 1;
        } else if (value >= 4) {
            numberOfDuiZi = numberOfDuiZi + 2;
        }
    }
    return numberOfDuiZi == 5 && numberOfSanTiao == 1;
};
/*#####*/
KQCard.isSanShunZi1 = function (cards) {
    if (cards.length != 13) {
        return false;
    }

    //取出牌的点数
    if (typeof cards[0].suit == 'undefined') {
        cards = KQCard._convertCardsToCardNames(cards);
    }
    //var card20 = KQCard.contain20(cards);
    //if(card20.length > 0) {
    //    return false;
    //}
    var number = cards.map(function (card) {
        return card.number;
    });
    //排序
    number.sort(function (n1, n2) {
        return n1 - n2;
    });
    if (KQCard.fenZhu(number, 5, 5) == false) {
        var number = cards.map(function (card) {
            return card.number;
        });
        //排序
        number.sort(function (n1, n2) {
            return n1 - n2;
        });
        if (KQCard.fenZhu(number, 5, 3) == false) {
            var number = cards.map(function (card) {
                return card.number;
            });
            //排序
            number.sort(function (n1, n2) {
                return n1 - n2;
            });
            if (KQCard.fenZhu(number, 3, 5) == false) {
                var AIsExist = false; //是否存在A
                for (var i in cards) {
                    if (cards[i].number == 1) {
                        AIsExist = true;
                        break;
                    }
                }
                if (!AIsExist) {
                    return false;
                }

                for (var i in cards) {
                    if (cards[i].number == 1) {
                        cards[i].number = 14;
                        break;
                    }
                }
                return KQCard.isSanShunZi1(cards);
            } else {
                return true;
            }
        } else {
            return true;
        }
    } else {
        return true;
    }
};

//判断5张或者3张是否顺子
KQCard.isShunZi1 = function (arr) {
    for (var i = 0; i < arr.length - 1; i++) {
        if (arr[i + 1] - arr[i] != 1) {
            //不是顺子
            return false;
        }
    }
    return true;
};

KQCard.fenZhu = function (number, num1, num2) {
    var arr1 = [];
    var arr2 = [];
    for (var i = 0; i < number.length - 1; i++) {
        if (i == 0) {
            arr1.push(number[0]);
        }
        if (number[i + 1] - number[i] == 0) {
            continue;
        }
        arr1.push(number[i + 1]);
        if (arr1.length == num1) {
            //取第一组是顺子
            if (KQCard.isShunZi1(arr1)) {
                //这5个是顺子,从数组中移除
                for (var i = 0; i < arr1.length; i++) {
                    for (var j = 0; j < number.length - 1; j++) {
                        if (number[j] == arr1[i]) {
                            //两个数一样的只删除一个
                            if (number[j] == number[j + 1]) {
                                continue;
                            }
                            number.splice(j, 1); //从number中移除
                        }
                    }
                }
                //接下来取第二组
                for (var i = 0; i < number.length - 1; i++) {
                    if (i == 0) {
                        arr2.push(number[0]);
                    }
                    if (number[i + 1] - number[i] == 0) {
                        continue;
                    }
                    arr2.push(number[i + 1]);
                    if (arr2.length == num2) {
                        //取第二组是顺子
                        if (KQCard.isShunZi1(arr2)) {
                            for (var i = 0; i < arr2.length; i++) {
                                for (var j = 0; j < number.length - 1; j++) {
                                    if (number[j] == arr2[i]) {
                                        //两个数一样的只删除一个
                                        if (number[j] == number[j + 1]) {
                                            continue;
                                        }
                                        number.splice(j, 1); //从number中移除
                                    }
                                }
                            }
                            //接下来就是剩下的了
                            if (KQCard.isShunZi1(number)) {
                                //第三组也是顺子
                                return true;
                            }
                            //第三组不是顺子
                            return false;
                        }
                        //第二组不是顺子
                        return false;
                    }
                }
            }
            //第一组不是顺子
            return false;
        }
    }
};
// isSanShunZi2是我写的
KQCard.isSanShunZi = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    if (typeof cards[0].point == 'undefined') {
        cards = KQCard.cardsFromArray(cards);
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    cards = Array.from(cards);
    cards.sort(KQCard.sortByPoint);
    var wei = [];
    var zhong = [];
    var tou = [];
    var sanShunZi = KQCard.sanShunZi1(cards)[0]; //获取所有组合的头道
    if (!sanShunZi) {
        //你连头道都没有 怎么更我混
        return false;
    }

    var newCard = cards.filter(function (i) {
        //重新赋值cards
        return i;
    });
    var newCards1 = [];
    var newPoint = []; //判断point是否相同
    var duiZi = []; //取出有对子当中的一张牌
    for (var s in cards) {
        if (newPoint.indexOf(cards[s].point) < 0) {
            newCards1.push(cards[s]);
            newPoint.push(cards[s].point);
        } else {
            //取出有对子当中的一张牌
            duiZi.push(cards[s]);
        }
    }

    for (var j = 0; j < sanShunZi.length; ++j) {
        //循环所有头道
        var number3 = sanShunZi[j];
        if (typeof number3 == 'undefined') {
            continue;
        }
        for (var i = 0; i < cards.length; ++i) {
            var newCards = newCards1.filter(function (i) {
                //重新赋值cards
                return i;
            });

            newCards = newCards.kq_excludes(number3); //删除牌里的头道
            if (wei.length != 5) {
                var subCards = newCards.slice(i, i + 5);
                if (KQCard.isShunZi(subCards)) {
                    //得到尾道 删除牌里的尾道
                    wei = subCards;
                    newCards = newCards.kq_excludes(subCards);
                }
            }
            if (wei.length == 5) {
                //把剩余的牌和对子的单张合并
                var tasks = duiZi.filter(function (i) {
                    //重新赋值对子
                    return i;
                });
                tasks = tasks.kq_excludes(number3); //判断头道和对子的单张是否有相同 有的话就删除
                newCards = newCards.concat(tasks); //把剩余的牌和对子的单张合并
            }
            if (zhong.length != 5 && newCards.length == 5) {
                if (KQCard.isShunZi(newCards)) {
                    //是三顺子
                    zhong = newCards;
                }
            }
            if (wei.length == 5 && zhong.length == 5) {
                //是三顺子终止循环
                break;
            } else {
                //来吧 继续吧
                zhong = [];wei = [];tou = [];
            }
        }
        if (wei.length == 5 && zhong.length == 5) {
            //是三顺子终止循环
            tou = number3;
            break;
        } else {
            //来吧 继续吧
            zhong = [];wei = [];tou = [];
        }
    }

    cards = newCard;
    if (KQCard._isSanShunZi(tou, zhong, wei)) {
        //是三顺子
        return true;
    }
    var convertedCards = KQCard._convertOneToA1(cards);
    if (cards === convertedCards) {
        return false;
    }
    return KQCard.isSanShunZi(convertedCards);
};

KQCard.sanShunZi1 = function (cards) {
    var length = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

    var shunzi = KQCard.findShunZi(cards, length);
    var cardsT = [];
    var cardsIndex = [];
    if (shunzi == null) {
        return false;
    }
    for (var i = 0; i < shunzi.length; i++) {
        var a = shunzi[i];
        var cardsShunzi = [];
        // var cardsIndex = [];
        for (var j = 0; j < a.length; j++) {
            var index = a[j];
            if (typeof cards[index] == 'undefined') {
                continue;
            }
            cardsShunzi.push(cards[index]);
        }
        cardsIndex.push(a);
        cardsT.push(cardsShunzi);
    }
    return [cardsT, cardsIndex];
};

KQCard._isSanShunZi = function (touCards, zhongCards, weiCards) {
    return KQCard.isShunZi(touCards) && KQCard.isShunZi(zhongCards) && KQCard.isShunZi(weiCards);
};
// 是否是三同花顺
KQCard.isSanTongHuaShun = function (cards) {
    var length = 13;
    if (cards.length != length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    var colorCardsObject = KQCard._colorClassCards(cards);

    var subCards = [];
    for (var prop in colorCardsObject) {
        var _cards = colorCardsObject[prop];
        subCards.push(_cards);
    }

    if (subCards.length != 3) {
        return false;
    }

    subCards = subCards.sort(function (s1, s2) {
        return s1.length > s2.length;
    });

    var touCards = subCards[0];
    var zhongCards = subCards[1];
    var weiCards = subCards[2];

    if (touCards.length != 3 || zhongCards.length != 5 || weiCards.length != 5) {
        return false;
    }

    return KQCard._isSanTongHuaShun(touCards, zhongCards, weiCards);
};

// 将牌根据 color 进行分类
KQCard._colorClassCards = function (cards) {
    var colorCardsObject = {};
    cards.forEach(function (card) {
        var color = card.color;
        var subCards = colorCardsObject[color];
        if (!subCards) {
            subCards = [];
            colorCardsObject[color] = subCards;
        }
        subCards.push(card);
    });

    return colorCardsObject;
};

// 是否是三同花顺
KQCard._isSanTongHuaShun = function (touCards, zhongCards, weiCards) {
    return KQCard.isTongHuaShun(touCards) && KQCard.isTongHuaShun(zhongCards) && KQCard.isTongHuaShun(weiCards);
};

// 是否是 “三分天下”
KQCard.isSanFenTianXia = function (cards) {
    var length = 13;
    if (cards.length < length) {
        return false;
    }

    var tieZhiLength = 4;
    var pointHelper = new KQCardPointsHelper(cards);
    var numberOfTieZhi = 0;
    for (var prop in pointHelper.pointNumbers) {
        var value = pointHelper.pointNumbers[prop];
        if (value == tieZhiLength) {
            numberOfTieZhi = numberOfTieZhi + 1;
        }
    }
    return numberOfTieZhi === 3;
};

// 是否是 “四套三条”
KQCard.isSiTaoSanTiao = function (cards) {
    var length = 13;
    if (cards.length < length) {
        return false;
    }
    var sanTiaoLength = 3;
    var pointHelper = new KQCardPointsHelper(cards);
    var numberOfSanTiao = 0;
    for (var prop in pointHelper.pointNumbers) {
        var value = pointHelper.pointNumbers[prop];
        if (value == sanTiaoLength) {
            numberOfSanTiao = numberOfSanTiao + 1;
        }
    }

    return numberOfSanTiao == 4;
};

// 是否是 “三桃花”
// 头、中、尾道为相同花色的牌
KQCard.isSanTaoHua = function (cards) {
    var length = 13;
    if (cards.length < length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    if (card20.length > 0) {
        return false;
    }
    var colorHelper = new KQCardColorsHelper(cards);
    var colorNumbers = [];
    for (var prop in colorHelper.colorNumber) {
        colorNumbers.push(colorHelper.colorNumber[prop]);
    }

    colorNumbers.sort(function (n1, n2) {
        return n1 - n2;
    });

    if (colorNumbers.length != 3) {
        return false;
    }

    if (colorNumbers[0] == 3 && colorNumbers[1] == 5 && colorNumbers[2] == 5) {
        return true;
    }

    return false;
};

// 判断是否包含铁支
// 四张同样点数的牌
KQCard.containTieZhi = function (cards) {
    var length = 4;
    if (cards.length < length) {
        return false;
    }
    //let helper = new KQCardPointsHelper(cards);
    //if(helper.maxNumber() >= length){
    //    return helper.maxNumber() >= length;
    //}else{
    //    return KQCard.containGuiPai(cards,4);
    //}
    if (KQCard.findTieZhi(cards).length > 0) {
        return true;
    }
    return false;
};

// 判断是否是铁支
KQCard.isTieZhi = function (cards) {
    var length = 4;
    if (cards.length != length) {
        return false;
    }

    var result = cards.reduce(function (point, card) {
        if (point == card.point) {
            return point;
        }
        return -1;
    }, cards[0].point);

    return result != -1;
};

/*#####是否包含五同*/
//五张同样点数的牌
KQCard.containWuTong = function (cards) {
    var length = 5;
    if (cards.length < length) {
        return false;
    }
    //五张牌相同的
    //let helper = new KQCardPocontain20intsHelper(cards);
    //if(helper.maxNumber() >= length){
    //    return helper.maxNumber() >= length;
    //}else{
    //    return KQCard.containGuiPai(cards,5);
    //}
    if (KQCard.findWuTong(cards).length > 0) {
        return true;
    }
    return false;
};

/*判断是否五同*/
KQCard.isWuTong = function (cards) {
    var length = 5;
    if (cards.length != length) {
        return false;
    }

    var result = cards.reduce(function (point, card) {
        if (point == card.point) {
            return point;
        }
        return -1;
    }, cards[0].point);

    return result != -1;
};
/*#####*/

// 是否是 “葫芦”
// 三张相同 + 一对
KQCard.containHuLu = function (cards) {
    var length = 5;
    if (cards.length < length) {
        return false;
    }
    if (KQCard.findHuLu(cards).length > 0) {
        return true;
    }
    //let pointHelper = new KQCardPointsHelper(cards);
    //var pointNumbers = [];
    //var index = 0;
    //for (let prop in pointHelper.pointNumbers) {
    //    pointNumbers[index] = pointHelper.pointNumbers[prop];
    //    index = index + 1;
    //}
    //var h=[];
    //var h1=[];
    //for(var i in pointNumbers){
    //    var s=pointNumbers[i];
    //    if(s == 3){
    //        h.push(s)
    //    }
    //    else if(s==4){
    //        h1.push(s)
    //    }
    //
    //}
    //
    //if ((pointNumbers.indexOf(3) != -1) && (pointNumbers.indexOf(2) != -1)
    // || h.length > 1 || h1.length > 1 ||(pointNumbers.indexOf(4) != -1)
    // && (pointNumbers.indexOf(2) != -1)) {
    //    return true;
    //}

    return false;
};

// 判断是否是 葫芦
KQCard.isHuLu = function (cards) {
    if (cards.length != 5) {
        return false;
    }

    var points = cards.map(function (card) {
        return card.point;
    }).sort(function (p1, p2) {
        return p1 - p2;
    });

    var p1 = points[0];
    var p2 = p1;
    var numberP1 = 0;
    var numberP2 = 0;

    points.forEach(function (point) {
        if (point != p1 && point != p2) {
            p2 = point;
            numberP2 = 0;
        }

        numberP1 = numberP1 + (point == p1 ? 1 : 0);
        numberP2 = numberP2 + (point == p2 ? 1 : 0);
    });

    var maxNumber = Math.max(numberP1);
    var minNumber = Math.min(numberP2);

    return minNumber == 2 && maxNumber == 3;
};

// 是否包含有 “三条”
KQCard.containSanTiao = function (cards) {
    if (cards.length < 3) {
        return false;
    }
    if (KQCard.findSanTiao(cards).length > 0) {
        return true;
    }
    return false;
    //let pointHelper = new KQCardPointsHelper(cards);
    //for (let prop in pointHelper.pointNumbers) {
    //    if (pointHelper.pointNumbers[prop] >= 3) {
    //        return true;
    //    }
    //}
    //
    //return KQCard.containGuiPai(cards,3);
};

// 是否是 “三条”
KQCard.isSanTiao = function (cards) {
    if (cards.length != 3) {
        return false;
    }

    var result = cards.reduce(function (point, card) {
        if (card.point == point) {
            return point;
        }

        return -1;
    }, cards[0].point);

    return result != -1;
};

// 是否包含有 ：两对
KQCard.containLiaDui = function (cards) {
    if (cards.length < 4) {
        return false;
    }
    if (KQCard.findLiaDui(cards).length > 0) {
        return true;
    }
    //var numberOfDuiZi = 0;
    //let pointHelper = new KQCardPointsHelper(cards);
    //for (let prop in pointHelper.pointNumbers) {
    //    if (pointHelper.pointNumbers[prop] == 2) {
    //        numberOfDuiZi = numberOfDuiZi + 1;
    //        if (numberOfDuiZi == 2) {
    //            return true;
    //        }
    //    }
    //}

    return false;
};

// 是否是 两对
KQCard.isLiaDui = function (cards) {
    if (cards.length != 4) {
        return false;
    }

    var pointHelper = new KQCardPointsHelper(cards);
    for (var prop in pointHelper.pointNumbers) {
        if (pointHelper.pointNumbers[prop] != 2) {
            return false;
        }
    }
    return true;
};

// 是不是对子
KQCard.isDuiZi = function (cards) {
    if (cards.length != 2) {
        return false;
    }

    var card1 = cards[0];
    var card2 = cards[1];

    return card1.point == card2.point;
};

// 是否包含对子
KQCard.containDuiZi = function (cards) {
    if (cards.length < 2) {
        return false;
    }
    if (KQCard.findDuiZi(cards).length > 0) {
        return true;
    }
    return false;
    //let pointHelper = new KQCardPointsHelper(cards);
    //for (let prop in pointHelper.pointNumbers) {
    //    if (pointHelper.pointNumbers[prop] == 2) {
    //        return true;
    //    }
    //}
    //
    //return KQCard.containGuiPai(cards,2);
};

KQCard.containGuiPai = function (cards, length) {
    if (cards.length < length) {
        return false;
    }
    var card20 = KQCard.contain20(cards);
    cards = cards.kq_excludes(card20);
    var helper = new KQCardPointsHelper(cards);
    var maxNumber = helper.maxNumber() + card20.length;
    return maxNumber >= length;
};
/*#####*/
// 是否是特殊牌
KQCard.isTeShuPai = function (cards) {
    if (cards.length < 13) {
        return false;
    }

    return KQCard.isQingLong(cards) || KQCard.isYiTiaoLong(cards)
    /*|| KQCard.isSanTongHuaShun(cards)
    || KQCard.isSanFenTianXia(cards)
    || KQCard.isSiTaoSanTiao(cards)
    || KQCard.isLiuDuiBan(cards)
    || KQCard.isSanShunZi(cards)
    || KQCard.isSanShunZi1(cards)
    || KQCard.isSanTongHua(cards)
    || KQCard.isWuDuiSanTiao(cards)
    || KQCard.isCouYiSe(cards)*/;
};

// 将牌中的 1 变化为 A（14)
KQCard._convertOneToA = function (cards) {
    if (cards.find(function (card) {
        return card.point == 1;
    }) == undefined) {
        return cards;
    }
    var result = cards.map(function (card) {
        if (card.point == 1) {
            var newCard = new KQCard(14, card.color);
            return newCard;
        }
        return card;
    });

    return result;
};

KQCard._convertOneToA1 = function (cards) {
    if (cards.find(function (card) {
        return card.point == 1;
    }) == undefined) {
        return cards;
    }
    var num = 0;
    var result = cards.map(function (card) {
        if (card.point == 1 && num == 0) {
            num++;
            var newCard = new KQCard(14, card.color);
            return newCard;
        }
        return card;
    });

    return result;
};

// KQCard 的排序方法
KQCard.sortByPoint = function (card1, card2) {
    var result = Number(card1.point) - Number(card2.point);
    return result;
};

KQCard.sortByColor = function (card1, card2) {
    var pointAsc = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    if (card2.color == card1.color) {
        return (card1.point - card2.point) * (pointAsc ? 1 : -1);
    }
    return card2.color - card1.color;
};

KQCard.sort = function (card1, card2) {
    var asc = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
    var AisMax = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

    var result = 1;
    if (card1.point == card2.point) {
        result = card1.color - card2.color;
    } else {
        var point1 = card1.point;
        var point2 = card2.point;
        if (AisMax && point1 == 1) {
            point1 = 14;
        }

        if (AisMax && point2 == 1) {
            point2 = 14;
        }

        result = point1 - point2;
    }

    return result * (asc ? 1 : -1);
};

//转为客户端的牌
KQCard._convertCardsToCardNames = function (cards) {
    // [{"suit":"s","number":10}]
    var suitColorMap = ['', 'd', 'c', 'h', 's'];
    return cards.map(function (card) {
        var cardNumber = card.point;
        var color = suitColorMap[card.color];
        var number = Math.max(Math.min(cardNumber, 13), 1);
        return { number: number, suit: color };
    });
};

cc._RFpop();
},{"GetCardPointsSameCount":"GetCardPointsSameCount","KQCardColorsHelper":"KQCardColorsHelper","KQCardPointsHelper":"KQCardPointsHelper","NumberExtension":"NumberExtension"}],"KQGlabolSocketEventHander":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'babea3CWj9G1pWM9AkXao0n', 'KQGlabolSocketEventHander');
// scripts\Socket\KQGlabolSocketEventHander.js

var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');
var KQNativeInvoke = require('KQNativeInvoke');

var KQGlabolSocketEventHander = {
    start: function start() {
        if (this._didStart) {
            return;
        }
        this._didStart = true;

        KQGlobalEvent.on(Socket.Event.ReceiveForceExit, this._forceExitApp, this);
    },

    _forceExitApp: function _forceExitApp(response) {
        KQNativeInvoke.forceExitApp();
    }
};

module.exports = KQGlabolSocketEventHander;

cc._RFpop();
},{"KQGlobalEvent":"KQGlobalEvent","KQNativeInvoke":"KQNativeInvoke","socket":"socket"}],"KQGlobalEvent":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'd90d6OrggVEXa29ffA+vZY0', 'KQGlobalEvent');
// scripts\Event\KQGlobalEvent.js

var KQGlobalEvent = {
    _handles: {},
    //发送事件
    emit: function emit(eventName) {
        var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        if (typeof data == 'string') {
            data = { 'data': data };
        }

        var returns = []; //返回值
        data.eventName = eventName; //保存一下事件名字

        for (var findEvenName in this._handles) {
            if (findEvenName == eventName) {
                for (var i = 0; i < this._handles[findEvenName].length; i++) {
                    var returnValue = this._handles[findEvenName][i](data);
                    returns.push(returnValue);
                }
            }
        }

        return returns;
    },
    //添加普通事件
    on: function on(eventName, callback, target) {
        // console.log('收到事件', eventName);
        this._handles[eventName] = this._handles[eventName] || [];

        this._handles[eventName].push(callback.bind(target));
        callback._caller = target;
    },

    //通过事件名移除一个监听器
    off: function off(eventName) {
        for (var i = 0; i < this._handles[eventName].length; i++) {
            this._handles[eventName][i] = null;
        }
    },

    // 移动一个 target 上所有的监听
    offTarget: function offTarget(target) {
        for (var name in this._handles) {
            var eventHandlers = this._handles[name];
            var indexs = eventHandlers.filter(function (callback) {
                return callback._caller = target;
            }).map(function (callback, index) {
                return index;
            });

            var indexOffset = 0;
            indexs.forEach(function (index) {
                eventHandlers.splice(index + indexOffset, 1);
                indexOffset = indexOffset + 1;
            });
        }
    }
};

module.exports = KQGlobalEvent;

cc._RFpop();
},{}],"KQNativeInvoke":[function(require,module,exports){
"use strict";
cc._RFpush(module, '7327dLBqWVNaJ14fJQ4jq6Y', 'KQNativeInvoke');
// scripts\Utils\KQNativeInvoke.js

var KQNativeInvoke = {
  IOSClassName: "AppController",
  ANDRIODClassName: "com/lling/ssz/AppActivity",

  isNativeIOS: function isNativeIOS() {
    var platform = cc.sys.platform;
    if (platform == cc.sys.IPHONE || platform == cc.sys.IPAD) {
      return true;
    }
    return false;
  },

  isNativeAndroid: function isNativeAndroid() {
    var platform = cc.sys.platform;
    if (platform == cc.sys.ANDROID) {
      return true;
    }
    return false;
  },

  isNative: function isNative() {
    return cc.sys.isNative == true;
  }
};

// MARK: 可调用的本地方法
/**
 * 微信登录
 */
KQNativeInvoke.wxLogin = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxLogin"); //IOS
  } else if (KQNativeInvoke.isNativeAndroid()) {
      //Android
      jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxLogin", "()V");
    }
};

/**
 * 分享大厅信息到微信好友
 * 
 */
KQNativeInvoke.shareHallToWeChatFriend = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareHallFriend");
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareHallFriend", "()V");
  }
};

/**
 * 分享大厅信息到朋友圈
 * 
 */
KQNativeInvoke.shareHallToWeChatTimeline = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareHallTimeline");
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareHallTimeline", "()V");
  }
};

/**
 * 强制退出 APP
 * 
 */
KQNativeInvoke.forceExitApp = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "exitApp");
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "exitApp", "()V");
  }
};

/**
 * 下载新版本
 * 
 * @param {String} iosUrl      iOS 版本地址
 * @param {String} androidUrl  安卓版本地址
 */
KQNativeInvoke.downloadNewVersion = function (iosUrl, androidUrl) {
  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "downloadNewVersion:", iosUrl);
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "downloadNewVersion", "(Ljava/lang/String;)V", androidUrl);
  }
};

/**
 * 分享房间给微信好友
 * 
 * @param {String} roomId         房间 id 信息
 * @param {String} description    文本描述
 */
KQNativeInvoke.shareRoomToWeChatFriend = function (roomId, description) {
  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareFriend:description:", id, description);
  } else if (KQNativeInvoke.isNativeAndroid()) {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareFriend", "(Ljava/lang/String;Ljava/lang/String;)V", id, description);
  }
};

/**
 * 分享房间到微信朋友圈
 * 
 * @param {String} roomId         房间 id 信息
 * @param {String} description    文本描述
 */
KQNativeInvoke.shareRoomToWeChatTimeline = function (roomId, description) {
  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShare:description:", id, description);
  } else if (KQNativeInvoke.isNativeAndroid()) {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShare", "(Ljava/lang/String;Ljava/lang/String;)V", id, description);
  }
};

/**
 * 分享屏幕截图到微信好友
 */
KQNativeInvoke.shareScreenToWeChatFriend = function () {
  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxScreenShareFriend");
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxScreenShareFriend", "()V");
  }
};

/**
 * 分享屏幕截图到微信朋友圈
 */
KQNativeInvoke.shareScreenToWeChatTimeline = function () {
  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxScreenShare");
  } else {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxScreenShare", "()V");
  }
};

/**
 * 开始录音
 */
KQNativeInvoke.startRecord = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "record");
  } else if (KQNativeInvoke.isNativeAndroid()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "record", "()V");
  }
};

/**
 * 结束录音
 */
KQNativeInvoke.endRecord = function () {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "endRecord");
  } else if (KQNativeInvoke.isNativeAndroid()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "endRecord", "()V");
  }
};

KQNativeInvoke.screenshotShare = function () {
  var strings = arguments.length <= 0 || arguments[0] === undefined ? 'shareIMG' : arguments[0];

  if (this._isCapturing) {
    return;
  }
  this._isCapturing = true;
  var size = cc.director.getWinSize();
  var fileName = "result_share.jpg";
  var fullPath = jsb.fileUtils.getWritablePath() + fileName;
  if (jsb.fileUtils.isFileExist(fullPath)) {
    jsb.fileUtils.removeFile(fullPath);
  }
  var texture = new cc.RenderTexture(Math.floor(size.width), Math.floor(size.height), cc.IMAGE_FORMAT_PNG, gl.DEPTH24_STENCIL8_OES);
  texture.setPosition(cc.p(size.width / 2, size.height / 2));
  texture.begin();
  cc.director.getRunningScene().visit();
  texture.end();
  texture.saveToFile(fileName, cc.IMAGE_FORMAT_PNG);

  var self = this;
  var tryTimes = 0;
  var fn = function fn() {
    if (jsb.fileUtils.isFileExist(fullPath)) {

      if (cc.sys.os == cc.sys.OS_ANDROID) {
        jsb.reflection.callStaticMethod(self.ANDRIODClassName, strings, "(Ljava/lang/String;)V", fullPath);
      }
      self._isCapturing = false;
    } else {
      tryTimes++;
      if (tryTimes > 10) {
        console.log("time out...");
        return;
      }
      setTimeout(fn, 50);
    }
  };
  setTimeout(fn, 50);
};

/**
 * 播放网络语音
 * 
 * @param {String} audioUrl 语音地址
 */
KQNativeInvoke.playAudioWithUrl = function (audioUrl) {
  if (!KQNativeInvoke.isNative()) {
    return;
  }

  if (KQNativeInvoke.isNativeIOS()) {
    jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "playUrl:", audioUrl);
  } else if (KQNativeInvoke.isNativeAndroid()) {
    //Android
    jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "playUrl", "(Ljava/lang/String;)V", audioUrl);
  }
};

module.exports = KQNativeInvoke;

cc._RFpop();
},{}],"MsgControl":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'dd242dsY+hBG5LpL7ZF7Kn6', 'MsgControl');
// scripts\Chat\MsgControl.js

var Socket = require('socket');
var ChatMessage = require('ChatMessage');
var AudioManager = require('AudioManager');

// 用来发送消息的 component
cc.Class({
  'extends': cc.Component,

  properties: {
    bqNode: cc.Node,
    bqNode1: cc.Node,
    btnLanguageNode: cc.Node,
    btnLanguageNode1: cc.Node,
    btnChartNode: cc.Node,
    btnChartNode1: cc.Node,
    textScrollView: cc.Node,
    imageContentNode: cc.Node,

    editBox: cc.EditBox,

    textRecordScrollView: cc.ScrollView,
    textRecordLayout: cc.Layout,

    textPrefab: cc.Prefab,
    chatTextRecordPrefab: cc.Prefab,
    // imagePrefab:cc.Prefab,

    inputNode: cc.Node,

    _userId: null,

    _playerInfos: null, // 记录用户信息
    _chatTextMessageRecords: null },

  // 聊天文本消息记录
  // use this for initialization
  onLoad: function onLoad() {
    this._userId = Socket.instance.userInfo.id;
    this._playerInfos = [];
    this.textContent = this.textScrollView.getComponent(cc.ScrollView).content;
    // this.imageContent = this.imageScrollView.getComponent(cc.ScrollView).content;

    var self = this;

    var textData = AudioManager.instance.chatTexts();
    for (var i = 0; i < textData.length; i++) {
      var item = cc.instantiate(this.textPrefab);
      item.getComponent('cellText').setText(textData[i]);
      item.getComponent('cellText').onSelectAction = function (text) {
        self.onTextClickAction(text);
      };
      this.textContent.h = 1000;
      this.textContent.addChild(item);
    }
  },

  onTextClickAction: function onTextClickAction() {
    var text = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

    this.editBox.string = "";
    this.sendText(text);
  },

  clickEmoji: function clickEmoji(event, emojiName) {
    var string = this.editBox.string;
    this.editBox.string = string + "<" + emojiName + ">";
  },

  clickSend: function clickSend() {
    var string = this.editBox.string || "";
    if (string.length == 0) {
      return;
    }

    this.editBox.string = "";
    this.sendText(string);
  },

  sendText: function sendText() {
    var text = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

    if (text.length == 0) {
      return;
    }

    Socket.sendText(this._userId, text);
    this.dismiss();
  },

  dismiss: function dismiss() {
    this.node.active = false;
  },

  bqAction: function bqAction() {
    this.bqNode1.active = this.btnLanguageNode.active = this.btnChartNode1.active = true;
    this.bqNode.active = this.btnLanguageNode1.active = this.btnChartNode.active = false;
    this.textScrollView.active = false;
    this.imageContentNode.active = true;
    this.textRecordScrollView.node.active = false;
  },

  textAction: function textAction() {
    this.bqNode1.active = this.btnLanguageNode.active = this.btnChartNode.active = false;
    this.bqNode.active = this.btnLanguageNode1.active = this.btnChartNode1.active = true;
    this.textScrollView.active = true;
    this.imageContentNode.active = false;
    this.textRecordScrollView.node.active = false;
  },

  chartAction: function chartAction() {
    this.bqNode1.active = this.btnLanguageNode1.active = this.btnChartNode1.active = false;
    this.bqNode.active = this.btnLanguageNode.active = this.btnChartNode.active = true;
    this.textScrollView.active = this.imageContentNode.active = false;
    this.textRecordScrollView.node.active = true;
  },

  addPlayerInfos: function addPlayerInfos(playerInfos) {
    this._playerInfos = this._playerInfos || [];

    playerInfos.forEach((function (userInfo) {
      var haveUserInfo = this._playerInfos.find(function (ownUserInfo) {
        return ownUserInfo.id == userInfo.id;
      });

      if (haveUserInfo == null) {
        this._playerInfos.push(userInfo);
      }
    }).bind(this));
  },

  addChatTextMessage: function addChatTextMessage(userId, text) {
    this._playerInfos = this._playerInfos || [];

    var nickname = "[ID:" + userId + "说]：";
    var userInfo = this._playerInfos.find(function (userInfo) {
      return userInfo.id == userId;
    });

    if (userInfo) {
      nickname = "[" + userInfo.nickname + "说]：";
    }

    var str = nickname + text;
    str = ChatMessage.parseString(str);
    this._addChatTextToRecord(str);
  },

  _addChatTextToRecord: function _addChatTextToRecord(text) {
    var item = cc.instantiate(this.chatTextRecordPrefab);
    var chatTextRecord = item.getComponent('ChatTextRecord');
    chatTextRecord.setString(text);

    this.textRecordLayout.node.addChild(item);
    this.textRecordScrollView.scrollToBottom();
  }
});

cc._RFpop();
},{"AudioManager":"AudioManager","ChatMessage":"ChatMessage","socket":"socket"}],"NetworkError":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'c99d35Sy6hDPbrte9nVczxP', 'NetworkError');
// scripts\NetworkError.js

var manager = require('manager');
var KQNativeInvoke = require('KQNativeInvoke');

cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {},

    exitAction: function exitAction() {
        cc.director.end();
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "exitApp");
        } else {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "exitApp", "()V");
        }
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{"KQNativeInvoke":"KQNativeInvoke","manager":"manager"}],"NumberExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '80e21gZRpNM4pIiCpZ+7s8m', 'NumberExtension');
// scripts\Extensions\NumberExtension.js

// number.kq_times(f)   调用多次

if (!Number.prototype.kq_times) {

    /**
     * 调用一个方法 this 次
     * 
     * @param  {Function} f 要调用的方法
     * @param  {Object}   thisArg   可选； f 的 this值
     */
    Number.prototype.kq_times = function (f, thisArg) {
        if (!f) {
            return;
        }

        for (var i = 0; i < this; ++i) {
            if (thisArg) {
                f.apply(thisArg, i);
            } else {
                f(i);
            }
        }
    };
}

cc._RFpop();
},{}],"Playback":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0d3095dnBVFo5D1hEDDa5KQ', 'Playback');
// scripts\Playback\Playback.js

var Socket = require('socket');

// 用于回放的组件
var Playback = cc.Class({
  "extends": cc.Component,

  properties: {
    _playbackDatas: null, // 用于回放的数据
    _isPlaybacking: false
  },

  statics: {
    instance: null
  },

  onLoad: function onLoad() {
    Playback.instance = this;
    cc.game.addPersistRootNode(this.node);
  },

  // 设置回放数据
  setPlaybackDatas: function setPlaybackDatas(datas) {
    this._playbackDatas = datas;
  },

  // 清空回放数据。同时会清空回放
  removePlaybackDatas: function removePlaybackDatas() {
    this.setPlaybackDatas(null);
    this.stopPlayback();
  },

  // 是否包含回放数据
  isContainPlaybackDatas: function isContainPlaybackDatas() {
    return this._playbackDatas != null;
  },

  // 开始回放
  startPlayback: function startPlayback() {
    // 模拟 socket 接收到了事件即可
    cc.log("Playback 开始回放");

    this._isPlaybacking = true;

    if (!this._playbackDatas) {
      cc.error("想回放，却没有回放数据");
      this.stopPlayback();
      return;
    }

    this._executePlayback();
  },

  // 停止回放
  stopPlayback: function stopPlayback() {
    this._isPlaybacking = false;
    this.unscheduleAllCallbacks();
  },

  // 是否正在回放
  isPlaybacking: function isPlaybacking() {
    return this._isPlaybacking;
  },

  // 执行真正的回放操作
  _executePlayback: function _executePlayback() {
    var startTime = 1.0;
    var interval = 3.0;
    cc.log(this._playbackDatas);

    // 在某些特殊情况下
    // 回放数据里会包含两套 gameOver action
    // 所以需要过滤掉其中一个
    this._playbackDatas = this._playbackDatas.filter((function (string, index) {
      if (index == this._playbackDatas.length - 1) {
        return true;
      }

      return string.indexOf('"action":"gameOver') == -1;
    }).bind(this));

    this._playbackDatas.forEach((function (data, index) {
      var delay = startTime + index * interval;
      if (index == this._playbackDatas.length - 1) {
        // 如果是最后一个，则应该只间隔一秒
        delay = startTime + (index - 1) * interval + 1;
      }

      this.scheduleOnce(function () {
        cc.log("回放开始模拟 Socket 接收到服务器消息, ", index);
        Socket.instance._dispatchResponse(data);
      }, delay);
    }).bind(this));
  }

});

module.exports = Playback;

cc._RFpop();
},{"socket":"socket"}],"Player":[function(require,module,exports){
"use strict";
cc._RFpush(module, '6ffa0O02PFOp78QADTW5zGf', 'Player');
// scripts\Play\Player.js

var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');
var ArrayExtension = require('ArrayExtension');
var UserModelHelper = require('UserModelHelper');
var Playback = require('Playback');
cc.Class({
  'extends': cc.Component,

  properties: {
    foldCardNode: cc.Node, // 牌盖着时的样子
    foldCardNode1: cc.Node, // 牌盖着时的样子
    cardsBackLayout: cc.Layout, // 13张牌背影，可用来展示发牌动画 含 cardsBack Component
    compareCardsNode: cc.Node, // compareCards   含 CompareCards Component
    userInfoNode: cc.Node, // 包含用户信息 含 userInfo Component
    chatMessageNode: cc.Node, // 聊天消息 包含 ChatMessage Component
    userAvatarNode: cc.Node,
    userSampleInfoNode: cc.Node,
    userId: 0,
    /*#####*/
    teShuPaiLabel: cc.Node,
    cardTypePrefab: cc.Prefab,
    // 用户信息
    // 1、 如果 包含：cardInfo:[]，表明用户已经出牌
    //
    _userInfo: null,
    _deskInfo: null,
    /**/
    playedCompareCardsIndexs: {
      visible: false,
      'default': undefined
    }
    /**/
  },

  // use this for initialization
  onLoad: function onLoad() {
    this.userAvatarNode.on(cc.Node.EventType.TOUCH_START, this._showUserInfo, this);
    this.reset();
  },

  onDestroy: function onDestroy() {
    this.userAvatarNode.off(cc.Node.EventType.TOUCH_START, this._showUserInfo, this);
  },

  _showUserInfo: function _showUserInfo() {
    this.userSampleInfoNode.getComponent('UserSampleInfo').updateWithUser(this._userInfo);
  },

  reset: function reset() {
    this.foldCardNode.active = false;
    this.foldCardNode1.active = false;
    this.teShuPaiLabel.active = false;
    this.cardsBackLayout.active = false;
    this.compareCardsNode.active = false;
    this.compareCardsNode.getComponent('CompareCards').reset();
  },

  /*####*/
  reset2: function reset2() {
    this.foldCardNode.active = false;
    this.foldCardNode1.active = false;
    this.teShuPaiLabel.active = false;
    this.cardsBackLayout.active = false;
    //this.compareCardsNode.active = false;
    //this.compareCardsNode.getComponent('CompareCards').reset();
  },
  /*#####*/

  updateUserInfoWithUsers: function updateUserInfoWithUsers(users) {
    var user = users.find((function (e) {
      return this.userId == e.id;
    }).bind(this));

    this.updateUserInfo(user);
  },

  updateUserInfo: function updateUserInfo(user) {
    this._userInfo = user;
    this.node.active = user != null;
    this.userInfoNode.active = this.node.active;
    if (!user) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.updateAvatar(user.avatarUrl);
    userInfo.updateNickname(user.nickname);
    userInfo.setOfflineVisible(!user.onlineStatus);

    //if (this._deskInfo && this._deskInfo.cIndex > 0) {
    //  if (UserModelHelper.isPlayedCards(user)) {
    //    this.playCard(user.id);
    //    this.compareCardsNode.getComponent('CompareCards').setCompareData(user);
    //  }
    //}
    /**/
    var cIndex = this._deskInfo.cIndex;
    if (this._deskInfo && cIndex > 0 && this.playedCompareCardsIndexs.indexOf(cIndex) == -1) {
      if (UserModelHelper.isPlayedCards(user)) {
        this.playCard(user.id, user.cardInfo);
        this.compareCardsNode.getComponent('CompareCards').setCompareData(user);
      }
    }
    /**/
  },

  // 更新房主信息
  updateBanker: function updateBanker() {
    var userInfoComp = this.userInfoNode.getComponent('userInfo');
    if (!this._userInfo) {
      userInfoComp.setIsBanker(false);
      return;
    }

    var isBanker = this._userInfo ? this._userInfo.isBanker : false;
    userInfoComp.setIsBanker(isBanker);
  },

  showFangZhuStatus: function showFangZhuStatus(createId) {
    var visible = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    if (!this.node.active) {
      return;
    }
    if (this._userInfo.id == createId) {
      this.userInfoNode.getComponent('userInfo').setFangZhuNodeVisible(visible);
    }
  },

  /**
   * 更新分数 
   * 
   * @param {Number} score 用户分数、可选
   */
  updateScore: function updateScore(score) {
    if (!score && this._userInfo) {
      score = this._userInfo.totalScore;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.updateScore(score);
  },

  showReadyStatus: function showReadyStatus(userId) {
    var visible = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    if (!this.node.active) {
      return;
    }

    if (this._userInfo.id == userId) {
      this.userInfoNode.getComponent('userInfo').setReadyNodeVisible(visible);
    }
  },

  /*setDeskInfo: function (deskInfo) {
   this._deskInfo = deskInfo;
   },*/
  updateDeskInfo: function updateDeskInfo(deskInfo) {
    this._deskInfo = deskInfo;

    if (deskInfo && !deskInfo.isCBegin) {
      this.reset();
    }
  },
  /**/

  hideReadyStatus: function hideReadyStatus() {
    this.userInfoNode.getComponent('userInfo').setReadyNodeVisible(false);
  },

  playFaPaiAnimation: function playFaPaiAnimation() {
    cc.log("playFaPaiAnimation");
    if (!this.node.active) {
      return;
    }

    if (UserModelHelper.isPlayedCards(this._userInfo)) {
      return;
    }

    var cardsBack = this.cardsBackLayout.getComponent('cardsBack');
    cardsBack.showPlayCardBacks();
  },

  shouldShowFaPaiAnimation: function shouldShowFaPaiAnimation() {
    return UserModelHelper.isPlayedCards(this._userInfo);
  },

  setUserOnlineStatus: function setUserOnlineStatus(userId) {
    var status = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    if (userId != this.userId) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.setOfflineVisible(status != 1);
  },

  showChatText: function showChatText(userId, message) {
    if (userId != this.userId) {
      return;
    }

    var chatMessage = this.chatMessageNode.getComponent('ChatMessage');
    chatMessage.setString(message);
  },

  // 用户已经出牌，处于三堆盖着牌的状态
  playCard: function playCard(userId, cardInfo) {
    if (this.userId != userId) {
      return;
    }

    this.cardsBackLayout.node.active = false;
    this.compareCardsNode.active = false;
    this.teShuPaiLabel.active = false;
    /*#####如果是特殊牌就显示特殊牌型这四个字在盖着牌的上面*/
    var play = cc.find("Canvas").getComponent("play"); //play组件
    //如果点击了恭喜你页面的确定按钮
    //if(this.compareCardsNode.getComponent("CardTypeCombine").BtnClickGongXiNiComfirm){
    if (cc.moshi != 1) {
      if (play.getIsTeShuPai(this.userId)) {
        this.teShuPaiLabel.active = true;
      } else {
        this.teShuPaiLabel.active = false;
      }
    }
    cc.log(this);
    cc.log('------229');
    if (Playback.instance.isPlaybacking()) {
      //"回放";
      this.foldCardNode1.active = true;
      return;
    }
    this.foldCardNode.active = true;
    this.foldCardNode1.active = true;
    if (this.foldCardNode.name != "foldCardNodeSelf") {
      return;
    }
    for (var i = 0; i < 3; i++) {
      var node = this.foldCardNode.children[i];

      node.removeAllChildren();
      var cardModes = [];
      for (var j = 0; j < cardInfo[i].cards.length; j++) {
        var s = cardInfo[i].cards[j];
        cardModes.push(s);
      }
      cardModes = cardModes.map(function (serCard) {
        return serCard.suit + '_' + serCard.number;
      });
      cardModes.forEach((function (cardName) {
        var cardTypeSprite = cc.instantiate(this.cardTypePrefab);
        if (cc.maPai) {
          var cardMaPai = '3_' + cc.maPai;
          if (cardName == cardMaPai) {
            cardTypeSprite.color = new cc.Color(226, 145, 145);
          }
        }
        if (i == 0) {
          cardTypeSprite.y = 0;
        } else if (i == 1) {
          cardTypeSprite.y = 0;
        } else if (i == 2) {
          cardTypeSprite.y = 9;
        }
        cardTypeSprite.width = 66;
        cardTypeSprite.height = 92;
        cardTypeSprite.getComponent('CardTypeSprite').setCard(cardName);
        node.addChild(cardTypeSprite);
      }).bind(this));
      cc.log(node);
      cc.log(this.foldCardNode);
      cc.log(this.foldCardNode1);
      cc.log('-------239');
    }
    //}
  },

  // 准备好开始比牌
  readyToCompareCards: function readyToCompareCards() {
    this.cardsBackLayout.node.active = false;
    this.compareCardsNode.active = true;
    this.foldCardNode.active = false;
    this.foldCardNode1.active = false;
    this.teShuPaiLabel.active = false;
  },

  // 播放打枪动画
  // @param userId   要主动打枪的用户id
  // @param toUserIndex  挨枪的用户的 index
  playShootAnimation: function playShootAnimation(userId, toUserIndex) {
    if (userId != this.userId) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.playShootAnimation(toUserIndex);
  },

  // 播放中枪动画
  playBulletHoleAnimation: function playBulletHoleAnimation(userId) {
    if (userId != this.userId) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.playBulletHoleAnimation();
  },

  // 播放全垒打动画
  playHomeRunAimation: function playHomeRunAimation(userId) {
    if (userId != this.userId) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.playHomeRunAimation();
  },

  playSpeakAnimation: function playSpeakAnimation(userId) {
    if (userId != this.userId) {
      return;
    }

    var userInfo = this.userInfoNode.getComponent('userInfo');
    userInfo.playSpeakAnimation();
  },

  nextCompareScore: function nextCompareScore() {
    if (!this.node.active) {
      return 0;
    }

    var score = this.compareCardsNode.getComponent('CompareCards').nextCompareScore();
    return score;
  },

  showNextCompareCards: function showNextCompareCards() {
    if (this.nextCompareScore() <= 0) {
      return;
    }

    this.compareCardsNode.getComponent('CompareCards').showNextCards();
  }
});

cc._RFpop();
},{"ArrayExtension":"ArrayExtension","KQGlobalEvent":"KQGlobalEvent","Playback":"Playback","UserModelHelper":"UserModelHelper","socket":"socket"}],"ResultItem":[function(require,module,exports){
"use strict";
cc._RFpush(module, '9b2behcoUlLYL1MIMs+04wI', 'ResultItem');
// scripts\Play\ResultItem.js

var KQCardResHelper = require('KQCardResHelper');
var SpriteHelper = require('SpriteHelper');
var KQCard = require('KQCard');

cc.Class({
  'extends': cc.Component,

  properties: {
    avatarSprite: cc.Sprite,
    labelNickname: cc.Label,
    labelResultNumber: cc.Label,
    layoutTouDao: cc.Layout,
    layoutZhongDao: cc.Layout,
    layoutWeiDao: cc.Layout,
    layoutTeShu: cc.Layout,

    labelTeShuPaiTitle: cc.Label,

    scoreUnitNode: cc.Node, // 积分
    diamondUnitNode: cc.Node },

  // 钻石
  onLoad: function onLoad() {},

  //{"id":100049,"nickname":"imya","openId":"xx","avatarUrl":"xx","sex":1,
  // "cardNumber":3,"onlineStatus":1,"inviteCode":"","ipAddress":"::ffff:222.244.65.201",
  // "lastLoginTime":"2017-04-13 22:09:01","createAt":"2017-04-11 22:39:30",
  // "updateAt":"2017-04-13 22:09:01",
  // "cards":[],"roomId":"598883","readyStatus":true,"totalScore":0,
  // "cScore":0,"isBanker":false}
  updateWithPlayerInfo: function updateWithPlayerInfo(playerInfo) {
    var isRandomRoom = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    SpriteHelper.setImageUrl(this.avatarSprite, playerInfo.avatarUrl);
    this.labelNickname.string = playerInfo.nickname;
    //cc.log(this.labelResultNumber.string)
    //cc.log(playerInfo)
    //cc.log(playerInfo.cScore)
    //cc.log('---36')
    this.labelResultNumber.string = playerInfo.cScore;

    this.scoreUnitNode.active = !isRandomRoom;
    this.diamondUnitNode.active = isRandomRoom;
    var Number = playerInfo.cScore;
    if (isRandomRoom) {
      // 如果是随机场的话，则显示钻石数量
      Number = playerInfo.cScore * 5;
    }
    this.labelResultNumber.string = Number;
  },

  setCards: function setCards(cards) {
    cc.assert(cards.length == 13);

    // 不会再有特殊牌了
    /*if (KQCard.isTeShuPai(cards)) {
      this.setTeShuCards(cards);
      return;
      }
    */

    //let touCards = cards.slice(0, 3);
    //let zhongCards = cards.slice(3, 3 + 5);
    //let weiCards = cards.slice(8);
    //this.setTouCards(touCards);
    //this.setZhongCards(zhongCards);
    //this.setWeiCards(weiCards);
  }

});
/*setTouCards: function (cards) {
  this._setCardsToLayout(this.layoutTouDao, cards);
},
 setZhongCards: function (cards) {
  this._setCardsToLayout(this.layoutZhongDao, cards);
},
  setWeiCards: function (cards) {
  this._setCardsToLayout(this.layoutWeiDao, cards);
},*/

//结算  将特殊牌放入Layout
/*setTeShuCards: function (cards) {
  this.layoutTeShu.node.active = true;
  this.layoutTouDao.node.active = false;
  this.layoutZhongDao.node.active = false;
  this.layoutWeiDao.node.active = false;
  this._setCardsToLayout(this.layoutTeShu, cards);
   let typeName = KQCard.cardsTypeName(cards);
  this.labelTeShuPaiTitle.string = typeName;
},*/

//结算将牌放到Layout里面
/*_setCardsToLayout: function (layout, cards) {
  let node = layout.node;
  node.children.forEach(function (spriteNode, index) {
    let sprite = spriteNode.getComponent('cc.Sprite');
    let card = cards[index];
    if (!card) {
      return;
    }
     KQCardResHelper.setCardSpriteFrame(sprite, card.cardName());
  });
},*/

cc._RFpop();
},{"KQCard":"KQCard","KQCardResHelper":"KQCardResHelper","SpriteHelper":"SpriteHelper"}],"Setting":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f3ad6mNk4BMBZzipGQDNlr4', 'Setting');
// scripts\Setting\Setting.js

var Manager = require('manager');

cc.Class({
  'extends': cc.Component,

  properties: {
    musicSlider: cc.Node,
    effectSlider: cc.Node,
    btnSwitchAccount: cc.Button,

    _audioManager: null
  },

  // use this for initialization
  onLoad: function onLoad() {
    this._audioManager = cc.find('AudioManager') || {};
    this._audioManager = this._audioManager.getComponent('AudioManager');

    this._initSliders();
  },

  _initSliders: function _initSliders() {
    this._initSliderEvents();

    var musicVal = Manager.getMusicValue();
    var effectVal = Manager.getMusicEffectValue();

    this._audioManager.setBgMusicVolumn(musicVal);
    this._audioManager.setEffectMusicVolum(effectVal);

    this.musicSlider.getComponent('slider').setValue(musicVal);
    this.effectSlider.getComponent('slider').setValue(effectVal);
  },

  _initSliderEvents: function _initSliderEvents() {
    var self = this;
    this.musicSlider.getComponent('slider').onValueChange = function (value) {
      Manager.setMusicValue(value);
      self._audioManager.setBgMusicVolumn(value);
    };

    this.effectSlider.getComponent('slider').onValueChange = function (value) {
      Manager.setMusicEffectValue(value);
      self._audioManager.setEffectMusicVolum(value);
    };
  },

  clickSwitch: function clickSwitch() {},

  hideSwitch: function hideSwitch() {
    if (this.btnSwitchAccount) {
      this.btnSwitchAccount.node.active = false;
    }
  }
});

cc._RFpop();
},{"manager":"manager"}],"SpriteHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, '936f2uPA8NAuqUZv0R8ZxgP', 'SpriteHelper');
// scripts\Extensions\SpriteHelper.js

var SpriteHelper = {
  setImageUrl: function setImageUrl(sprite, url) {
    if (url.endsWith("png") || url.endsWith("jpg") || url.endsWith("gif")) {} else {
      url = url + ".png";
    }

    cc.loader.load(url, function (err, data) {
      if (err) {
        return;
      }

      var frame = new cc.SpriteFrame(data);
      sprite.spriteFrame = frame;
    });
  }
};

module.exports = SpriteHelper;

cc._RFpop();
},{}],"StringExtension":[function(require,module,exports){
"use strict";
cc._RFpush(module, '7b106eQ/I5F1J85hMxFBIlw', 'StringExtension');
// scripts\Extensions\StringExtension.js

// 给 String 添加功能

// str.startsWith("");
// str.endsWith("");

if (!String.prototype.startsWith) {
	(function () {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function () {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch (error) {}
			return result;
		})();
		var toString = ({}).toString;
		var startsWith = function startsWith(search) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			if (search && toString.call(search) == '[object RegExp]') {
				throw TypeError();
			}
			var stringLength = string.length;
			var searchString = String(search);
			var searchLength = searchString.length;
			var position = arguments.length > 1 ? arguments[1] : undefined;
			// `ToInteger`
			var pos = position ? Number(position) : 0;
			if (pos != pos) {
				// better `isNaN`
				pos = 0;
			}
			var start = Math.min(Math.max(pos, 0), stringLength);
			// Avoid the `indexOf` call if no match is possible
			if (searchLength + start > stringLength) {
				return false;
			}
			var index = -1;
			while (++index < searchLength) {
				if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
					return false;
				}
			}
			return true;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'startsWith', {
				'value': startsWith,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.startsWith = startsWith;
		}
	})();
}

// str.endsWith("");
if (!String.prototype.endsWith) {
	(function () {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function () {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch (error) {}
			return result;
		})();
		var toString = ({}).toString;
		var endsWith = function endsWith(search) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			if (search && toString.call(search) == '[object RegExp]') {
				throw TypeError();
			}
			var stringLength = string.length;
			var searchString = String(search);
			var searchLength = searchString.length;
			var pos = stringLength;
			if (arguments.length > 1) {
				var position = arguments[1];
				if (position !== undefined) {
					// `ToInteger`
					pos = position ? Number(position) : 0;
					if (pos != pos) {
						// better `isNaN`
						pos = 0;
					}
				}
			}
			var end = Math.min(Math.max(pos, 0), stringLength);
			var start = end - searchLength;
			if (start < 0) {
				return false;
			}
			var index = -1;
			while (++index < searchLength) {
				if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
					return false;
				}
			}
			return true;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'endsWith', {
				'value': endsWith,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.endsWith = endsWith;
		}
	})();
}

cc._RFpop();
},{}],"TotalGameResultItem":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e1c6f93a1BOnoSiX6kJ0Efn', 'TotalGameResultItem');
// scripts\Play\TotalGameResultItem.js

var SpriteHelper = require('SpriteHelper');
cc.Class({
  "extends": cc.Component,

  properties: {
    avatarSprite: cc.Sprite,
    labelUserId: cc.Label,
    labelScore: cc.Label,
    labelNickname: cc.Label,

    _deskInfo: null
  },

  // use this for initialization
  onLoad: function onLoad() {},

  setUserInfo: function setUserInfo(user, deskInfo) {
    if (!user) {
      return;
    }

    var totalScore = user.totalScore;
    if (deskInfo && (deskInfo.setting1 == 0 || deskInfo.setting1 == 1)) {
      var baseScore = deskInfo.setting1 == 0 ? 100 : 200;
      totalScore = totalScore - baseScore;
    }

    SpriteHelper.setImageUrl(this.avatarSprite, user.avatarUrl);
    this.labelUserId.string = "" + user.id;
    this.labelScore.string = totalScore > 0 ? "+ " + totalScore : "- " + totalScore * -1;
    if (totalScore == 0) {
      this.labelScore.string = "0";
    }
    this.labelNickname.string = user.nickname;
  }
});

cc._RFpop();
},{"SpriteHelper":"SpriteHelper"}],"TotalGameResult":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f7fb2e7foJFNJzjdtbAtk7O', 'TotalGameResult');
// scripts\Play\TotalGameResult.js

var KQNativeInvoke = require('KQNativeInvoke');
cc.Class({
    'extends': cc.Component,

    properties: {
        itemLayout: cc.Layout,
        itemPrefab: cc.Prefab
    },

    // use this for initialization
    onLoad: function onLoad() {},

    setPlayerInfos: function setPlayerInfos(playerInfos, deskInfo) {
        this.itemLayout.node.removeAllChildren();
        playerInfos.forEach((function (user) {
            var item = cc.instantiate(this.itemPrefab);
            item.getComponent('TotalGameResultItem').setUserInfo(user, deskInfo);
            if (deskInfo.createId == user.id) {
                item.children[6].active = true;
            } else {
                item.children[6].active = false;
            }
            this.itemLayout.node.addChild(item);
        }).bind(this));
    },

    clickShareWeiChat: function clickShareWeiChat() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxScreenShareFriend");
        } else {
            //Android
            KQNativeInvoke.screenshotShare();
        }
    },

    clickSharePengYouQuan: function clickSharePengYouQuan() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxScreenShare");
        } else {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxScreenShare", "()V");
        }
    }
});

cc._RFpop();
},{"KQNativeInvoke":"KQNativeInvoke"}],"UserModelHelper":[function(require,module,exports){
"use strict";
cc._RFpush(module, '98854aScapF5oQnHKxJsvmF', 'UserModelHelper');
// scripts\ModelUtils\UserModelHelper.js

var UserModelHelper = {
  // 用户是否已出牌
  isPlayedCards: function isPlayedCards(user) {
    cc.assert(user);

    if (user && user.cardInfo && user.cardInfo.length > 0) {
      return true;
    }

    return false;
  },

  // 用户是否已准备
  isUserReady: function isUserReady(user) {
    return user.readyStatus == true;
  }
};

module.exports = UserModelHelper;

cc._RFpop();
},{}],"UserSampleInfo":[function(require,module,exports){
"use strict";
cc._RFpush(module, '3a9f7A0IgRGPrAZvy1p9s4i', 'UserSampleInfo');
// scripts\Play\UserSampleInfo.js

var SpriteHelper = require('SpriteHelper');

cc.Class({
  'extends': cc.Component,

  properties: {
    labelUserId: cc.Label,
    labelUserIP: cc.Label,
    labelNickname: cc.Label,
    avatarSprite: cc.Sprite,
    manSprite: cc.Sprite,
    womenSprite: cc.Sprite,

    _didShowUserInfo: null
  },

  // use this for initialization
  onLoad: function onLoad() {},

  updateWithUser: function updateWithUser(user) {
    if (!user) {
      return;
    }

    if (this._didShowUserInfo == user) {
      this.unscheduleAllCallbacks();
      this._disappearUserInfo();
      return;
    }

    this._didShowUserInfo = user;
    if (!this.node.active) {
      this.node.getComponent('alert').alert();
    }

    this.unscheduleAllCallbacks();
    this.scheduleOnce((function () {
      this._disappearUserInfo();
    }).bind(this), 5);

    this.labelUserId.string = "UID:\n" + user.id;
    this.labelUserIP.string = "用户IP:\n" + user.ipAddress.replace("::ffff:", "");
    this.labelNickname.string = user.nickname;
    this.avatarSprite.spriteFrame = null;
    SpriteHelper.setImageUrl(this.avatarSprite, user.avatarUrl);

    var sex = user.sex; // sex: 1 男  2 女
    this.manSprite.node.active = sex == 1;
    this.womenSprite.node.active = sex != 1;
  },

  _disappearUserInfo: function _disappearUserInfo() {
    this.node.active = false;
    this._didShowUserInfo = null;
  }
});

cc._RFpop();
},{"SpriteHelper":"SpriteHelper"}],"agreement":[function(require,module,exports){
"use strict";
cc._RFpush(module, '8f601dzNnZLtq+KGT0uqDqF', 'agreement');
// scripts\agreement.js

var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');
var KQGlabolSocketEventHander = require('KQGlabolSocketEventHander');
cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        agreement: {
            'default': null,
            type: cc.Label
        }
    },

    // use this for initialization
    onLoad: function onLoad() {
        KQGlobalEvent.on(Socket.Event.ReceiveHallInfo, this._socketReceiveHallInfo, this);
        cc.log('----61');
        cc.log(this.agreement);
    },
    _socketReceiveHallInfo: function _socketReceiveHallInfo(response) {
        if (!response.result) {
            return;
        }
        var s = cc.find('Canvas/agreement');
        var data = response.data;
        //this._info1 = response.data;
        cc.log(this.agreement);
        cc.log(s);
        cc.log('----61');
        this.agreement.string = data.info1 || "";
    }
});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{"KQGlabolSocketEventHander":"KQGlabolSocketEventHander","KQGlobalEvent":"KQGlobalEvent","socket":"socket"}],"alert":[function(require,module,exports){
"use strict";
cc._RFpush(module, '16cd2qs73lByZaHhJkQAEee', 'alert');
// scripts\alert.js

var AudioManager = require('AudioManager');
cc.Class({
  'extends': cc.Component,

  properties: {
    // foo: {
    //    default: null,      // The default value will be used only when the component attaching
    //                           to a node for the first time
    //    url: cc.Texture2D,  // optional, default is typeof default
    //    serializable: true, // optional, default is true
    //    visible: true,      // optional, default is true
    //    displayName: 'Foo', // optional
    //    readonly: false,    // optional, default is false
    // },
    // ...
    popNode: cc.Node,
    label: cc.Label,

    _alertCallback: null,
    _willDismissCallback: null,
    _dismissCallback: null,
    _confirmCallback: null, // 点击确定后的回调
    _tishi: null,
    _card_num: null
  },

  // use this for initialization
  onLoad: function onLoad() {},

  alert: function alert() {
    this.node.active = true;
    var anim = this.popNode.getComponent(cc.Animation);
    anim.play('pop');

    if (this._alertCallback) {
      this._alertCallback(this.node);
    }
  },
  /*#####弹出结果*/
  alertResult: function alertResult() {
    this.node.active = true;
    cc.find("Canvas/show_result").active = false;
    var anim = this.popNode.getComponent(cc.Animation);
    anim.play('pop');

    if (this._alertCallback) {
      this._alertCallback(this.node);
    }
  },

  /*#####点击确定*/
  playBtnClickSFX: function playBtnClickSFX() {
    AudioManager.instance.playBtnClickSFX();
  },

  /*#####点击取消*/
  palyBtnCancelClickSFX: function palyBtnCancelClickSFX() {
    AudioManager.instance.palyBtnCancelClickSFX();
  },

  /*#####点击关闭或者按键之类的按钮，播放音效*/
  palyBtnPublicSFX: function palyBtnPublicSFX() {
    AudioManager.instance.palyBtnPublicSFX();
  },

  /*#####点击创建房间，播放音效*/
  palyBtnCreateRoomSFX: function palyBtnCreateRoomSFX() {
    AudioManager.instance.palyBtnCreateRoomSFX();
  },
  /*#####点击创建房间，播放音效*/
  palyWindowSFX: function palyWindowSFX() {
    AudioManager.instance.palyWindowSFX();
  },

  palyWeiXinLoginSFX: function palyWeiXinLoginSFX() {
    AudioManager.instance.palyWeiXinLoginSFX();
  },
  palyFangPaiSFX: function palyFangPaiSFX() {
    AudioManager.instance.palyFangPaiSFX();
  },

  dismissAction: function dismissAction() {
    var willDismissCallback = this._willDismissCallback;
    if (willDismissCallback) {
      var result = willDismissCallback();
      if (result) {
        this.dismissComplete();
        return;
      }
    }

    var anim = this.popNode.getComponent(cc.Animation);
    var dismissAnim = anim.getAnimationState('pop_dismiss');
    dismissAnim.on('finished', this.dismissComplete, this);
    anim.play('pop_dismiss');
  },

  /*#####隐藏结果页面*/
  dismissActionResult: function dismissActionResult() {
    var willDismissCallback = this._willDismissCallback;
    if (willDismissCallback) {
      var result = willDismissCallback();
      if (result) {
        this.dismissComplete();
        return;
      }
    }

    var anim = this.popNode.getComponent(cc.Animation);
    var dismissAnim = anim.getAnimationState('pop_dismiss');
    dismissAnim.on('finished', this.dismissComplete, this);
    anim.play('pop_dismiss');
    cc.find("Canvas/show_result").active = true;
  },

  dismissComplete: function dismissComplete() {
    this.node.active = false;

    if (this.onDismissComplete) {
      this.onDismissComplete();
    }

    if (this._dismissCallback) {
      this._dismissCallback(this.node);
    }
  },
  dismissPlay: function dismissPlay() {
    cc.director.loadScene("hall");
  },

  onDismissComplete: function onDismissComplete() {
    cc.log("onDismissComplete");
  },

  doneAction: function doneAction() {
    this.dismissAction();
    this.onDoneAction();

    var confirmCallback = this._confirmCallback;
    if (confirmCallback) {
      confirmCallback(this.node);
    }
  },

  onDoneAction: function onDoneAction() {},

  setMessage: function setMessage(msg) {
    this.label.string = msg;
  },

  getMessage: function getMessage() {
    return this.label.string;
  },

  setAlertCallbck: function setAlertCallbck(callback) {
    this._alertCallback = callback;
  },

  setWillDismissCallback: function setWillDismissCallback(callback) {
    this._willDismissCallback = callback;
  },

  setDismissCallback: function setDismissCallback(callback) {
    this._dismissCallback = callback;
  },

  setConfirmCallback: function setConfirmCallback(callback) {
    this._confirmCallback = callback;
  }

});
/*setMessage: function (message) {
  this.label.getComponent('cc.Label').string = message;
},*/

// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{"AudioManager":"AudioManager"}],"cardsBack":[function(require,module,exports){
"use strict";
cc._RFpush(module, '98986IsXIdHiqLGEVIG2CWP', 'cardsBack');
// scripts\cardsBack.js

// 牌背影列表 component
// 可以显示、隐藏牌背影列表
cc.Class({
  "extends": cc.Component,

  properties: {
    cardsBackLayout: cc.Layout,
    cardsBackList: [cc.Sprite]
  },

  // use this for initialization
  onLoad: function onLoad() {},

  // 以动画的方式显示牌背影
  showPlayCardBacks: function showPlayCardBacks() {
    cc.log("显示牌背影");
    this.hideCardBacks();
    this.cardsBackLayout.node.active = true;

    var interval = 0.05;
    var startTime = 0;
    this.cardsBackList.forEach((function (cardBack) {
      this.scheduleOnce(function () {
        cardBack.node.active = true;
      }, startTime);
      startTime = startTime + interval;
    }).bind(this));
  },

  // 隐藏显示牌背影
  hideCardBacks: function hideCardBacks() {
    this.cardsBackLayout.node.active = false;
    this.cardsBackList.forEach(function (cardBack) {
      cardBack.node.active = false;
    });
  }
});

cc._RFpop();
},{}],"cards":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0fcbct/TBxC742saKLuFviQ', 'cards');
// scripts\cards.js

cc.Class({
    "extends": cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        /*牌花色*/
        spadesImages: [cc.SpriteFrame],
        heartsImages: [cc.SpriteFrame],
        clubImages: [cc.SpriteFrame],
        diamondImages: [cc.SpriteFrame]
    },

    // use this for initialization
    onLoad: function onLoad() {}

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"cellText":[function(require,module,exports){
"use strict";
cc._RFpush(module, '9c9fd3OxWNEp4rijfjJv05t', 'cellText');
// scripts\cellText.js

cc.Class({
    "extends": cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        labelMsg: cc.Label
    },

    // use this for initialization
    onLoad: function onLoad() {},

    setText: function setText(text) {
        this.labelMsg.getComponent(cc.Label).string = text;
    },

    clickAction: function clickAction() {
        var text = this.labelMsg.getComponent(cc.Label).string;
        this.onSelectAction(text);
    },

    onSelectAction: function onSelectAction(msg) {}

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"checkSelect":[function(require,module,exports){
"use strict";
cc._RFpush(module, '974a0c6jzZPRI5AeaAb4U0z', 'checkSelect');
// scripts\checkSelect.js

cc.Class({
    "extends": cc.Component,

    properties: {
        selectedIndex: 0,
        selectedNode: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.selected = true;
        this.selectedIndex = 0;
        this.selectedNode.active = true;
    },
    clickAction: function clickAction(e, data) {
        this.selected = !this.selected;
        this.selectedNode.active = this.selected;
        this.selectedIndex = this.selected ? 0 : null;
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RFpop();
},{}],"choujiang":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f64e0whLhNLmbOHtPpK94CG', 'choujiang');
// scripts\choujiang.js

var socket = require("socket");
cc.Class({
    "extends": cc.Component,

    properties: {
        option: {
            "default": [],
            type: cc.Node
        }
    },

    // use this for initialization
    onLoad: function onLoad() {},

    clickBtnchoujiang: function clickBtnchoujiang() {
        for (var i = 0; i < this.option.length; i++) {
            this.option[i].opacity = 255;
        }
        var index = 0;
        this._tishi = this.node.getChildByName("choujiang_bg").getChildByName("tishi");
        this._card_num = cc.find("Canvas/user/shop_bg/card_num");
        var comp = this._card_num.getComponent(cc.Label);
        this.callback = function () {
            if (index == 0) {
                this.option[index].opacity = 128;
                this.option[this.option.length - 1].opacity = 255;
            } else if (index == 1) {
                this.option[index].opacity = 128;
                this.option[index - 1].opacity = 255;
            } else {
                this.option[index].opacity = 128;
                this.option[index - 1].opacity = 255;
            }
            index++;
            if (index == this.option.length) {
                index = 0;
            }
        };
        if (comp.string < 20) {
            this._tishi.active = true;
        } else {
            //choujiang
            this.schedule(this.callback, 0.05);
            this.schedule(function () {
                this.unschedule(this.callback);
                for (var i = 0; i < this.option.length; i++) {
                    this.option[i].opacity = 255;
                }
                var i = Math.floor(Math.random() * 12);
                this.option[i].opacity = 128;
            }, 3, 0, 1);
        }
    },

    //***
    clickBtnComfirm: function clickBtnComfirm() {
        this._tishi.active = false;
        //this.node.active = false;
    }
});
//****

// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{"socket":"socket"}],"fecha":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e517077l0xMarB9uQsXGzvk', 'fecha');
// scripts\Extensions\fecha.js

(function (main) {
  'use strict';

  /**
   * Parse or format dates
   * @class fecha
   */
  var fecha = {};
  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
  var twoDigits = /\d\d?/;
  var threeDigits = /\d{3}/;
  var fourDigits = /\d{4}/;
  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
  var literal = /\[([^]*?)\]/gm;
  var noop = function noop() {};

  function shorten(arr, sLen) {
    var newArr = [];
    for (var i = 0, len = arr.length; i < len; i++) {
      newArr.push(arr[i].substr(0, sLen));
    }
    return newArr;
  }

  function monthUpdate(arrName) {
    return function (d, v, i18n) {
      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
      if (~index) {
        d.month = index;
      }
    };
  }

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var monthNamesShort = shorten(monthNames, 3);
  var dayNamesShort = shorten(dayNames, 3);
  fecha.i18n = {
    dayNamesShort: dayNamesShort,
    dayNames: dayNames,
    monthNamesShort: monthNamesShort,
    monthNames: monthNames,
    amPm: ['am', 'pm'],
    DoFn: function DoFn(D) {
      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
    }
  };

  var formatFlags = {
    D: function D(dateObj) {
      return dateObj.getDate();
    },
    DD: function DD(dateObj) {
      return pad(dateObj.getDate());
    },
    Do: function Do(dateObj, i18n) {
      return i18n.DoFn(dateObj.getDate());
    },
    d: function d(dateObj) {
      return dateObj.getDay();
    },
    dd: function dd(dateObj) {
      return pad(dateObj.getDay());
    },
    ddd: function ddd(dateObj, i18n) {
      return i18n.dayNamesShort[dateObj.getDay()];
    },
    dddd: function dddd(dateObj, i18n) {
      return i18n.dayNames[dateObj.getDay()];
    },
    M: function M(dateObj) {
      return dateObj.getMonth() + 1;
    },
    MM: function MM(dateObj) {
      return pad(dateObj.getMonth() + 1);
    },
    MMM: function MMM(dateObj, i18n) {
      return i18n.monthNamesShort[dateObj.getMonth()];
    },
    MMMM: function MMMM(dateObj, i18n) {
      return i18n.monthNames[dateObj.getMonth()];
    },
    YY: function YY(dateObj) {
      return String(dateObj.getFullYear()).substr(2);
    },
    YYYY: function YYYY(dateObj) {
      return dateObj.getFullYear();
    },
    h: function h(dateObj) {
      return dateObj.getHours() % 12 || 12;
    },
    hh: function hh(dateObj) {
      return pad(dateObj.getHours() % 12 || 12);
    },
    H: function H(dateObj) {
      return dateObj.getHours();
    },
    HH: function HH(dateObj) {
      return pad(dateObj.getHours());
    },
    m: function m(dateObj) {
      return dateObj.getMinutes();
    },
    mm: function mm(dateObj) {
      return pad(dateObj.getMinutes());
    },
    s: function s(dateObj) {
      return dateObj.getSeconds();
    },
    ss: function ss(dateObj) {
      return pad(dateObj.getSeconds());
    },
    S: function S(dateObj) {
      return Math.round(dateObj.getMilliseconds() / 100);
    },
    SS: function SS(dateObj) {
      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
    },
    SSS: function SSS(dateObj) {
      return pad(dateObj.getMilliseconds(), 3);
    },
    a: function a(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
    },
    A: function A(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
    },
    ZZ: function ZZ(dateObj) {
      var o = dateObj.getTimezoneOffset();
      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
    }
  };

  var parseFlags = {
    D: [twoDigits, function (d, v) {
      d.day = v;
    }],
    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
      d.day = parseInt(v, 10);
    }],
    M: [twoDigits, function (d, v) {
      d.month = v - 1;
    }],
    YY: [twoDigits, function (d, v) {
      var da = new Date(),
          cent = +('' + da.getFullYear()).substr(0, 2);
      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
    }],
    h: [twoDigits, function (d, v) {
      d.hour = v;
    }],
    m: [twoDigits, function (d, v) {
      d.minute = v;
    }],
    s: [twoDigits, function (d, v) {
      d.second = v;
    }],
    YYYY: [fourDigits, function (d, v) {
      d.year = v;
    }],
    S: [/\d/, function (d, v) {
      d.millisecond = v * 100;
    }],
    SS: [/\d{2}/, function (d, v) {
      d.millisecond = v * 10;
    }],
    SSS: [threeDigits, function (d, v) {
      d.millisecond = v;
    }],
    d: [twoDigits, noop],
    ddd: [word, noop],
    MMM: [word, monthUpdate('monthNamesShort')],
    MMMM: [word, monthUpdate('monthNames')],
    a: [word, function (d, v, i18n) {
      var val = v.toLowerCase();
      if (val === i18n.amPm[0]) {
        d.isPm = false;
      } else if (val === i18n.amPm[1]) {
        d.isPm = true;
      }
    }],
    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
      if (v === 'Z') v = '+00:00';
      var parts = (v + '').match(/([\+\-]|\d\d)/gi),
          minutes;

      if (parts) {
        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
      }
    }]
  };
  parseFlags.dd = parseFlags.d;
  parseFlags.dddd = parseFlags.ddd;
  parseFlags.DD = parseFlags.D;
  parseFlags.mm = parseFlags.m;
  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
  parseFlags.MM = parseFlags.M;
  parseFlags.ss = parseFlags.s;
  parseFlags.A = parseFlags.a;

  // Some common format strings
  fecha.masks = {
    'default': 'ddd MMM DD YYYY HH:mm:ss',
    shortDate: 'M/D/YY',
    mediumDate: 'MMM D, YYYY',
    longDate: 'MMMM D, YYYY',
    fullDate: 'dddd, MMMM D, YYYY',
    shortTime: 'HH:mm',
    mediumTime: 'HH:mm:ss',
    longTime: 'HH:mm:ss.SSS'
  };

  /***
   * Format a date
   * @method format
   * @param {Date|number} dateObj
   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
   */
  fecha.format = function (dateObj, mask, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof dateObj === 'number') {
      dateObj = new Date(dateObj);
    }

    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
      throw new Error('Invalid Date in fecha.format');
    }

    mask = fecha.masks[mask] || mask || fecha.masks['default'];

    var literals = [];

    // Make literals inactive by replacing them with ??
    mask = mask.replace(literal, function ($0, $1) {
      literals.push($1);
      return '??';
    });
    // Apply formatting rules
    mask = mask.replace(token, function ($0) {
      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
    });
    // Inline literal values back into the formatted value
    return mask.replace(/\?\?/g, function () {
      return literals.shift();
    });
  };

  /**
   * Parse a date string into an object, changes - into /
   * @method parse
   * @param {string} dateStr Date string
   * @param {string} format Date parse format
   * @returns {Date|boolean}
   */
  fecha.parse = function (dateStr, format, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof format !== 'string') {
      throw new Error('Invalid format in fecha.parse');
    }

    format = fecha.masks[format] || format;

    // Avoid regular expression denial of service, fail early for really long strings
    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
    if (dateStr.length > 1000) {
      return false;
    }

    var isValid = true;
    var dateInfo = {};
    format.replace(token, function ($0) {
      if (parseFlags[$0]) {
        var info = parseFlags[$0];
        var index = dateStr.search(info[0]);
        if (! ~index) {
          isValid = false;
        } else {
          dateStr.replace(info[0], function (result) {
            info[1](dateInfo, result, i18n);
            dateStr = dateStr.substr(index + result.length);
            return result;
          });
        }
      }

      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
    });

    if (!isValid) {
      return false;
    }

    var today = new Date();
    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
      dateInfo.hour = +dateInfo.hour + 12;
    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
      dateInfo.hour = 0;
    }

    var date;
    if (dateInfo.timezoneOffset != null) {
      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
    } else {
      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
    }
    return date;
  };

  /* istanbul ignore next */
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = fecha;
  } else if (typeof define === 'function' && define.amd) {
    define(function () {
      return fecha;
    });
  } else {
    main.fecha = fecha;
  }
})(this);

cc._RFpop();
},{}],"game":[function(require,module,exports){
"use strict";
cc._RFpush(module, '45811N61jFFA6UrygQla5+x', 'game');
// scripts\game.js

cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        messageNode: cc.Node,
        playNode: cc.Node

    },

    // use this for initialization
    onLoad: function onLoad() {},

    showMessageAlert: function showMessageAlert() {
        this.messageNode.active = true;
        var comp = this.messageNode.getComponent(cc.Animation);
        comp.play('pop');
    },

    dismissMessageAlert: function dismissMessageAlert() {
        var self = this;
        this.scheduleOnce(function () {
            self.messageNode.active = false;
        }, 0.3);
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"hall":[function(require,module,exports){
"use strict";
cc._RFpush(module, '1e6741Q2VFGDLupV88mg60Z', 'hall');
// scripts\hall.js

var manager = require('manager');
var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');
var AudioManager = require('AudioManager');
var KQNativeInvoke = require('KQNativeInvoke');
var Playback = require('Playback');

var hall = cc.Class({
    'extends': cc.Component,

    properties: {

        productNodes: [cc.Node],
        shopAlertNode: cc.Node,
        createNode: cc.Node,
        joinNode: cc.Node,
        invitNode: cc.Node,
        hasCode: cc.Node,
        gengxin: cc.Node,
        alertPrefab: cc.Prefab,
        tsSingleSelect: [cc.Node], //创建房间信息，单选
        tsCheckSeclect: [cc.Node], //创建房间信息，复选
        selectMoShi: cc.Node, //创建房间信息，模式（庄家模式和无特殊牌）
        selectGuiPai: cc.Node, //创建房间信息，模式（庄家模式和无特殊牌）
        labelNotice: cc.Label, // 公告
        labelBanner: cc.Label, // banner label
        shareAlertNode: cc.Node,
        shareAlertNode1: cc.Node,
        shareAlertNodeBg: cc.Node,
        shareAlertButton: cc.Button,
        recordNode: cc.Node,
        waitingPrefab: cc.Prefab,
        //用户信息
        avatarNode: cc.Node,
        nickNameLabel: cc.Label,
        cardNumberLabel: cc.Label,
        userIdLabel: cc.Label,
        codeLabel: cc.Label,
        // userInfoMsgNode:cc.Node,
        //退出
        exitNode: cc.Node,
        logoutNode: cc.Node,
        //战绩
        recordMsgNode: cc.Node,
        feedbackEditBox: cc.EditBox, //反馈
        feedbackNode: cc.Node,

        _userId: 0,
        _openId: null,
        _help: null,
        _close: null,
        iosUrl: null,
        aUrl: null

    },

    statics: {
        lastHallInfo: null, // 上一次收到的大厅信息
        cacheImageInfo: null
    },

    // use this for initialization
    onLoad: function onLoad() {
        cc.from = {};
        cc.from.isUseMa = true;
        cc.from.ma = 0;
        cc.isRoomViewShow = false;
        this._btn = this.node.getChildByName("btn");
        this._buttons = this.node.getChildByName("buttons");
        AudioManager.instance.playMusic();
        Playback.instance.removePlaybackDatas();

        hall.cacheImageInfo = hall.cacheImageInfo || {};

        this._registerSocketEvent();
        this._startBannerAnimation();
        this._initJoinRoom();
        this._initInvit();

        this._userId = Socket.instance.userInfo.id;
        this._openId = Socket.instance.userInfo.openId;
        this._inviteCode = Socket.instance.userInfo.inviteCode; //邀请码
        //cc.log(this._inviteCode,"邀请码---------------------");
        if (this._inviteCode) {
            //邀请码处理
            this.codeLabel.string = "CODE：" + this._inviteCode;
            this.hasCode.active = true;
            this.invitNode.active = false;
        } else {
            this.hasCode.active = false;
            this.invitNode.active = true;
            this.codeLabel.string = '';
        }

        var self = this;

        for (var i = 0; i < this.productNodes.length; i++) {
            var comp = this.productNodes[i].getComponent('product');
            comp.onClickAction = function (productId) {};
        }
        this.socket = cc.find('GameSocket').getComponent('socket');
        this.socket.receviceMessage = function (response) {
            var data = JSON.parse(response);
        };

        this.socket.connectionSuccess = function () {
            self.hiddenNetworkMessage();
            self.hiddenCheckMessage();
        };
        this.socket.connectionDisconnect = function () {
            self.showNetworkMessage('网络链接断开，重新连接中...');
        };
        this.socket.checkNetworkNow = function () {
            self.showCheckMessage('检查网络中...');
        };
        this.socket.checkNetworkEnd = function () {
            self.hiddenCheckMessage();
            self.hiddenNetworkMessage();
        };

        //  /*设置用户信息*/
        this.updateUserInfo();
        /*刷新用户信息*/
        Socket.sendGetUserInfo(this._userId, this._openId);
        /*定时刷新用户信息*/
        this.schedule((function () {
            Socket.sendGetUserInfo(this._userId, this._openId);
        }).bind(this), 10); //10s一次

        Socket.sendGetHallInfo(this.socket.userInfo.id);
        //hall.lastHallInfo = cc._loginInfo;
        if (hall.lastHallInfo) {
            this.updateBanner(hall.lastHallInfo.info);
            this.updateNotice(hall.lastHallInfo.broadcast);
            //this.labelBanner.string = hall.lastHallInfo.info;
            //this.labelNotice.string = hall.lastHallInfo.broadcast;
        }
        cc.onShareWXResp = this._shareResult.bind(this);
    },

    onDestroy: function onDestroy() {
        this.socket.receviceMessage = function () {};
        this.socket.connectionSuccess = function () {};
        this.socket.connectionDisconnect = function () {};
        this.socket.checkNetworkNow = function () {};
        this.socket.checkNetworkEnd = function () {};

        KQGlobalEvent.offTarget(this);
    },

    _registerSocketEvent: function _registerSocketEvent() {
        KQGlobalEvent.on(Socket.Event.JoinDesk, this._jiinRoomSocketCallback, this);
        KQGlobalEvent.on(Socket.Event.ReceiveDeskInfo, this._jiinRoomSocketCallback, this);
        KQGlobalEvent.on(Socket.Event.ReceiveCreateDesk, this._createRoomSocketCallback, this);
        KQGlobalEvent.on(Socket.Event.ReceiveHallInfo, this._socketReceiveHallInfo, this);
        KQGlobalEvent.on(Socket.Event.ReceiveGetUserInfo, this._socketReceiveUserInfo, this);
        KQGlobalEvent.on(Socket.Event.SocketDisconnect, this._socketDisconnect, this);
        KQGlobalEvent.on(Socket.Event.ReceiveInviteCode, this._socketReceiveInviteCode, this);
        KQGlobalEvent.on(Socket.Event.SocketConnectSuccessed, this._socketConnected, this);
        KQGlobalEvent.on(Socket.Event.ReceiveSharePng, this._socketSharePng, this);
    },
    //接受邀请码数据
    _socketReceiveInviteCode: function _socketReceiveInviteCode(response) {
        var inviteCode = response.data;
        //cc.log(inviteCode,"------------ 邀请码 ------------");
        if (inviteCode) {
            //邀请码处理
            this._inviteCode = inviteCode;
            this.codeLabel.string = "CODE：" + inviteCode;
            this.hasCode.active = true;
            this.invitNode.active = false;
        } else {
            this.alertMessage("输入的邀请码不存在");
            this.hasCode.active = false;
            this.invitNode.active = true;
            this.codeLabel.string = '';
        }
    },

    _startBannerAnimation: function _startBannerAnimation() {
        var anim = this.labelBanner.getComponent(cc.Animation);
        anim.play('banner');
    },

    _initJoinRoom: function _initJoinRoom() {
        var self = this;
        var joinRoom = this.joinNode.getComponent('joinRoom');

        joinRoom.callbackJoinRoom = function (number) {
            self.joinNode.getComponent('alert').dismissAction();
            self.showWaitingMessage('加入中...');
            self.scheduleOnce(function () {
                self.hiddenWaitingMessage();
            }, 2.0);

            /*加入房间请求*/
            var userId = Socket.instance.userInfo.id;
            Socket.sendJoinDesk(number, userId);
        };
    },

    _initInvit: function _initInvit() {
        //var self = this;
        //let Invit = this.invitNode.getComponent('Invit');

        // Invit.callbackJoinRoom = function (number) {
        //     self.invitNode.getComponent('alert').dismissAction();
        //     self.scheduleOnce(function() {
        //         self.hiddenWaitingMessage();
        //     }, 2.0);
        //     cc.log(number)
        //     cc.log('------191')
        //     let userId = Socket.instance.userInfo.id;
        // };
    },

    _jiinRoomSocketCallback: function _jiinRoomSocketCallback(response) {
        var _this = this;

        if (cc.isRoomViewShow) {
            return;
        }
        this.hiddenWaitingMessage();

        if (response.result) {
            (function () {
                if (cc.from == null) {
                    cc.from = {};
                }
                var joinRoom = _this.joinNode.getComponent('joinRoom');

                _this.joinNode.getComponent('alert').setAlertCallbck(function () {
                    joinRoom.clickClear();
                });
                cc.from.ma = response.data.maPai;
                cc.director.loadScene('play');
            })();
        } else {
            var reasonInfo = this._joinReasonMap(response.data.reason);
            this.alertMessage(reasonInfo);
        }
    },

    _socketReceiveHallInfo: function _socketReceiveHallInfo(response) {
        if (cc.isRoomViewShow) {
            return;
        }
        if (!response.result) {
            return;
        }
        var data = response.data;
        hall.lastHallInfo = data;

        var isIOS = data.isIOS;
        var isAndroid = data.isA;
        var vIOS = data.vIOS;
        var vA = data.vA;
        this.iosUrl = data.iosUrl;
        this.aUrl = data.aUrl;

        if (KQNativeInvoke.isNativeIOS()) {
            if (isIOS == 1) {
                if (vIOS != '1.0.1') {
                    this.gengxin.active = true;
                }
            }
        } else {
            //Android
            if (isAndroid == 1) {
                if (vA != '1.0.1') {
                    this.gengxin.active = true;
                }
            }
        }

        var notice = data.broadcast;
        var banner = data.info;
        this.updateNotice(notice);
        this.updateBanner(banner);
    },
    downloadNewVersion: function downloadNewVersion() {
        if (KQNativeInvoke.isNativeIOS()) {
            cc.sys.openURL(this.iosUrl);
            // jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "downloadNewVersion:", this.iosUrl);
        } else {
                //Android
                cc.sys.openURL(this.aUrl);
                // jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "downloadNewVersion", "(Ljava/lang/String;)V", this.aUrl);
            }
    },
    _createRoomSocketCallback: function _createRoomSocketCallback(response) {
        if (cc.isRoomViewShow) {
            return;
        }
        this.hiddenWaitingMessage();

        if (response.result) {
            cc.director.loadScene('play');
        }
        /*如果钻石不足，则提示*/
        else {
                this.alertMessage("您的钻石不足");
            }
    },

    _joinReasonMap: function _joinReasonMap(reason) {
        var reasonInfo = {
            notExist: "房间不存在!",
            cardNumber: "您房卡不足!"
        };

        var info = reasonInfo[reason] || "房间已满!";
        return info;
    },

    /*shop*/
    shopAction: function shopAction() {
        var comp = this.shopAlertNode.getComponent('alert');
        comp.alert();
    },
    /*提示*/
    alertMessage: function alertMessage(msg) {
        var node = cc.instantiate(this.alertPrefab);
        this.node.addChild(node);
        var comp = node.getComponent('alert');
        comp.setMessage(msg);
        comp.alert();
    },

    updateNotice: function updateNotice(notice) {
        if (this.labelNotice == null) {
            return;
        }
        this.labelNotice.string = notice || "";
    },

    updateBanner: function updateBanner() {
        var banner = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

        if (this.labelBanner == null) {
            return;
        }
        this.labelBanner.string = banner;
    },

    /*
    createDoneAction:function() {
        var info = {};
        var key = ['setting1','setting2','setting3','setting4'];
        for (var i = 0; i < this.tsSingleSelect.length; i++) {
            var tsIndex =  this.tsSingleSelect[i].getComponent('singleSelect').selectedIndex;
            info[key[i]] = tsIndex;
        }
        info['userId'] = this.socket.userInfo.id;
        this.socket.sendMessage('createDesk',info);
         this.createNode.getComponent('alert').dismissAction();
         let self = this;
        this.showWaitingMessage('创建中...');
        this.scheduleOnce(function() {
            self.hiddenWaitingMessage();
        }, 2.0);
    },
    */
    /*#####
    * setting1 局数  (0 | 1 | 2)
    * setting2 人数  (0 | 1 | 2 |3)
    * setting3 玩法  (0 | 1)
    * setting4 AA制收取房费  (null | 0)
    * setting5 马牌   （null | 0 | 1 | 2）
    * setting6 打枪计分 (0 | 1)
    * setting7 多一色  (null | 0)
    * */
    createDoneAction: function createDoneAction() {
        var info = {};
        //单选
        var key = ['setting1', 'setting2', 'setting6'];
        for (var i = 0; i < this.tsSingleSelect.length; i++) {
            var tsIndex = this.tsSingleSelect[i].getComponent('singleSelect').selectedIndex;
            info[key[i]] = tsIndex;
        }
        //可选可不选
        var key1 = ['setting4', 'setting7'];
        for (var i = 0; i < this.tsCheckSeclect.length - 1; i++) {
            var tsCheckIndex = this.tsCheckSeclect[i].getComponent('checkSelect').selectedIndex;
            info[key1[i]] = tsCheckIndex;
        }
        if (cc.from.isUseMa && cc.from.ma == null) {
            cc.from.ma = 0;
        }
        if (cc.from.isUseMa) {
            info['setting5'] = cc.from.ma;
        }
        //setting3 selectMoShiIndex为 ：null || 0 || 1
        var selectMoShiIndex = this.selectMoShi.getComponent('selectMoShi').selectIndex;
        info['setting3'] = selectMoShiIndex;

        var selectMoShiIndex = this.selectGuiPai.getComponent('selectMoShi').selectIndex;
        //info['setting8'] = selectMoShiIndex;
        info['setting8'] = null;
        //用户Id
        info['userId'] = this.socket.userInfo.id;

        if (info['setting6'] == 0) {
            info['setting6'] = 1;
        } else {
            info['setting6'] = 0;
        }
        if (info['setting2'] == 3) {
            //五人场必须多一色
            info['setting7'] = 0;
        }
        info['setting7'] = null;
        console.log("打印出创建房间信息");
        console.log(info);
        //return;
        this.socket.sendMessage('createDesk', info);

        this.createNode.getComponent('alert').dismissAction();

        var self = this;
        this.showWaitingMessage('创建中...');
        this.scheduleOnce(function () {
            self.hiddenWaitingMessage();
        }, 2.0);
    },

    // 随机场
    /*clickRandRoom: function () {
      cc.director.loadScene('randRoom');
    },*/

    clickShare: function clickShare() {
        this.shareAlertNode.getComponent('alert').alert();
    },

    clickShare1: function clickShare1() {
        this.shareAlertNode1.getComponent('alert').alert();
    },

    clickRecord: function clickRecord() {
        var comp = this.recordNode.getComponent('alert');
        comp.alert();
        Socket.sendGetRecrod(Socket.instance.userInfo.id);
    },

    clickPlayRule: function clickPlayRule() {
        //cc.director.loadScene('rule');
        this.help = this.node.getChildByName("help");
        var comp = this.help.getComponent('alert');
        comp.alert();
    },

    /*share*/
    shareToFriend: function shareToFriend() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareHallFriend");
        } else {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareHallFriend", "()V");
        }
    },

    shareToTimeline: function shareToTimeline() {
        this.shareAlertNode.getComponent('alert').dismissAction();
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareHallTimeline");
        } else {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareHallTimeline", "()V");
        }
    },
    //点击分享
    shareToTimelinePng: function shareToTimelinePng() {

        this.shareAlertNodeBg.active = true;
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxScreenShare");
        } else {
            //Android
            KQNativeInvoke.screenshotShare("shareIMGTimeline");
        }
        this.scheduleOnce((function () {
            this.shareAlertNodeBg.active = false;
        }).bind(this), 0.01); //10s一次
    },
    //点击分享返回值 1：成功  0：已经领取
    _socketSharePng: function _socketSharePng(data) {
        this.shareAlertNodeBg.active = false;
        var self = this;
        var sting;
        if (data.data == 1) {
            Socket.sendGetUserInfo(this._userId, this._openId);
            sting = '分享成功！';
            //this.scheduleOnce(function(){
            self.showCheckMessage(sting);
            //}.bind(this),0.5);//10s一次
            this.scheduleOnce((function () {
                self.hiddenCheckMessage();
            }).bind(this), 2); //10s一次
        } else {
                sting = '今天已经分享了！';
                self.showCheckMessage(sting);
                this.scheduleOnce((function () {
                    self.hiddenCheckMessage();
                }).bind(this), 1.5); //10s一次
            }
    },

    _shareResult: function _shareResult() {
        if (this.shareAlertNode1.active == false) {
            return;
        }
        Socket.sendSharePng(this._userId);
    },

    clickExit: function clickExit() {
        var comp = this.exitNode.getComponent('alert');
        comp.alert();
    },
    /*切换账号*/
    clickCancelLation: function clickCancelLation() {
        this.logoutNode.getComponent('alert').alert();
    },

    logoutAction: function logoutAction() {
        manager.setUserInfo('');
        cc.director.loadScene('login');

        hall.cacheImageInfo = null;
    },

    exitAction: function exitAction() {
        manager.setUserInfo('');
        if (!cc.sys.isNative) {
            cc.director.loadScene('login');
            hall.cacheImageInfo = null;
            return;
        }

        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "exitApp");
        } else if (KQNativeInvoke.isNativeAndroid()) {
            //Android com.lling.qianjianglzg
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "exitApp", "()V");
        }
        cc.director.end();
    },

    //接收处理用户数据
    _socketReceiveUserInfo: function _socketReceiveUserInfo(response) {
        if (cc.isRoomViewShow) {
            return;
        }
        if (!this.socket.userInfo) {
            cc.error("this.socket.userInfo 为空!!!");
            return;
        }
        this.nickNameLabel.string = response.data.nickname;
        this.userIdLabel.string = 'ID: ' + response.data.id;
        this.cardNumberLabel.string = response.data.cardNumber;
        var sprite = this.avatarNode.getComponent(cc.Sprite);
        cc.loader.load(response.data.avatarUrl + ".jpg", function (err, tex) {
            if (!err) {
                var frame = new cc.SpriteFrame(tex);
                sprite.spriteFrame = frame;
            }
        });
    },

    _socketDisconnect: function _socketDisconnect() {
        this.showNetworkMessage("网络链接断开，重新连接中...");
    },

    _socketConnected: function _socketConnected() {
        this.hiddenNetworkMessage();
    },

    //更新用户信息
    updateUserInfo: function updateUserInfo() {
        var info = this.socket.userInfo;
        if (!info) {
            cc.error("this.socket.userInfo 为空!!!");
            return;
        }

        this.nickNameLabel.string = info.nickname;
        this.userIdLabel.string = 'ID: ' + info.id;
        this.cardNumberLabel.string = info.cardNumber;

        var avatarUrl = info.avatarUrl + ".jpg";
        var sprite = this.avatarNode.getComponent(cc.Sprite);
        var texture = hall.cacheImageInfo[avatarUrl];
        if (texture) {
            var frame = new cc.SpriteFrame(texture);
            if (frame) {
                cc.log("从缓存中加载头像");
                sprite.spriteFrame = frame;
                return;
            }
        }

        cc.loader.load(info.avatarUrl + ".jpg", function (err, tex) {
            if (!err) {
                var frame = new cc.SpriteFrame(tex);
                sprite.spriteFrame = frame;

                hall.cacheImageInfo[avatarUrl] = tex;
            }
        });
    },

    /*提交意见*/
    feedbackAcion: function feedbackAcion() {
        var userId = this.socket.userInfo.id;
        var text = this.feedbackEditBox.string;
        if (text.length > 0) {
            this.feedbackNode.getComponent('alert').dismissAction();
            Socket.sendFeedback(userId, text);
            this.feedbackEditBox.string = '';
        }
    },

    showWaitingMessage: function showWaitingMessage(msg) {
        if (this.waitingNode != null && cc.sys.isNative && cc.sys.isObjectValid(this.waitingNode)) {
            this.waitingNode.destory();
            this.waitingNode = null;
        }
        this.waitingNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.waitingNode);
        var comp = this.waitingNode.getComponent('alert');
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenWaitingMessage: function hiddenWaitingMessage() {
        if (this.waitingNode != null) {
            this.waitingNode.getComponent('alert').dismissAction();
        }
    },

    //network
    showNetworkMessage: function showNetworkMessage(msg) {
        if (this.networkNode && this.networkNode.active) {
            var _alert = this.networkNode.getComponent('alert');
            if (_alert.getMessage() == msg) {
                return;
            }
        }

        if (this.networkNode != null) {
            var removeSelfAction = cc.removeSelf();
            this.networkNode.runAction(removeSelfAction);
            this.networkNode = null;
        }
        this.networkNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.networkNode);
        var comp = this.networkNode.getComponent('alert');
        var self = this;
        comp.onDismissComplete = function () {
            self.networkNode = null;
        };
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenNetworkMessage: function hiddenNetworkMessage() {
        if (this.networkNode != null) {
            this.networkNode.getComponent('alert').dismissAction();
        }
    },

    //checkNode
    showCheckMessage: function showCheckMessage(msg) {
        if (!(this.checkNode && this.checkNode.active)) {} else {
            var _alert2 = this.checkNode.getComponent('alert');
            if (_alert2.getMessage() == msg) {
                return;
            }
        }

        if (this.checkNode != null) {
            var removeSelfAction = cc.removeSelf();
            this.checkNode.runAction(removeSelfAction);
            this.checkNode = null;
        }
        this.checkNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.checkNode);
        var comp = this.checkNode.getComponent('alert');
        var self = this;
        comp.onDismissComplete = function () {
            self.checkNode = null;
        };
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenCheckMessage: function hiddenCheckMessage() {
        if (this.checkNode != null) {
            this.checkNode.getComponent('alert').dismissAction();
        }
    },
    onBtnClick: function onBtnClick() {
        if (this._buttons.active) {
            this._buttons.active = false;
        } else {
            this._buttons.active = true;
        }
    }

});

// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },
module.exports = hall;

cc._RFpop();
},{"AudioManager":"AudioManager","KQGlobalEvent":"KQGlobalEvent","KQNativeInvoke":"KQNativeInvoke","Playback":"Playback","manager":"manager","socket":"socket"}],"help":[function(require,module,exports){
"use strict";
cc._RFpush(module, '09981CwNMZOI4DHUg8u9kcj', 'help');
// scripts\help.js

cc.Class({
    "extends": cc.Component,
    properties: {
        /*sprites: {
            default: null,
            type: cc.SpriteAtlas
        },*/
        play_method_before: cc.Node, //玩法介绍
        play_method_content_label: cc.Node, //玩法介绍内容
        introduce_pai_before: cc.Node, //牌型介绍
        details: cc.Node, //牌型介绍内容
        caozuo_before: cc.Node, //操作介绍
        caozuo_content: cc.Node, //操作介绍内容
        _btn: null,
        _content: null,
        _buttonCom: null,
        _play_method_button: null,
        _introduce_pai_button: null,
        _caozuo_button: null
    },

    // use this for initialization
    onLoad: function onLoad() {
        this._play_method_button = this.play_method_before.getComponent(cc.Button);
        this._introduce_pai_button = this.introduce_pai_before.getComponent(cc.Button);
        this._caozuo_button = this.caozuo_before.getComponent(cc.Button);
        this._btn = [this.play_method_before, this.introduce_pai_before, this.caozuo_before];
        this._content = [this.play_method_content_label, this.details, this.caozuo_content];
        this._buttonCom = [this._play_method_button, this._introduce_pai_button, this._caozuo_button];
        //刚开始牌型介绍的按钮不可用
        this._buttonCom[1].interactable = false;
    },
    // 点击玩法介绍
    onBtnPlayMethodClick: function onBtnPlayMethodClick() {
        for (var i = 0; i < 3; i++) {
            //所有按钮设置为可用
            this._buttonCom[i].interactable = true;
            //所有的内容都隐藏掉
            this._content[i].active = false;
        }
        //当前点击的设置为不可用
        this._buttonCom[0].interactable = false;
        //当前点击的对应的内容可见
        this._content[0].active = true;
    },
    //点击牌型介绍
    onBtnIntroducePaiClick: function onBtnIntroducePaiClick() {
        for (var i = 0; i < 3; i++) {
            //所有按钮设置为可用
            this._buttonCom[i].interactable = true;
            //所有的内容都隐藏掉
            this._content[i].active = false;
        }
        //当前点击的设置为不可用
        this._buttonCom[1].interactable = false;
        //当前点击的对应的内容可见
        this._content[1].active = true;
    },
    //点击操作介绍
    onBtnCaozuoClick: function onBtnCaozuoClick() {
        for (var i = 0; i < 3; i++) {
            //所有按钮设置为可用
            this._buttonCom[i].interactable = true;
            //所有的内容都隐藏掉
            this._content[i].active = false;
        }
        //当前点击的设置为不可用
        this._buttonCom[2].interactable = false;
        //当前点击的对应的内容可见
        this._content[2].active = true;
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"inviteCode":[function(require,module,exports){
"use strict";
cc._RFpush(module, '777f9/eB7RKK4aO7FmNYFgO', 'inviteCode');
// scripts\inviteCode.js

/**
 * 邀请码
 * @authors 黄成(you@example.org)
 * @date    2017-06-16 09:44:10
 * @version $Id$
 */
var Socket = require('socket');
cc.Class({
  'extends': cc.Component,

  properties: {
    labelNumbers: [cc.Label],
    callbackInviteCode: ''
  },

  onLoad: function onLoad() {
    this.clickClear(); //清除数字
  },

  clickClear: function clickClear() {
    this.labelNumbers.forEach(function (label) {
      label.string = "";
    });
  },

  clickNumber: function clickNumber(event, number) {
    var label = this._lastEmptyLabel();
    if (label) {
      label.string = number;
      cc.log(label.string, "----------------");
    } else {
      return;
    }
    var isComplete = this._lastEmptyLabel() == null;
    cc.log("isComplete-------------", this.callbackInviteCode);
    var inviteNumber = this._inviteNumber();

    if (inviteNumber.length == 6) {
      cc.log(inviteNumber, "--------------------38"); //邀请码
      var userId = Socket.instance.userInfo.id;
      //Socket.sendInviteCode(inviteNumber, userId);
      this.callbackInviteCode = inviteNumber;
    }
  },
  sendCode: function sendCode() {
    //发送邀请码
    var userId = Socket.instance.userInfo.id;
    var inviteNumber = this.callbackInviteCode;
    //cc.log(inviteNumber,"--------------------38")
    if (inviteNumber && inviteNumber.length == 6) {
      Socket.sendInviteCode(inviteNumber, userId);
      this.callbackInviteCode = ''; //清空邀请码
    }
  },
  clickDeleteOne: function clickDeleteOne() {
    var label = this._lastNumberLabel();
    if (label) {
      label.string = "";
    }
  },

  _lastEmptyLabel: function _lastEmptyLabel() {
    for (var index in this.labelNumbers) {
      var label = this.labelNumbers[index];
      if (label.string == null || label.string.length <= 0) {
        return label;
      }
    }
    return null;
  },

  _lastNumberLabel: function _lastNumberLabel() {
    for (var index = this.labelNumbers.length - 1; index >= 0; --index) {
      var label = this.labelNumbers[index];
      if (label.string && label.string.length > 0) {
        return label;
      }
    }

    return null;
  },

  _inviteNumber: function _inviteNumber() {
    return this.labelNumbers.reduce(function (inviteNumber, label) {
      //cc.log(inviteNumber,"-----------------");
      return inviteNumber + (label.string || "");
    }, "");
  }
});

cc._RFpop();
},{"socket":"socket"}],"joinRoom":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'd5dcb9CJvpPJpnsCQ/q197x', 'joinRoom');
// scripts\joinRoom.js

cc.Class({
  "extends": cc.Component,

  properties: {
    labelNumbers: [cc.Label],
    callbackJoinRoom: null
  },

  // use this for initialization
  onLoad: function onLoad() {
    this.clickClear();
  },

  clickNumber: function clickNumber(event, number) {
    var label = this._lastEmptyLabel();
    if (label) {
      label.string = number;
    } else {
      return;
    }

    var isComplete = this._lastEmptyLabel() == null;
    if (isComplete && this.callbackJoinRoom) {
      var roomNumber = this._roomNumber();
      // cc.log("要加入的房间号是：", roomNumber);
      this.callbackJoinRoom(roomNumber);
    }
  },

  clickClear: function clickClear() {
    this.labelNumbers.forEach(function (label) {
      label.string = "";
    });
  },

  clickDeleteOne: function clickDeleteOne() {
    var label = this._lastNumberLabel();
    if (label) {
      label.string = "";
    }
  },

  _lastEmptyLabel: function _lastEmptyLabel() {
    for (var index in this.labelNumbers) {
      var label = this.labelNumbers[index];
      if (label.string == null || label.string.length <= 0) {
        return label;
      }
    }
    return null;
  },

  _lastNumberLabel: function _lastNumberLabel() {
    for (var index = this.labelNumbers.length - 1; index >= 0; --index) {
      var label = this.labelNumbers[index];
      if (label.string && label.string.length > 0) {
        return label;
      }
    }

    return null;
  },

  _roomNumber: function _roomNumber() {
    return this.labelNumbers.reduce(function (roomNumber, label) {
      return roomNumber + (label.string || "");
    }, "");
  }
});

cc._RFpop();
},{}],"launch":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0efb2ngHglDtK2A+W4dmfzt', 'launch');
// scripts\launch.js

cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.scheduleOnce(function () {
            cc.director.loadScene('login');
        }, 0.5);
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"login":[function(require,module,exports){
(function (Buffer){
"use strict";
cc._RFpush(module, '9c72dn88ytPxZWrZRaxt5cr', 'login');
// scripts\login.js

var manager = require('manager');
var KQCard = require('KQCard');
var Socket = require('socket');
var KQCardFindTypeExtension = require('KQCardFindTypeExtension');
var KQGlobalEvent = require('KQGlobalEvent');
var AudioManager = require('AudioManager');
var KQNativeInvoke = require('KQNativeInvoke');
var KQGlabolSocketEventHander = require('KQGlabolSocketEventHander');

cc.Class({
    'extends': cc.Component,

    properties: {
        selectNode: cc.Node,
        alertPrefab: cc.Prefab,
        canvasNode: cc.Node,
        //agreement: {
        //    default: null,
        //    type: cc.Label
        //},
        vLabel: cc.Label,
        scroll_View: {
            'default': null,
            type: cc.ScrollView
        },
        agreementLabel: cc.Label,
        agreementNode: cc.Node,
        waitingPrefab: cc.Prefab
    },

    goUpdateAction: function goUpdateAction() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod("AppController", "downloadNewVersion:", this.iosUrl);
        } else {
            //Android
            jsb.reflection.callStaticMethod("com/lling/ssz/AppActivity", "downloadNewVersion", "(Ljava/lang/String;)V", this.androidUrl);
        }
    },

    checkVersion: function checkVersion(vData) {
        //var version = vData.version;
        cc.info1 = vData.version;
        this.iosUrl = vData.iosUrl;
        this.androidUrl = vData.androidUrl;
        //if (manager.version != version) {//更新版本
        //    this.versionEnable = false;
        //    this.goUpdateAction();
        //    //this.versionLabel.string = '请到服务器更新到最新版本';
        //}
        //else {
        //this.versionLabel.string = '当前版本 ' + manager.version;
        this.versionEnable = true;
        var self = this;
        var info = manager.getUserInfo();
        if (info.length == 0) {
            this.loginEnable = true;
        }
        this.scheduleOnce(function () {
            if (info.length > 0) {
                this.loginEnable = true;
                self.loginAction();
            }
        }, 0.5);
        //}
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.scroll_View.scrollToTop();
        KQGlabolSocketEventHander.start();
        var self = this;
        this.loginEnable = false;
        this.socket = cc.find('GameSocket').getComponent('socket');
        this.socket.receviceMessage = function (response) {
            var data = JSON.parse(response);
            if (data.action == 'checkVersion') {
                self.checkVersion(data.data);
            } else if (data.action == 'login') {
                if (data.result) {
                    //成功
                    self.socket.userInfo = data.data; //运行时态信息
                    //cc.log(JSON.stringify(data));
                    //cc.log(data.data);
                    //cc.log(data.data.roomId);
                    //cc.log(data.data.roomId.length);
                    //cc.log('----76');
                    if (data.data.roomId.length > 0) {
                        self.scheduleOnce(function () {
                            cc.director.preloadScene('hall');
                            cc.director.loadScene('play');
                        }, 1);
                    } else {
                        self.scheduleOnce(function () {
                            cc.director.preloadScene('play');
                            cc.director.loadScene('hall');
                        }, 1);
                    }
                } else {
                    self.alertMessage('登录失败!');
                }
            }
        };

        //从本地调
        this.socket.getWxInfo = function (info) {
            manager.setUserInfo(info); //保存本地
            var data = JSON.parse(info); //str -> json(obj)
            self.scheduleOnce(function () {
                //延迟执行 1s
                self.sendLoginRequest(data); //登录请求
            }, 1);
        };
        //debug
        var testData = '{"openid":"oJ752t_0-D7ieMcQPR1m7khElguQ0011","nickname":"imya","sex":1,"language":"zh_CN","city":"Changsha","province":"Hunan","country":"CN","headimgurl":"http:\/\/wx.qlogo.cn\/mmopen\/BVyz4R8q6puJibEv1hrsaTmIKQhkaTS9FyvcevvC5hlxFnfOuspDjicG0GtzyJXOhNT7g1WZDeCDQhnRdEOgz3QMnP0F9iboQGy\/0","privilege":[]}';
        if (!cc.sys.isNative && window.location) {
            var search = window.location.search;
            if (search) {
                var url;
                var loc;

                (function () {
                    var query = search.substring(1);
                    var attrs = query.split('&');
                    var obj = JSON.parse(testData);

                    url = window.location.search;
                    loc = url.substring(url.lastIndexOf('=') + 1, url.length);

                    if (loc == 1) {
                        obj.openid = 'JzIwMTcvNi8xNiDkuIrljYg5OjM4OjEzJw==';
                        obj.nickname = loc;
                    } else if (loc == 2) {
                        obj.openid = 'JzIwMTcvNi8xNiDkuIrljYg5OjM4OjMzJw==';
                        obj.nickname = loc;
                    } else if (loc == 3) {
                        obj.openid = 'JzIwMTctNi0xNiAwOTo0NTo1OSc=';
                        obj.nickname = loc;
                    } else if (loc == 4) {
                        obj.openid = 'JzIwMTcvNi8xNiDkuIrljYg5OjQ2OjAwJw==';
                        obj.nickname = loc;
                    } else if (loc == 5) {
                        obj.openid = 'JzIwMTcvNi8xNiDkuIrljYgxMDowMzowOCc=';
                        obj.nickname = loc;
                    }

                    attrs.forEach(function (attr) {
                        var keyValueArr = attr.split('=');
                        var key = keyValueArr[0];
                        var value = keyValueArr[1];
                        obj[key] = value;
                    });

                    testData = JSON.stringify(obj);
                })();
            }
        }

        if (!cc.sys.isNative) {
            manager.setUserInfo(testData);
        }
        //if (KQNativeInvoke.isNativeIOS()) {
        //    this.vLabel.string = cc._loginInfo.vIOS || "";
        //} else if (KQNativeInvoke.isNativeAndroid()) {//Android
        //    this.vLabel.string = cc._loginInfo.vA || "";
        //}
        //cc.log(cc._loginInfo)
        //cc.log('---139')
    },

    agreements: function agreements() {
        this.agreementNode.active = true;
        //this.agreementLabel.string = cc.info1;
        this.agreementLabel.node.y = 0;
    },

    onDestroy: function onDestroy() {
        this.socket.receviceMessage = function () {};
    },

    sendLoginRequest: function sendLoginRequest(data) {
        this.showWaitingMessage('登录中...');
        this.socket.sendMessage('login', data);
    },

    loginAction: function loginAction() {
        var comp = this.selectNode.getComponent('select');
        if (!comp.selected) {
            this.showMsg = cc.instantiate(this.alertPrefab);
            this.canvasNode.addChild(this.showMsg);
            var _comp = this.showMsg.getComponent('alert');
            _comp.setMessage('请同意用户协议');
            return;
        }

        var info = manager.getUserInfo();
        if (info.length > 0) {
            var data = JSON.parse(info);
            this.sendLoginRequest(data);
            return;
        }

        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxLogin"); //IOS
        } else if (KQNativeInvoke.isNativeAndroid()) {
                //Android
                jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxLogin", "()V");
            }
    },

    loginYkAction: function loginYkAction() {
        var comp = this.selectNode.getComponent('select');
        if (!comp.selected) {
            this.showMsg = cc.instantiate(this.alertPrefab);
            this.canvasNode.addChild(this.showMsg);
            var _comp2 = this.showMsg.getComponent('alert');
            _comp2.setMessage('请同意用户协议');
            return;
        }
        var testDate = new Date();
        var time = "'" + testDate.toLocaleString() + "'";
        var openid = new Buffer(time).toString('base64');
        var testData = '{"openid":"' + openid + '","nickname":"游客","sex":1,"language":"zh_CN","city":"Changsha","province":"Hunan","country":"CN","headimgurl":"http:\/\/wx.qlogo.cn\/mmopen\/BVyz4R8q6puJibEv1hrsaTmIKQhkaTS9FyvcevvC5hlxFnfOuspDjicG0GtzyJXOhNT7g1WZDeCDQhnRdEOgz3QMnP0F9iboQGy\/0","privilege":[]}';
        //if (!cc.sys.isNative && window.location) {
        var search = '  ';
        if (search) {
            (function () {
                var query = search.substring(1);
                var attrs = query.split('&');
                var obj = JSON.parse(testData);
                attrs.forEach(function (attr) {
                    var keyValueArr = attr.split('=');
                    var key = keyValueArr[0];
                    var value = keyValueArr[1];
                    obj[key] = value;
                });
                testData = JSON.stringify(obj);
            })();
        }
        //}

        //var info = manager.getUserInfo();
        //if (info.length > 0) {
        var data = JSON.parse(testData);
        this.sendLoginRequest(data);
        //    return;
        //}else{
        manager.setUserInfo(testData);
        //}
    },

    showWaitingMessage: function showWaitingMessage(msg) {
        if (this.waitingNode != null && cc.sys.isNative && cc.isValid(this.waitingNode)) {
            if (msg == this.waitingNode.getComponent('alert').getMessage()) {
                return;
            }

            this.waitingNode.removeFromParent();
            this.waitingNode = null;
        }
        this.waitingNode = cc.instantiate(this.waitingPrefab);
        this.canvasNode.addChild(this.waitingNode);
        var comp = this.waitingNode.getComponent('alert');
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenWaitingMessage: function hiddenWaitingMessage() {
        if (this.waitingNode != null) {
            this.waitingNode.getComponent('alert').dismissAction();
        }
    },

    protocolAction: function protocolAction() {
        cc.log('protocol action');
    }
});

cc._RFpop();
}).call(this,require("buffer").Buffer)

},{"AudioManager":"AudioManager","KQCard":"KQCard","KQCardFindTypeExtension":"KQCardFindTypeExtension","KQGlabolSocketEventHander":"KQGlabolSocketEventHander","KQGlobalEvent":"KQGlobalEvent","KQNativeInvoke":"KQNativeInvoke","buffer":2,"manager":"manager","socket":"socket"}],"maPai":[function(require,module,exports){
"use strict";
cc._RFpush(module, '8b896xHkCtE1IzD8BDK4cWL', 'maPai');
// scripts\Play\maPai.js

cc.Class({
    "extends": cc.Component,

    properties: {
        maPaiSprite: [cc.SpriteFrame],
        spriteNode: cc.Sprite,
        labelNode: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {}

});

cc._RFpop();
},{}],"manager":[function(require,module,exports){
"use strict";
cc._RFpush(module, '4a47fj0J/VHup24OT7njkko', 'manager');
// scripts\manager.js

module.exports = {
    version: 'v1.0.0',

    setUserInfo: function setUserInfo(str) {
        cc.sys.localStorage.setItem('userinfo', str);
    },

    getUserInfo: function getUserInfo() {
        var value = cc.sys.localStorage.getItem('userinfo');
        if (!value) {
            return "";
        }
        return value;
    },

    setMusicValue: function setMusicValue(value) {
        cc.sys.localStorage.setItem('musicVolumn', value);
    },

    getMusicValue: function getMusicValue() {
        var value = cc.sys.localStorage.getItem('musicVolumn');
        if (!value) {
            return 1;
        }
        return value;
    },

    setMusicEffectValue: function setMusicEffectValue(value) {
        cc.sys.localStorage.setItem('musicEffectVolumn', value);
    },

    getMusicEffectValue: function getMusicEffectValue() {
        var value = cc.sys.localStorage.getItem('musicEffectVolumn');
        if (!value) {
            return 1;
        }
        return value;
    }
};

cc._RFpop();
},{}],"play":[function(require,module,exports){
"use strict";
cc._RFpush(module, '16c65H2Pw9PBaQSvw69LGLQ', 'play');
// scripts\play.js

var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');
var ArrayExtension = require('ArrayExtension');
var Manager = require('manager');
var AudioManager = require('AudioManager');
var KQNativeInvoke = require('KQNativeInvoke');
var UserModelHelper = require('UserModelHelper');
var Playback = require('Playback');
var fecha = require('fecha');
/*#####*/
var KQCard = require('KQCard');
/**/
var Player = require('Player');
/**/
//const isTeShuPai = require('isTeShuPai');
//特殊牌类型
var TESHUPAITYPE = {
    isTeShuPai: false,
    isLiuDuiBan: false,
    isSanShunZi: false,
    isSanTaoHua: false,

    isQingLong: false,
    isYiTiaoLong: false,
    isSanTongHuaShun: false,
    isSanFenTianXia: false,
    isCouYiSe: false,
    isSiTaoSanTiao: false,
    isWuDuiSanTiao: false
};

var GAMESTATUS = {
    WAIT_PEOPLE: 0, // 等人
    WAIT_READY: 1, // 等待他人准备
    PLAYING: 2 };

// 布局
//          2
//   3            1
//     self 0
// 正在玩游戏
var Play = cc.Class({
    'extends': cc.Component,

    properties: {
        playerNodes: [cc.Node],
        chatNode: cc.Node,
        cardTypeCombineNode: cc.Node,
        /*#####*/
        typeButtonsNode: cc.Node,
        /*#####*/

        labelRoomNumber: cc.Label,
        labelOverview: cc.Label,
        labelRemainTime: cc.Label,
        btnShare: cc.Button,
        btnReady: cc.Button, // 准备开始按钮
        fapaiNode: cc.Node,
        btnChatVoice: cc.Button,
        btnChatText: cc.Button,
        startCompareCardsNode: cc.Node,
        voiceRecordAnimationNode: cc.Node,
        settingNode: cc.Node,
        playbackNode: cc.Node,

        oneGameResult: cc.Node, // 一局结果
        totalGameResult: cc.Node,

        alertRequestExitNode: cc.Node, // 申请退出 Node
        alertRequestExitCountdownNode: cc.Node, // 申请退出倒计时 Node
        btnAlertRequestExitConfirmButton: cc.Button,
        btnAlertRequestExitCancelButton: cc.Button,
        btnButtonNode: cc.Node,
        btnButtons: cc.Node,

        alertAnsowerExitNode: cc.Node, // 回答申请退出  Node
        alertAnsowerExitCountdownNode: cc.Node, // 回答以上请退出的倒计时

        alert: cc.Node,

        alertForceExitNode: cc.Node, // 强制退出 Node

        waitingPrefab: cc.Prefab,
        /**/
        playerComps: [Player],
        /**/
        /*#####*/
        teshupai_min: [cc.Node],
        teshupai_max: [cc.Node],
        gongXiNi: cc.Node,
        teShuPai: cc.Node,
        _liuDuiBan: false,
        _sanShunZi: false,
        _sanTongHua: false,
        _yiTiaoLong: false,

        _QingLong: false,
        _SanTongHuaShun: false,
        _SanFenTianXia: false,
        _CouYiSe: false,
        _SiTaoSanTiao: false,
        _WuDuiSanTiao: false,

        wuTong_img: cc.SpriteFrame,
        tongHuaShun_img: cc.SpriteFrame,
        /*#####*/

        _playerComponents: null,
        _msgControl: null,

        _socket: null,
        _userId: 0,
        _playerInfos: null,
        _deskInfo: null, // createTime 创建时间  isDissolving 表示是否正在解散 dissolveLeftTime 离解散剩余多长时间 dissolveAnswerInfo [处理过的人的信息]
        _gameStatus: GAMESTATUS.WAIT_PEOPLE,
        _enterTime: null,
        _players: null,
        /**/
        _isComparingCardsNow: false, // 是否正在比牌
        _playedCompareCardsIndexs: [] },

    // 已经播放过比牌的局数
    /**/
    // use this for initialization
    onLoad: function onLoad() {
        var _this = this;

        this.BtnClickGongXiNiComfirm = this.cardTypeCombineNode.getComponent("CardTypeCombine").BtnClickGongXiNiComfirm;
        this._enterTime = Date.now();
        /**/
        this.playerComps.forEach(function (playerComp) {
            playerComp.playedCompareCardsIndexs = _this._playedCompareCardsIndexs;
        });
        /**/
        /*AudioManager.instance.playDeskMusic();*/
        AudioManager.instance.stopHallMusic();
        this._initPlayerComponents();
        this._initSelectCardNode();
        this._initOneGameResult();
        this._remainTimeStartUpdate();

        this._userId = Socket.instance.userInfo.id;
        this._msgControl = this.chatNode.getComponent('MsgControl');

        this.settingNode.getComponent("Setting").hideSwitch();
        this.labelRoomNumber.string = "";
        this.labelRemainTime.node.active = false;

        this._registerVoiceNodeEvents();
        this._registerSocketEvent();

        /*#####*/
        this._initMaPai();
        Play.instances = this;
        this._gongXiNiShow(false);
        /*#####*/
        if (Playback.instance.isContainPlaybackDatas()) {
            Playback.instance.startPlayback();
            this.playbackNode.active = true;
            this.btnChatVoice.node.active = false;
            //this.cardsFromArray.node.active = false;
        } else {
                this._loadDeskInfo();
            }

        this._socket = Socket.instance;

        // this.scheduleOnce(function () {
        //   // this._showOneGameResult();
        //   // this._startCompareCards();
        // }.bind(this), 2);
    },

    /*#####*/
    /*显示马牌*/
    _initMaPai: function _initMaPai() {
        //"mapai"脚本上挂着马牌精灵
        var maPaiCom = this.node.getComponent("maPai");
        var spriteNode = maPaiCom.spriteNode; //马牌精灵节点
        var labelNode = maPaiCom.labelNode; //马牌文字节点
        if (this.maPai != null) {
            labelNode.active = true;
        }
        if (this.maPai == 1) {
            spriteNode.spriteFrame = maPaiCom.maPaiSprite[0];
        } else if (this.maPai == 5) {
            spriteNode.spriteFrame = maPaiCom.maPaiSprite[1];
        } else if (this.maPai == 10) {
            spriteNode.spriteFrame = maPaiCom.maPaiSprite[2];
        } else {
            spriteNode.spriteFrame = null;
            labelNode.active = false;
        }
    },

    _initPlayerComponents: function _initPlayerComponents() {
        this._playerComponents = this.playerNodes.map(function (node) {
            return node.getComponent('Player');
        });
    },

    _initSelectCardNode: function _initSelectCardNode() {
        var self = this;
        var cardTypeCombineComp = this.cardTypeCombineNode.getComponent('CardTypeCombine');
        cardTypeCombineComp.setFinishSelectCardsCallback(function (serverCardsInfo) {
            cardTypeCombineComp.reset();
            Socket.sendPlayCard(self._userId, serverCardsInfo);
            self.cardTypeCombineNode.active = false;
        });
    },
    /**/
    _initOneGameResult: function _initOneGameResult() {
        var self = this;
        this.oneGameResult.setCloseCallback = function () {
            if (self._isRandomRoom()) {
                cc.director.loadScene('hall');
            }
        };
    },
    /**/
    //_initOneGameResult: function () {
    //  const self = this;
    //  this.oneGameResult.setCloseCallback = function () {
    //    if (self._isRandomRoom()) {
    //      cc.director.loadScene('hall');
    //    }
    //  };
    //},

    onDestroy: function onDestroy() {
        KQGlobalEvent.offTarget(this);
    },

    clickExit: function clickExit() {
        if (Playback.instance.isPlaybacking()) {
            cc.director.loadScene('hall');
            return;
        }
        /**/
        if (this._deskInfo && this._deskInfo.isDeskOver) {
            if (!this._isComparingCardsNow) {
                // 如果房间已结束，并且不是正在播放打牌动画, 则直接离开房间
                cc.director.loadScene('hall');
            }
            return;
        }
        /**/
        //if (this._isRandomRoom()) {
        //    this.alertForceExitNode.getComponent('alert').alert();
        //    return;
        //}

        if (this._deskInfo.cIndex == 0) {
            if (this._deskInfo.createId == this._userId) {
                Socket.sendDissolveDesk(this._userId);
            } else {
                Socket.sendLeaveDesk(this._userId);
            }
            return;
        }

        this.btnAlertRequestExitCancelButton.node.active = true;
        this.btnAlertRequestExitConfirmButton.node.active = true;

        var alert = this.alertRequestExitNode.getComponent('alert');
        alert.unscheduleAllCallbacks();
        alert.setMessage("您在申请协商退出，如果所有玩家同意，您将退出游戏。");
        alert.alert();

        this.alertRequestExitCountdownNode.getComponent('Countdown').stop();
    },

    //点击分享按钮
    clickShare: function clickShare() {
        var roomId = String(this._deskInfo.roomId);
        var description = "拱扒十三道 玩法:";
        //+ this._deskInfoGameWay();
        description = description + " " + this._deskInfoNumberOfPeople();
        description = description + "," + this._deskInfoPayInfo();
        //description = description + "," + this._deskInfoJiaYiSeInfo();
        //description = description + "," + this._deskInfoGuiPaiInfo();
        description = description + " " + this._deskInfoNumberOfGame();

        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "wxShareFriend:description:", roomId, description);
        } else if (KQNativeInvoke.isNativeAndroid()) {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "wxShareFriend", "(Ljava/lang/String;Ljava/lang/String;)V", roomId, description);
        }
    },

    //点击准备按钮
    clickReady: function clickReady() {
        this.btnReady.node.active = false;
        this.btnShare.node.active = false;
        /*#####点击准备的时候，上一局比牌的数据消失*/
        this._playerComponents.forEach(function (playerComp) {
            //playerComp.reset();
            playerComp.reset(); //#####
        });
        cc.find("Canvas/show_result").active = false;
        Socket.sendReady(this._userId);
    },

    updateRoomNumber: function updateRoomNumber(roomNumber) {
        var gameNumberString = "";
        if (this._deskInfo.setting1 != 0 && this._deskInfo.setting1 != 1) {
            gameNumberString = "局数 : " + "" + this._deskInfo.cIndex + "/" + this._deskInfo.mMax;
        } else if (this._deskInfo.setting1 == 0) {
            gameNumberString = "局数 : 10局";
        } else if (this._deskInfo.setting1 == 1) {
            gameNumberString = "局数 : 20局";
        }
        this.labelRoomNumber.string = "房号 : " + "" + roomNumber + "\n" + gameNumberString;
    },

    updateGameStatus: function updateGameStatus() {
        var status = arguments.length <= 0 || arguments[0] === undefined ? GAMESTATUS.WAIT_PEOPLE : arguments[0];

        this._gameStatus = status;

        this.btnShare.node.active = status == GAMESTATUS.WAIT_PEOPLE;
        this.btnReady.node.active = status == GAMESTATUS.WAIT_READY;
        this.isReadyStatus();
        //if (status == GAMESTATUS.PLAYING) {
        //  this._playerComponents.forEach(function(playerComp){
        //    //playerComp.hideReadyStatus();
        //  });
        //}
    },

    gameStatus: function gameStatus() {
        return this._gameStatus;
    },
    isReadyStatus: function isReadyStatus() {
        //console.log(this._playerInfos)
        if (this._playerInfos && this._playerInfos.length > 0) {
            this._playerInfos.forEach((function (playerInfo) {
                var userInfoSelf = cc.find('Canvas/playSelf/userInfoSelf');
                if (playerInfo.id == this._userId) {
                    if (!playerInfo.readyStatus && !this._isComparingCardsNow && !Playback.instance.isPlaybacking() && !Playback.instance.isContainPlaybackDatas()) {
                        userInfoSelf.getComponent('userInfo').setReadyNodeVisible(false);
                        if (this._deskInfo.cIndex == 0) {
                            //一局还没开始
                            //if(this._deskInfo.createId != this._userId){////是否是房主
                            this.btnReady.node.active = true;
                            if (this._deskInfo.players.length < this._deskInfo.maxNumber) {
                                this.btnShare.node.active = true;
                            } else {
                                this.btnShare.node.active = false;
                            }
                            //}else{
                            //    this.btnReady.node.active = false;
                            //}
                        } else {
                                var oneGameResult = this.oneGameResult.getComponent('GameResult');
                                oneGameResult.unscheduleAllCallbacks();
                                oneGameResult.showResults(this._deskInfo, this._userId);
                                this.btnShare.node.active = false;
                                this.btnReady.node.active = false;
                            }
                        console.log("未曾准备");
                    } else {
                        this.btnReady.node.active = false;
                        this.btnShare.node.active = false;
                        cc.find("Canvas/show_result").active = false;
                        if (!this._isComparingCardsNow) {
                            userInfoSelf.getComponent('userInfo').setReadyNodeVisible(true);
                        } else {
                            //userInfoSelf.getComponent('userInfo').setReadyNodeVisible(false);
                            this._playerComponents.forEach(function (playerComp) {
                                playerComp.hideReadyStatus();
                            });
                        }
                        console.log("已准备");
                    }
                }
            }).bind(this));
        }
    },
    /// 游戏动画
    _startGame: function _startGame() {
        if (this.gameStatus() == GAMESTATUS.PLAYING) {
            return;
        }
        this._isComparingCardsNow = true;
        this.updateGameStatus(GAMESTATUS.PLAYING);
        this._playFaPaiAnimation();

        if (!UserModelHelper.isPlayedCards(this._findPlayerInfoByUserId(this._userId))) {
            this.scheduleOnce((function () {
                this._showCardTypeCombine();
            }).bind(this), 1.0);

            //let self = this;
            //  //this.fapaiNode.getComponent('alert').alert();
            //  self.fapaiNode.active = true;
            //  var anim = this.fapaiNode.getComponent(cc.Animation);
            //  anim.play('fapai');
            //this.scheduleOnce(function () {
            //  self.fapaiNode.active = false;
            //}, 2.0);
        }
    },

    _playFaPaiAnimation: function _playFaPaiAnimation() {
        this._playerComponents.forEach(function (player) {
            player.playFaPaiAnimation();
        });

        AudioManager.instance.playFaPai();
    },

    /*#####*/
    //是否特殊牌
    isTeShuPai: function isTeShuPai(cards) {
        var result = KQCard.isTeShuPai(cards);
        if (result) {
            TESHUPAITYPE.isTeShuPai = true;
        } else {
            TESHUPAITYPE.isTeShuPai = false;
        }
        return result;
    },
    //是否一条龙
    isYiTiaoLong: function isYiTiaoLong(cards) {
        var result = KQCard.isYiTiaoLong(cards);
        if (result) {
            TESHUPAITYPE.isYiTiaoLong = true;
        } else {
            TESHUPAITYPE.isYiTiaoLong = false;
        }
        return result;
    },
    //是否六对半
    isLiuDuiBan: function isLiuDuiBan(cards) {
        var result = KQCard.isLiuDuiBan(cards);
        if (result) {
            TESHUPAITYPE.isLiuDuiBan = true;
        } else {
            TESHUPAITYPE.isLiuDuiBan = false;
        }
    },
    //是否三顺子
    isSanShunZi: function isSanShunZi(cards) {
        var result = KQCard.isSanShunZi(cards);
        if (result) {
            TESHUPAITYPE.isSanShunZi = true;
        } else {
            TESHUPAITYPE.isSanShunZi = false;
        }
    },
    //是否三同花
    isSanTongHua: function isSanTongHua(cards) {
        var result = KQCard.isSanTongHua(cards);
        if (result) {
            TESHUPAITYPE.isSanTaoHua = true;
        } else {
            TESHUPAITYPE.isSanTaoHua = false;
        }
    },
    //是否三同花顺
    isSanTongHuaShun: function isSanTongHuaShun(cards) {
        var result = KQCard.isSanTongHuaShun(cards);
        if (result) {
            TESHUPAITYPE.isSanTongHuaShun = true;
        } else {
            TESHUPAITYPE.isSanTongHuaShun = false;
        }
    },
    //是否是清龙
    isQingLong: function isQingLong(cards) {
        var result = KQCard.isQingLong(cards);
        if (result) {
            TESHUPAITYPE.isQingLong = true;
        } else {
            TESHUPAITYPE.isQingLong = false;
        }
    },
    //是否是 “三分天下”
    isSanFenTianXia: function isSanFenTianXia(cards) {
        var result = KQCard.isSanFenTianXia(cards);
        if (result) {
            TESHUPAITYPE.isSanFenTianXia = true;
        } else {
            TESHUPAITYPE.isSanFenTianXia = false;
        }
    },
    //是否是 “四套三条”
    isSiTaoSanTiao: function isSiTaoSanTiao(cards) {
        var result = KQCard.isSiTaoSanTiao(cards);
        if (result) {
            TESHUPAITYPE.isSiTaoSanTiao = true;
        } else {
            TESHUPAITYPE.isSiTaoSanTiao = false;
        }
    },
    //是否是五对三条
    isWuDuiSanTiao: function isWuDuiSanTiao(cards) {
        var result = KQCard.isWuDuiSanTiao(cards);
        if (result) {
            TESHUPAITYPE.isWuDuiSanTiao = true;
        } else {
            TESHUPAITYPE.isWuDuiSanTiao = false;
        }
    },
    //是否是凑一色
    isCouYiSe: function isCouYiSe(cards) {
        var result = KQCard.isCouYiSe(cards);
        if (result) {
            TESHUPAITYPE.isCouYiSe = true;
        } else {
            TESHUPAITYPE.isCouYiSe = false;
        }
    },
    /*#####*/

    /*显示配牌页面*/
    _showCardTypeCombine: function _showCardTypeCombine() {
        if (Playback.instance.isPlaybacking()) {
            return;
        }

        if (this.cardTypeCombineNode.active) {
            return;
        }

        var cardTypeCombine = this.cardTypeCombineNode.getComponent('CardTypeCombine');
        cardTypeCombine.reloadCards([]);
        cardTypeCombine.node.active = true;
        cardTypeCombine.timeStart(120); //sd

        var cards = this._findCardsByUserId(this._userId);
        //cards = [{suit: "c", number:20},{suit: "d", number:12}, {suit: "s", number:12},//青龙
        //    {suit: "c", number:12}, {suit: "s", number:10},
        //    {suit: "d", number:10}, {suit: "h", number:8}, {suit: "h", number:6},
        //    {suit: "d", number:6}, {suit: "s", number:5},
        //    {suit: "s", number:2}, {suit: "s", number:2}, {suit: "h", number:2},];
        /*if(this._userId == 1){
            cards = [{suit: "s", number:3},{suit: "s", number:6}, {suit: "s", number:7},//青龙
                {suit: "s", number:9}, {suit: "s", number:13},
                {suit: "h", number:10}, {suit: "h", number:12}, {suit: "h", number:13},
                {suit: "d", number:2}, {suit: "d", number:5},
                {suit: "d", number:3}, {suit: "d", number:7}, {suit: "d", number:8},];
        }
        else if(this._userId == 2){
            cards = [{suit: "s", number:1},{suit: "s", number:2}, {suit: "s", number:2},//青龙
                {suit: "h", number:4}, {suit: "s", number:4},
                {suit: "d", number:6}, {suit: "h", number:6}, {suit: "h", number:9},
                {suit: "c", number:9}, {suit: "s", number:10},
                {suit: "c", number:10}, {suit: "c", number:12}, {suit: "d", number:12},];
        }
        else if(this._userId == 3){
            cards = [{suit: "c", number:1},{suit: "h", number:3}, {suit: "s", number:12},//青龙
                {suit: "h", number:2}, {suit: "c", number:3},
                {suit: "d", number:4}, {suit: "h", number:5}, {suit: "s", number:6},
                {suit: "h", number:8}, {suit: "s", number:8},
                {suit: "s", number:11}, {suit: "s", number:11}, {suit: "h", number:11},];
        }
        else if(this._userId == 4){
            cards = [{suit: "c", number:11},{suit: "d", number:13}, {suit: "d", number:11},//青龙
                {suit: "d", number:1}, {suit: "h", number:1},
                {suit: "c", number:2}, {suit: "s", number:4}, {suit: "s", number:9},
                {suit: "c", number:7}, {suit: "h", number:7},
                {suit: "s", number:5}, {suit: "s", number:5}, {suit: "c", number:5},];
        }
        else if(this._userId == 5){
            cards = [{suit: "d", number:4},{suit: "d", number:13}, {suit: "s", number:13},//青龙
                {suit: "d", number:6}, {suit: "s", number:7},
                {suit: "d", number:8}, {suit: "c", number:9}, {suit: "c", number:10},
                {suit: "s", number:1}, {suit: "s", number:3},
                {suit: "s", number:10}, {suit: "s", number:8}, {suit: "s", number:12},];
        }*/

        var cardNames = this._convertCardsToCardNames(cards);
        cardTypeCombine.reloadCards(cardNames);
        cardTypeCombine.addCardModes(cardNames);

        /*#####发牌完执行*/

        //cards:[{'number':1~13,'suit':'s' | 'h' | 'c' | 'd'}]
        //cc.from.moshi == 0选择了庄家模式
        if (cc.moshi != 1) {
            this.isTeShuPai(cards);
            this.isYiTiaoLong(cards);
            this.isQingLong(cards);
            //this.isLiuDuiBan(cards);
            //this.isSanShunZi(cards);
            //this.isSanTongHua(cards);
            //
            //this.isSanTongHuaShun(cards);
            //this.isSanFenTianXia(cards);
            //this.isSiTaoSanTiao(cards);
            //this.isWuDuiSanTiao(cards);
            //this.isCouYiSe(cards);

            this._showGongXiNiAndBtnTeShuPai();
        }
        cc.teShuPaiCards = '';
        if (TESHUPAITYPE.isTeShuPai) {
            //如果是特殊牌将牌存起来
            cc.teShuPaiCards = cards;
        }

        /*#####*/
    },

    getIsTeShuPai: function getIsTeShuPai(userId) {
        var cards = this._findCardsByUserId(userId);
        return this.isTeShuPai(cards);
    },

    /*#####检测特殊牌类型，显示相对应的恭喜你页面和特殊牌精灵*/
    _showGongXiNiAndBtnTeShuPai: function _showGongXiNiAndBtnTeShuPai() {
        /*如果有特殊牌*/
        if (TESHUPAITYPE.isTeShuPai) {
            if (TESHUPAITYPE.isYiTiaoLong) {
                this._gongXiNiShow(true);
                this._yiTiaoLong = true;
            } else if (TESHUPAITYPE.isQingLong) {
                this._gongXiNiShow(true);
                this._sanTongHua = true;
            }
            //else if(TESHUPAITYPE.isLiuDuiBan){
            //    this._gongXiNiShow(true);
            //    this._liuDuiBan = true;
            //}
            //else if(TESHUPAITYPE.isSanShunZi){
            //    this._gongXiNiShow(true);
            //    this._sanShunZi = true;
            //}
            //else if(TESHUPAITYPE.isSanTaoHua){
            //    this._gongXiNiShow(true);
            //    this._sanTongHua = true;
            //}
            //else if(TESHUPAITYPE.isSanTongHuaShun){
            //    this._gongXiNiShow(true);
            //    this._SanTongHuaShun = true;
            //}
            //else if(TESHUPAITYPE.isSanFenTianXia){
            //    this._gongXiNiShow(true);
            //    this._SanFenTianXia = true;
            //}
            //else if(TESHUPAITYPE.isCouYiSe){
            //    this._gongXiNiShow(true);
            //    this._CouYiSe = true;
            //}
            //else if(TESHUPAITYPE.isSiTaoSanTiao){
            //    this._gongXiNiShow(true);
            //    this._SiTaoSanTiao = true;
            //}
            //else if(TESHUPAITYPE.isWuDuiSanTiao){
            //    this._gongXiNiShow(true);
            //    this._WuDuiSanTiao = true;
            //}
            else {
                    this._gongXiNiShow(false);
                }
        }
        this._initTeShuPaiSprite();
    },

    /*#####控制特殊牌精灵的显示*/
    _initTeShuPaiSprite: function _initTeShuPaiSprite() {
        /*把所有的特殊牌精灵都隐藏掉*/
        for (var i = 0; i < this.teshupai_min.length; i++) {
            this.teshupai_min[i].active = false;
            this.teshupai_max[i].active = false;
        }
        /*如果是一条龙，就显示一条龙的精灵*/
        if (this._yiTiaoLong) {
            this.teshupai_min[3].active = true;
            this.teshupai_max[3].active = true;
        }
        /*如果是六对半就显示六对半的精灵*/
        else if (this._liuDuiBan) {
                this.teshupai_min[0].active = true;
                this.teshupai_max[0].active = true;
            }
            /*如果是三顺子就显示三顺子的精灵*/
            else if (this._sanShunZi) {
                    this.teshupai_min[1].active = true;
                    this.teshupai_max[1].active = true;
                }
                /*如果是三同花，就显示三同花的精灵*/
                else if (this._sanTongHua) {
                        this.teshupai_min[2].active = true;
                        this.teshupai_max[2].active = true;
                    }
                    /*如果是三同花，就显示三同花的精灵*/
                    else if (this._QingLong) {
                            this.teshupai_min[4].active = true;
                            this.teshupai_max[4].active = true;
                        }
                        /*如果是三同花，就显示三同花的精灵*/
                        else if (this._SanTongHuaShun) {
                                this.teshupai_min[5].active = true;
                                this.teshupai_max[5].active = true;
                            }
                            /*如果是三同花，就显示三同花的精灵*/
                            else if (this._SanFenTianXia) {
                                    this.teshupai_min[6].active = true;
                                    this.teshupai_max[6].active = true;
                                }
                                /*如果是三同花，就显示三同花的精灵*/
                                else if (this._CouYiSe) {
                                        this.teshupai_min[7].active = true;
                                        this.teshupai_max[7].active = true;
                                    }
                                    /*如果是三同花，就显示三同花的精灵*/
                                    else if (this._SiTaoSanTiao) {
                                            this.teshupai_min[8].active = true;
                                            this.teshupai_max[8].active = true;
                                        }
                                        /*如果是三同花，就显示三同花的精灵*/
                                        else if (this._WuDuiSanTiao) {
                                                this.teshupai_min[9].active = true;
                                                this.teshupai_max[9].active = true;
                                            }
    },

    /*#####*/
    //显示gongXiNi 页面和teShuPai
    _gongXiNiShow: function _gongXiNiShow(statues) {
        var alterCom = this.gongXiNi.getComponent("alert");
        if (statues) {
            alterCom.alert();
        } else {
            alterCom.dismissAction();
        }

        this.teShuPai.active = statues;
    },
    /*#####*/

    //  结果相关
    // 显示一局结果
    _showOneGameResult: function _showOneGameResult() {
        /**/
        this._isComparingCardsNow = false;
        /**/
        this.updateGameStatus(GAMESTATUS.WAIT_PEOPLE);
        var oneGameResult = this.oneGameResult.getComponent('GameResult');
        oneGameResult.unscheduleAllCallbacks();
        oneGameResult.showResults(this._deskInfo, this._userId);
        this._updateUserScores();
        this._updateBanker();

        var self = this;
        this.scheduleOnce(function () {
            self._playerComponents.forEach(function (playerComp) {
                //playerComp.reset();
                //playerComp.reset2();  //#####
            });

            if (!self._isRandomRoom()) {
                //if (self._deskInfo.cIndex == 0) {//一局还没开始
                //    self.btnReady.node.active = true;
                //}
                if (self._isTotalGameOver()) {
                    self._showTotalGameResult();
                }
            }
        }, 0.5);

        if (this._isRandomRoom() || Playback.instance.isPlaybacking()) {
            this.scheduleOnce(function () {
                oneGameResult.getComponent('alert').dismissAction();
                cc.director.loadScene('hall');
            }, 2);
            return true;
        }
    },

    // 显示总结果
    _showTotalGameResult: function _showTotalGameResult() {
        var showDelay = arguments.length <= 0 || arguments[0] === undefined ? 2 : arguments[0];

        cc.find("Canvas/show_result").active = false;
        this.btnReady.node.active = false;
        this.btnShare.node.active = false;
        this.alertAnsowerExitNode.active = false;
        this.alertRequestExitNode.active = false;

        var totalGameResultComp = this.totalGameResult.getComponent('TotalGameResult');
        totalGameResultComp.setPlayerInfos(this._deskInfo.players, this._deskInfo);

        var alert = this.totalGameResult.getComponent('alert');
        this.scheduleOnce((function () {
            this.oneGameResult.active = false;
            //alert.alert();
            /**/
            if (!this.totalGameResult.active) {
                alert.alert();
            }
            /**/
        }).bind(this), showDelay);

        alert.setDismissCallback(function () {
            cc.director.loadScene('hall');
        });
    },

    // MARK: Socket 相关
    _loadDeskInfo: function _loadDeskInfo() {
        Socket.sendGetDesckInfo(this._userId);
    },
    _registerSocketEvent: function _registerSocketEvent() {
        KQGlobalEvent.on(Socket.Event.ReceiveDeskInfo, this._socketReceiveDeskInfo, this);
        KQGlobalEvent.on(Socket.Event.ReceiveOnlineStatus, this._socketReciveOnlineStatus, this);
        KQGlobalEvent.on(Socket.Event.ReceiveChatText, this._socketReciveChatTextMessage, this);
        KQGlobalEvent.on(Socket.Event.ReceiveRequestDissolve, this._socketReceiveRequestExitMessage, this);
        KQGlobalEvent.on(Socket.Event.ReceiveRequestDissolveResult, this._socketReceiveRequestExitResultMessage, this);
        KQGlobalEvent.on(Socket.Event.ReceiveAudioMessage, this._socketReceiveAudioMessage, this);
        KQGlobalEvent.on(Socket.Event.ReceivePlayCard, this._socketReceivePlayCard, this);
        KQGlobalEvent.on(Socket.Event.ReceiveGameOver, this._socketReceiveGameOver, this);
        KQGlobalEvent.on(Socket.Event.ReceiveFaPai, this._socketReciveFaPai, this);
        KQGlobalEvent.on(Socket.Event.ReceiveReady, this._socketReciveReady, this);
        KQGlobalEvent.on(Socket.Event.ReceiveDissolveDesk, this._socketReceiveDissolveDesk, this);
        /**/
        KQGlobalEvent.on(Socket.Event.ReceiveLeaveDesk, this._socketLeaveDesk, this);
        /**/
        KQGlobalEvent.on(Socket.Event.SocketDisconnect, this._receiveSocketConnectError, this);
        KQGlobalEvent.on(Socket.Event.SocketConnectSuccessed, this._receiveSocketConnectSuccessed, this);
        KQGlobalEvent.on(Socket.Event.ReceivePause, this._socketReceivePause, this);
    },

    _socketReceiveDeskInfo: function _socketReceiveDeskInfo(response) {
        if (!response.result) {
            cc.error("错误：", response);
            return;
        }
        var data = response.data;
        /*#####添加五同按钮*/
        cc.moshi = response.data.setting3;
        if (data.setting8 != null) {
            cc.moshi = 1;
        }
        cc.maPai = response.data.maPai;
        cc.duoYiSe = response.data.setting7; //setting7为  0 || null  0就是选择了多一色
        /*if(cc.duoYiSe == 0){
            this.btnWuTong = new cc.Node(); //创建一个节点对象
            this.btnWuTong.addComponent(cc.Sprite); //添加精灵组件
            this.btnWuTong.addComponent(cc.Button); //添加Button组件
            var btnSprite = this.btnWuTong.getComponent(cc.Sprite);
            btnSprite.spriteFrame = this.wuTong_img;
            this.btnWuTong.name = "btnWuTong";
            if(!this.typeButtonsNode.getChildByName("btnWuTong")){
                this.typeButtonsNode.addChild(this.btnWuTong);
                this.btnWuTong.interactable = true;
            }
            var tongHuaShunSpriteCom = this.typeButtonsNode.getChildByName("btnTongHuaShun").getComponent(cc.Sprite);
            tongHuaShunSpriteCom.spriteFrame = this.tongHuaShun_img;  //改变同花顺的精灵
              //给五同按钮添加事件：
            var clickEventWuTong = new cc.Component.EventHandler();
            clickEventWuTong.target = this.cardTypeCombineNode;
            clickEventWuTong.component = "CardTypeCombine"; //脚本名
            clickEventWuTong.handler = "clickWuTong";  //执行的函数
              var ButtonsClickEvents = this.btnWuTong.getComponent(cc.Button).clickEvents;
            ButtonsClickEvents.push(clickEventWuTong);
        }*/
        /*#####*/
        this.maPai = data.maPai;
        /*#####*/
        this._initMaPai();
        /*#####*/
        this._deskInfo = data;
        this._updatGameOverview(this._deskInfo);
        this.updateRoomNumber(data.roomId);

        var playerIndexs = data.playersIndex; // [100049]
        this._injectUserIdToPlayerComponents(playerIndexs);

        var players = data.players;
        this._playerInfos = players;
        this._updateUserInfos(players);
        this._updateUserScores();
        this._updateBanker();
        this._msgControl.addPlayerInfos(this._playerInfos);

        var currentUserInfo = players.find((function (playerInfo) {
            return playerInfo.id == this._userId;
        }).bind(this));
        this._playerComponents.forEach(function (player) {
            if (data.createId == player.userId) {
                //显示房主
                player.showFangZhuStatus(data.createId, true);
            } else {
                player.showFangZhuStatus(player.userId, false);
            }
        });
        //if (this._deskInfo.cIndex == 0) {
        //  return;
        //}
        /**/

        if (!this._deskInfo.isCBegin) {
            this._gameStatus = GAMESTATUS.WAIT_READY;
        }

        ////没有发牌，不是随机场,不是回放，显示准备按钮
        //if (!this._deskInfo.isCBegin
        //    && !this._isRandomRoom()
        //    && !Playback.instance.isPlaybacking()
        //    && !this._getSelfReadyStatus()
        //) {
        //    this.btnReady.node.active = true;
        //    if(this._deskInfo.cIndex != 0) {
        //        this.btnReady.node.x = 0;
        //        this.btnReady.node.y = 0;
        //    }
        //    else {
        //        this.btnReady.node.x = -150;
        //        this.btnReady.node.y = -24;
        //    }
        //}
        for (var i = 0; i < players.length; i++) {
            var s = players[i];
            var is = s.readyStatus; //true/false
            var userId = s.id;
            this._playerComponents.forEach(function (player) {
                player.showReadyStatus(userId, is);
            });
        }
        if (currentUserInfo && currentUserInfo.cards.length > 0 && this._deskInfo.isCBegin) {
            this._startGame();
        } else if (UserModelHelper.isPlayedCards(currentUserInfo) && !this._deskInfo.isCBegin) {
            this._socketReceiveGameOver(response);
        }
        this.isReadyStatus();
        //if (!this._deskInfo.isCBegin && !this._isRandomRoom()) {
        //  this.btnReaduy.node.active = true;
        //}
        /**/
        //if (!this._deskInfo.isCBegin && !this._isRandomRoom() && !this._deskInfo.isDeskOver) {
        //    //this.btnReady.node.active = true;
        //    cc.log(this._deskInfo)
        //    cc.log('那就是你了------')
        //    if (this._isComparingCardsNow) {
        //        this.btnReady.node.active = false;
        //    }
        //} else {
        //    this.btnReady.node.active = false;
        //}
        /**/
        this._handleUpdateDeskInfoAboutExitRoom(this._deskInfo);
    },

    _socketReciveFaPai: function _socketReciveFaPai(response) {
        this._socketReceiveDeskInfo(response);
    },

    _socketReciveOnlineStatus: function _socketReciveOnlineStatus(response) {
        //{"action":"sendOnlineStatus","result":true,"data":{"userId":100049,"status":1}}
        if (!response.result) {
            cc.error("错误：", response);
            return;
        }

        var data = response.data;
        var userId = data.userId;
        var status = data.status;

        this._playerComponents.forEach(function (player) {
            player.setUserOnlineStatus(userId, status);
        });
    },

    _socketReciveChatTextMessage: function _socketReciveChatTextMessage(response) {
        var userId = response.data.userId;
        var message = response.data.msg;

        this._playerComponents.forEach(function (player) {
            player.showChatText(userId, message);
        });

        this._msgControl.addChatTextMessage(userId, message);

        var sex = this._playerInfos.find(function (user) {
            return user.id == userId;
        }).sex;
        AudioManager.instance.playChatAudio(sex, message);
    },

    _socketReceiveRequestExitMessage: function _socketReceiveRequestExitMessage(response) {
        if (response.data.userId == this._userId) {
            return;
        }

        var alertComp = this.alertAnsowerExitNode.getComponent('alert');
        alertComp.alert();
        alertComp.unscheduleAllCallbacks();

        var countdown = this.alertAnsowerExitCountdownNode.getComponent('Countdown');
        countdown.startCountdown(120, (function (isTimeout) {
            if (isTimeout) {
                this.clickAgreeOtherPlayerExit();
                return;
            }
        }).bind(this));
    },

    _socketReceiveRequestExitResultMessage: function _socketReceiveRequestExitResultMessage(response) {
        this._hideReqestExitNode();
        if (this.alertAnsowerExitNode.active) {
            this.alertAnsowerExitNode.getComponent('alert').dismissAction();
            this.alertAnsowerExitCountdownNode.getComponent('Countdown').stop();
        }

        if (response.data.result) {
            // 解散成功
        } else {
                var userId = response.data.userId;
                var nickname = this._findPlayerInfoByUserId(userId).nickname;
                this.showAlertMessage('解散失败，因为' + nickname + '不同意退出');
            }
    },

    _socketReceiveAudioMessage: function _socketReceiveAudioMessage(response) {
        var userId = response.data.userId;
        this.playSpeakAnimation(userId);

        if (userId == this._userId) {
            return;
        }

        var url = response.data.url;
        this.playAudioUrl(url);
    },

    _socketReceivePlayCard: function _socketReceivePlayCard(response) {
        // 有用户已经准备好了牌
        cc.log(response);
        cc.log('--------972');
        var userId = response.data[0].userId;
        var cardInfo = response.data[1].card;
        this._playerComponents.forEach(function (player) {
            player.playCard(userId, cardInfo);
        });

        if (userId == this._userId) {
            this.cardTypeCombineNode.active = false;
        }
    },
    _getSelfReadyStatus: function _getSelfReadyStatus() {
        var self = this._findPlayerInfoByUserId(this._userId);
        return self.readyStatus;
    },
    _socketReciveReady: function _socketReciveReady(response) {
        var userId = response.data.userId;
        this._playerComponents.forEach(function (player) {
            player.showReadyStatus(userId);
        });
    },

    //收到游戏结束
    _socketReceiveGameOver: function _socketReceiveGameOver(response) {
        this._hideReqestExitNode();

        // 一局游戏结束
        if (!response.result) {
            cc.error("错误：", response);
            return;
        }
        /**/
        var deskInfo = response.data;
        if (response.action == 'gameOver' && deskInfo.isDeskOver) {
            Socket.sendDidReceiveGameOverAction(this._userId);
        }
        /**/
        this._deskInfo = response.data;

        // 如果是强制解散房间，则直接显示总成绩
        if (this._isDissvledRoom() && !Playback.instance.isPlaybacking()) {
            this._showTotalGameResult(0.1);
            return;
        }

        if (Date.now() - this._enterTime < 1000 * 4) {
            // 刚进来的话，不展示比牌动画
            var oneGameResult = this.oneGameResult.getComponent('GameResult');
            oneGameResult.unscheduleAllCallbacks();
            oneGameResult.showResults(this._deskInfo, this._userId);
            this.btnShare.node.active = false;
            this.btnReady.node.active = false;
            this._playerComponents.forEach(function (playerComp) {
                playerComp.reset();
            });
            /**/
            this._playedCompareCardsIndexs.push(this._deskInfo.cIndex);
            /**/
            return;
        }

        var data = response.data;
        this._deskInfo = data;
        this._updatGameOverview(this._deskInfo);

        var playerIndexs = data.playersIndex; // [100049]

        var players = data.players;
        this._playerInfos = players;
        this._updateUserInfos(players);

        if (UserModelHelper.isUserReady(this._findCurrentUserInfo())) {
            this._playerComponents.forEach(function (playerComp) {
                playerComp.reset();
            });
        } else {
            this._startCompareCards(response);
        }
    },

    _socketReceiveDissolveDesk: function _socketReceiveDissolveDesk(response) {
        this.cardTypeCombineNode.active = false;

        var message = "房主已解散房间";
        if (this._isRandomRoom()) {
            message = "有玩家已强制退出房间，游戏结束。本局游戏不会扣除您的钻石。";
        }

        this.showAlertMessage(message, false);
        this.alert.getComponent('alert').setWillDismissCallback(function () {
            cc.director.loadScene('hall');
            return true;
        });
    },
    /**/
    _socketLeaveDesk: function _socketLeaveDesk(response) {
        if (!response.result) {
            return;
        }

        if (this._deskInfo.isDeskOver) {
            // 如果房间已结束，也不用再自动退回到大厅了
            return;
        }

        cc.director.loadScene('hall');
    },
    /**/
    // socket 收到有人手机进入后台消息
    _socketReceivePause: function _socketReceivePause(response) {
        if (!response.result) {
            return;
        }

        var userId = response.data.userId;
        this._playerComponents.forEach(function (player) {
            if (player.userId == userId) {
                player.setUserOnlineStatus(userId, 0);
            }
        });
    },

    _receiveSocketConnectError: function _receiveSocketConnectError(response) {
        this.showNetworkMessage();
    },

    _receiveSocketConnectSuccessed: function _receiveSocketConnectSuccessed(response) {
        this.hiddenNetworkMessage();

        if (!Playback.instance.isPlaybacking()) {
            this._loadDeskInfo();
        }
    },
    /**/
    // MARK: 更新房间信息
    updateDeskInfo: function updateDeskInfo(deskInfo) {
        this._deskInfo = deskInfo;
        this._updatGameOverview(this._deskInfo);
        this.updateRoomNumber(deskInfo.roomId);

        var playerIndexs = deskInfo.playersIndex; // [100049]
        this._injectUserIdToPlayerComponents(playerIndexs);

        var players = deskInfo.players;
        this._playerInfos = players;
        this._updateUserInfos(players);
        this._msgControl.addPlayerInfos(this._playerInfos);
        if (deskInfo.cIndex == 0 && this._deskInfo.players.length < this._deskInfo.maxNumber) {
            this.btnShare.node.active = true;
        }
    },
    /**/
    _injectUserIdToPlayerComponents: function _injectUserIdToPlayerComponents(playerIndexs) {
        var currentUserIdIndex = playerIndexs.findIndex((function (userId) {
            return userId == this._userId;
        }).bind(this));

        var fixedPlayerIndexs = playerIndexs.translationWithStartIndex(currentUserIdIndex);
        this._playerComponents.forEach(function (playerComponent, index) {
            var userId = fixedPlayerIndexs.length > index ? fixedPlayerIndexs[index] : null;
            playerComponent.userId = userId;
        });
    },

    _updateUserInfos: function _updateUserInfos(userInfos) {
        var self = this;
        this._playerComponents.forEach(function (playerComponent, index) {
            //playerComponent.setDeskInfo(self._deskInfo);
            /**/
            playerComponent.updateDeskInfo(self._deskInfo);
            /**/
            playerComponent.updateUserInfoWithUsers(userInfos);
        });

        this._handleTheSameOfIPAdress(userInfos);
    },

    _updateUserScores: function _updateUserScores(userInfos) {
        this._playerComponents.forEach(function (player) {
            player.updateScore();
        });
    },

    _updateBanker: function _updateBanker() {
        this._playerComponents.forEach(function (player) {
            player.updateBanker();
        });
    },

    // 私有方法
    _findCardsByUserId: function _findCardsByUserId(userId) {
        var player = this._findPlayerInfoByUserId(userId);

        return player != null ? player.cards : null;
    },

    _findPlayerInfoByUserId: function _findPlayerInfoByUserId(userId) {
        var player = (this._playerInfos || []).find(function (playerInfo) {
            return userId == playerInfo.id;
        });

        return player;
    },

    _findPlayerIndexByUserId: function _findPlayerIndexByUserId(userId) {
        var index = this._playerComponents.findIndex(function (playerComp) {
            return playerComp.userId == userId;
        });

        return index;
    },

    _findCurrentUserInfo: function _findCurrentUserInfo() {
        return this._findPlayerInfoByUserId(this._userId);
    },

    _convertCardsToCardNames: function _convertCardsToCardNames(cards) {
        // [{"suit":"s","number":10}]
        var suitColorMap = {
            s: 4,
            h: 3,
            c: 2,
            d: 1
        };
        return cards.map(function (card) {
            var cardNumber = card.number;

            // 服务器中的 14 是 A
            if (card.number == 14) {
                cardNumber = 1;
            }
            var color = suitColorMap[card.suit];
            var number = Math.max(Math.min(cardNumber, 21), 1);
            return color + "_" + number;
        });
    },

    // 更新游戏总览信息
    _updatGameOverview: function _updatGameOverview(deskInfo) {
        if (Playback.instance.isPlaybacking()) {
            this.labelOverview.string = "回放";
            return;
        }

        if (this._isRandomRoom()) {
            this.labelOverview.string = "";
            return;
        }

        //let gameNumberString = "";
        //if (deskInfo.setting1 != 0 && deskInfo.setting1 != 1) {
        //  gameNumberString = "局数 : " + "" + deskInfo.cIndex + "/" + deskInfo.mMax;
        //} else if (deskInfo.setting1 == 0) {
        //  gameNumberString = "局数 : 10局";
        //} else if (deskInfo.setting1 == 1) {
        //  gameNumberString = "局数 : 20局";
        //}

        //let gameWayName = this._deskInfoGameWay();
        this.labelOverview.string = /*+ gameWayName " " + gameNumberString +"\n"+*/
        "模式 : " + "" + deskInfo.maxNumber + "人";
    },

    /*+ "\n " + this._deskInfoJiaYiSeInfo()
    + "，"  + this._deskInfoGuiPaiInfo()*/ // 是否是随机房
    _isRandomRoom: function _isRandomRoom() {
        if (this._deskInfo == null) {
            return true;
        }

        return this._deskInfo.isRandomDesk;
    },

    // 是否所有局数都用完了
    _isTotalGameOver: function _isTotalGameOver() {
        if (this._deskInfo == null) {
            return false;
        }

        if (this._deskInfo.isDeskOver) {
            return true;
        }

        return this._deskInfo.mMax <= this._deskInfo.cIndex;
    },

    // 是否已解散房间
    _isDissvledRoom: function _isDissvledRoom() {
        if (this._deskInfo) {
            return this._deskInfo.dissolveStatus;
        }

        return false;
    },

    //// 比牌逻辑
    // 开始比牌
    _startCompareCards: function _startCompareCards(data) {
        console.log("打印data信息");
        console.log(data);
        /**/
        this._isComparingCardsNow = true;
        this._gongXiNiShow(false);
        /**/
        this._players = data.data.players;
        var user = this._findPlayerInfoByUserId(this._userId);
        AudioManager.instance.playStartCompare(user.sex);

        this.startCompareCardsNode.getComponent('alert').alert();
        this.scheduleOnce((function () {
            this.startCompareCardsNode.active = false;
            this._showCompareCardDetails(data);
        }).bind(this), 2.0);
    },

    _showCompareCardDetails: function _showCompareCardDetails(data) {
        //var _this = this;
        //this._playerComponents.forEach(function (playerComp) {
        //    playerComp.readyToCompareCards();
        //});
        //let comparePlayers = this._playerComponents.filter(function (player) {
        //    if(player.userId == null) {
        //        return false;
        //    }
        //    for(var i in _this._players) {
        //        if(_this._players[i].id == player.userId) {
        //            if(_this._players[i].cardInfo.length <= 1) {
        //                //将是特殊牌的玩家存起来
        //                if(_this._players[i].cardInfo.length == 1){
        //                    _this.teShuPlayId = _this._players[i].id;
        //                }
        //                return false;
        //            }
        //            else if(_this._players[i].cardInfo.length == 3) {
        //                return true;
        //            }
        //        }
        //    }
        //});
        this._playerComponents.forEach(function (playerComp) {
            playerComp.readyToCompareCards();
        });

        var comparePlayers = this._playerComponents.filter(function (player) {
            return player.node.active;
        });
        var self = this;
        var duration = this._showCompareCardStep(0, comparePlayers);
        this.scheduleOnce(function () {
            self._showCompareCardStep(0, comparePlayers);
        }, duration);

        this.scheduleOnce(function () {
            self._showCompareCardStep(0, comparePlayers);
        }, duration * 2);

        /**
         * 如果有特殊牌的话就改变时间 duration
         */
        var players = data.data.players;
        for (var i = 0; i < players.length; i++) {
            var s = players[i];
            if (s.cardInfo.length == 1) {
                duration += 1.5;
            }
        }

        duration = duration * 3 + 0.5;
        var shootDuration = 1.5;

        var shootDatas = this._shootDatas() || [];

        var shotData = this._shotData() || [];

        var homeRunUserId = this._homeRunUserId();

        var shotDataTimes = 0;
        shotData.forEach(function (data, index) {
            self.scheduleOnce(function () {
                self.playShoot(data.fromUserId, data.toUserId);
            }, duration + index * shootDuration);
            shotDataTimes += 1;
            duration += 1;
        });
        if (homeRunUserId.length >= 1) {
            shootDatas.forEach(function (data, index) {
                self.scheduleOnce(function () {
                    self.playShoot(data.fromUserId, data.toUserId);
                }, duration + (index + shotDataTimes) * shootDuration);
                duration += 1;
            });
        }

        duration = duration + shootDatas.length * shootDuration + shotData.length * shootDuration;

        if (homeRunUserId > 0) {
            self.scheduleOnce(function () {
                self.playHomeRun(homeRunUserId);
            }, duration);
            duration = duration + 1.0;
        }

        if (homeRunUserId) {
            duration = duration + 1;
        }

        //显示结果
        this.scheduleOnce(function () {
            self._showCompareCardFinished();
        }, duration);
    },

    _showCompareCardStep: function _showCompareCardStep() {
        var startTime = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
        var comparePlayers = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

        var duration = startTime;
        var interval = 1;
        var self = this;

        comparePlayers = comparePlayers.sort(function (player1, player2) {
            return player1.nextCompareScore() - player2.nextCompareScore();
        });
        // 干掉特殊牌的时间
        var co = comparePlayers;
        for (var i = 0; i < co.length; i++) {
            var s = co[i]._userInfo;
            if (s.isContainExtra) {
                co.splice(i, 1);
            }
        }
        co.forEach(function (player) {
            self.scheduleOnce(function () {
                player.showNextCompareCards();
            }, duration);
            duration = duration + interval;
        });

        return duration;
    },

    _isGameOver: function _isGameOver() {},

    // 比牌完成后会调用的方法
    _showCompareCardFinished: function _showCompareCardFinished() {
        this._showOneGameResult();
        /**/
        this._playedCompareCardsIndexs.push(this._deskInfo.cIndex);
        /**/
    },

    //network
    showNetworkMessage: function showNetworkMessage() {
        var msg = arguments.length <= 0 || arguments[0] === undefined ? "网络链接断开，重新连接中..." : arguments[0];

        if (this.networkNode && this.networkNode.active) {
            return;
        }

        if (this.networkNode != null) {
            var removeSelfAction = cc.removeSelf();
            this.networkNode.runAction(removeSelfAction);
            this.networkNode = null;
        }
        this.networkNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.networkNode);
        var comp = this.networkNode.getComponent('alert');
        var self = this;
        comp.onDismissComplete = function () {
            self.networkNode = null;
        };
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenNetworkMessage: function hiddenNetworkMessage() {
        if (this.networkNode != null) {
            this.networkNode.getComponent('alert').dismissAction();
        }
    },

    showAlertMessage: function showAlertMessage(msg, autoDismiss) {
        var alertComp = this.alert.getComponent('alert');
        if (!this.alert.active) {
            alertComp.alert();
        }

        alertComp.setMessage(msg);
        alertComp.unscheduleAllCallbacks();
        if (autoDismiss) {
            alertComp.scheduleOnce(function () {
                alertComp.dismissAction();
            }, 5);
        }
    },

    //checkNode
    showCheckMessage: function showCheckMessage() {
        var msg = arguments.length <= 0 || arguments[0] === undefined ? '检查网络中...' : arguments[0];

        if (this.checkNode != null) {
            var removeSelfAction = cc.removeSelf();
            this.checkNode.runAction(removeSelfAction);
            this.checkNode = null;
        }
        this.checkNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.checkNode);
        var comp = this.checkNode.getComponent('alert');
        var self = this;
        comp.onDismissComplete = function () {
            self.checkNode = null;
        };
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenCheckMessage: function hiddenCheckMessage() {
        if (this.checkNode != null && this.checkNode.active) {
            this.checkNode.getComponent('alert').dismissAction();
        }
    },

    /////  聊天语音逻辑
    _registerVoiceNodeEvents: function _registerVoiceNodeEvents() {
        var self = this;
        var chatVoiceNode = this.btnChatVoice.node;
        this.endRecordTime = Date.now();
        chatVoiceNode.on(cc.Node.EventType.TOUCH_START, function (event) {
            if (Date.now() - self.endRecordTime >= 1000) {
                self.nativeRecordAction();
                self.voiceRecordAnimationNode.active = true;

                var action = cc.scaleTo(0.12, 1.2);
                self.btnChatVoice.node.runAction(action);

                self._isRecording = true;
            }
        });
        chatVoiceNode.on(cc.Node.EventType.TOUCH_END, function (event) {
            if (self._isRecording) {
                self.endRecordTime = Date.now();
            }
            self._isRecording = false;

            self.nativeEndRecordAction();
            self.voiceRecordAnimationNode.active = false;

            var action = cc.scaleTo(0.12, 1);
            self.btnChatVoice.node.runAction(action);
        });
        chatVoiceNode.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            if (self._isRecording) {
                self.endRecordTime = Date.now();
            }
            self._isRecording = false;

            self.nativeEndRecordAction();
            self.voiceRecordAnimationNode.active = false;

            var action = cc.scaleTo(0.12, 1);
            self.btnChatVoice.node.runAction(action);
        });
        Socket.instance.uploadFinish = function (url) {
            var userId = self._userId;
            Socket.sendAudioMessage(userId, url);
            self.playSpeakAnimation(self._userId);
        };
    },

    nativeRecordAction: function nativeRecordAction() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "record");
        } else if (KQNativeInvoke.isNativeAndroid()) {
            //Android com.lling.qianjianglzg
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "record", "()V");
            AudioManager.instance.pauseMusic();
        }
    },

    nativeEndRecordAction: function nativeEndRecordAction() {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "endRecord");
        } else if (KQNativeInvoke.isNativeAndroid()) {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "endRecord", "()V");
            AudioManager.instance.resumeMusic();
        }
    },

    playAudioUrl: function playAudioUrl(url) {
        if (KQNativeInvoke.isNativeIOS()) {
            jsb.reflection.callStaticMethod(KQNativeInvoke.IOSClassName, "playUrl:", url);
        } else if (KQNativeInvoke.isNativeAndroid()) {
            //Android
            jsb.reflection.callStaticMethod(KQNativeInvoke.ANDRIODClassName, "playUrl", "(Ljava/lang/String;)V", url);
        }
    },

    // MARK:  退出游戏逻辑
    _handleUpdateDeskInfoAboutExitRoom: function _handleUpdateDeskInfoAboutExitRoom(deskInfo) {
        if (!deskInfo.isDissolving) {
            return;
        }

        var dissolveLeftTime = deskInfo.dissolveLeftTime || 120;
        var dissolveUserId = deskInfo.dissolveUserId;
        if (dissolveUserId == this._userId) {
            this.alertRequestExitNode.active = true;
            this.btnAlertRequestExitCancelButton.node.active = false;
            this.btnAlertRequestExitConfirmButton.node.active = false;
            var _alert = this.alertRequestExitNode.getComponent('alert');
            _alert.setMessage("您正在申请协商退出，等待其他玩家同意");
            this.alertRequestExitCountdownNode.getComponent('Countdown').startCountdown(dissolveLeftTime);
            return;
        }

        var dissolveAnswerInfos = deskInfo.dissolveAnswerInfo;
        var currentUserIdIndex = deskInfo.playersIndex.findIndex((function (userId) {
            return this._userId == userId;
        }).bind(this));

        var answerResult = dissolveAnswerInfos[currentUserIdIndex];
        if (answerResult == -1) {
            // -1 表示未处理  0 表示拒绝  1表示同意
            this.alertAnsowerExitNode.active = true;

            var countdown = this.alertAnsowerExitCountdownNode.getComponent('Countdown');
            countdown.startCountdown(dissolveLeftTime, (function (isTimeout) {
                if (isTimeout) {
                    this.clickAgreeOtherPlayerExit();
                }
            }).bind(this));
        }
    },

    // 确定要强制退出游戏
    clickButton: function clickButton() {
        var anim = this.btnButtonNode.getComponent(cc.Animation);
        if (this.btnButtons.rotation == 270) {
            anim.play('topRightButtonsLayout');
            this.btnButtons.rotation = 90;
        } else {
            //anim.stop('topRightButtonsLayout');
            this.btnButtonNode.x = 891;
            this.btnButtons.rotation = 270;
        }
    },

    // 确定要强制退出游戏
    clickConfirmForceExit: function clickConfirmForceExit() {
        Socket.sendForceExitRoom(this._userId);
        cc.director.loadScene('hall');
    },

    // 确认请求退出游戏
    clickConfirmRequestExit: function clickConfirmRequestExit() {
        this.btnAlertRequestExitCancelButton.node.active = false;
        this.btnAlertRequestExitConfirmButton.node.active = false;

        var alert = this.alertRequestExitNode.getComponent('alert');
        alert.setMessage("您正在申请协商退出，等待其他玩家同意");
        this.alertRequestExitCountdownNode.getComponent('Countdown').startCountdown(120);

        Socket.sendLeaveDesk(this._userId);
    },

    // 同意他人退出
    clickAgreeOtherPlayerExit: function clickAgreeOtherPlayerExit() {
        this.alertAnsowerExitNode.getComponent('alert').dismissAction();
        this.alertAnsowerExitNode.getComponent('alert').unscheduleAllCallbacks();
        this.alertAnsowerExitCountdownNode.getComponent('Countdown').stop();

        Socket.sendAnswerDissolve(this._userId, 1);
    },

    // 不同意他人退出
    clickDisagreeOtherPlayerExit: function clickDisagreeOtherPlayerExit() {
        this.alertAnsowerExitNode.getComponent('alert').dismissAction();
        this.alertAnsowerExitNode.getComponent('alert').unscheduleAllCallbacks();
        this.alertAnsowerExitCountdownNode.getComponent('Countdown').stop();
        Socket.sendAnswerDissolve(this._userId, 0);
    },

    // 隐藏请求退出 Node
    _hideReqestExitNode: function _hideReqestExitNode() {
        if (!this.alertRequestExitNode.active) {
            return;
        }

        this.alertRequestExitNode.active = false;
        this.alertRequestExitCountdownNode.getComponent('Countdown').stop();
    },

    //// 打枪
    playShoot: function playShoot(fromUserId, toUserId) {
        var user = this._findPlayerInfoByUserId(fromUserId);
        if (user) {
            AudioManager.instance.playHumanDaQiang(user.sex);
        }

        var toUserIndex = this._findPlayerIndexByUserId(toUserId);

        this._playerComponents.forEach(function (player) {
            player.playShootAnimation(fromUserId, toUserIndex);
            player.playBulletHoleAnimation(toUserId);
        });
    },

    // 播放全垒打动效
    playHomeRun: function playHomeRun(userId) {
        var user = this._findPlayerInfoByUserId(userId);
        if (user) {
            AudioManager.instance.playHomeRun(user.sex);
        }

        this._playerComponents.forEach(function (player) {
            player.playHomeRunAimation(userId);
        });
    },

    playSpeakAnimation: function playSpeakAnimation(userId) {
        this._playerComponents.forEach(function (player) {
            player.playSpeakAnimation(userId);
        });
    },

    _shootDatas: function _shootDatas() {
        var homeRunUserId = this._homeRunUserId(); // 全垒打
        var shootDatas = this._deskInfo.shotData.filter(function (data) {
            return data.fromUserId == homeRunUserId;
        });
        return shootDatas;
    },

    _shotData: function _shotData() {
        var homeRunUserId = this._homeRunUserId(); // 打枪
        var shotData = this._deskInfo.shotData.filter(function (data) {
            return data.fromUserId != homeRunUserId;
        });
        return shotData;
    },

    _homeRunUserId: function _homeRunUserId() {
        return this._deskInfo.allShotData;
    },

    // MARK: 房间信息部分

    // 获取房间的玩法
    _deskInfoGameWay: function _deskInfoGameWay() {
        var setting = this._deskInfo.setting3;
        if (setting == null) {
            setting = 2;
        }
        var names = ["庄家模式", "无特殊牌", "普通模式"];
        return names[setting];
    },

    _deskInfoNumberOfGame: function _deskInfoNumberOfGame() {
        var setting = this._deskInfo.setting1;
        var infos = ['10局', '20局', '40局', '5局'];
        /*if (setting <= 1) {
          return '条数：' + infos[setting];
        }*/
        if (setting == 2) {
            setting = 0;
        } else if (setting == 3) {
            setting = 1;
        } else if (setting == 4) {
            setting = 2;
        } else if (setting == 5) {
            setting = 3;
        }
        return '局数：' + infos[setting];
    },

    _deskInfoNumberOfPeople: function _deskInfoNumberOfPeople() {
        var setting = this._deskInfo.setting2;
        var infos = ['2人', '3人', '4人', '5人'];
        return infos[setting];
    },

    _deskInfoPayInfo: function _deskInfoPayInfo() {
        var setting = this._deskInfo.setting4;
        if (setting == null) {
            setting = 0;
        }
        if (setting == 0) {
            setting = 1;
        }
        var infos = ['房主霸主庄', '房费AA'];
        return infos[setting];
    },

    _deskInfoJiaYiSeInfo: function _deskInfoJiaYiSeInfo() {
        var setting = this._deskInfo.setting7 == 0 ? 1 : 0;
        var infos = ['无多一色', '多一色'];
        return infos[setting];
    },

    _deskInfoGuiPaiInfo: function _deskInfoGuiPaiInfo() {
        var setting = undefined;
        if (this._deskInfo.setting8 == null) {
            setting = 0;
        } else if (this._deskInfo.setting8 == 0) {
            setting = 1;
        } else if (this._deskInfo.setting8 == 1) {
            setting = 2;
        }
        var infos = ['无王牌', '两张王牌', '四张王牌'];
        return infos[setting];
    },

    // MARK: 剩余时间
    _remainTimeStartUpdate: function _remainTimeStartUpdate() {
        //this.schedule(this._remainTimeUpdate, 1.0, cc.macro.REPEAT_FOREVER);
    },

    _remainTimeUpdate: function _remainTimeUpdate() {
        if (this._isRandomRoom() || Playback.instance.isPlaybacking()) {
            this.labelRemainTime.string = "";
            this.labelRemainTime.node.active = false;
            return;
        }

        if (this._deskInfo == null) {
            this.labelRemainTime.string = "";
            this.labelRemainTime.node.active = false;
            return;
        }

        var isTaoShu = this._deskInfo.setting1 == 0 || this._deskInfo.setting1 == 1;
        if (isTaoShu) {
            this.labelRemainTime.node.active = false;
            return;
        }

        if (!this._deskInfo.createTime) {
            return;
        }

        this.labelRemainTime.node.active = true;
        var createTime = fecha.parse(this._deskInfo.createTime, 'YYYY-MM-DD HH:mm:ss').getTime();
        var oneHour = 60 * 60;
        var remain = (Date.now() - createTime) / 1000;
        remain = Math.max(oneHour - remain, 0);

        var mins = Math.floor(remain / 60);
        var secs = Math.floor(remain % 60);
        if (mins == 0 && secs == 0) {
            this.labelRemainTime.string = "";
            return;
        }

        var minsString = "" + mins;
        if (minsString.length < 2) {
            minsString = "0" + minsString;
        }

        var secsString = "" + secs;
        if (secsString.length < 2) {
            secsString = "0" + secsString;
        }

        var string = "剩余时间：00:" + minsString + ":" + secsString;
        this.labelRemainTime.string = string;
    },

    // MARK: 处理同 IP 的用户
    _handleTheSameOfIPAdress: function _handleTheSameOfIPAdress(userInfos) {
        if (!userInfos || userInfos.length == 0) {
            return;
        }

        var ipUserInfos = userInfos.reduce(function (ips, userInfo) {
            var users = ips[userInfo.ipAddress] || [];
            users.push(userInfo);

            ips[userInfo.ipAddress] = users;
            return ips;
        }, {});

        var sameIpUsers = null;
        for (var ip in ipUserInfos) {
            var users = ipUserInfos[ip];
            if (users.length > 1) {
                sameIpUsers = users;
                break;
            }
        }

        if (sameIpUsers == null) {
            return;
        }

        this._alertSameIpUserInfos(sameIpUsers);
    },

    _alertSameIpUserInfos: function _alertSameIpUserInfos(users) {
        var message = "";
        var userIds = "";
        users.forEach(function (user, index) {
            message = message + (index > 0 ? ' 和 ' : '') + user.nickname;
            userIds = userIds + user.id;
        });
        message = message + ' 在同一 IP 下！';

        this._didAlertSameIpMessage = this._didAlertSameIpMessage || {};
        if (this._didAlertSameIpMessage[userIds]) {
            return;
        }

        this.showAlertMessage(message, true);
        this._didAlertSameIpMessage[userIds] = true;
    }

});
Play.gongXiNiShow = function (type) {
    this.instances._gongXiNiShow(type);
};
module.exports = Play;

cc._RFpop();
},{"ArrayExtension":"ArrayExtension","AudioManager":"AudioManager","KQCard":"KQCard","KQGlobalEvent":"KQGlobalEvent","KQNativeInvoke":"KQNativeInvoke","Playback":"Playback","Player":"Player","UserModelHelper":"UserModelHelper","fecha":"fecha","manager":"manager","socket":"socket"}],"product":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'a9ad2cC2BdEiaFSqV4XCWQV', 'product');
// scripts\product.js

cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        productId: ''
    },

    // use this for initialization
    onLoad: function onLoad() {},

    clickAction: function clickAction() {
        this.onClickAction(this.productId);
    },

    onClickAction: function onClickAction(productId) {}

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"randRoom":[function(require,module,exports){
"use strict";
cc._RFpush(module, '4d298BlaelCHqiV5dTDjhuY', 'randRoom');
// scripts\randRoom.js

var Socket = require('socket');
var KQGlobalEvent = require('KQGlobalEvent');

cc.Class({
    'extends': cc.Component,

    properties: {
        matchingLabel: cc.Label,
        timeNode: cc.Node,
        matchingNode: cc.Node,
        waitingPrefab: cc.Prefab,
        alertPrefab: cc.Prefab,

        tishi: cc.Node,

        _userId: null,
        _response: null
    },

    // use this for initialization
    onLoad: function onLoad() {
        this._userId = Socket.instance.userInfo.id;
        cc.isRoomViewShow = true;
        KQGlobalEvent.on(Socket.Event.ReceiveDeskInfo, this._socketReceiveDeskInfo, this);
        KQGlobalEvent.on(Socket.Event.SocketDisconnect, this._socketDisconnect, this);
        KQGlobalEvent.on(Socket.Event.SocketConnectSuccessed, this._socketConnected, this);
        KQGlobalEvent.on(Socket.Event.ReceiveInterRandom, this._socketReceiveInterRandom, this);
    },

    _socketReceiveDeskInfo: function _socketReceiveDeskInfo(response) {
        if (!response.result) {
            return;
        }

        cc.director.loadScene('play');
    },

    _socketReceiveInterRandom: function _socketReceiveInterRandom(response) {
        //服务器发送  {'action':'interRandom','result':false,'data':{'reason':reason}}
        this._response = response;
        this.unschedule(this._timeoutRandomAction);
        // 处理随机场匹配不成功的情况
        if (response.result) {
            return;
        }

        var reason = response.data.reason || "加入随机场失败";
        this.showAlertMessage(reason);

        if (reason == '你已经在匹配队列') {
            this._showMatching();
        } else {
            this._hideMatching();
        }
    },

    _socketDisconnect: function _socketDisconnect() {
        // 连接已断开
        this.matchingNode.active = false;
        this.showNetworkMessage('网络链接断开，重新连接中...');
    },

    _socketConnected: function _socketConnected() {
        this.hiddenNetworkMessage();
    },

    onDestroy: function onDestroy() {
        KQGlobalEvent.offTarget(this);
    },

    clickExit: function clickExit() {
        cc.director.loadScene('hall');
    },

    clickStart: function clickStart() {
        Socket.sendEnterRandom(this._userId);
        this._showMatching();

        /*#####begin*/
        //reason是服务器发送回来的
        /*if(this._response.data.reason == "你的钻石不足"){
            this.tishi.active = true;
        }*/
        /*#####end*/

        this.scheduleOnce(this._timeoutRandomAction, 5);
    },
    /*#####点击空白地方，砖石不足提示消失*/
    /*onBtnKong:function () {
        if(this.tishi.active){
            this.tishi.active = false;
        }else{
            //什么也不做
        }
    },*/
    /*取消匹配*/
    clickCancel: function clickCancel() {
        Socket.sendCancelRandom(this._userId);

        this._hideMatching();
    },

    _timeoutRandomAction: function _timeoutRandomAction() {
        this._hideMatching();
        this.showAlertMessage('进入匹配失败');
    },

    _showMatching: function _showMatching() {
        var comp = this.matchingNode.getComponent('alert');
        comp.alert();
        this.matchingLabel.string = '正在匹配中，请稍后...';
        var num = 0;
        this.schedule(function () {
            num = num + 0.5;
            this.timeNode.rotation = num;
        }, 0.01);
    },

    _hideMatching: function _hideMatching() {
        var comp = this.matchingNode.getComponent('alert');
        comp.dismissAction();
    },

    showNetworkMessage: function showNetworkMessage(msg) {
        this.unschedule(this._timeoutRandomAction);

        if (this.networkNode != null) {
            var removeSelfAction = cc.removeSelf();
            this.networkNode.runAction(removeSelfAction);
            this.networkNode = null;
        }
        this.networkNode = cc.instantiate(this.waitingPrefab);
        this.node.addChild(this.networkNode);
        var comp = this.networkNode.getComponent('alert');
        var self = this;
        comp.onDismissComplete = function () {
            self.networkNode = null;
        };
        comp.setMessage(msg);
        comp.alert();
    },

    hiddenNetworkMessage: function hiddenNetworkMessage() {
        if (this.networkNode != null) {
            this.networkNode.getComponent('alert').dismissAction();
        }
    },

    showAlertMessage: function showAlertMessage(msg) {
        if (!msg) {
            cc.error("不能显示为空的信息");
            return;
        }

        if (!this.alertMessageNode) {
            this.alertMessageNode = cc.instantiate(this.alertPrefab);
            this.node.addChild(this.alertMessageNode);
        }

        this.alertMessageNode.getComponent('alert').setMessage(msg);
        this.alertMessageNode.getComponent('alert').alert();
    }
});

cc._RFpop();
},{"KQGlobalEvent":"KQGlobalEvent","socket":"socket"}],"recordInfo":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e1457gdvd5I5aENjKvCTkCd', 'recordInfo');
// scripts\recordInfo.js

var Socket = require('socket');
var Playback = require('Playback');

cc.Class({
  'extends': cc.Component,

  properties: {
    timeLabel: cc.Label,
    nicknameLabels: [cc.Label],
    scoreLabels: [cc.Label],
    numNode: cc.Label,
    _parentId: null,
    playbackNode: cc.Node, //回放按钮
    watchNode: cc.Node, //查看按钮

    _recordItemInfo: null
  },

  // use this for initialization
  onLoad: function onLoad() {},

  setInfo: function setInfo(recordInfo) {
    this._parentId = recordInfo.id;
    this.playbackNode.active = false;
    this.watchNode.active = true;
    if (recordInfo.playersInfo.length == 0) {
      return;
    }

    var playersInfo = JSON.parse(recordInfo.playersInfo);
    this.timeLabel.string = "对战时间：" + playersInfo.time;
    for (var i = 0; i < playersInfo.players.length; i++) {
      this.nicknameLabels[i].string = playersInfo.players[i].nickname;
      this.scoreLabels[i].string = playersInfo.players[i].totalScore;
    }
  },

  clickAction: function clickAction() {
    if (this._recordItemInfo) {
      cc.log("点击了记录详情 item，开启回放");
      this._startPlayback(this._recordItemInfo._info8Array);
      return;
    }

    Socket.sendGetItemRecord(Socket.instance.userInfo.id, this._parentId);
  },

  _startPlayback: function _startPlayback(playBackInfo) {
    Playback.instance.setPlaybackDatas(playBackInfo);
    cc.director.loadScene('play');
  },

  detailAction: function detailAction(recordItemInfo, index) {
    this._recordItemInfo = recordItemInfo;
    this.playbackNode.active = true;
    this.watchNode.active = false;
    this.numNode.string = "第" + (index + 1) + "局";
    this.timeLabel.string = "对战时间：" + recordItemInfo.creatAt;
    var objArray = JSON.parse(recordItemInfo.info8);
    this._recordItemInfo._info8Array = objArray;
    var playersArray = objArray.map(function (str) {
      return JSON.parse(str);
    });

    var players = playersArray[playersArray.length - 1].data.players;
    for (var i = 0; i < players.length; i++) {
      this.nicknameLabels[i].string = players[i].nickname;
      this.scoreLabels[i].string = players[i].cScore;
    }
  }

});

cc._RFpop();
},{"Playback":"Playback","socket":"socket"}],"record":[function(require,module,exports){
"use strict";
cc._RFpush(module, '452f4rFUqRLFYlGEJS5kEWs', 'record');
// scripts\record.js

var KQGlobalEvent = require('KQGlobalEvent');
var Socket = require('socket');
cc.Class({
    'extends': cc.Component,

    properties: {
        scrollView: cc.Node,
        subScrollView: cc.Node,
        recordItem: cc.Prefab,
        subRecordItem: cc.Prefab
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.isSubPage = false;
        this.subScrollView.active = false;
        this.scrollViewContent = this.scrollView.getComponent(cc.ScrollView).content;
        this.subScrollViewContent = this.subScrollView.getComponent(cc.ScrollView).content;

        this._registerSocketEvent();
    },

    _registerSocketEvent: function _registerSocketEvent() {
        KQGlobalEvent.on(Socket.Event.GetRecord, this._ReceiveRecordInfo, this);
        KQGlobalEvent.on(Socket.Event.GetItemRecord, this._ReceiveRecordItem, this);
    },

    _ReceiveRecordInfo: function _ReceiveRecordInfo(response) {
        this.isSubPage = false;
        this.subScrollView.active = false;
        this.scrollView.active = true;

        this.scrollViewContent.removeAllChildren();

        response.data.filter(function (record) {
            return record.playersInfo.length > 0;
        }).forEach((function (recordInfo) {
            var item = cc.instantiate(this.recordItem);
            this.scrollViewContent.addChild(item);
            var comp = item.getComponent('recordInfo');
            comp.setInfo(recordInfo);
        }).bind(this));
    },

    _ReceiveRecordItem: function _ReceiveRecordItem(RecordItemInfo) {
        this.isSubPage = true;
        this.subScrollView.active = true;
        this.scrollView.active = false;

        this.subScrollViewContent.removeAllChildren();
        for (var i = 0; i < RecordItemInfo.data.length; i++) {
            var item = cc.instantiate(this.recordItem);
            this.subScrollViewContent.addChild(item);
            var comp = item.getComponent('recordInfo');
            var info = RecordItemInfo.data[i];
            comp.detailAction(info, i);
        }
    },

    closeAction: function closeAction() {
        if (this.isSubPage) {
            this.isSubPage = false;
            this.subScrollView.active = false;
            this.scrollView.active = true;
        } else {
            this.node.getComponent('alert').dismissAction();
        }
    }
});

cc._RFpop();
},{"KQGlobalEvent":"KQGlobalEvent","socket":"socket"}],"rule":[function(require,module,exports){
"use strict";
cc._RFpush(module, '92f6eNs7RdDRJIRLCZnyulJ', 'rule');
// scripts\rule.js

cc.Class({
    'extends': cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {},

    clickExit: function clickExit() {
        cc.director.loadScene('hall');
    }
});

cc._RFpop();
},{}],"selectMoShi":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0030eDrh7xEm6AeR3FCg5WU', 'selectMoShi');
// scripts\selectMoShi.js

cc.Class({
    "extends": cc.Component,

    properties: {
        selectZhuangBg: cc.Node,
        selectZhuangRight: cc.Node,
        selectTeShuPaiBg: cc.Node,
        selectTeShuPaiRight: cc.Node,
        _zhuangSelected: null, //庄家模式是否选择  null为不选择，0为选择
        _teShuPaiSelected: null, //无特殊牌模式是否选择  null为不选择，1为选择
        selectIndex: null },

    //是否选择庄家模式或者无特殊牌  null为两者都不选  0为选择了庄家模式  1为选择了无特殊牌模式
    onLoad: function onLoad() {},

    /*#####点击庄家模式*/
    clickZhuanJiaKuang: function clickZhuanJiaKuang() {
        if (this._zhuangSelected == 0) {
            //没选上庄家模式
            this.selectZhuangRight.active = false;
            this._zhuangSelected = null;

            if (this._teShuPaiSelected == null) {
                this.selectIndex = null;
            }

            //选了无特殊牌就不能选庄家模式
            if (this._teShuPaiSelected == 0) {
                this.selectIndex = 1;
            }
        } else if (this._zhuangSelected == null) {
            //选上状态
            this.selectZhuangRight.active = true;
            this._zhuangSelected = 0;
            //庄家模式选上的时候无特殊牌必须为不选
            if (this._teShuPaiSelected == 0) {
                this.selectTeShuPaiRight.active = false;
                this._teShuPaiSelected = null;
            }
            this.selectIndex = 0;
        }
        console.log(this.selectIndex);
    },

    /*#####点击无特殊牌的选择框*/
    clickTeShuPaiKuang: function clickTeShuPaiKuang() {
        if (this._teShuPaiSelected == 0) {
            //没选上
            this.selectTeShuPaiRight.active = false;
            this._teShuPaiSelected = null;

            //如果庄家模式也没选上
            if (this._zhuangSelected == null) {
                this.selectIndex = null;
            } else {
                this.selectIndex = 0;
            }
        }
        //点击的时候把勾号打开，就是选上状态
        else if (this._teShuPaiSelected == null) {
                this.selectTeShuPaiRight.active = true;
                this._teShuPaiSelected = 0;
                this.selectIndex = 1;

                if (this._zhuangSelected == 0) {
                    this.selectZhuangRight.active = false;
                    this._zhuangSelected = null;
                    this.selectIndex = 1;
                }
            }
        console.log(this.selectIndex);
    }
});

cc._RFpop();
},{}],"select_mapai":[function(require,module,exports){
"use strict";
cc._RFpush(module, '8e7e53kJcJK9rwMSxnloqI5', 'select_mapai');
// scripts\select_mapai.js

cc.Class({
    "extends": cc.Component,

    properties: {
        // foo: {
        //    default: null,      // The default value will be used only when the component attaching
        //                           to a node for the first time
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
        pai: cc.Node,
        mapai: {
            "default": [],
            type: cc.SpriteFrame
        }
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.selectMa = this.node.getComponent("select_ma");
        this.selectMa.onLoad();
        this.com = this.pai.getComponent(cc.Sprite);
    },

    clickBtnComfirm: function clickBtnComfirm() {
        this.com.spriteFrame = this.mapai[cc.from.ma];
        //console.log(this.com.spriteFrame);
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"select_ma":[function(require,module,exports){
"use strict";
cc._RFpush(module, '4bc0b2bZGRGXoAfdO3Y6Squ', 'select_ma');
// scripts\select_ma.js

cc.Class({
    "extends": cc.Component,

    properties: {
        rightIcon: [cc.Node],
        mapaiRight: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {
        if (cc.from == null) {
            cc.from = {};
        }
        //如果不带马，则马牌为空
        if (this.mapaiRight.active == false) {
            cc.from.isUseMa = false;
            cc.from.ma = null;
        } else {
            cc.from.isUseMa = true;
            //否则马牌默认为第0个，即黑桃5
            cc.from.ma = 0;
        }
        for (var i = 0; i < this.rightIcon.length; i++) {
            if (i == 0) {
                this.rightIcon[i].active = true;
                cc.from.ma = 0;
                this.select = this.rightIcon[i];
            } else {
                this.rightIcon[i].active = false;
            }
        }
    },
    onMaPaiClick: function onMaPaiClick(e) {
        var targetName = e.target.name;
        cc.log(targetName);
        if (targetName != this.select.parent.name) {
            if (targetName == "select_kuang1") {
                this.select = this.rightIcon[2];
                cc.from.ma = 2;
            } else if (targetName == "select_kuang2") {
                this.select = this.rightIcon[1];
                cc.from.ma = 1;
            } else if (targetName == "select_kuang3") {
                this.select = this.rightIcon[0];
                cc.from.ma = 0;
            }
            for (var i = 0; i < this.rightIcon.length; i++) {
                this.rightIcon[i].active = false;
            }
            this.select.active = true;
        }
        console.log(cc.from.ma);
    }

});

cc._RFpop();
},{}],"select":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e913aIwAtVEo5jMrf40D5rw', 'select');
// scripts\select.js

cc.Class({
    "extends": cc.Component,

    properties: {
        bgNode: cc.Node, //选择框
        selectedNode: cc.Node, //对号
        pai: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.selected = true;
    },

    clickAction: function clickAction() {
        this.selected = !this.selected;
        this.selectedNode.active = this.selected;
    },

    setSelected: function setSelected(selected) {
        this.selected = selected;
        this.selectedNode.active = this.selected;
    },

    /*#####*/
    clickSelectKuang: function clickSelectKuang() {
        this.selected = !this.selected;
        this.selectedNode.active = this.selected;
        cc.from.isUseMa = this.selected;
        var mapaiCom = this.pai.getComponent(cc.Button);
        if (this.selectedNode.active === false) {
            mapaiCom.interactable = false;
        } else {
            mapaiCom.interactable = true;
        }
    }

});
// called every frame, uncomment this function to activate update callback
// update: function (dt) {

// },

cc._RFpop();
},{}],"singleSelect":[function(require,module,exports){
"use strict";
cc._RFpush(module, '194a8h4vXFO+bXX92yzqbfq', 'singleSelect');
// scripts\singleSelect.js

cc.Class({
    'extends': cc.Component,

    properties: {
        nodes: [cc.Node],
        selectedIndex: 0
    },
    /*原来的*/
    /*    onLoad: function () {
            var self = this;
            for (var i = 0; i < this.nodes.length; i++) {
                let isSelected = (this.selectedIndex == i);
                this.nodes[i].getComponent('select').setSelected(isSelected);
            }
            for (var i = 0; i < this.nodes.length; i++) {
                var tComp = this.nodes[i].getComponent('select');
                tComp.index = i;
                tComp.clickAction = function() {
                    for (var i = 0; i < self.nodes.length; i++) {
                        var comp = self.nodes[i].getComponent('select');
                        comp.setSelected(false);
                    }
                    this.setSelected(true);
                    self.selectedIndex = this.index;
                    self.onSelectChange(this.index);
                };
            }
        },
    */
    /*####*/
    onLoad: function onLoad() {
        var self = this;
        for (var i = 0; i < this.nodes.length; i++) {
            var isSelected = this.selectedIndex == i;
            this.nodes[i].getComponent('select').setSelected(isSelected);
        }
        for (var i = 0; i < this.nodes.length; i++) {
            var tComp = this.nodes[i].getComponent('select');
            tComp.index = i;
            tComp.clickAction = function () {
                for (var i = 0; i < self.nodes.length; i++) {
                    var comp = self.nodes[i].getComponent('select');
                    comp.setSelected(false);
                }
                this.setSelected(true);
                self.selectedIndex = this.index;
                self.onSelectChange(this.index);
            };
        }
    },

    onSelectChange: function onSelectChange(selectIndex) {
        cc.log(selectIndex);
    }

});

cc._RFpop();
},{}],"slider":[function(require,module,exports){
"use strict";
cc._RFpush(module, '1c921w7bEFKUIdNwItOX3oG', 'slider');
// scripts\slider.js

cc.Class({
    "extends": cc.Component,

    properties: {
        indicatorNode: cc.Node,
        backgroundNode: cc.Node,
        selectedNode: cc.Node,

        value: 0
    },

    // use this for initialization
    onLoad: function onLoad() {
        var self = this;
        this.indicatorNode.on(cc.Node.EventType.TOUCH_START, function (event) {});
        this.indicatorNode.on(cc.Node.EventType.TOUCH_MOVE, function (event) {
            var pt = self.node.convertToNodeSpace(cc.v2(event.getLocationX(), event.getLocationY()));
            self.updateSlider(pt);
        });
        this.indicatorNode.on(cc.Node.EventType.TOUCH_END, function (event) {
            var pt = self.node.convertToNodeSpace(cc.v2(event.getLocationX(), event.getLocationY()));
            self.updateSlider(pt);
        });
        this.indicatorNode.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            var pt = self.node.convertToNodeSpace(cc.v2(event.getLocationX(), event.getLocationY()));
            self.updateSlider(pt);
        });

        //this.maxWidth = this.node.width - 40;
        this.maxWidth = this.node.width - 28;
        this.setValue(this.value);
    },

    updateSlider: function updateSlider(pt) {
        var x = pt.x;
        if (x < 0) {
            x = 0;
        }

        if (x > this.maxWidth) {
            x = this.maxWidth;
        }
        this.setValue(x / this.maxWidth);
        this.onValueChange(this.value);
    },

    /*0 - 1*/
    setValue: function setValue(value) {
        this.value = value;
        if (this.value < 0) {
            this.value = 0;
        }
        if (this.value > 1) {
            this.value = 1;
        }
        //this.maxWidth = this.node.width - 38;
        this.maxWidth = this.node.width - 28;
        this.indicatorNode.x = this.value * this.maxWidth + 10;
        this.selectedNode.width = this.value * this.maxWidth + this.indicatorNode.width / 2;
    },

    onValueChange: function onValueChange(value) {
        cc.log(value);
    }
});

cc._RFpop();
},{}],"socket":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'cf75cLLNo1ETbJFrx/23i/H', 'socket');
// scripts\socket.js

var manager = require('manager');
var KQGlobalEvent = require('KQGlobalEvent');
var KQNativeInvoke = require('KQNativeInvoke');

var SocketConstant = {
  MaxReconnectCheckInterval: 5 };

/**
 * 这是对 WebSocket 的一个封装
 * 
 * 里面包含自动重连的功能
 */
// 重连检测时间片
var Socket = cc.Class({
  'extends': cc.Component,

  properties: {
    _lastReceiveMsgTime: 0, // 最后一次收到消息时间(毫秒)
    _timeout: 8 },

  // 超时时长 （秒）
  statics: {
    instance: null,
    url: 'ws://39.108.112.11:5001'
  },

  //url:"ws://192.168.0.120:5001",
  //url:"ws://183.3.205.149:5002",
  // use this for initialization
  onLoad: function onLoad() {
    Socket.instance = this;

    this.name = "socket";

    cc.game.addPersistRootNode(this.node);
    if (cc.game.isPersistRootNode(this.node)) {
      cc.log('添加全局节点 Socket 成功');
    }

    this._registerAppActiveChange();

    this.isCreating = false;
    this.createIndex = 0;
    this.createSocket();

    this.schedule(function () {
      this.checkConnection();
    }, 5);

    this.recvTime = Date.now(); //接收到最新一条服务器的信息的时间
    //cc.log(manager.version);

    this._checkSocket();
  },

  checkConnection: function checkConnection() {
    //客户端定时给服务端发送点数据，防止连接由于长时间没有通讯而被某些节点的防火墙关闭导致连接断开的情况。
    this.sendMessage('checkAction', '');
  },

  createSocket: function createSocket() {
    var self = this;
    this.createIndex++; //创建次数加1
    if (this.createIndex > 5) {
      this.networkError();
      KQNativeInvoke.forceExitApp();
      return;
    }
    this.isCreating = true;

    KQGlobalEvent.emit(Socket.Event.SocketConnecting);
    this.ws = new WebSocket(Socket.url);
    if (this.ws === null) {
      this.networkError();
      KQGlobalEvent.emit(Socket.Event.SocketConnectError, { 'data': 'Socket 创建失败' });
      KQNativeInvoke.forceExitApp();
      return;
    }
    this.socketError = false;

    // socket 连接成功
    this.ws.onopen = function (event) {
      //cc.log("WebSocket 连接成功：", event);

      self._lastReceiveMsgTime = cc.sys.now();
      KQGlobalEvent.emit(Socket.Event.SocketConnectSuccessed, event);

      self.isCreating = false;
      self.socketError = false;
      self.createIndex = 0;
      self.connectionSuccess();
      self.sendReconnectInfo();
    };

    // socket 接收到消息
    this.ws.onmessage = function (event) {
      self._lastReceiveMsgTime = cc.sys.now();
      KQGlobalEvent.emit(Socket.Event.SocketReceiveMessage, event.data);

      self.isCreating = false;
      self.socketError = false;
      self.receviceMessage(event.data);
      self._dispatchResponse(event.data);
      self.recvTime = Date.now(); //接收最新一条信息的时间

      /**/
    };

    /**
     * socket 发生错误
     * 
     * socket 本身有 `onerror` 回调，但事实证明，其不靠谱，
     * 有很大的机率有误报的行为，常常在没有错误时，会给错误回调。
     * 且不能定制超时时长
     * 
     * @param {String} message 
     */
    this.ws._kq_onerror = function (message) {
      cc.error('WebSocket 连接错误：' + message);

      KQGlobalEvent.emit(Socket.Event.SocketConnectError, { data: message });
      self.ws.close();
      if (!self.ws) {
        return;
      }

      // 虽然调用了 websocket 的 close 方法，但是
      // 它并会立即调用 onclose 回调，而是在未来的某
      // 一时间再回调 onclose；但这里明显可以直接回调了。
      var ws = self.ws;

      self.ws.onclose();
      ws.onclose = function () {};
    };

    // socke 已关闭
    this.ws.onclose = function (event) {
      //cc.log('WebSocket 已关闭 close time=' + Date.now() + " event: " + event);

      self.isCreating = false;
      self.socketError = true;
      self.ws = null;
      self.connectionDisconnect();
      KQGlobalEvent.emit(Socket.Event.SocketDisconnect, event);
      //cc.log('socket close'+JSON.stringify(event));
    };
  },

  reconnect: function reconnect() {
    var self = this;
    this.scheduleOnce(function () {
      if (!self.isCreating && self.socketError) {
        self.createSocket();
      }
    }, 2);
  },

  sendReconnectInfo: function sendReconnectInfo() {
    var self = this;
    this.scheduleOnce(function () {
      if (this.userInfo != null) {
        var userId = self.userInfo.user_id || self.userInfo.id;
        self.sendMessage('reconnect', {
          'userId': userId
        });
      }
    }, 1);
  },

  receviceMessage: function receviceMessage(response) {},

  connectionDisconnect: function connectionDisconnect() {},

  connectionSuccess: function connectionSuccess() {},

  networkError: function networkError() {},

  checkNetworkStart: function checkNetworkStart() {},

  checkNetworkEnd: function checkNetworkEnd() {},

  _dispatchResponse: function _dispatchResponse(responseString) {
    //cc.log("WebSocket 接收到服务器消息：", responseString);
    var response = JSON.parse(responseString);
    var action = response["action"];
    if (action) {
      KQGlobalEvent.emit(action, response);
    }
  },

  // MARK: 前后台操作
  _registerAppActiveChange: function _registerAppActiveChange() {
    //cc.log("WebSocket 注册应用进入前、后台事件");
    cc.game.on(cc.game.EVENT_HIDE, this._appEnterBackground, this);
    cc.game.on(cc.game.EVENT_SHOW, this._appBecomActive, this);
  },

  /**
   * 进入后台
   */
  _appEnterBackground: function _appEnterBackground() {
    var now = cc.sys.now();
    if (now - this._lastAppEnterBackgroundTime < 100) {
      return;
    }
    this._lastAppEnterBackgroundTime = now;

    //cc.log("WebSocket 检测到应用进入后台：", new Date());
    var id = this.userInfo ? this.userInfo.id : undefined;
    Socket.sendAppPause(id);
    this._cancelCheckSocket();
  },

  /**
   * 进入前台 
   */
  _appBecomActive: function _appBecomActive() {
    var now = cc.sys.now();
    if (now - this._lastAppBecomActiveTime < 100) {
      return;
    }
    this._lastAppBecomActiveTime = now;

    //cc.log("WebSocket 检测到应用进入前台：", new Date());
    var id = this.userInfo ? this.userInfo.id : undefined;
    Socket.sendAppActive(id);
    this._checkSocket();

    this.scheduleOnce((function () {
      this._checkSocketExecute();
    }).bind(this), 1.5);
  },

  //进入后台操作
  enterbackgroudAction: function enterbackgroudAction() {
    this._appEnterBackground();
  },

  //进入前台操作
  resumeAction: function resumeAction() {
    //检查网络
    this._checkNetwork();
    this._appBecomActive();
  },

  sendMessage: function sendMessage(action, data) {
    data = this._strongVerifyData(data);

    if (this.socketError) {
      cc.error("socket 连接错误：" + this.socketError);
      this.reconnect();
      return;
    }
    //cc.log('WebSocket 发送消息：' + action, data);
    if (cc.sys.isObjectValid(this.ws)) {
      if (this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(this._convertParameterToString(action, data));
      }
    } else {
      this.connectionDisconnect();
    }
  },

  _strongVerifyData: function _strongVerifyData() {
    var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (typeof data == 'string') {
      data = { "string": data };
    }

    if (data == null) {
      data = {};
    }

    if (!data["userId"]) {
      if (this.userInfo && typeof this.userInfo == 'object' && this.userInfo.id) {
        data["userId"] = this.userInfo.id;
      }
    }
    return data;
  },

  _convertParameterToString: function _convertParameterToString(action) {
    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var obj = {};
    obj.action = action;
    obj.data = data;

    return JSON.stringify(obj);
  },

  // 检查网络
  _checkNetwork: function _checkNetwork() {
    if (this.checkNetworkNow) {
      this.checkNetworkNow();
    }

    this.shouldCheck = true;
    if (!this.socketError) {
      this.recvTime = 0;
      this.sendMessage('checkAction', '');
      this.scheduleOnce(function () {
        this.checkNetworkEnd();
        this.shouldCheck = false;
        if (this.recvTime === 0) {
          this.connectionDisconnect();
        }
      }, 2.5);
    } else {
      this.connectionDisconnect();
    }
  },

  // MARK: socket 掉线尽早确认
  _checkSocket: function _checkSocket() {
    this.schedule(this._checkSocketExecute, SocketConstant.MaxReconnectCheckInterval, cc.macro.REPEAT_FOREVER);
  },

  _cancelCheckSocket: function _cancelCheckSocket() {
    this.unschedule(this._checkSocketExecute);
  },

  _checkSocketExecute: function _checkSocketExecute() {
    if (this._isSocketTimeout() && this.ws) {
      this.ws._kq_onerror('连接超时');
      return;
    }
  },

  // socket 是否已超时
  _isSocketTimeout: function _isSocketTimeout() {
    return this._lastReceiveMessageInterval() >= this._timeout;
  },

  // 上一次收到消息到现在的时间间隔
  _lastReceiveMessageInterval: function _lastReceiveMessageInterval() {
    var now = cc.sys.now();
    var interval = (now - this._lastReceiveMsgTime) / 1000;
    //cc.log(`WebSocket 现在距上一条收到消息的时间间隔是：${interval} 秒`);
    return interval;
  }

});

// MARK: Socket 事件定义
Socket.Event = {
  SocketConnecting: "SocketConnecting", // Socket 正在连接
  SocketConnectSuccessed: "SocketConnectSuccessed", // 连接成功
  SocketDisconnect: "SocketDisconnect", // Socket 断开连接
  SocketConnectError: "SocketConnectError", // Socket 连接错误
  SocketReceiveMessage: "SocketReceiveMessage", // Socket 接收到消息

  InviteCode: "inviteCode", // 客户端发送   邀请码
  JoinDesk: "joinDesk", // 客户端发送
  CreateDesk: "createDesk", // 客户端发送
  LeaveDesk: "leaveDesk", // 离开桌子
  DissolveDesk: "dissolveDesk", // 解散桌子
  AnswerDissolve: "answerDissolve", // 回答请求退出命令
  GetDeskInfo: "getDeskInfo", // 客户端发送
  SendImage: "sendImage", // 客户端发送
  SendText: "sendText", // 客户端发送
  SendAudioMessage: "sendAudioMessage", // 客户端发送  发送语音消息
  GetRecord: "getRecord", // 获取战绩信息
  GetItemRecord: "getItemRecord", // 获取战绩信息
  PlayCard: "playCard", // 客户端发送，用户打出牌
  TimeoutDissolve: "timeoutDissolve", // 请求退出超时时，需要发出的消息
  Feedback: "feedback", // 客户端发送  反馈信息
  SharePng: "sharePng", // 客户端发送  分享领取砖石
  EnterRandom: "interRandom", // 客户端发送  进入随机场
  CancelRandom: "cancelRandom", // 客户端发送  取消进入随机场
  ForceExitRandom: "dissolve", // 客户端发送 强制退出随机场
  Ready: "ready", // 客户端发送 准备
  GetHallInfo: "getHallInfo", // 客户端发送 获取大厅信息
  GetUserInfo: "getUserInfo", // 客户端发送 获取用户信息
  CheckAction: "checkAction", // 客户端发送，用来检测与服务器的连通性
  Pause: "pause", // 客户端进入后台时要发送的消息
  Active: "active", // 客户端回到前台时要发送的消息

  ReceiveRequestDissolve: "requestDissolve", // 请求解散桌子 服务器发送
  ReceiveRequestDissolveResult: "requestDissolveResult", // 请求解散桌子结果
  ReceiveChatText: "sendText", // 服务器发送
  ReceiveDeskInfo: "deskInfo", // 服务器发送
  ReceiveGameOver: "gameOver", // 服务器发送
  ReceiveFaPai: "fapai", // 服务器发送
  ReceiveSharePng: "sharePngs", // 服务器发送
  ReceiveOnlineStatus: "sendOnlineStatus", // 服务器发送
  ReceiveAudioMessage: "sendAudioMessage", // 服务器发送，接收到用户发送了语音消息
  ReceivePlayCard: "playCard", // 服务器发送，有用户已经准备好牌
  ReceiveCreateDesk: "createDesk", // 服务器发送，创建房间的回调
  ReceiveReady: "ready", // 服务器发送，有用户点击了准备
  ReceiveHallInfo: "getHallInfo", // 服务器发送
  ReceiveGetUserInfo: "getUserInfo", // 服务器发送 获取用户信息
  ReceiveCheckAction: "checkAction", // 服务器发送  用来确认 Socket 还在连着
  ReceiveForceExit: "forceExit", // 服务器发送  用来使客户端强退
  ReceiveDissolveDesk: "dissolveDesk", // 服务器发送   当房主退出时，解散桌子
  ReceiveInterRandom: "interRandom", // 服务器发送   进入随机场的反馈
  ReceivePause: "pause", // 服务器发送   当有用户设备进入后台时，会收到这条消息
  ReceiveInviteCode: 'inviteCode', // 服务器发送，收到邀请码的消息
  /**/
  ReceiveLeaveDesk: 'leaveDesk' };

// MARK: Socket 提供的可发给服务器消息的方法

// 服务器发送，收到需要离开桌子的消息
/**/
Socket.sendCheckAction = function () {
  this.instance.sendMessage(this.Event.CheckAction, null);
};
/**/
Socket.sendDidReceiveGameOverAction = function (userId) {
  var param = userId ? { "userId": userId } : null;
  this.instance.sendMessage(Socket.Event.DidReceiveGameOverAction, param);
};
/**/

/**
 * 当 APP 进入后台时要发送的消息
 */
Socket.sendAppPause = function (userId) {
  var param = userId ? { "userId": userId } : null;
  this.instance.sendMessage(this.Event.Pause, param);
};

/**
 * 当 APP 进入前台时发送的消息
 */
Socket.sendAppActive = function (userId) {
  var param = userId ? { "userId": userId } : null;
  this.instance.sendMessage(this.Event.Active, param);
};

// 开房
Socket.sendCreateDesk = function (createDescInfo, userId) {
  cc.assert(createDescInfo);
  cc.assert(userId);

  createDescInfo["userId"] = userId;
  this.instance.sendMessage(this.Event.CreateDesk, createDescInfo);
};

// 加入房间
Socket.sendJoinDesk = function (roomId, userId) {
  cc.assert(roomId);
  cc.assert(userId);

  var param = {
    "roomId": roomId,
    "userId": userId
  };
  this.instance.sendMessage(this.Event.JoinDesk, param);
};

// 发送邀请码
Socket.sendInviteCode = function (inviteCode, userId) {
  var param = {
    "inviteCode": inviteCode,
    "userId": userId
  };
  this.instance.sendMessage(this.Event.InviteCode, param);
};

// 获取房间信息
Socket.sendGetDesckInfo = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.GetDeskInfo, param);
};

Socket.sendText = function (userId, text) {
  cc.assert(userId);
  cc.assert(text);
  var param = {
    "msg": text,
    "userId": userId
  };
  this.instance.sendMessage(this.Event.SendText, param);
};

Socket.sendAudioMessage = function (userId) {
  var url = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

  cc.assert(userId);
  cc.assert(url.length > 0);

  if (url.length == 0) {
    return;
  }

  var param = {
    "url": url,
    "userId": userId
  };
  this.instance.sendMessage(this.Event.SendAudioMessage, param);
};

Socket.sendImage = function (userId, image) {
  cc.assert(userId);
  cc.assert(image);
  var param = {
    "msg": image,
    "userId": userId
  };
  this.instance.sendMessage(this.Event.SendImage, param);
};

Socket.sendGetRecrod = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.GetRecord, param);
};

Socket.sendDissolveDesk = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };
  this.instance.sendMessage(this.Event.DissolveDesk, param);
};

Socket.sendGetItemRecord = function (userId, parentId) {
  cc.assert(userId);
  cc.assert(parentId);
  var param = {
    "userId": userId,
    "parentId": parentId
  };

  this.instance.sendMessage(this.Event.GetItemRecord, param);
};

Socket.sendLeaveDesk = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.LeaveDesk, param);
},

/**
 * 回答退房请求
 * 
 * @param  {Number} userId 当前用户 id
 * @param  {NUmber} answer=1 回答。1 表示同意； 0 表示拒绝； -1 表示未选择
 */
Socket.sendAnswerDissolve = function (userId) {
  var answer = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

  cc.assert(userId);
  var param = {
    "userId": userId,
    "answer": answer
  };

  this.instance.sendMessage(this.Event.AnswerDissolve, param);
}, Socket.sendForceExitRoom = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.DissolveDesk, param);
},

// 十三张中
// cardInfo 类似于：
// [{
//         'cards':[{'suit':suit,'number':number},{}],//特殊牌不用传
//         'type':0,
//         'value':4,
//         'isContainExtra':true,// 特殊牌是否包含特殊牌
//     },
//     {
//         'cards':[{'suit':suit,'number':number},{}],
//         'type':0,
//         'value':4
//     }]
Socket.sendPlayCard = function (userId, cardInfo) {
  cc.assert(userId);
  var param = {
    "userId": userId,
    "card": cardInfo
  };

  this.instance.sendMessage(this.Event.PlayCard, param);
};

Socket.sendTimeoutDissolve = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.TimeoutDissolve, param);
};

Socket.sendFeedback = function (userId, text) {
  cc.assert(userId);
  cc.assert(text);
  var param = {
    "userId": userId,
    "text": text
  };

  this.instance.sendMessage(this.Event.Feedback, param);
};

Socket.sendSharePng = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };
  this.instance.sendMessage(this.Event.SharePng, param);
};
// 开始匹配随机场
Socket.sendEnterRandom = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.EnterRandom, param);
};

// 取消匹配随机场
Socket.sendCancelRandom = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.CancelRandom, param);
};

// 准备
Socket.sendReady = function (userId) {
  cc.assert(userId);
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.Ready, param);
},

// 获取大厅信息
Socket.sendGetHallInfo = function (userId) {
  var param = {
    "userId": userId
  };

  this.instance.sendMessage(this.Event.GetHallInfo, param);
},

// 获取用户信息
Socket.sendGetUserInfo = function (userId, openId) {
  var param = {
    "userId": userId,
    "openId": openId
  };

  this.instance.sendMessage(this.Event.GetUserInfo, param);
}, module.exports = Socket;

cc._RFpop();
},{"KQGlobalEvent":"KQGlobalEvent","KQNativeInvoke":"KQNativeInvoke","manager":"manager"}],"test":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f3a5ah1deZEh6HfPdghRXyA', 'test');
// scripts\KQCard\test.js

console.log(2 < 2);

cc._RFpop();
},{}],"userInfo":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e8d10xRGnJAn42wJsuC6aBi', 'userInfo');
// scripts\userInfo.js

var AudioManager = require('AudioManager');
var Playback = require('Playback');

cc.Class({
  'extends': cc.Component,

  properties: {
    spriteAvatar: cc.Sprite,
    labelNickname: cc.Label,
    labelScore: cc.Label,
    spriteOffline: cc.Sprite,
    voiceNode: cc.Node,
    homeRunNode: cc.Node,
    readyNode: cc.Node,
    shootNodes: [cc.Node],
    bankerNode: cc.Node,
    fangZhuNode: cc.Node
  },

  // use this for initialization
  onLoad: function onLoad() {
    this.updateScore();
  },

  setReadyNodeVisible: function setReadyNodeVisible() {
    var visible = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    this.readyNode.active = visible != false;
  },

  setFangZhuNodeVisible: function setFangZhuNodeVisible() {
    var visible = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    this.fangZhuNode.active = visible != false;
  },

  updateScore: function updateScore() {
    var score = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

    this.labelScore.string = "" + score;
  },

  updateNickname: function updateNickname() {
    var nickname = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

    this.labelNickname.string = nickname;
  },

  updateAvatar: function updateAvatar(avatar) {
    if (avatar.endsWith("png") || avatar.endsWith("jpg") || avatar.endsWith("gif")) {} else {
      avatar = avatar + ".png";
    }

    cc.loader.load(avatar, (function (err, data) {
      if (err) {
        return;
      }

      var frame = new cc.SpriteFrame(data);
      this.spriteAvatar.spriteFrame = frame;
    }).bind(this));
  },

  setOfflineVisible: function setOfflineVisible() {
    var visible = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    if (Playback.instance.isPlaybacking()) {
      // 如果是处理回放状态，就不用再处理离线消息了
      return;
    }

    this.spriteOffline.node.active = visible;
  },

  setIsBanker: function setIsBanker() {
    var isBanker = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    this.bankerNode.active = isBanker;
  },

  playShootAnimation: function playShootAnimation() {
    var toIndex = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

    var shootNode = this.shootNodes[toIndex];
    shootNode.active = true;
    var anim = shootNode.getComponent(cc.Animation);
    anim.play('shoot').on('finished', function () {
      shootNode.active = false;
    }, this);

    AudioManager.instance.playDaQiang();
  },

  playBulletHoleAnimation: function playBulletHoleAnimation() {
    var bulletHoleNode = this.node.getChildByName('bulletHole');
    bulletHoleNode.active = true;
    var anim = bulletHoleNode.getComponent(cc.Animation);
    anim.play('bulletHole').on('finished', function () {
      bulletHoleNode.active = false;
    }, this);
  },

  playSpeakAnimation: function playSpeakAnimation() {
    this.voiceNode.active = true;
    this.scheduleOnce((function () {
      this.voiceNode.active = false;
    }).bind(this), 4);
  },

  // 播放全垒打动画
  playHomeRunAimation: function playHomeRunAimation() {
    var alert = this.homeRunNode.getComponent('alert');
    alert.alert();
    this.scheduleOnce((function () {
      this.homeRunNode.active = false;
    }).bind(this), 2);
  }
});

cc._RFpop();
},{"AudioManager":"AudioManager","Playback":"Playback"}],"zhuanNumCtrl":[function(require,module,exports){
"use strict";
cc._RFpush(module, '1b0dfWuicJLYJDmjjT1lmQc', 'zhuanNumCtrl');
// scripts\zhuanNumCtrl.js

cc.Class({
    "extends": cc.Component,

    properties: {
        zhuanNumLabel: cc.Label,
        jushu: cc.Node,
        AA: cc.Node,
        _selectedPeopleIndex: null,
        _selectedJushuIndex: null,
        _selectedAAIndex: null
    },

    onLoad: function onLoad() {
        this._ctrl();
    },

    clickPeopleAction: function clickPeopleAction() {
        this._ctrl();
    },

    clickAAAction: function clickAAAction() {
        this._ctrl();
    },

    clickJushuAction: function clickJushuAction() {
        this._ctrl();
    },

    _ctrl: function _ctrl() {
        this._selectedPeopleIndex = this.node.getComponent("singleSelect").selectedIndex;
        this._selectedJushuIndex = this.jushu.getComponent("singleSelect").selectedIndex;
        this._selectedAAIndex = this.AA.getComponent("checkSelect").selectedIndex;
        //人数选2人时且没选上AA制收费
        var renShu = 2;
        if (this._selectedPeopleIndex == 0) {
            renShu = 2;
        } else if (this._selectedPeopleIndex == 1) {
            renShu = 3;
        } else if (this._selectedPeopleIndex == 2) {
            renShu = 4;
        } else if (this._selectedPeopleIndex == 3) {
            renShu = 5;
        }
        var zhuangShi = 20;
        if (this._selectedJushuIndex == 0) {
            zhuangShi = 20;
        } else if (this._selectedJushuIndex == 1) {
            zhuangShi = 40;
        } else if (this._selectedJushuIndex == 2) {
            zhuangShi = 80;
        } else if (this._selectedJushuIndex == 3) {
            zhuangShi = 10;
        }
        //AA
        if (this._selectedAAIndex != null) {
            zhuangShi = Math.ceil(zhuangShi / renShu);
        }
        this.zhuanNumLabel.string = zhuangShi;
        //if(this._selectedPeopleIndex == 0){
        //    if(this._selectedAAIndex == null){
        //局数选10局时
        //if(this._selectedJushuIndex == 0){
        //    this.zhuanNumLabel.string = "10";
        //}
        ////局数选20局时
        //if(this._selectedJushuIndex == 1){
        //    this.zhuanNumLabel.string = "30";
        //}
        ////局数选30局时
        //if(this._selectedJushuIndex == 2){
        //    this.zhuanNumLabel.string = "80";
        //}
        //}
        //    else{
        //        //局数选10局时
        //        if(this._selectedJushuIndex == 0){
        //            this.zhuanNumLabel.string = "8";
        //        }
        //        //局数选20局时
        //        if(this._selectedJushuIndex == 1){
        //            this.zhuanNumLabel.string = "15";
        //        }
        //        //局数选30局时
        //        if(this._selectedJushuIndex == 2){
        //            this.zhuanNumLabel.string = "23";
        //        }
        //    }
        //
        //}
        //人数选3人
        //else if(this._selectedPeopleIndex == 1){
        //    //没选上AA制收费
        //    if(this._selectedAAIndex == null){
        //        //局数选10局时
        //        if(this._selectedJushuIndex == 0){
        //            this.zhuanNumLabel.string = "21";
        //        }
        //        //局数选20局时
        //        if(this._selectedJushuIndex == 1){
        //            this.zhuanNumLabel.string = "42";
        //        }
        //        //局数选30局时
        //        if(this._selectedJushuIndex == 2){
        //            this.zhuanNumLabel.string = "60";
        //        }
        //    }
        //    //选了AA收费
        //    else{
        //        //局数选10局时
        //        if(this._selectedJushuIndex == 0){
        //            this.zhuanNumLabel.string = "7";
        //        }
        //        //局数选20局时
        //        if(this._selectedJushuIndex == 1){
        //            this.zhuanNumLabel.string = "14";
        //        }
        //        //局数选30局时
        //        if(this._selectedJushuIndex == 2){
        //            this.zhuanNumLabel.string = "20";
        //        }
        //    }
        //
        //}
        ////人数选4人且没选上AA制收费
        //else{
        //    if(this._selectedAAIndex == null){
        //        //局数选10局时
        //        if(this._selectedJushuIndex == 0){
        //            this.zhuanNumLabel.string = "28";
        //        }
        //        //局数选20局时
        //        if(this._selectedJushuIndex == 1){
        //            this.zhuanNumLabel.string = "56";
        //        }
        //        //局数选30局时
        //        if(this._selectedJushuIndex == 2){
        //            this.zhuanNumLabel.string = "84";
        //        }
        //    }
        //    //AA制收费选上了
        //    else{
        //        //局数选10局时
        //        if(this._selectedJushuIndex == 0){
        //            this.zhuanNumLabel.string = "7";
        //        }
        //        //局数选20局时
        //        if(this._selectedJushuIndex == 1){
        //            this.zhuanNumLabel.string = "14";
        //        }
        //        //局数选30局时
        //        if(this._selectedJushuIndex == 2){
        //            this.zhuanNumLabel.string = "21";
        //        }
        //    }
        //}
    }
});

cc._RFpop();
},{}]},{},["AudioManager","CardPrefab","CardTypeCombine","CardTypeSprite","ChatMessage","MsgControl","KQGlobalEvent","ArrayExtension","NumberExtension","SpriteHelper","StringExtension","fecha","Invit","GetCardPointsSameCount","KQCard","KQCardColorsHelper","KQCardFindTypeExtension","KQCardPointsHelper","KQCardResHelper","KQCardScoreExtension","KQCardScoretsHelper","KQCardSelectExtension","test","UserModelHelper","NetworkError","ChatTextRecord","CompareCards","Countdown","GameResult","Player","ResultItem","TotalGameResult","TotalGameResultItem","UserSampleInfo","maPai","Playback","Setting","KQGlabolSocketEventHander","KQNativeInvoke","agreement","alert","cards","cardsBack","cellText","checkSelect","choujiang","game","hall","help","inviteCode","joinRoom","launch","login","manager","play","product","randRoom","record","recordInfo","rule","select","selectMoShi","select_ma","select_mapai","singleSelect","slider","socket","userInfo","zhuanNumCtrl"])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6L0NvY29zQ3JlYXRvci9yZXNvdXJjZXMvYXBwLmFzYXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsImFzc2V0cy9zY3JpcHRzL0V4dGVuc2lvbnMvQXJyYXlFeHRlbnNpb24uanMiLCJhc3NldHMvc2NyaXB0cy9BdWRpby9BdWRpb01hbmFnZXIuanMiLCJhc3NldHMvc2NyaXB0cy9DYXJkUHJlZmFiLmpzIiwiYXNzZXRzL3NjcmlwdHMvQ2FyZFR5cGVDb21iaW5lLmpzIiwiYXNzZXRzL3NjcmlwdHMvQ2FyZFR5cGVTcHJpdGUuanMiLCJhc3NldHMvc2NyaXB0cy9DaGF0L0NoYXRNZXNzYWdlLmpzIiwiYXNzZXRzL3NjcmlwdHMvUGVmYWJzL0NoYXRUZXh0UmVjb3JkLmpzIiwiYXNzZXRzL3NjcmlwdHMvUGVmYWJzL0NvbXBhcmVDYXJkcy5qcyIsImFzc2V0cy9zY3JpcHRzL1BlZmFicy9Db3VudGRvd24uanMiLCJFOi9Db2Nvc0NyZWF0b3IvcmVzb3VyY2VzL2FwcC5hc2FyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJFOi9Db2Nvc0NyZWF0b3IvcmVzb3VyY2VzL2FwcC5hc2FyL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJFOi9Db2Nvc0NyZWF0b3IvcmVzb3VyY2VzL2FwcC5hc2FyL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiRTovQ29jb3NDcmVhdG9yL3Jlc291cmNlcy9hcHAuYXNhci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsImFzc2V0cy9zY3JpcHRzL1BsYXkvR2FtZVJlc3VsdC5qcyIsImFzc2V0cy9zY3JpcHRzL0tRQ2FyZC9HZXRDYXJkUG9pbnRzU2FtZUNvdW50LmpzIiwiYXNzZXRzL3NjcmlwdHMvSW52aXQuanMiLCJhc3NldHMvc2NyaXB0cy9LUUNhcmQvS1FDYXJkQ29sb3JzSGVscGVyLmpzIiwiYXNzZXRzL3NjcmlwdHMvS1FDYXJkL0tRQ2FyZEZpbmRUeXBlRXh0ZW5zaW9uLmpzIiwiYXNzZXRzL3NjcmlwdHMvS1FDYXJkL0tRQ2FyZFBvaW50c0hlbHBlci5qcyIsImFzc2V0cy9zY3JpcHRzL0tRQ2FyZC9LUUNhcmRSZXNIZWxwZXIuanMiLCJhc3NldHMvc2NyaXB0cy9LUUNhcmQvS1FDYXJkU2NvcmVFeHRlbnNpb24uanMiLCJhc3NldHMvc2NyaXB0cy9LUUNhcmQvS1FDYXJkU2NvcmV0c0hlbHBlci5qcyIsImFzc2V0cy9zY3JpcHRzL0tRQ2FyZC9LUUNhcmRTZWxlY3RFeHRlbnNpb24uanMiLCJhc3NldHMvc2NyaXB0cy9LUUNhcmQvS1FDYXJkLmpzIiwiYXNzZXRzL3NjcmlwdHMvU29ja2V0L0tRR2xhYm9sU29ja2V0RXZlbnRIYW5kZXIuanMiLCJhc3NldHMvc2NyaXB0cy9FdmVudC9LUUdsb2JhbEV2ZW50LmpzIiwiYXNzZXRzL3NjcmlwdHMvVXRpbHMvS1FOYXRpdmVJbnZva2UuanMiLCJhc3NldHMvc2NyaXB0cy9DaGF0L01zZ0NvbnRyb2wuanMiLCJhc3NldHMvc2NyaXB0cy9OZXR3b3JrRXJyb3IuanMiLCJhc3NldHMvc2NyaXB0cy9FeHRlbnNpb25zL051bWJlckV4dGVuc2lvbi5qcyIsImFzc2V0cy9zY3JpcHRzL1BsYXliYWNrL1BsYXliYWNrLmpzIiwiYXNzZXRzL3NjcmlwdHMvUGxheS9QbGF5ZXIuanMiLCJhc3NldHMvc2NyaXB0cy9QbGF5L1Jlc3VsdEl0ZW0uanMiLCJhc3NldHMvc2NyaXB0cy9TZXR0aW5nL1NldHRpbmcuanMiLCJhc3NldHMvc2NyaXB0cy9FeHRlbnNpb25zL1Nwcml0ZUhlbHBlci5qcyIsImFzc2V0cy9zY3JpcHRzL0V4dGVuc2lvbnMvU3RyaW5nRXh0ZW5zaW9uLmpzIiwiYXNzZXRzL3NjcmlwdHMvUGxheS9Ub3RhbEdhbWVSZXN1bHRJdGVtLmpzIiwiYXNzZXRzL3NjcmlwdHMvUGxheS9Ub3RhbEdhbWVSZXN1bHQuanMiLCJhc3NldHMvc2NyaXB0cy9Nb2RlbFV0aWxzL1VzZXJNb2RlbEhlbHBlci5qcyIsImFzc2V0cy9zY3JpcHRzL1BsYXkvVXNlclNhbXBsZUluZm8uanMiLCJhc3NldHMvc2NyaXB0cy9hZ3JlZW1lbnQuanMiLCJhc3NldHMvc2NyaXB0cy9hbGVydC5qcyIsImFzc2V0cy9zY3JpcHRzL2NhcmRzQmFjay5qcyIsImFzc2V0cy9zY3JpcHRzL2NhcmRzLmpzIiwiYXNzZXRzL3NjcmlwdHMvY2VsbFRleHQuanMiLCJhc3NldHMvc2NyaXB0cy9jaGVja1NlbGVjdC5qcyIsImFzc2V0cy9zY3JpcHRzL2Nob3VqaWFuZy5qcyIsImFzc2V0cy9zY3JpcHRzL0V4dGVuc2lvbnMvZmVjaGEuanMiLCJhc3NldHMvc2NyaXB0cy9nYW1lLmpzIiwiYXNzZXRzL3NjcmlwdHMvaGFsbC5qcyIsImFzc2V0cy9zY3JpcHRzL2hlbHAuanMiLCJhc3NldHMvc2NyaXB0cy9pbnZpdGVDb2RlLmpzIiwiYXNzZXRzL3NjcmlwdHMvam9pblJvb20uanMiLCJhc3NldHMvc2NyaXB0cy9sYXVuY2guanMiLCJhc3NldHMvc2NyaXB0cy9sb2dpbi5qcyIsImFzc2V0cy9zY3JpcHRzL1BsYXkvbWFQYWkuanMiLCJhc3NldHMvc2NyaXB0cy9tYW5hZ2VyLmpzIiwiYXNzZXRzL3NjcmlwdHMvcGxheS5qcyIsImFzc2V0cy9zY3JpcHRzL3Byb2R1Y3QuanMiLCJhc3NldHMvc2NyaXB0cy9yYW5kUm9vbS5qcyIsImFzc2V0cy9zY3JpcHRzL3JlY29yZEluZm8uanMiLCJhc3NldHMvc2NyaXB0cy9yZWNvcmQuanMiLCJhc3NldHMvc2NyaXB0cy9ydWxlLmpzIiwiYXNzZXRzL3NjcmlwdHMvc2VsZWN0TW9TaGkuanMiLCJhc3NldHMvc2NyaXB0cy9zZWxlY3RfbWFwYWkuanMiLCJhc3NldHMvc2NyaXB0cy9zZWxlY3RfbWEuanMiLCJhc3NldHMvc2NyaXB0cy9zZWxlY3QuanMiLCJhc3NldHMvc2NyaXB0cy9zaW5nbGVTZWxlY3QuanMiLCJhc3NldHMvc2NyaXB0cy9zbGlkZXIuanMiLCJhc3NldHMvc2NyaXB0cy9zb2NrZXQuanMiLCJhc3NldHMvc2NyaXB0cy9LUUNhcmQvdGVzdC5qcyIsImFzc2V0cy9zY3JpcHRzL3VzZXJJbmZvLmpzIiwiYXNzZXRzL3NjcmlwdHMvemh1YW5OdW1DdHJsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQU47QUFFSTtBQUNFO0FBQU47QUFFSTtBQUNBO0FBQ0E7QUFDQTtBQUFKO0FBRUk7QUFDRTtBQUNBO0FBQ0U7QUFBUjtBQUNBO0FBRUk7QUFBSjtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7QUFDRTtBQUFOO0FBRUk7QUFDRTtBQUFOO0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFBSjtBQUVJO0FBQ0U7QUFDQTtBQUNFO0FBQVI7QUFDQTtBQUVJO0FBQUo7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNFO0FBQ0U7QUFDQTtBQURKO0FBQ0E7QUFHTTtBQUNFO0FBRFI7QUFDQTtBQUdNO0FBRE47QUFDQTtBQUdNO0FBRE47QUFDQTtBQUdNO0FBQ0U7QUFEUjtBQUNBO0FBQ0E7QUFDQTtBQUdNO0FBRE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR007QUFETjtBQUNBO0FBR007QUFETjtBQUNBO0FBQ0E7QUFDQTtBQUdRO0FBQ0U7QUFEVjtBQUdRO0FBRFI7QUFDQTtBQUNBO0FBR007QUFETjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDRTtBQUNFO0FBQ0E7QUFESjtBQUNBO0FBQ007QUFDRTtBQUNSO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ047QUFDTTtBQUNOO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDTjtBQUNNO0FBQ0U7QUFDUjtBQUNRO0FBQ0U7QUFDQTtBQUNFO0FBQ1o7QUFDWTtBQUNaO0FBQ0E7QUFDVTtBQUNFO0FBQ1o7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQU47QUFFSTtBQUNFO0FBQ0E7QUFDRTtBQUFSO0FBRU07QUFDRTtBQUFSO0FBRU07QUFBTjtBQUVJO0FBQ0E7QUFDRTtBQUNBO0FBQU47QUFDQTtBQUNBO0FBRUk7QUFBSjtBQUVNO0FBQU47QUFDQTtBQUVNO0FBQU47QUFDQTtBQUVNO0FBQ0U7QUFBUjtBQUNBO0FBQ0E7QUFFTTtBQUNBO0FBQ0E7QUFBTjtBQUNBO0FBRVE7QUFDRTtBQUFWO0FBQ0E7QUFDQTtBQUVRO0FBQ0U7QUFBVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU07QUFBTjtBQUNBO0FBQ0E7QUFDQTtBQUVNO0FBQU47QUFDQTtBQUVNO0FBQU47QUFFTTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQVY7QUFFVTtBQUFWO0FBRVE7QUFBUjtBQUNBO0FBRU07QUFBTjtBQUVNO0FBQU47QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNFO0FBQUY7QUFDQTtBQUFJO0FBQ0U7QUFFTjtBQUNBO0FBQUk7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNFO0FBRVY7QUFDQTtBQUFRO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFFVjtBQUFVO0FBRVY7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0o7QUFDQTtBQURNO0FBR047QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNFO0FBR0Y7QUFDQTtBQUhJO0FBS0o7QUFDQTtBQUNBO0FBSEE7QUFDRTtBQUNFO0FBQ0E7QUFLSjtBQUNBO0FBTE07QUFPTjtBQUNBO0FBTlE7QUFDQTtBQUNFO0FBUVY7QUFOUTtBQUNBO0FBQ0U7QUFRVjtBQU5VO0FBQ0E7QUFRVjtBQUNBO0FBQ0E7QUFwQk07QUFzQk47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpNO0FBY047QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFjUjtBQUNBO0FBWk07QUFDRTtBQWNSO0FBQ0E7QUFaTTtBQUNBO0FBQ0E7QUFjTjtBQVpNO0FBY047QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFjUjtBQUNBO0FBWk07QUFDRTtBQUNBO0FBY1I7QUFDQTtBQVpNO0FBY047QUFaTTtBQWNOO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUNFO0FBY1I7QUFDQTtBQVpNO0FBQ0E7QUFDRTtBQUNFO0FBY1Y7QUFDQTtBQUNBO0FBWk07QUFjTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVlBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0k7QUFDQTtBQUNaO0FBQ0E7QUFDUTtBQUNJO0FBQ0E7QUFDWjtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ1E7QUFDRTtBQUNBO0FBQ1Y7QUFDQTtBQUNRO0FBQ0U7QUFDQTtBQUNWO0FBQ0E7QUFDUTtBQUNJO0FBQ0E7QUFDWjtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDUTtBQUNHO0FBQ0E7QUFDWDtBQUNRO0FBQ0k7QUFDQTtBQUNaO0FBQ1E7QUFDRztBQUNBO0FBQ1g7QUFDUTtBQUNHO0FBQ0E7QUFDWDtBQUNRO0FBQ0c7QUFDQTtBQUNYO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ047QUFDUTtBQUNBO0FBQ0E7QUFDSTtBQUNaO0FBQ1E7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDRTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDRTtBQUNFO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQURNO0FBQ0E7QUFHTjtBQURNO0FBQ0E7QUFHTjtBQUNBO0FBREk7QUFDRTtBQUNBO0FBR047QUFDQTtBQUNBO0FBREk7QUFHSjtBQUNBO0FBSE07QUFDQTtBQUNBO0FBS047QUFDQTtBQUNBO0FBSEk7QUFDSTtBQUNBO0FBQ0k7QUFDSTtBQUtoQjtBQUNBO0FBQ0E7QUFDQTtBQUhJO0FBS0o7QUFDQTtBQUNBO0FBQ0E7QUFOTTtBQVFOO0FBTlU7QUFDQTtBQUNBO0FBQ0Y7QUFRUjtBQUNBO0FBTk07QUFDQTtBQUNBO0FBUU47QUFDQTtBQUNBO0FBTkk7QUFRSjtBQUNBO0FBUk07QUFDQTtBQUNBO0FBVU47QUFDQTtBQVJJO0FBQ0U7QUFDQTtBQVVOO0FBQ0E7QUFSSTtBQUNFO0FBQ0E7QUFVTjtBQUNBO0FBUkk7QUFDRTtBQUNBO0FBVU47QUFDQTtBQVJJO0FBQ0k7QUFDQTtBQUNFO0FBVVY7QUFDQTtBQUNBO0FBUkk7QUFDSTtBQVVSO0FBQ0E7QUFDQTtBQVJJO0FBQ0U7QUFDQTtBQUNFO0FBVVI7QUFDQTtBQVJRO0FBQ0E7QUFDQTtBQUNBO0FBVVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkk7QUFDRTtBQVVOO0FBQ0E7QUFLSTtBQUNJO0FBQ0E7QUFIUjtBQUNBO0FBS0k7QUFDSTtBQUNBO0FBSFI7QUFDQTtBQUtJO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFIWjtBQUNBO0FBS1E7QUFIUjtBQUNBO0FBQ0E7QUFLSTtBQUNJO0FBQ0E7QUFIUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0k7QUFDSTtBQUNBO0FBQ0k7QUFIWjtBQUtRO0FBSFI7QUFLUTtBQUhSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNFO0FBQ0E7QUFDRTtBQUhOO0FBS0k7QUFISjtBQUtJO0FBSEo7QUFDQTtBQUNBO0FBS0k7QUFDSTtBQUhSO0FBQ0E7QUFLSTtBQUNJO0FBSFI7QUFDQTtBQUNBO0FBS0k7QUFDSTtBQUhSO0FBS0k7QUFDSTtBQUhSO0FBS0k7QUFDSTtBQUhSO0FBS0k7QUFDSTtBQUhSO0FBS0k7QUFDSTtBQUhSO0FBQ0E7QUFDQTtBQUtBO0FBSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9UQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNSO0FBQ1E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDTTtBQUNFO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQURNO0FBR047QUFDQTtBQURJO0FBQ0U7QUFHTjtBQUNBO0FBREk7QUFDRTtBQUNBO0FBQ0U7QUFHUjtBQUNBO0FBRE07QUFHTjtBQUNBO0FBREk7QUFDRTtBQUdOO0FBRE07QUFDRTtBQUNFO0FBQ0E7QUFHVjtBQUNBO0FBRFE7QUFDQTtBQUNBO0FBR1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFEQTtBQUNJO0FBQ0E7QUFDSTtBQUdSO0FBREk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHUjtBQURRO0FBQ0E7QUFDQTtBQUNBO0FBR1I7QUFEUTtBQUNBO0FBQ0E7QUFDQTtBQUdSO0FBQ0E7QUFEUTtBQUdSO0FBRFE7QUFDQTtBQUNBO0FBR1I7QUFEUTtBQUdSO0FBQ0E7QUFDQTtBQURJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR1I7QUFDQTtBQUNBO0FBREk7QUFDSTtBQUdSO0FBQ0E7QUFESTtBQUNJO0FBQ0E7QUFDQTtBQUdSO0FBQ0E7QUFDQTtBQURJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUdaO0FBRFE7QUFHUjtBQUNBO0FBREk7QUFDSTtBQUNBO0FBQ0E7QUFHUjtBQUZZO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJWjtBQUNBO0FBRlk7QUFDQTtBQUNBO0FBQ0E7QUFJWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkk7QUFDSTtBQUNBO0FBSVI7QUFDQTtBQUNBO0FBRlE7QUFDSTtBQUlaO0FBQ0E7QUFGUTtBQUNBO0FBQ0E7QUFJUjtBQUNBO0FBRkk7QUFJSjtBQUNBO0FBQ0E7QUFMUTtBQU9SO0FBTFE7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQUNJO0FBT2hCO0FBQ0E7QUFMUTtBQUNBO0FBQ0E7QUFPUjtBQUxRO0FBQ0k7QUFPWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxJO0FBQ0k7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQU9aO0FBQ0E7QUFDQTtBQUxJO0FBT0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTFE7QUFDQTtBQUNBO0FBT1I7QUFDQTtBQUxJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFPUjtBQUNBO0FBTEk7QUFDSTtBQUNJO0FBT1o7QUFDQTtBQUxRO0FBT1I7QUFDQTtBQUxJO0FBQ0k7QUFDQTtBQU9SO0FBQ0E7QUFMSTtBQUNJO0FBQ0k7QUFDQTtBQU9aO0FBTFE7QUFPUjtBQUNBO0FBTEk7QUFDSTtBQU9SO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJSTtBQUZKO0FBSVE7QUFGUjtBQUNBO0FBSVE7QUFDQTtBQUNJO0FBRlo7QUFDQTtBQUlRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSVE7QUFGUjtBQUNBO0FBSVE7QUFDSTtBQUNJO0FBRmhCO0FBSWdCO0FBRmhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJSTtBQUZKO0FBQ0E7QUFJUTtBQUNBO0FBQ0E7QUFDSTtBQUZaO0FBSVk7QUFGWjtBQUdnQjtBQURoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHZ0I7QUFDQTtBQUNJO0FBQ0E7QUFEcEI7QUFHb0I7QUFDSTtBQUNBO0FBRHhCO0FBQ0E7QUFHb0I7QUFDSTtBQUNBO0FBRHhCO0FBQ0E7QUFJb0I7QUFDSTtBQUNBO0FBRnhCO0FBQ0E7QUFJb0I7QUFDSTtBQUNBO0FBRnhCO0FBQ0E7QUFDQTtBQUNBO0FBSVk7QUFDSTtBQUNBO0FBRmhCO0FBSWdCO0FBRmhCO0FBQ0E7QUFDQTtBQUlRO0FBQ0E7QUFDSTtBQUZaO0FBQ0E7QUFJUTtBQUZSO0FBQ0E7QUFJUTtBQUNBO0FBRlI7QUFJUTtBQUNJO0FBQ0E7QUFGWjtBQUNBO0FBQ0E7QUFJUTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFGaEI7QUFJWTtBQUZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlRO0FBRlI7QUFJUTtBQUNBO0FBRlI7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUNBO0FBSUk7QUFGSjtBQUlRO0FBQ0k7QUFGWjtBQUNBO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDQTtBQUNBO0FBRlI7QUFDQTtBQUNBO0FBSUk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUZSO0FBQ0E7QUFDQTtBQUlJO0FBRko7QUFJUTtBQUZSO0FBSVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUZaO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGUjtBQUlRO0FBQ0k7QUFGWjtBQUNBO0FBQ0E7QUFJSTtBQUNJO0FBRlI7QUFDQTtBQUlJO0FBQ0k7QUFGUjtBQUNBO0FBSUk7QUFDSTtBQUZSO0FBQ0E7QUFDQTtBQUlJO0FBQ0k7QUFDQTtBQUNBO0FBRlI7QUFJUTtBQUNBO0FBQ0E7QUFGUjtBQUNBO0FBSUk7QUFDSTtBQUNBO0FBRlI7QUFDQTtBQUlJO0FBQ0k7QUFGUjtBQUlRO0FBQ0E7QUFGUjtBQUlRO0FBQ0k7QUFDQTtBQUNBO0FBRlo7QUFDQTtBQUNBO0FBQ0E7QUFJSTtBQUZKO0FBQ0E7QUFDQTtBQUlRO0FBQ0E7QUFDSTtBQUNBO0FBRlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGUTtBQUNJO0FBQ0E7QUFDQTtBQUlaO0FBQ0E7QUFGUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJUjtBQUNBO0FBRkk7QUFDSTtBQUNJO0FBSVo7QUFGUTtBQUNBO0FBQ0k7QUFDQTtBQUNBO0FBSVo7QUFGUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZRO0FBQ0k7QUFJWjtBQUNBO0FBRlE7QUFJUjtBQUNBO0FBRkk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUlSO0FBRlk7QUFJWjtBQUZZO0FBSVo7QUFGWTtBQUlaO0FBRlE7QUFJUjtBQUNBO0FBQ0E7QUFGSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBSVI7QUFGWTtBQUNBO0FBSVo7QUFDQTtBQUZRO0FBSVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGSTtBQUNJO0FBQ0k7QUFJWjtBQUZZO0FBSVo7QUFGWTtBQUlaO0FBRlE7QUFJUjtBQUNBO0FBQ0E7QUFGSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBSVI7QUFDQTtBQUZJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBSVo7QUFDQTtBQUNBO0FBRkk7QUFDSTtBQUNBO0FBSVI7QUFDQTtBQUZJO0FBQ0k7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUlaO0FBRlE7QUFDSTtBQUlaO0FBRlk7QUFJWjtBQUZZO0FBQ0k7QUFJaEI7QUFDQTtBQUNBO0FBRlE7QUFJUjtBQUNBO0FBRkk7QUFDSTtBQUNBO0FBSVI7QUFGUTtBQUlSO0FBQ0E7QUFGSTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBSWhCO0FBRmdCO0FBSWhCO0FBQ0E7QUFDQTtBQUNBO0FBRkk7QUFJSjtBQUNBO0FBSlE7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBTWhCO0FBQ0E7QUFKWTtBQU1aO0FBQ0E7QUFDQTtBQUpJO0FBQ0k7QUFDQTtBQUNJO0FBTVo7QUFDQTtBQUNBO0FBQ0E7QUFKSTtBQU1KO0FBSlE7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQU1aO0FBQ0E7QUFKUTtBQUNBO0FBTVI7QUFDQTtBQUhRO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFLaEI7QUFDQTtBQUhZO0FBQ0k7QUFDQTtBQUNBO0FBS2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhRO0FBQ0k7QUFDQTtBQUNBO0FBS1o7QUFDQTtBQUNBO0FBQ0E7QUFISTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBS1o7QUFIUTtBQUNJO0FBS1o7QUFDQTtBQUNBO0FBSEk7QUFDSTtBQUNBO0FBQ0k7QUFLWjtBQUNBO0FBQ0E7QUFDQTtBQUhJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFLUjtBQUhRO0FBQ0k7QUFLWjtBQUNBO0FBSFk7QUFLWjtBQUhnQjtBQUtoQjtBQUhvQjtBQUNBO0FBQ0E7QUFLcEI7QUFDQTtBQUNBO0FBSG9CO0FBQ0E7QUFDQTtBQUtwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSFE7QUFDSTtBQUtaO0FBQ0E7QUFIWTtBQUtaO0FBSGdCO0FBS2hCO0FBSG9CO0FBS3BCO0FBSHdCO0FBQ0E7QUFDQTtBQUt4QjtBQUNBO0FBQ0E7QUFId0I7QUFDQTtBQUNBO0FBS3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSFE7QUFDSTtBQUtaO0FBQ0E7QUFIWTtBQUtaO0FBSGdCO0FBS2hCO0FBSG9CO0FBS3BCO0FBSHdCO0FBQ0E7QUFDQTtBQUt4QjtBQUNBO0FBQ0E7QUFId0I7QUFDQTtBQUNBO0FBS3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFISTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBS1o7QUFIUTtBQUtSO0FBQ0E7QUFISTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBS1o7QUFDQTtBQUhRO0FBS1I7QUFDQTtBQUhJO0FBQ0k7QUFDQTtBQUNJO0FBQ0E7QUFLWjtBQUhRO0FBS1I7QUFDQTtBQUhJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQUtoQjtBQUNBO0FBQ0E7QUFIUTtBQUtSO0FBQ0E7QUFISTtBQUtKO0FBQ0E7QUFMUTtBQUNBO0FBQ0k7QUFPWjtBQUNBO0FBTFE7QUFDQTtBQUNBO0FBQ0k7QUFPWjtBQUNBO0FBTFE7QUFDSTtBQU9aO0FBQ0E7QUFMUTtBQUNJO0FBT1o7QUFDQTtBQUxRO0FBQ0k7QUFPWjtBQUNBO0FBTFE7QUFDSTtBQU9aO0FBTFk7QUFPWjtBQUNBO0FBTFE7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQU9aO0FBQ0E7QUFMUTtBQU9SO0FBTFE7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFPcEI7QUFDQTtBQUxZO0FBQ0E7QUFPWjtBQUNBO0FBTFE7QUFDSTtBQU9aO0FBTFE7QUFDQTtBQU9SO0FBTFE7QUFPUjtBQUxRO0FBQ0E7QUFPUjtBQUNBO0FBQ0E7QUFKSTtBQU1KO0FBQ0E7QUFOUTtBQUNBO0FBUVI7QUFOUTtBQVFSO0FBTlE7QUFDQTtBQVFSO0FBTlE7QUFDSTtBQUNBO0FBUVo7QUFDQTtBQUNBO0FBQ0E7QUFOSTtBQUNJO0FBQ0E7QUFRUjtBQU5RO0FBQ0E7QUFRUjtBQUNBO0FBQ0E7QUFDQTtBQU5JO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBUVo7QUFDQTtBQU5RO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRUjtBQUNBO0FBQ0E7QUFOSTtBQUNJO0FBUVI7QUFDQTtBQUNBO0FBTkk7QUFDSTtBQVFSO0FBQ0E7QUFDQTtBQU5JO0FBQ0k7QUFRUjtBQUNBO0FBTkk7QUFDSTtBQUNJO0FBUVo7QUFDQTtBQU5RO0FBQ0k7QUFDQTtBQVFaO0FBQ0E7QUFOUTtBQVFSO0FBQ0E7QUFDQTtBQU5JO0FBQ0k7QUFDQTtBQUNBO0FBUVI7QUFDQTtBQU5JO0FBQ0k7QUFRUjtBQUNBO0FBQ0E7QUFOSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcGpDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBRFI7QUFDQTtBQUNBO0FBR0k7QUFDRTtBQUROO0FBQ0E7QUFHSTtBQUNFO0FBRE47QUFDQTtBQUdJO0FBQ0U7QUFDQTtBQUNFO0FBRFI7QUFDQTtBQUdNO0FBRE47QUFDQTtBQUdJO0FBQ0U7QUFETjtBQUdNO0FBQ0U7QUFDRTtBQUNBO0FBRFY7QUFDQTtBQUdRO0FBQ0E7QUFDQTtBQURSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQURKO0FBQ0E7QUFDQTtBQUFNO0FBQ0U7QUFFUjtBQUNBO0FBQU07QUFFTjtBQUFNO0FBQ0E7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBTTtBQUNBO0FBRU47QUFBTTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBRVI7QUFDQTtBQUFNO0FBQ0E7QUFFTjtBQUFNO0FBQ0E7QUFFTjtBQUFNO0FBQ0U7QUFDQTtBQUVSO0FBQ0E7QUFDQTtBQUFJO0FBQ0U7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDRTtBQUNFO0FBQ0E7QUFFSjtBQUNBO0FBQUU7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBRUk7QUFBSjtBQUlJO0FBQ0U7QUFGTjtBQUNBO0FBSUk7QUFDRTtBQUZOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBRVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFUTtBQUNBO0FBQ0E7QUFBUjtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFDQTtBQUFSO0FBRVE7QUFDSTtBQUFaO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUFaO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBQWhCO0FBRVk7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQUNJO0FBQXBCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFBWjtBQUVZO0FBQVo7QUFDQTtBQUNBO0FBR1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURSO0FBQ0E7QUFDQTtBQUNBO0FBSUk7QUFDSTtBQUNJO0FBRlo7QUFDQTtBQUlRO0FBQ0E7QUFDSTtBQUZaO0FBQ0E7QUFJUTtBQUZSO0FBQ0E7QUFJSTtBQUNJO0FBQ0k7QUFDSTtBQUZoQjtBQUNBO0FBSVE7QUFDQTtBQUNBO0FBQ0k7QUFGWjtBQUtZO0FBSFo7QUFLUTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBSFo7QUFDQTtBQU1JO0FBSko7QUFNUTtBQUNBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFKWjtBQUNBO0FBTUk7QUFKSjtBQUNBO0FBTVE7QUFKUjtBQU1RO0FBQ0k7QUFDQTtBQUNJO0FBQ0E7QUFKaEI7QUFDQTtBQUNBO0FBT1E7QUFDQTtBQUNJO0FBQ0k7QUFMaEI7QUFDQTtBQU9ZO0FBTFo7QUFPWTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQUx4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTSTtBQUNJO0FBQ0k7QUFDQTtBQVBaO0FBQ0E7QUFTUTtBQUNJO0FBQ0E7QUFDQTtBQVBaO0FBQ0E7QUFTUTtBQUNJO0FBQ0E7QUFDSTtBQVBoQjtBQUNBO0FBQ0E7QUFDQTtBQVNJO0FBQ0k7QUFDSTtBQVBaO0FBU1E7QUFDQTtBQUNJO0FBUFo7QUFVWTtBQUNBO0FBQ0k7QUFSaEI7QUFDQTtBQVVRO0FBQ0E7QUFDQTtBQVJSO0FBQ0E7QUFXSTtBQUNJO0FBQ0k7QUFUWjtBQVdRO0FBQ0E7QUFDSTtBQVRaO0FBV1k7QUFDQTtBQUNJO0FBVGhCO0FBQ0E7QUFXUTtBQUNBO0FBQ0E7QUFUUjtBQUNBO0FBV0k7QUFDSTtBQUNJO0FBVFo7QUFXUTtBQUNBO0FBQ0k7QUFUWjtBQVdZO0FBQ0E7QUFDSTtBQVRoQjtBQUNBO0FBQ0E7QUFXUTtBQUNBO0FBVFI7QUFDQTtBQVdJO0FBQ0k7QUFDQTtBQUNJO0FBVFo7QUFDQTtBQVdRO0FBQ0k7QUFUWjtBQVdZO0FBVFo7QUFXWTtBQVRaO0FBQ0E7QUFDQTtBQVlJO0FBQ0k7QUFDQTtBQUNBO0FBVlI7QUFDQTtBQVlJO0FBQ0k7QUFDSTtBQVZaO0FBQ0E7QUFDQTtBQVlJO0FBQ0k7QUFDQTtBQUNJO0FBVlo7QUFDQTtBQUNBO0FBWUk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVlI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JUQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ1I7QUFDUTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ1o7QUFDQTtBQUNRO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ1E7QUFDSTtBQUNaO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pEQSxBRDBEQTtBQ3pEQSxBRDBEQTtBQ3pEQSxBRDBEQTtBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3dkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7QUFDQTtBQUVBO0FBQ0U7QUFBRjtBQUVFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFBSjtBQUVJO0FBQUo7QUFFSTtBQUNBO0FBQ0E7QUFBSjtBQUNBO0FBQ0E7QUFFRTtBQUNFO0FBQUo7QUFDQTtBQUVFO0FBQ0U7QUFDQTtBQUFKO0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFKO0FBRUk7QUFDRTtBQUFOO0FBRU07QUFBTjtBQUNBO0FBRUk7QUFDQTtBQUNFO0FBQU47QUFDQTtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFDQTtBQUNFO0FBQVI7QUFDQTtBQUVNO0FBQ0E7QUFDQTtBQUNBO0FBQU47QUFDQTtBQUNBO0FBRUU7QUFDRTtBQUFKO0FBQ0E7QUFFRTtBQUNFO0FBQ0U7QUFBTjtBQUVNO0FBQU47QUFDQTtBQUVJO0FBQUo7QUFDQTtBQUVFO0FBQ0U7QUFDRTtBQUFOO0FBQ0E7QUFDQTtBQUVFO0FBQ0U7QUFDQTtBQUNFO0FBQU47QUFDQTtBQUVJO0FBQ0E7QUFBSjtBQUVNO0FBQU47QUFDQTtBQUVJO0FBQ0U7QUFBTjtBQUVNO0FBQU47QUFDQTtBQUVJO0FBQUo7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEhBO0FBQ0E7QUFDQztBQUNHO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFDWjtBQUNZO0FBQ1o7QUFDUTtBQUNJO0FBQ1o7QUFDWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ0U7QUFDUjtBQUNRO0FBQ1I7QUFDTTtBQUNBO0FBQ0E7QUFDRTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFBTTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFFUjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFDRTtBQUVSO0FBQ0E7QUFDQTtBQUFJO0FBQ0U7QUFDQTtBQUNFO0FBRVI7QUFDQTtBQUNBO0FBQUk7QUFDRTtBQUNFO0FBQ0E7QUFFRTtBQUNWO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ1Y7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDSjtBQUNBO0FBQ0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNFO0FBQ1I7QUFDQTtBQUNRO0FBQ1I7QUFDQTtBQUNJO0FBQ0E7QUFDRTtBQUNOO0FBQ0E7QUFDQTtBQUNFO0FBQ0Y7QUFDRTtBQUNGO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNKO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFDUjtBQUNNO0FBQ047QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDSjtBQUNFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRjtBQUNFO0FBQ0U7QUFDSTtBQUNSO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDWjtBQUNZO0FBQ1o7QUFDQTtBQUNRO0FBQ0U7QUFDRTtBQUNaO0FBQ1U7QUFDVjtBQUNBO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFHRTtBQUNBO0FBQ0U7QUFESjtBQUdFO0FBREY7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNFO0FBQ0U7QUFESjtBQUdFO0FBREY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRTtBQUNBO0FBQ0U7QUFETjtBQUNBO0FBQ0E7QUFHUTtBQUNBO0FBRFI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdJO0FBQ0E7QUFDRTtBQUROO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNBO0FBREY7QUFDQTtBQUNBO0FBR0E7QUFEQTtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDSjtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ047QUFDQTtBQUVFO0FBQ0U7QUFBSjtBQUVJO0FBQUo7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFFO0FBQ0U7QUFFSjtBQUFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNFO0FBQ0E7QUFFUjtBQUNBO0FBQ007QUFDRTtBQUNBO0FBQ1I7QUFDQTtBQUNNO0FBQ0U7QUFDQTtBQUNSO0FBQ0E7QUFDTTtBQUNFO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUNSO0FBQ007QUFDTjtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ047QUFBUTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUVkO0FBQ0E7QUFDQTtBQUFRO0FBQ0E7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREU7QUFDRTtBQUdKO0FBREk7QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUNBO0FBR1Y7QUFDQTtBQURNO0FBR047QUFESTtBQUdKO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUhFO0FBQ0U7QUFLSjtBQUhFO0FBQ0E7QUFLRjtBQUhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNFO0FBQ0E7QUFLUjtBQUNBO0FBRk07QUFDRTtBQUNBO0FBSVI7QUFDQTtBQUZNO0FBQ0U7QUFDQTtBQUlSO0FBQ0E7QUFGTTtBQUNFO0FBQ0E7QUFJUjtBQUNBO0FBQ0E7QUFDQTtBQUZFO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUlSO0FBRk07QUFJTjtBQUNBO0FBRkU7QUFJRjtBQUZFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUlSO0FBQ0E7QUFDQTtBQUxVO0FBQ0k7QUFPZDtBQU5VO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBUWhCO0FBQ0E7QUFDQTtBQUxVO0FBT1Y7QUFMVTtBQU9WO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMRTtBQUNBO0FBQ0E7QUFDRTtBQU9KO0FBTEk7QUFDQTtBQUNFO0FBT047QUFMSTtBQU9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBQ0U7QUFDQTtBQUNFO0FBT0o7QUFMRTtBQU9GO0FBTEU7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPTjtBQUNBO0FBTEU7QUFDRTtBQU9KO0FBTEU7QUFDQTtBQU9GO0FBQ0E7QUFMQTtBQUNFO0FBQ0U7QUFPSjtBQUxFO0FBQ0E7QUFPRjtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFQRTtBQUNFO0FBU0o7QUFQRTtBQUNFO0FBU0o7QUFDQTtBQVBFO0FBQ0U7QUFTSjtBQVBFO0FBU0Y7QUFDQTtBQVBFO0FBQ0U7QUFTSjtBQVBFO0FBQ0U7QUFDQTtBQUNBO0FBU0o7QUFDQTtBQVBFO0FBU0Y7QUFDQTtBQVBFO0FBQ0U7QUFDQTtBQVNKO0FBUk07QUFDQTtBQUNFO0FBVVI7QUFSVTtBQUNFO0FBVVo7QUFDQTtBQVJVO0FBVVY7QUFSUTtBQVVSO0FBQ0E7QUFSTTtBQUNBO0FBVU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEU7QUFDQTtBQUNFO0FBV0o7QUFDQTtBQVRFO0FBQ0U7QUFXSjtBQUNBO0FBVEU7QUFXRjtBQVRBO0FBV0E7QUFDQTtBQVhFO0FBQ0U7QUFhSjtBQVhFO0FBQ0E7QUFhRjtBQVhFO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQWFOO0FBQ0E7QUFDQTtBQVhFO0FBQ0U7QUFhSjtBQVhFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBYU47QUFDQTtBQUNBO0FBZFE7QUFDSTtBQWdCWjtBQWZRO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBaUJkO0FBQ0E7QUFDQTtBQUNBO0FBZFE7QUFDQTtBQWdCUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkU7QUFDRTtBQWlCSjtBQWZJO0FBQ0E7QUFDRTtBQWlCTjtBQWZJO0FBaUJKO0FBQ0E7QUFmQTtBQUNFO0FBQ0E7QUFDRTtBQUNFO0FBaUJOO0FBQ0E7QUFmSTtBQUNFO0FBQ0U7QUFDRTtBQWlCVjtBQWZRO0FBQ0U7QUFpQlY7QUFmUTtBQWlCUjtBQUNBO0FBZk07QUFDRTtBQWlCUjtBQUNBO0FBZk07QUFDQTtBQUNBO0FBaUJOO0FBQ0E7QUFDQTtBQWZFO0FBaUJGO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFpQkE7QUFDQTtBQWpCRTtBQUNFO0FBbUJKO0FBQ0E7QUFqQkU7QUFDQTtBQW1CRjtBQWpCRTtBQUNBO0FBQ0U7QUFDQTtBQW1CSjtBQWxCTTtBQUNBO0FBQ0U7QUFDRTtBQW9CVjtBQWxCVTtBQW9CVjtBQUNBO0FBbEJNO0FBQ0E7QUFvQk47QUFDQTtBQUNBO0FBbkJFO0FBcUJGO0FBbkJBO0FBQ0U7QUFDRTtBQXFCSjtBQW5CRTtBQUNBO0FBcUJGO0FBbkJFO0FBcUJGO0FBbkJFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQXFCTjtBQUNBO0FBQ0E7QUF0QlE7QUFDSTtBQXdCWjtBQXZCUTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQXlCZDtBQUNBO0FBQ0E7QUFDQTtBQXRCUTtBQUNBO0FBd0JSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2QkU7QUF5QkY7QUFDQTtBQXZCQTtBQUNFO0FBQ0E7QUFDRTtBQXlCSjtBQUNBO0FBdEJFO0FBQ0E7QUFDQTtBQXdCRjtBQUNBO0FBQ0E7QUF0QkU7QUFDRTtBQUNFO0FBQ0U7QUF3QlI7QUF0QlE7QUFDQTtBQXdCUjtBQXRCUTtBQXdCUjtBQUNBO0FBQ0E7QUF0Qkk7QUFDRTtBQUNFO0FBd0JSO0FBQ0E7QUFDQTtBQUNBO0FBdEJRO0FBQ0E7QUF3QlI7QUFDQTtBQUNBO0FBQ0E7QUF0QlE7QUF3QlI7QUFDQTtBQUNBO0FBQ0E7QUFwQkU7QUFDRTtBQXNCSjtBQXBCRTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBc0JaO0FBQ0E7QUFwQlE7QUFDRTtBQXNCVjtBQUNBO0FBcEJNO0FBQ0U7QUFzQlI7QUFDQTtBQUNBO0FBcEJFO0FBQ0U7QUFzQko7QUFwQkU7QUFzQkY7QUFwQkE7QUFDRTtBQUNBO0FBQ0U7QUFzQko7QUFwQkU7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQXNCSjtBQXBCRTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFzQk47QUFDQTtBQUNBO0FBcEJFO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQXNCTjtBQUNBO0FBQ0E7QUFwQkU7QUFDRTtBQXNCSjtBQXBCRTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBc0JaO0FBQ0E7QUFwQlE7QUFDRTtBQXNCVjtBQUNBO0FBcEJNO0FBQ0U7QUFzQlI7QUFDQTtBQUNBO0FBcEJFO0FBQ0U7QUFzQko7QUFwQkU7QUFzQkY7QUFDQTtBQXBCQTtBQXNCQTtBQUNBO0FBdEJFO0FBd0JGO0FBdkJJO0FBQ0U7QUFDQTtBQUNFO0FBeUJSO0FBQ0E7QUFDQTtBQUNBO0FBdkJFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBeUJOO0FBeEJRO0FBQ0U7QUFDQTtBQUNFO0FBMEJaO0FBQ0E7QUFDQTtBQXhCUTtBQUNBO0FBQ0U7QUEwQlY7QUFDQTtBQUNBO0FBQ0E7QUF4QkU7QUFDRTtBQTBCSjtBQXhCRTtBQUNBO0FBMEJGO0FBQ0E7QUF4QkE7QUFDRTtBQUNFO0FBMEJKO0FBeEJJO0FBQ0E7QUEwQko7QUF6Qk07QUFDRTtBQTJCUjtBQXpCUTtBQUNBO0FBMkJSO0FBQ0E7QUFDQTtBQXpCSTtBQUNJO0FBQ0E7QUFDQTtBQUNGO0FBQ0k7QUFDQTtBQTJCVjtBQXpCTTtBQTJCTjtBQTFCUTtBQUNBO0FBNEJSO0FBQ0E7QUFDQTtBQXpCRTtBQTJCRjtBQUNBO0FBeEJBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFXQTtBQWdCRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvMkJBO0FBQ0E7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0o7QUFDVTtBQUNWO0FBQ0E7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNFO0FBQ0U7QUFDSjtBQUNBO0FBQ0U7QUFDRTtBQUNFO0FBQ047QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDSjtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0k7QUFDRTtBQUNFO0FBQ0E7QUFDUjtBQUNBO0FBQ007QUFDQTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDTjtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQ0E7QUFDRTtBQUNFO0FBQ047QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUNOO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0o7QUFDSTtBQUNFO0FBQ047QUFDTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUVJO0FBQUo7QUFDTTtBQUNOO0FBQ0k7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDTjtBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQU47QUFDUTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ1I7QUFDQTtBQUVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBSjtBQUNBO0FBR0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBRE47QUFFUTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQVI7QUFDQTtBQUNBO0FBR0k7QUFDRTtBQUNBO0FBRE47QUFDQTtBQUdJO0FBQ0E7QUFESjtBQUNBO0FBS0k7QUFDQTtBQUhKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBSE47QUFLSTtBQUhKO0FBQ0E7QUFNSTtBQUpKO0FBS007QUFITjtBQUtJO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFITjtBQUtNO0FBQ0E7QUFITjtBQUtJO0FBSEo7QUFDQTtBQUNBO0FBTUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFKTjtBQUtRO0FBQ0E7QUFIUjtBQUtRO0FBQ0E7QUFIUjtBQUtRO0FBQ0E7QUFIUjtBQUtRO0FBQ0E7QUFDRTtBQUhWO0FBS1U7QUFIVjtBQUNBO0FBQ0E7QUFLSTtBQUNFO0FBQ0E7QUFITjtBQUtJO0FBQ0E7QUFISjtBQUNBO0FBQ0E7QUFPSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFMTjtBQU1RO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUpaO0FBQ0E7QUFDQTtBQVFRO0FBTlI7QUFPVTtBQUNFO0FBQ0E7QUFMWjtBQU9ZO0FBQ0E7QUFMWjtBQUNBO0FBQ0E7QUFDQTtBQVVJO0FBQ0E7QUFDQTtBQUNBO0FBUko7QUFDQTtBQUNBO0FBV0k7QUFDQTtBQUNBO0FBQ0E7QUFUSjtBQVdJO0FBQ0U7QUFDRTtBQVRSO0FBV007QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFUVjtBQVdVO0FBVFY7QUFDQTtBQVdNO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFUUjtBQVdNO0FBQ0E7QUFUTjtBQUNBO0FBV0k7QUFDRTtBQVROO0FBVVE7QUFSUjtBQVNVO0FBQ0U7QUFDQTtBQUNBO0FBUFo7QUFDQTtBQUNBO0FBVVE7QUFSUjtBQVNVO0FBQ0U7QUFDQTtBQUNBO0FBUFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0k7QUFDRTtBQUNBO0FBVE47QUFXSTtBQUNBO0FBVEo7QUFDQTtBQVlJO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBVk47QUFZSTtBQUNFO0FBQ0E7QUFWTjtBQVlJO0FBQ0E7QUFWSjtBQUNBO0FBYUU7QUFDQTtBQUNFO0FBWEo7QUFDQTtBQWFFO0FBQ0E7QUFYRjtBQWFBO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFYTjtBQUNBO0FBYUU7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFYUjtBQUNBO0FBQ0E7QUFDQTtBQWNFO0FBWkY7QUFhSTtBQUNFO0FBQ0U7QUFYUjtBQUNBO0FBQ0E7QUFhRTtBQVhGO0FBWUk7QUFDRTtBQVZOO0FBQ0E7QUFZSTtBQUNBO0FBQ0U7QUFDQTtBQVZOO0FBWUk7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQVZWO0FBQ0E7QUFDQTtBQVlJO0FBVko7QUFXTTtBQUNFO0FBVFI7QUFDQTtBQUNBO0FBQ0E7QUFVSTtBQUNFO0FBUk47QUFVSTtBQUNBO0FBUko7QUFTTTtBQVBOO0FBU0k7QUFDQTtBQUNFO0FBQ0E7QUFQTjtBQVNJO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFQVjtBQUNBO0FBQ0E7QUFTSTtBQUNBO0FBQ0E7QUFDQTtBQVBKO0FBUU07QUFDRTtBQU5SO0FBQ0E7QUFRSTtBQU5KO0FBQ0E7QUFRRTtBQUNFO0FBQ0U7QUFOTjtBQUNBO0FBUUU7QUFDRTtBQU5KO0FBUUU7QUFORjtBQUNBO0FBUUE7QUFDRTtBQUNFO0FBTko7QUFRRTtBQUNFO0FBTko7QUFRRTtBQUNBO0FBTkY7QUFRRTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFOTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUU7QUFORjtBQUNBO0FBUUE7QUFDRTtBQUNBO0FBQ0U7QUFOSjtBQVFJO0FBTko7QUFRSTtBQU5KO0FBUUk7QUFOSjtBQVFJO0FBTko7QUFRSTtBQU5KO0FBUUk7QUFOSjtBQVFJO0FBTko7QUFRSTtBQU5KO0FBQ0E7QUFRRTtBQU5GO0FBQ0E7QUFDQTtBQVFBO0FBQ0U7QUFDRTtBQU5KO0FBUUU7QUFDRTtBQU5KO0FBUUk7QUFOSjtBQVFJO0FBTko7QUFRSTtBQU5KO0FBUUk7QUFOSjtBQVFJO0FBTko7QUFRSTtBQU5KO0FBUUk7QUFOSjtBQVFJO0FBTko7QUFDQTtBQVFFO0FBTkY7QUFDQTtBQVFBO0FBQ0U7QUFORjtBQUNBO0FBUUE7QUFDRTtBQU5GO0FBQ0E7QUFDQTtBQVFBO0FBQ0U7QUFORjtBQUNBO0FBQ0E7QUFRQTtBQUNFO0FBTkY7QUFDQTtBQVFBO0FBQ0U7QUFORjtBQUNBO0FBUUE7QUFDRTtBQU5GO0FBQ0E7QUFRQTtBQUNFO0FBTkY7QUFDQTtBQVFBO0FBQ0U7QUFORjtBQUNBO0FBUUE7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQU5KO0FBUUk7QUFDRTtBQU5OO0FBQ0E7QUFRSTtBQU5KO0FBQ0E7QUFRRTtBQU5GO0FBQ0E7QUFRQTtBQU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvaUJBO0FBQ0E7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0o7QUFDVTtBQUNWO0FBQ0E7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNJO0FBQ0k7QUFDSTtBQUNaO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQVdJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQVRaO0FBQ0E7QUFDQTtBQVdJO0FBQ0E7QUFUSjtBQVdRO0FBQ0E7QUFDSTtBQVRaO0FBQ0E7QUFTWTtBQUNBO0FBQ0k7QUFDQTtBQVBoQjtBQUNBO0FBQ0E7QUFDQTtBQVNJO0FBQ0k7QUFQUjtBQUNBO0FBU0k7QUFDSTtBQUNBO0FBQ0k7QUFQWjtBQUNBO0FBU1E7QUFQUjtBQUNBO0FBU0k7QUFQSjtBQUNBO0FBU0E7QUFQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQW9CO0FBRTVCO0FBRFE7QUFBb0I7QUFJNUI7QUFIUTtBQUFvQjtBQU01QjtBQUxRO0FBQW9CO0FBUTVCO0FBQ0E7QUFQUTtBQUNBO0FBQ0E7QUFDQTtBQVNSO0FBUFE7QUFDQTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFDSTtBQVNaO0FBUFk7QUFTWjtBQUNBO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFTSjtBQUNBO0FBQ0E7QUFWUTtBQVlSO0FBQ0E7QUFWSTtBQUNJO0FBQ0k7QUFZWjtBQVZRO0FBWVI7QUFDQTtBQVRJO0FBQ0k7QUFDQTtBQVdSO0FBQ0E7QUFUSTtBQUNBO0FBQ0k7QUFDQTtBQVdSO0FBQ0E7QUFUSTtBQVdKO0FBVFE7QUFDQTtBQUNJO0FBQ0E7QUFXWjtBQVRZO0FBQ0E7QUFDQTtBQVdaO0FBQ0E7QUFUUTtBQVdSO0FBQ0E7QUFUSTtBQUNJO0FBQ0E7QUFXUjtBQUNBO0FBVEk7QUFXSjtBQUNBO0FBQ0E7QUFUQTtBQUNJO0FBQ0k7QUFDQTtBQVdSO0FBQ0E7QUFDQTtBQVRBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFUQTtBQVdBO0FBVEE7QUFDSTtBQUNJO0FBV1I7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQUNJO0FBQ0k7QUFXUjtBQUNBO0FBQ0E7QUFUQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdKO0FBVEk7QUFXSjtBQVRJO0FBQ0E7QUFDQTtBQVdKO0FBVEk7QUFDQTtBQVdKO0FBVEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdKO0FBQ0E7QUFDQTtBQVRBO0FBQ0k7QUFHQTtBQUNBO0FBU0o7QUFDQTtBQUNBO0FBUEE7QUFDSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQUNJO0FBU1I7QUFDQTtBQVBJO0FBQ0k7QUFTUjtBQUNBO0FBUEk7QUFDSTtBQVNSO0FBQ0E7QUFQSTtBQVNKO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQVRJO0FBQ0k7QUFXUjtBQUNBO0FBVEk7QUFDSTtBQVdSO0FBQ0E7QUFUSTtBQUNBO0FBQ0k7QUFDQTtBQUNJO0FBV1o7QUFDQTtBQVRJO0FBV0o7QUFDQTtBQUNBO0FBVEE7QUFXQTtBQUNBO0FBWEk7QUFDSTtBQWFSO0FBWEk7QUFDSTtBQWFSO0FBWEk7QUFhSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQUNJO0FBQ0k7QUFhUjtBQVhJO0FBQ0E7QUFDQTtBQWFKO0FBWEk7QUFDSTtBQUNBO0FBQ0k7QUFDQTtBQUNJO0FBYWhCO0FBQ0E7QUFDQTtBQVhJO0FBYUo7QUFDQTtBQVhBO0FBYUE7QUFDQTtBQWJJO0FBQ0k7QUFlUjtBQUNBO0FBYkk7QUFDSTtBQWVSO0FBQ0E7QUFiSTtBQUNJO0FBZVI7QUFiUTtBQWVSO0FBQ0E7QUFiSTtBQUNBO0FBQ0k7QUFDQTtBQUNJO0FBZVo7QUFDQTtBQWJRO0FBZVI7QUFDQTtBQWJJO0FBZUo7QUFDQTtBQUNBO0FBYkE7QUFDSTtBQUNBO0FBQ0k7QUFlUjtBQUNBO0FBYkk7QUFDQTtBQUNBO0FBZUo7QUFiSTtBQUNJO0FBQ0E7QUFlUjtBQUNBO0FBYkk7QUFlSjtBQUNBO0FBQ0E7QUFDQTtBQWJBO0FBZUE7QUFiUTtBQUNBO0FBQ0k7QUFlWjtBQUNBO0FBYlE7QUFDSTtBQWVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQkk7QUE0Qko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXJCSTtBQXVCSjtBQXJCQTtBQUNJO0FBQ0k7QUF1QlI7QUFyQkk7QUF1Qko7QUF0QlE7QUFDSTtBQXdCWjtBQUNBO0FBdEJJO0FBd0JKO0FBQ0E7QUF0QkE7QUF3QkE7QUFDQTtBQXhCSTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0k7QUEwQlI7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhCQTtBQUNJO0FBMEJKO0FBQ0E7QUFDQTtBQXhCQTtBQTBCQTtBQUNBO0FBMUJJO0FBQ0k7QUE0QlI7QUExQkk7QUFDSTtBQTRCUjtBQTFCSTtBQTRCSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDQTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0E7QUFDSTtBQTBCUjtBQUNBO0FBQ0E7QUFDQTtBQXhCSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQTBCWjtBQXhCWTtBQTBCWjtBQXhCWTtBQTBCWjtBQXhCWTtBQTBCWjtBQUNBO0FBeEJJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQTBCWjtBQUNBO0FBeEJJO0FBQ0k7QUFDSTtBQTBCWjtBQUNBO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDQTtBQUNJO0FBMEJSO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBQ0E7QUF4QkE7QUEwQkE7QUF4Qkk7QUFDQTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0E7QUFDSTtBQTBCUjtBQXhCSTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0k7QUEwQlI7QUF4QlE7QUEwQlI7QUF4Qkk7QUFDSTtBQUNJO0FBMEJaO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDQTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0E7QUFDSTtBQTBCUjtBQXhCSTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBMEJaO0FBeEJZO0FBMEJaO0FBeEJZO0FBMEJaO0FBeEJZO0FBMEJaO0FBQ0E7QUF4Qkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBMEJaO0FBQ0E7QUFDQTtBQUNBO0FBeEJJO0FBQ0k7QUEwQlI7QUFDQTtBQUNBO0FBeEJJO0FBQ0k7QUFDSTtBQUNJO0FBMEJoQjtBQUNBO0FBeEJRO0FBMEJSO0FBQ0E7QUFDQTtBQXhCUTtBQUNJO0FBQ0k7QUEwQmhCO0FBQ0E7QUFDQTtBQXhCUTtBQTBCUjtBQUNBO0FBQ0E7QUF4QlE7QUFDSTtBQTBCWjtBQUNBO0FBQ0E7QUFDQTtBQXhCQTtBQUNJO0FBQ0E7QUFDSTtBQTBCUjtBQXhCSTtBQUNBO0FBQ0k7QUEwQlI7QUF4Qkk7QUFDSTtBQTBCUjtBQXhCSTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBMEJaO0FBeEJZO0FBMEJaO0FBQ0E7QUFDQTtBQUNBO0FBeEJJO0FBQ0k7QUEwQlI7QUFDQTtBQUNBO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDQTtBQUNJO0FBMEJSO0FBQ0E7QUF4Qkk7QUEwQko7QUF4Qkk7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUEwQlo7QUF2Qlk7QUF5Qlo7QUF0Qlk7QUF3Qlo7QUFDQTtBQXRCSTtBQXdCSjtBQUNBO0FBdEJBO0FBQ0k7QUFDQTtBQUNJO0FBd0JSO0FBQ0E7QUF0Qkk7QUFDQTtBQXdCSjtBQXRCSTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQXdCWjtBQXJCWTtBQXVCWjtBQXBCWTtBQXNCWjtBQUNBO0FBcEJJO0FBc0JKO0FBQ0E7QUFwQkE7QUFDSTtBQUNJO0FBc0JSO0FBQ0E7QUFDQTtBQXBCSTtBQUNJO0FBc0JSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFwQkk7QUFDSTtBQXNCUjtBQUNBO0FBcEJJO0FBQ0k7QUFzQlI7QUFwQkk7QUFDSTtBQUNJO0FBc0JaO0FBQ0E7QUFwQlE7QUFDSTtBQXNCWjtBQXBCUTtBQUNJO0FBQ0k7QUFzQmhCO0FBQ0E7QUFwQlk7QUFDSTtBQXNCaEI7QUFwQlk7QUFDSTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBc0J4QjtBQUNBO0FBcEJnQjtBQUNJO0FBc0JwQjtBQUNBO0FBcEJnQjtBQUNJO0FBQ0k7QUFDQTtBQXNCeEI7QUFDQTtBQXBCZ0I7QUFzQmhCO0FBcEJnQjtBQXNCaEI7QUFDQTtBQXBCWTtBQXNCWjtBQUNBO0FBcEJRO0FBc0JSO0FBQ0E7QUFDQTtBQUNBO0FBcEJBO0FBQ0k7QUFDSTtBQXNCUjtBQXBCWTtBQXNCWjtBQUNBO0FBcEJJO0FBc0JKO0FBQ0E7QUFwQkE7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBc0JaO0FBcEJRO0FBQ0k7QUFzQlo7QUFwQlE7QUFDQTtBQXNCUjtBQXBCWTtBQXNCWjtBQXBCZ0I7QUFDSTtBQUNJO0FBc0J4QjtBQXBCNEI7QUFDSTtBQXNCaEM7QUFwQjRCO0FBc0I1QjtBQUNBO0FBQ0E7QUFDQTtBQXBCZ0I7QUFDSTtBQUNJO0FBc0J4QjtBQXBCb0I7QUFDSTtBQXNCeEI7QUFwQm9CO0FBQ0E7QUFzQnBCO0FBcEJ3QjtBQUNJO0FBQ0k7QUFDSTtBQXNCcEM7QUFwQndDO0FBQ0k7QUFzQjVDO0FBcEJ3QztBQXNCeEM7QUFDQTtBQUNBO0FBQ0E7QUFwQjRCO0FBc0I1QjtBQXBCZ0M7QUFzQmhDO0FBQ0E7QUFwQjRCO0FBc0I1QjtBQUNBO0FBcEJ3QjtBQXNCeEI7QUFDQTtBQUNBO0FBQ0E7QUFwQlk7QUFzQlo7QUFDQTtBQUNBO0FBQ0E7QUFwQkE7QUFDSTtBQUNBO0FBQ0k7QUFzQlI7QUFwQkk7QUFDSTtBQXNCUjtBQXBCSTtBQUNBO0FBQ0k7QUFzQlI7QUFwQkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFzQko7QUFyQlE7QUF1QlI7QUFDQTtBQXJCSTtBQXVCSjtBQXRCUTtBQXdCUjtBQXRCSTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQXdCWjtBQUNBO0FBdkJZO0FBeUJaO0FBQ0E7QUFDQTtBQXZCSTtBQXlCSjtBQXhCUTtBQUNBO0FBQ0k7QUEwQlo7QUF4QlE7QUFDSTtBQTBCWjtBQXpCZ0I7QUEyQmhCO0FBQ0E7QUF6Qlk7QUFDQTtBQUNJO0FBQ0E7QUEyQmhCO0FBMUJvQjtBQUNBO0FBNEJwQjtBQUNBO0FBMUJZO0FBNEJaO0FBM0JnQjtBQTZCaEI7QUE1Qm9CO0FBOEJwQjtBQTVCZ0I7QUFDQTtBQThCaEI7QUE1Qlk7QUFDSTtBQThCaEI7QUE3Qm9CO0FBK0JwQjtBQUNBO0FBN0JZO0FBK0JaO0FBOUJnQjtBQWdDaEI7QUFDQTtBQTlCZ0I7QUFnQ2hCO0FBQ0E7QUE5QlE7QUFnQ1I7QUEvQlk7QUFDQTtBQWlDWjtBQUNBO0FBL0JZO0FBaUNaO0FBQ0E7QUFDQTtBQS9CSTtBQUNBO0FBaUNKO0FBaENRO0FBa0NSO0FBaENJO0FBQ0E7QUFDSTtBQWtDUjtBQWhDSTtBQWtDSjtBQUNBO0FBaENBO0FBa0NBO0FBQ0E7QUFsQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQW9DUjtBQWxDSTtBQUNJO0FBQ0E7QUFvQ1I7QUFsQ1E7QUFDSTtBQUNBO0FBQ0k7QUFvQ2hCO0FBbENZO0FBb0NaO0FBakNRO0FBQ0E7QUFtQ1I7QUFqQ0k7QUFtQ0o7QUFDQTtBQWpDQTtBQUNJO0FBbUNKO0FBQ0E7QUFoQ0E7QUFDSTtBQUNBO0FBQ0k7QUFrQ1I7QUFoQ0k7QUFDQTtBQUNJO0FBa0NSO0FBaENJO0FBa0NKO0FBaENJO0FBQ0E7QUFDSTtBQUNBO0FBa0NSO0FBQ0E7QUFoQ0k7QUFDSTtBQWtDUjtBQUNBO0FBaENJO0FBQ0k7QUFrQ1I7QUFDQTtBQWhDSTtBQUNBO0FBQ0E7QUFrQ0o7QUFoQ0k7QUFDSTtBQWtDUjtBQUNBO0FBaENJO0FBa0NKO0FBQ0E7QUFDQTtBQWhDQTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBa0NaO0FBaENRO0FBa0NSO0FBQ0E7QUFoQ0k7QUFrQ0o7QUFDQTtBQUNBO0FBaENBO0FBQ0k7QUFrQ0o7QUFDQTtBQUNBO0FBOUJBO0FBQ0k7QUFDQTtBQUNJO0FBZ0NSO0FBQ0E7QUE5Qkk7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFnQ1o7QUFDQTtBQTlCSTtBQWdDSjtBQUNBO0FBQ0E7QUE3QkE7QUFDSTtBQUNBO0FBQ0k7QUErQlI7QUE3Qkk7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUErQlo7QUFDQTtBQUNBO0FBN0JJO0FBK0JKO0FBQ0E7QUFDQTtBQUNBO0FBNUJBO0FBQ0k7QUFDQTtBQUNJO0FBOEJSO0FBNUJJO0FBQ0E7QUFDSTtBQThCUjtBQTVCSTtBQUNBO0FBQ0E7QUFDSTtBQThCUjtBQUNBO0FBNUJJO0FBQ0k7QUE4QlI7QUFDQTtBQTVCSTtBQUNJO0FBOEJSO0FBQ0E7QUE1Qkk7QUFHSTtBQTRCUjtBQUNBO0FBMUJJO0FBNEJKO0FBQ0E7QUFDQTtBQUNBO0FBekJBO0FBQ0k7QUFDQTtBQUNJO0FBMkJSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekJJO0FBQ0k7QUEyQlI7QUF6Qkk7QUEyQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDQTtBQUNJO0FBMEJSO0FBQ0E7QUF4Qkk7QUFDSTtBQUNJO0FBMEJaO0FBeEJRO0FBMEJSO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNBO0FBQ0k7QUEwQlI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhCSTtBQUNJO0FBMEJSO0FBeEJJO0FBMEJKO0FBQ0E7QUFDQTtBQXhCQTtBQUNJO0FBQ0E7QUFDSTtBQTBCUjtBQUNBO0FBeEJJO0FBQ0k7QUFDSTtBQTBCWjtBQXhCUTtBQTBCUjtBQUNBO0FBeEJJO0FBMEJKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNBO0FBQ0k7QUEwQlI7QUF4Qkk7QUFDSTtBQTBCUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDSTtBQTBCUjtBQUNBO0FBeEJJO0FBQ0k7QUEwQlI7QUF4QlE7QUEwQlI7QUFDQTtBQXhCSTtBQUNBO0FBQ0E7QUFDQTtBQTBCSjtBQXhCSTtBQUNJO0FBQ0k7QUFDQTtBQTBCWjtBQUNBO0FBeEJRO0FBQ0E7QUEwQlI7QUFDQTtBQXhCSTtBQUNBO0FBMEJKO0FBeEJJO0FBMEJKO0FBQ0E7QUFDQTtBQXhCQTtBQUNJO0FBQ0k7QUEwQlI7QUF4Qkk7QUFDSTtBQTBCUjtBQXhCSTtBQTBCSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDSTtBQTBCUjtBQUNBO0FBeEJJO0FBQ0k7QUFDSTtBQTBCWjtBQUNBO0FBeEJRO0FBMEJSO0FBQ0E7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDSTtBQTBCUjtBQXhCSTtBQUNJO0FBMEJSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXhCSTtBQTBCSjtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNJO0FBMEJSO0FBQ0E7QUF4Qkk7QUFDQTtBQUNJO0FBQ0k7QUEwQlo7QUFDQTtBQXhCSTtBQTBCSjtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNJO0FBMEJSO0FBQ0E7QUF4Qkk7QUFDQTtBQTBCSjtBQXhCSTtBQTBCSjtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0k7QUEwQlI7QUF4Qkk7QUEwQko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4QkE7QUFDSTtBQUNJO0FBMEJSO0FBeEJJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEwQko7QUFDQTtBQUNBO0FBeEJBO0FBQ0k7QUFDSTtBQTBCUjtBQUNBO0FBeEJJO0FBMEJKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRCQTtBQUNJO0FBQ1E7QUF3Qlo7QUF0QlE7QUF3QlI7QUF0Qkk7QUFDSTtBQUNJO0FBQ0E7QUF3Qlo7QUF0QlE7QUF3QlI7QUFDQTtBQXRCSTtBQXdCSjtBQUNBO0FBdEJBO0FBQ0k7QUFDUTtBQXdCWjtBQXRCUTtBQXdCUjtBQXRCSTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUF3Qlo7QUF0QlE7QUF3QlI7QUFDQTtBQXRCSTtBQXdCSjtBQUNBO0FBQ0E7QUF0QkE7QUFDSTtBQUNBO0FBd0JKO0FBQ0E7QUF0QkE7QUF3QkE7QUFDQTtBQXhCSTtBQUNJO0FBMEJSO0FBeEJJO0FBMEJKO0FBQ0E7QUF4QkE7QUEwQkE7QUFDQTtBQUNBO0FBM0JJO0FBQ0E7QUFDSTtBQTZCUjtBQTNCUTtBQUNBO0FBQ0E7QUFDSTtBQTZCWjtBQUNBO0FBM0JRO0FBQ0k7QUE2Qlo7QUFDQTtBQTNCUTtBQTZCUjtBQUNBO0FBM0JJO0FBNkJKO0FBQ0E7QUFDQTtBQTNCQTtBQTZCQTtBQTNCSTtBQUNBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUE2QlI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNybURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0k7QUFDWjtBQUNRO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0k7QUFDSjtBQUNJO0FBQ0o7QUFDQTtBQURRO0FBQ0k7QUFHWjtBQUNBO0FBRFE7QUFDQTtBQUdSO0FBRFE7QUFDSTtBQUNJO0FBQ0k7QUFDQTtBQUdwQjtBQUNBO0FBQ0E7QUFDQTtBQURRO0FBR1I7QUFDQTtBQURJO0FBR0o7QUFEUTtBQUdSO0FBRFE7QUFDQTtBQUdSO0FBQ0E7QUFDQTtBQURJO0FBQ0k7QUFDSTtBQUdaO0FBQ0E7QUFDQTtBQUNBO0FBREk7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUdWO0FBRFU7QUFHVjtBQUNBO0FBRFE7QUFDQTtBQUNFO0FBQ0E7QUFHVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0U7QUFDQTtBQUNGO0FBQ0U7QUFDRTtBQUNBO0FBQ0U7QUFDTjtBQUNJO0FBQ0o7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ047QUFDSTtBQUNKO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0E7QUFBSTtBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNBO0FBQUk7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDQTtBQUFJO0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNFO0FBQ0U7QUFFSjtBQUNBO0FBQUU7QUFDRTtBQUVKO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0U7QUFDRTtBQUVKO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0U7QUFDRTtBQUVKO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0U7QUFDRTtBQUdKO0FBQ0E7QUFGSTtBQUlKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0U7QUFDRTtBQUlKO0FBQ0E7QUFISTtBQUtKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0U7QUFDRTtBQUtKO0FBQ0E7QUFKSTtBQU1KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0U7QUFDRTtBQU1KO0FBQ0E7QUFKRTtBQUNFO0FBTUo7QUFKSTtBQU1KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0U7QUFDRTtBQU1KO0FBQ0E7QUFKRTtBQUNFO0FBTUo7QUFKSTtBQU1KO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQU5RO0FBQ0k7QUFRWjtBQU5RO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQVFaO0FBTlE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUVI7QUFOUTtBQUNBO0FBQ0E7QUFDSTtBQVFaO0FBTmdCO0FBQ0k7QUFRcEI7QUFOZ0I7QUFRaEI7QUFMZ0I7QUFDQTtBQUNJO0FBQ0E7QUFPcEI7QUFMZ0I7QUFPaEI7QUFDQTtBQUxRO0FBT1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNFO0FBQ0U7QUFNSjtBQUNBO0FBSkU7QUFDRTtBQU1KO0FBQ0E7QUFMSTtBQU9KO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ1E7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUNSO0FBQ0E7QUFDUTtBQUNSO0FBQ1E7QUFDUjtBQUNRO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDUTtBQUNSO0FBQ1E7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBQ2hCO0FBQ1k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQURNO0FBQ0E7QUFHTjtBQUNBO0FBREk7QUFDRTtBQUNBO0FBR047QUFDQTtBQURJO0FBQ0U7QUFDQTtBQUNFO0FBR1I7QUFDQTtBQURNO0FBQ0E7QUFHTjtBQUNBO0FBREk7QUFHSjtBQUNBO0FBSE07QUFDRTtBQUtSO0FBQ0E7QUFITTtBQUNBO0FBS047QUFDQTtBQUhJO0FBQ0U7QUFLTjtBQUNBO0FBSEk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS1I7QUFDQTtBQUhJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtSO0FBQ0E7QUFISTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBS1I7QUFDQTtBQUhJO0FBQ0U7QUFLTjtBQUhNO0FBQ0U7QUFDRTtBQUtWO0FBQ0E7QUFIUTtBQUNFO0FBS1Y7QUFDQTtBQUNBO0FBQ0E7QUFISTtBQUNFO0FBS047QUFITTtBQUNBO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFDRTtBQUtSO0FBQ0E7QUFITTtBQUNBO0FBQ0E7QUFLTjtBQUNBO0FBSEk7QUFDRTtBQUNBO0FBQ0E7QUFLTjtBQUhNO0FBQ0E7QUFLTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUdJO0FBQ0k7QUFDQTtBQUNJO0FBRFo7QUFDQTtBQUdZO0FBRFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0k7QUFBWjtBQUNBO0FBRVE7QUFDSTtBQUNJO0FBQWhCO0FBRWdCO0FBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNFO0FBQ0E7QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDTjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDTTtBQUNOO0FBQ007QUFDTjtBQUNNO0FBQ0U7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNNO0FBQ047QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDTTtBQUNFO0FBQ0U7QUFDVjtBQUNBO0FBQ1E7QUFDUjtBQUNBO0FBQ007QUFDRTtBQUNBO0FBQ1I7QUFDVTtBQUNWO0FBQ0E7QUFDUTtBQUNFO0FBQ0E7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ047QUFDTTtBQUNFO0FBQ1I7QUFDQTtBQUNBO0FBQ007QUFDQTtBQUNOO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDTjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDRjtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDRTtBQUNSO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDUjtBQUNBO0FBQ007QUFDQTtBQUNBO0FBQ0E7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ1I7QUFDQTtBQUNNO0FBQ0E7QUFDTjtBQUNBO0FBQ0k7QUFDSjtBQUNBO0FBRFE7QUFDSTtBQUdaO0FBRFE7QUFDSTtBQUdaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFESTtBQUNFO0FBQ0U7QUFHUjtBQUNBO0FBRE07QUFDQTtBQUdOO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFITTtBQUNFO0FBS1I7QUFDQTtBQUhNO0FBQ0U7QUFLUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFISTtBQUNJO0FBS1I7QUFIUTtBQUNJO0FBS1o7QUFDQTtBQUNBO0FBQ0E7QUFISTtBQUNFO0FBS047QUFDQTtBQUhJO0FBQ0U7QUFDQTtBQUNFO0FBS1I7QUFDQTtBQUhNO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFDQTtBQUtOO0FBQ0E7QUFISTtBQUNFO0FBS047QUFDQTtBQUhJO0FBS0o7QUFDQTtBQUxNO0FBQ0U7QUFPUjtBQUNBO0FBTE07QUFDQTtBQU9OO0FBQ0E7QUFMSTtBQUNFO0FBQ0U7QUFPUjtBQUNBO0FBTE07QUFDQTtBQU9OO0FBQ0E7QUFDQTtBQUxJO0FBQ0U7QUFDRTtBQU9SO0FBQ0E7QUFMTTtBQUNBO0FBQ0E7QUFPTjtBQUxNO0FBT047QUFDQTtBQUxVO0FBQ0k7QUFDSTtBQU9sQjtBQUxrQjtBQU9sQjtBQUNBO0FBTFE7QUFDQTtBQUNBO0FBT1I7QUFOWTtBQUNBO0FBUVo7QUFOUTtBQUNBO0FBQ0E7QUFDSTtBQVFaO0FBTlE7QUFDSTtBQVFaO0FBTlk7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQVFoQjtBQU5ZO0FBQ0k7QUFRaEI7QUFOWTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFReEI7QUFDQTtBQU5nQjtBQUNJO0FBUXBCO0FBTG9CO0FBT3BCO0FBSm9CO0FBTXBCO0FBSmdCO0FBQ0E7QUFDQTtBQUNBO0FBTWhCO0FBSlk7QUFDQTtBQUNBO0FBQ0E7QUFNWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEk7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNGO0FBS047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhJO0FBQ0U7QUFDRTtBQUtSO0FBQ0E7QUFITTtBQUNBO0FBS047QUFDQTtBQUNBO0FBSEk7QUFDRTtBQUNFO0FBS1I7QUFDQTtBQUhNO0FBQ0E7QUFLTjtBQUNBO0FBQ0E7QUFISTtBQUNFO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFDQTtBQUtOO0FBQ0E7QUFISTtBQUNFO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFDQTtBQUtOO0FBQ0E7QUFISTtBQUNFO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFDQTtBQUtOO0FBQ0E7QUFISTtBQUNFO0FBQ0U7QUFLUjtBQUNBO0FBSE07QUFLTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUjtBQUNRO0FBQ1I7QUFDUTtBQUNBO0FBQ1I7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUFKO0FBQ0E7QUFBTTtBQUNBO0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFBTTtBQUVOO0FBQU07QUFDQTtBQUNBO0FBQ0E7QUFFTjtBQUFVO0FBRVY7QUFBUTtBQUVSO0FBQ0E7QUFBSTtBQUNFO0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1R0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0U7QUFDQTtBQUNBO0FBQ047QUFDTTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ007QUFDQTtBQUNOO0FBQ007QUFDQTtBQUNOO0FBQ007QUFDQTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ1I7QUFDQTtBQUNNO0FBQ0U7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBQ0U7QUFEUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0U7QUFDRTtBQUdFO0FBRE47QUFDQTtBQUdJO0FBQ0U7QUFDRTtBQURSO0FBQ0E7QUFHTTtBQUNBO0FBRE47QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0o7QUFDTTtBQUNFO0FBQ0E7QUFDQTtBQUNSO0FBQ007QUFDTjtBQUNJO0FBQ0E7QUFDRTtBQUNFO0FBQ1I7QUFDTTtBQUNBO0FBQ0U7QUFDUjtBQUNNO0FBQ0E7QUFDQTtBQUNBO0FBQ047QUFDTTtBQUNBO0FBQ047QUFBUTtBQUVSO0FBQU07QUFFTjtBQUFNO0FBQ0U7QUFFUjtBQUFNO0FBQ0E7QUFDRTtBQUNFO0FBRVY7QUFDQTtBQUFNO0FBRU47QUFBSTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBRVI7QUFDQTtBQUFNO0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0M7QUFDQztBQUNBO0FBRUY7QUFBRztBQUNDO0FBQ0E7QUFDQTtBQUVKO0FBQUc7QUFFSDtBQUFFO0FBQ0E7QUFDQztBQUNDO0FBRUo7QUFBRztBQUNBO0FBQ0M7QUFFSjtBQUFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQztBQUNBO0FBRUo7QUFBSztBQUNBO0FBRUw7QUFETTtBQUdOO0FBQ0E7QUFDQTtBQURHO0FBQ0E7QUFDQTtBQUNDO0FBR0o7QUFERztBQUNBO0FBQ0M7QUFDQztBQUdMO0FBQ0E7QUFERztBQUdIO0FBREU7QUFDQztBQUNDO0FBQ0E7QUFDQTtBQUdKO0FBQ0E7QUFERztBQUdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSEE7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBQ0U7QUFEUjtBQUNBO0FBR007QUFDQTtBQUNFO0FBQ0E7QUFEUjtBQUNBO0FBR007QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQURSO0FBR007QUFETjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFFSTtBQUNJO0FBQ0Y7QUFDRTtBQUNBO0FBQ0U7QUFDSTtBQUFkO0FBRWM7QUFBZDtBQUVRO0FBQVI7QUFDQTtBQUNBO0FBRUk7QUFDRTtBQUNJO0FBQVY7QUFDQTtBQUVVO0FBQVY7QUFDQTtBQUNBO0FBRUk7QUFDRTtBQUNJO0FBQVY7QUFDQTtBQUVVO0FBQVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBQ0U7QUFEUjtBQUNBO0FBR007QUFDRTtBQUNBO0FBQ0E7QUFEUjtBQUNBO0FBR007QUFDQTtBQUNFO0FBRFI7QUFDQTtBQUdNO0FBQ0E7QUFDRTtBQURSO0FBQ0E7QUFHTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRE47QUFHTTtBQUNBO0FBQ0E7QUFETjtBQUNBO0FBR0k7QUFDRTtBQUNBO0FBRE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ0k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0M7QUFDVDtBQUNJO0FBQ0k7QUFDSTtBQUNaO0FBQ1E7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ0E7QUFDUjtBQUNRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNJO0FBQ0E7QUFDQTtBQURSO0FBR1E7QUFDRTtBQURWO0FBQ0E7QUFDQTtBQUdJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFEUjtBQUdRO0FBQ0U7QUFEVjtBQUNBO0FBQ0E7QUFDQTtBQUdJO0FBQ0k7QUFEUjtBQUNBO0FBQ0E7QUFHSTtBQUNJO0FBRFI7QUFDQTtBQUNBO0FBR0k7QUFDSTtBQURSO0FBQ0E7QUFDQTtBQUdJO0FBQ0k7QUFEUjtBQUNBO0FBR0k7QUFDSTtBQURSO0FBQ0E7QUFHSTtBQUNJO0FBRFI7QUFHSTtBQUNJO0FBRFI7QUFDQTtBQUdJO0FBQ0U7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBRFY7QUFDQTtBQUNBO0FBR1E7QUFDQTtBQUNBO0FBQ0E7QUFEUjtBQUNBO0FBQ0E7QUFHSTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQURWO0FBQ0E7QUFDQTtBQUdRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEUjtBQUNBO0FBR0k7QUFDSTtBQURSO0FBR1E7QUFDRTtBQURWO0FBQ0E7QUFHUTtBQUNFO0FBRFY7QUFDQTtBQUdJO0FBQ0U7QUFETjtBQUNBO0FBR0k7QUFDRTtBQUROO0FBQ0E7QUFHSTtBQUNJO0FBQ0E7QUFEUjtBQUdRO0FBQ0E7QUFDRTtBQURWO0FBQ0E7QUFDQTtBQUdJO0FBREo7QUFLSTtBQUNJO0FBSFI7QUFDQTtBQUtJO0FBQ0U7QUFITjtBQUNBO0FBS0k7QUFDRTtBQUhOO0FBQ0E7QUFLSTtBQUNFO0FBSE47QUFDQTtBQUtJO0FBQ0U7QUFITjtBQUNBO0FBS0k7QUFDRTtBQUhOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFHSTtBQUNFO0FBQ0E7QUFDQTtBQUROO0FBR007QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQURWO0FBR1E7QUFEUjtBQUNBO0FBQ0E7QUFDQTtBQUdJO0FBQ0U7QUFDQTtBQUNFO0FBRFI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBR0k7QUFDSTtBQURSO0FBQ0E7QUFHSTtBQUNJO0FBQ0E7QUFEUjtBQUNBO0FBR0k7QUFESjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ1I7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDSTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBR0k7QUFDSTtBQUNJO0FBRFo7QUFHUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBRHBCO0FBR29CO0FBQ0E7QUFEcEI7QUFHb0I7QUFDQTtBQURwQjtBQUdnQjtBQUNBO0FBQ0k7QUFEcEI7QUFDQTtBQUdRO0FBQ0k7QUFEWjtBQUNBO0FBR1k7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQURwQjtBQUdnQjtBQUNBO0FBRGhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJSTtBQUNJO0FBRlI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRjtBQUVFO0FBQ0U7QUFDQTtBQUNFO0FBQU47QUFFSTtBQUFKO0FBQ0E7QUFFRTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQVI7QUFDQTtBQUNBO0FBQ0E7QUFFRTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQU47QUFFSTtBQUFKO0FBQ0E7QUFFRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFBTjtBQUNBO0FBQ0E7QUFFRTtBQUNFO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFBTjtBQUVJO0FBQ0U7QUFDQTtBQUFOO0FBQ0E7QUFDQTtBQUVFO0FBQ0U7QUFDRTtBQUFOO0FBRUk7QUFDRTtBQUFOO0FBRUk7QUFDRTtBQUFOO0FBRUk7QUFDRTtBQUFOO0FBQ007QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0U7QUFDTjtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDUjtBQUNRO0FBQ1I7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFBTTtBQUNFO0FBQ0E7QUFFUjtBQUNBO0FBQ0E7QUFBRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUY7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0o7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDVjtBQUNVO0FBQ0U7QUFDQTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0E7QUFDRTtBQUNOO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDQTtBQUNFO0FBQ0E7QUFDTjtBQUVNO0FBQU47QUFHSTtBQURKO0FBQ0E7QUFDQTtBQUdFO0FBQ0U7QUFESjtBQUdJO0FBQ0U7QUFETjtBQUNBO0FBR0k7QUFESjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pWQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUdJO0FBQ0k7QUFDQTtBQUNBO0FBRFI7QUFDQTtBQUdJO0FBQ0k7QUFDQTtBQUNJO0FBRFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDUTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ0E7QUFDUjtBQUNRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDUjtBQUNRO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNBO0FBQ0E7QUFDUjtBQUNRO0FBQ1I7QUFBWTtBQUNBO0FBQ0E7QUFFWjtBQUFZO0FBQ0E7QUFDQTtBQUVaO0FBQ0E7QUFBUTtBQUVSO0FBQVE7QUFDSTtBQUNBO0FBRVo7QUFDUTtBQUNBO0FBQ0k7QUFDWjtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDUTtBQUNJO0FBQ1o7QUFDUTtBQUNJO0FBQ1o7QUFDUTtBQUNJO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDUTtBQUNSO0FBQ1E7QUFDUjtBQUNRO0FBQ0k7QUFDWjtBQUNBO0FBQ1E7QUFDUjtBQUNRO0FBQ0k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNRO0FBQ1I7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFSO0FBRU07QUFBTjtBQUNBO0FBRUk7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBUjtBQUNBO0FBRUk7QUFDSTtBQUFSO0FBRVE7QUFBUjtBQUNZO0FBQ0E7QUFDQTtBQUNBO0FBQ1o7QUFDWTtBQUNBO0FBQ0E7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFBUjtBQUVRO0FBQ0k7QUFDQTtBQUNBO0FBQ0k7QUFBaEI7QUFDQTtBQUNBO0FBRVk7QUFDQTtBQUFaO0FBQ0E7QUFDQTtBQUdJO0FBREo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdJO0FBREo7QUFDQTtBQUNRO0FBQ0k7QUFDWjtBQUNRO0FBQ1I7QUFDUTtBQUNSO0FBQVk7QUFDSTtBQUVoQjtBQUFZO0FBRVo7QUFBWTtBQUNJO0FBRWhCO0FBQVk7QUFDQTtBQUVaO0FBQ0E7QUFEWTtBQUNBO0FBR1o7QUFDQTtBQUNBO0FBREk7QUFDSTtBQUNJO0FBR1o7QUFEUTtBQUNJO0FBR1o7QUFEUTtBQUNBO0FBR1I7QUFEUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHUjtBQURRO0FBQ0k7QUFDSTtBQUNJO0FBR3BCO0FBQ0E7QUFDQTtBQUNBO0FBRFk7QUFDSTtBQUNJO0FBR3BCO0FBQ0E7QUFDQTtBQUNBO0FBQVE7QUFDQTtBQUNBO0FBQ0E7QUFFUjtBQUFJO0FBQ0k7QUFDSTtBQUVaO0FBQ0E7QUFDQTtBQURZO0FBR1o7QUFDQTtBQUNBO0FBREk7QUFDSTtBQUNJO0FBR1o7QUFEUTtBQUdSO0FBRFE7QUFDSTtBQUdaO0FBQ0E7QUFDQTtBQURZO0FBR1o7QUFDQTtBQUNBO0FBREk7QUFDRTtBQUNFO0FBQ0E7QUFHUjtBQUNBO0FBRE07QUFDQTtBQUdOO0FBQ0E7QUFDQTtBQURJO0FBQ0k7QUFDQTtBQUdSO0FBQ0E7QUFESTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHUjtBQUNBO0FBREk7QUFDSTtBQUNJO0FBR1o7QUFETTtBQUdOO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFIUTtBQUNJO0FBS1o7QUFITTtBQUtOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFESTtBQUNJO0FBR1I7QUFEUTtBQUNBO0FBQ0k7QUFDQTtBQUdaO0FBQ0E7QUFEUTtBQUNBO0FBQ0k7QUFDQTtBQUdaO0FBRFE7QUFDSTtBQUdaO0FBRFE7QUFDSTtBQUdaO0FBQ0E7QUFEUTtBQUNBO0FBR1I7QUFEUTtBQUdSO0FBRFE7QUFHUjtBQURRO0FBR1I7QUFEUTtBQUNJO0FBR1o7QUFBWTtBQUVaO0FBQVE7QUFFUjtBQURZO0FBR1o7QUFEUTtBQUNBO0FBQ0E7QUFHUjtBQURRO0FBR1I7QUFEUTtBQUdSO0FBRFE7QUFDQTtBQUNBO0FBQ0k7QUFHWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREk7QUFDRTtBQUdOO0FBQ0E7QUFESTtBQUNJO0FBR1I7QUFDQTtBQURJO0FBQ0k7QUFDQTtBQUNBO0FBR1I7QUFDQTtBQUFJO0FBRUo7QUFBUTtBQUNBO0FBQ0E7QUFFUjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0k7QUFFVjtBQUNBO0FBQVU7QUFFVjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQ0E7QUFBWTtBQUVaO0FBQ0E7QUFDQTtBQUFJO0FBRUo7QUFBUTtBQUNBO0FBQ0k7QUFFWjtBQUNBO0FBQVk7QUFFWjtBQUFRO0FBQ0k7QUFFWjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQUNaO0FBQ2dCO0FBQ2hCO0FBQ1k7QUFDSTtBQUNoQjtBQUNBO0FBQ1k7QUFDQTtBQUNBO0FBQ0k7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0k7QUFBWjtBQUVRO0FBQVI7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUFSO0FBQ0E7QUFFSTtBQUNJO0FBQVI7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUFSO0FBRVE7QUFBUjtBQUNBO0FBRUk7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQVI7QUFDQTtBQUVRO0FBQ0k7QUFBWjtBQUNBO0FBQ1k7QUFDWjtBQUNRO0FBQ1I7QUFDQTtBQUNBO0FBRUk7QUFDSTtBQUNJO0FBQVo7QUFFTTtBQUNFO0FBQ0E7QUFBUjtBQUVNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFBZDtBQUNBO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFBUjtBQUNBO0FBRUk7QUFDSTtBQUFSO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUNFO0FBQ0E7QUFBVjtBQUNBO0FBRVE7QUFDQTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFBaEI7QUFDQTtBQUNBO0FBRVE7QUFDSTtBQUNJO0FBQ0E7QUFBaEI7QUFFZ0I7QUFBaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVJO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQVI7QUFDQTtBQUNBO0FBRUk7QUFDRTtBQUNJO0FBQ0E7QUFBVjtBQUVNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBTjtBQUNBO0FBRUk7QUFDRTtBQUNJO0FBQVY7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBQWhCO0FBQ0E7QUFDQTtBQUVRO0FBQ0k7QUFDQTtBQUNBO0FBQVo7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFBWjtBQUVRO0FBQ0E7QUFBUjtBQUNBO0FBRUk7QUFDSTtBQUNJO0FBQVo7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBRUk7QUFDQTtBQUNJO0FBRGhCO0FBQ0E7QUFDQTtBQUdRO0FBQ0k7QUFDQTtBQUNBO0FBRFo7QUFHUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFEWjtBQUdRO0FBQ0E7QUFEUjtBQUNBO0FBR0k7QUFDSTtBQUNJO0FBRFo7QUFDQTtBQUdJO0FBQ0k7QUFDSTtBQURaO0FBR1k7QUFEWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqdEJBO0FBQ0k7QUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUjtBQUNRO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNZO0FBQ1o7QUFDWTtBQUNaO0FBQ0E7QUFDUTtBQUNSO0FBQ1E7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ1k7QUFDWjtBQUNZO0FBQ1o7QUFDQTtBQUNRO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDWTtBQUNaO0FBQ1k7QUFDWjtBQUNBO0FBQ1E7QUFDUjtBQUNRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNBO0FBQ1I7QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNFO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNSO0FBQ1E7QUFDUjtBQUNNO0FBQ0E7QUFDQTtBQUNOO0FBQ007QUFDRTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDSTtBQUNKO0FBQU07QUFDQTtBQUVOO0FBQU07QUFDRTtBQUNBO0FBRVI7QUFDQTtBQUFJO0FBQ0U7QUFDQTtBQUNFO0FBRVI7QUFDQTtBQUNBO0FBQUk7QUFDRTtBQUNFO0FBQ0E7QUFFRTtBQUNWO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ1Y7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ0U7QUFDUjtBQUNRO0FBQ1I7QUFDQTtBQUNNO0FBQ0E7QUFDRTtBQUNSO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ0U7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDRTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDRTtBQUNBO0FBRUU7QUFBVjtBQUNBO0FBRU07QUFBTjtBQUNBO0FBRUk7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUFWO0FBQ0E7QUFDQTtBQUVNO0FBQU47QUFDQTtBQUVJO0FBQ0U7QUFDRTtBQUFSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDSTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQTtBQUNJO0FBQ0E7QUFDWjtBQUNRO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ0k7QUFDWjtBQUNBO0FBQ1k7QUFDWjtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ1E7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ2hCO0FBQ1k7QUFDSTtBQUNJO0FBQ0E7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFDZjtBQUVlO0FBQWY7QUFDbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtQjtBQUNJO0FBQ0k7QUFDQTtBQUMzQjtBQUNBO0FBRXVCO0FBQ0k7QUFDQTtBQUEzQjtBQUNBO0FBQ0E7QUFHbUI7QUFEbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdPO0FBQ0k7QUFDQTtBQUNBO0FBRFg7QUFFZTtBQUFmO0FBQ0E7QUFDQTtBQUVPO0FBQ0M7QUFDSTtBQUNBO0FBQVo7QUFDQTtBQUNBO0FBQ0E7QUFGZ0I7QUFDQTtBQUNBO0FBSWhCO0FBRm9CO0FBQ0E7QUFJcEI7QUFIZ0I7QUFDSTtBQUNBO0FBS3BCO0FBRm9CO0FBQ0E7QUFJcEI7QUFEb0I7QUFDQTtBQUdwQjtBQUFvQjtBQUNBO0FBRXBCO0FBQ29CO0FBQ0E7QUFDcEI7QUFDQTtBQUNnQjtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ3BCO0FBQ0E7QUFDZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFBTztBQUNFO0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQVI7QUFFUTtBQUFSO0FBQ0E7QUFFSTtBQUNFO0FBQU47QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUFSO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVY7QUFDQTtBQUVRO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFBVjtBQUNBO0FBRVE7QUFDSTtBQUFaO0FBQ0E7QUFDVTtBQUNWO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWjtBQUNRO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDWTtBQUNBO0FBQ1o7QUFBZ0I7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVwQjtBQUFnQjtBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEWTtBQUNBO0FBR1o7QUFDQTtBQURZO0FBR1o7QUFDQTtBQUNBO0FBQUk7QUFDSTtBQUNFO0FBQ0U7QUFFWjtBQUNBO0FBQVk7QUFDQTtBQUVaO0FBQVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVSO0FBQ0E7QUFBSTtBQUNJO0FBQ0k7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pSQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDSTtBQUNaO0FBQ1E7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDSTtBQUNaO0FBQ1E7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDSTtBQUNaO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDSTtBQUFKO0FBRUk7QUFDSTtBQUNBO0FBQ0E7QUFBUjtBQUVRO0FBQVI7QUFDQTtBQUVRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFSO0FBRVE7QUFDQTtBQUFSO0FBRVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQVI7QUFFUTtBQUFSO0FBRVE7QUFBUjtBQUVRO0FBQVI7QUFFUTtBQUFSO0FBQ0E7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBUjtBQUVRO0FBQ0E7QUFBUjtBQUNBO0FBRVE7QUFDQTtBQUFSO0FBRVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBUjtBQUVRO0FBQ0E7QUFBUjtBQUNBO0FBQ0E7QUFDQTtBQUVJO0FBQUo7QUFDQTtBQUFRO0FBQ0E7QUFFUjtBQUFRO0FBQ0k7QUFFWjtBQUNBO0FBQ0E7QUFBUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRVI7QUFBUTtBQUNBO0FBRVI7QUFBUTtBQUNBO0FBQ0E7QUFFUjtBQUFRO0FBQ0E7QUFFUjtBQUNBO0FBQVE7QUFDQTtBQUNBO0FBRVI7QUFBUTtBQUNFO0FBQ0E7QUFDQTtBQUVWO0FBQ0E7QUFBVTtBQUVWO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVJO0FBQUo7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQVo7QUFFUTtBQUNJO0FBQVo7QUFFWTtBQUFaO0FBRVk7QUFBWjtBQUVZO0FBQ0E7QUFBWjtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0k7QUFBWjtBQUNBO0FBQ0E7QUFFSTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUFSO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUNJO0FBQ0k7QUFBaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFSTtBQUNFO0FBQU47QUFDQTtBQUVJO0FBQ0k7QUFDSTtBQUNBO0FBQVo7QUFDQTtBQUVRO0FBQ0k7QUFBWjtBQUVnQjtBQUFoQjtBQUVZO0FBQVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFUTtBQUNJO0FBQ0k7QUFBaEI7QUFFZ0I7QUFBaEI7QUFFWTtBQUFaO0FBQ0E7QUFFUTtBQUNBO0FBQVI7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUFSO0FBRVE7QUFBUjtBQUNBO0FBQ0E7QUFFSTtBQUNFO0FBQ0E7QUFBTjtBQUVNO0FBQ0E7QUFBTjtBQUNBO0FBRU07QUFBTjtBQUVNO0FBQ0U7QUFBUjtBQUNBO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ007QUFDTjtBQUNVO0FBQ1Y7QUFDTTtBQUNBO0FBQ047QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBQ1o7QUFDWTtBQUNaO0FBQ1k7QUFDWjtBQUNNO0FBQ047QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQURNO0FBR047QUFETTtBQUNBO0FBQ0U7QUFHUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURJO0FBQ0U7QUFHTjtBQURJO0FBR0o7QUFEUTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUd4QjtBQUNBO0FBRmdDO0FBQ0E7QUFDSTtBQUlwQztBQUZvQztBQUlwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRjRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJNUI7QUFGd0I7QUFJeEI7QUFEd0I7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUc1QjtBQUNBO0FBRDRCO0FBQ0k7QUFHaEM7QUFDQTtBQUR3QjtBQUd4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFESTtBQUNFO0FBQ0U7QUFHUjtBQURRO0FBQ0Y7QUFDQTtBQUdOO0FBRE07QUFDRTtBQUNFO0FBR1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0U7QUFFUjtBQUNBO0FBQU07QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUFJO0FBQ0k7QUFDQTtBQUNJO0FBRVo7QUFBWTtBQUVaO0FBQVE7QUFFUjtBQUNBO0FBQUk7QUFDSTtBQUNBO0FBQ0k7QUFFWjtBQUFZO0FBRVo7QUFBUTtBQUVSO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0E7QUFDSTtBQUVaO0FBQVk7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUk7QUFDSTtBQUNJO0FBRVo7QUFDQTtBQUFRO0FBQ0k7QUFFWjtBQUNBO0FBQVE7QUFDQTtBQUNBO0FBQ0E7QUFFUjtBQUFRO0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFRO0FBQ0E7QUFDQTtBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBUTtBQUNJO0FBQ0E7QUFDQTtBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVk7QUFFWjtBQUFRO0FBQ0E7QUFFUjtBQUFZO0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFJO0FBQ0k7QUFDQTtBQUVSO0FBQ0E7QUFDQTtBQUFJO0FBRUo7QUFBUTtBQUNJO0FBQ0k7QUFDQTtBQUVoQjtBQUNnQjtBQUNBO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dCO0FBQ2hCO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDUTtBQUNJO0FBQ0E7QUFDWjtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ1k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNZO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDWTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ1k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNZO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDWTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ1k7QUFDQTtBQUNaO0FBQ0E7QUFDQTtBQUNZO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDWTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNJO0FBQ1o7QUFDWTtBQUNaO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ1E7QUFDUjtBQUNNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNOO0FBQ007QUFDQTtBQUNFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNVO0FBQ0U7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNNO0FBQ0k7QUFDSTtBQUNBO0FBQ2Q7QUFDVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNBO0FBRFE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUdOO0FBRE07QUFDQTtBQUdOO0FBRE07QUFDQTtBQUNFO0FBR1I7QUFDQTtBQURVO0FBQ0k7QUFHZDtBQUNBO0FBQ0E7QUFDQTtBQURNO0FBQ0U7QUFHUjtBQUNBO0FBQ0E7QUFDQTtBQURJO0FBQ0U7QUFHTjtBQURJO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdOO0FBRFE7QUFHUjtBQURRO0FBQ0Y7QUFDQTtBQUdOO0FBQ0E7QUFESTtBQUNFO0FBQ0U7QUFDQTtBQUdSO0FBRE07QUFHTjtBQURRO0FBQ0E7QUFDSTtBQUdaO0FBRFE7QUFDRjtBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNNO0FBQ047QUFDTTtBQUNBO0FBQ0E7QUFDTjtBQUNNO0FBQ0E7QUFDTjtBQUNNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNOO0FBQ007QUFDRTtBQUNSO0FBQ1E7QUFDSTtBQUNaO0FBQWdCO0FBRWhCO0FBQWdCO0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVE7QUFDSTtBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFRO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUVoQjtBQUNBO0FBQU07QUFDRTtBQUVSO0FBQ1E7QUFDUjtBQUNRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSTtBQUNKO0FBQ007QUFDRTtBQUNBO0FBQ1I7QUFDQTtBQUNNO0FBQ0E7QUFDQTtBQUNOO0FBQ007QUFDRTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0U7QUFDQTtBQUNOO0FBQ007QUFDRTtBQUNSO0FBQ0E7QUFDTTtBQUNOO0FBQ007QUFDRTtBQUNSO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDRTtBQUNFO0FBQ1I7QUFDQTtBQUNNO0FBQ0E7QUFDQTtBQUNOO0FBQ007QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNSO0FBQ0E7QUFFTTtBQUFOO0FBQ0E7QUFFUTtBQUNBO0FBQ0E7QUFBUjtBQUNBO0FBQ0E7QUFFSTtBQUNFO0FBQ0E7QUFBTjtBQUVNO0FBQ0U7QUFBUjtBQUNBO0FBRU07QUFDQTtBQUFOO0FBQ0E7QUFFSTtBQUFKO0FBRVE7QUFDQTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQVI7QUFDQTtBQUVNO0FBQ0U7QUFBUjtBQUNBO0FBRUk7QUFDSTtBQUNBO0FBQVI7QUFFSTtBQUNFO0FBQ0E7QUFDRTtBQUFSO0FBQ0E7QUFDQTtBQUNBO0FBRUk7QUFDRTtBQUFOO0FBQ0E7QUFFTTtBQUNFO0FBQ0E7QUFBUjtBQUNBO0FBRVE7QUFDQTtBQUNJO0FBQVo7QUFDQTtBQUVNO0FBQU47QUFDQTtBQUVNO0FBQ0U7QUFDQTtBQUFSO0FBQ0E7QUFHTTtBQUROO0FBR1U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNGO0FBQ0U7QUFEVjtBQUNBO0FBR1U7QUFEVjtBQUdRO0FBRFI7QUFDQTtBQUdNO0FBQ0E7QUFDQTtBQUROO0FBR007QUFETjtBQUdNO0FBQ0E7QUFDQTtBQUROO0FBR007QUFDRTtBQUNFO0FBRFY7QUFDQTtBQUdRO0FBRFI7QUFDQTtBQUNBO0FBSUk7QUFDRTtBQUZOO0FBSU07QUFDQTtBQUNFO0FBRlI7QUFDQTtBQUlNO0FBQ0E7QUFDRTtBQUNBO0FBRlI7QUFDQTtBQUNBO0FBS0k7QUFDSTtBQUNJO0FBSFo7QUFDQTtBQUtRO0FBSFI7QUFLWTtBQUhaO0FBQ0E7QUFLUTtBQUhSO0FBQ0E7QUFDQTtBQUtJO0FBQ0U7QUFDRTtBQUhSO0FBQ0E7QUFLTTtBQUNBO0FBQ0U7QUFDRTtBQUhWO0FBQ0E7QUFDQTtBQUNBO0FBS0k7QUFDRTtBQUhOO0FBQ0E7QUFLSTtBQUNFO0FBSE47QUFLTTtBQUNFO0FBSFI7QUFDQTtBQUNBO0FBQ0E7QUFLSTtBQUNJO0FBQ0E7QUFDQTtBQUhSO0FBS1E7QUFDQTtBQUhSO0FBS1E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBSFo7QUFDQTtBQUNBO0FBS0k7QUFDRTtBQUNFO0FBSFI7QUFDQTtBQUtNO0FBQ0E7QUFDRTtBQUNBO0FBSFI7QUFDQTtBQUNBO0FBS0k7QUFDRTtBQUNBO0FBSE47QUFDQTtBQUtVO0FBSFY7QUFLUTtBQUhSO0FBQ0E7QUFLTTtBQUhOO0FBQ0E7QUFLSTtBQUNFO0FBQ0U7QUFIUjtBQUNBO0FBQ0E7QUFNSTtBQUNFO0FBQ0U7QUFKUjtBQUNBO0FBQ0E7QUFDQTtBQU1JO0FBQ0U7QUFKTjtBQU1NO0FBSk47QUFDQTtBQU1JO0FBQ0U7QUFDRTtBQUpSO0FBQ0E7QUFNTTtBQUpOO0FBQ0E7QUFNSTtBQUNFO0FBQ0U7QUFKUjtBQUNBO0FBTU07QUFKTjtBQUNBO0FBTUk7QUFDRTtBQUpOO0FBQ0E7QUFNSTtBQUpKO0FBTU07QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUpSO0FBTU07QUFDRTtBQUpSO0FBQ0E7QUFNUTtBQUNFO0FBSlY7QUFNUTtBQUNBO0FBQ0E7QUFKUjtBQUNBO0FBQ0E7QUFDQTtBQU1JO0FBQ0U7QUFDRTtBQUNBO0FBSlI7QUFDQTtBQU1NO0FBQ0U7QUFDQTtBQUpSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1RO0FBQ0E7QUFKUjtBQUNBO0FBQ0E7QUFDQTtBQU1JO0FBQ0U7QUFDRTtBQUpSO0FBQ0E7QUFNTTtBQUpOO0FBQ0E7QUFDQTtBQU1JO0FBQ0U7QUFDRTtBQUpSO0FBQ0E7QUFNTTtBQUNFO0FBSlI7QUFDQTtBQU1NO0FBSk47QUFDQTtBQUNBO0FBTUk7QUFDRTtBQUNFO0FBSlI7QUFDQTtBQU1NO0FBSk47QUFDQTtBQUNBO0FBQ0E7QUFNSTtBQUNJO0FBQ0E7QUFKUjtBQU1RO0FBQ0E7QUFKUjtBQU1RO0FBQ0Y7QUFDQTtBQUpOO0FBTU07QUFDQTtBQUNFO0FBQ0E7QUFKUjtBQUNBO0FBQ0E7QUFNSTtBQUpKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNUTtBQUNJO0FBSlo7QUFDQTtBQU1RO0FBQ0k7QUFKWjtBQU1RO0FBQ0E7QUFDQTtBQUNJO0FBSlo7QUFDQTtBQU1RO0FBQ0k7QUFKWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTVE7QUFDQTtBQUNJO0FBQ0E7QUFDSTtBQUpoQjtBQUNBO0FBQ0E7QUFNUTtBQUNBO0FBSlI7QUFNUTtBQUpSO0FBTVE7QUFKUjtBQU1RO0FBSlI7QUFNUTtBQUNBO0FBQ0k7QUFDSTtBQUpoQjtBQU1ZO0FBQ0E7QUFKWjtBQU1RO0FBQ0k7QUFDSTtBQUNJO0FBSnBCO0FBTWdCO0FBSmhCO0FBQ0E7QUFDQTtBQU1RO0FBSlI7QUFNUTtBQUNJO0FBQ0k7QUFKaEI7QUFNWTtBQUpaO0FBQ0E7QUFNUTtBQUNJO0FBSlo7QUFDQTtBQUNBO0FBT1E7QUFDSTtBQUxaO0FBQ0E7QUFDQTtBQU9JO0FBTEo7QUFDQTtBQUNBO0FBSVE7QUFDQTtBQUNBO0FBRlI7QUFJUTtBQUNJO0FBRlo7QUFDQTtBQUlRO0FBQ0E7QUFDSTtBQUNBO0FBQ0k7QUFGaEI7QUFDQTtBQUlRO0FBQ0k7QUFDSTtBQUZoQjtBQUlZO0FBRlo7QUFDQTtBQUlRO0FBRlI7QUFDQTtBQUlJO0FBRko7QUFDQTtBQU1JO0FBQ0U7QUFKTjtBQU1RO0FBSlI7QUFDQTtBQUNBO0FBQ0E7QUFNSTtBQUpKO0FBQ0E7QUFJTTtBQUNFO0FBRlI7QUFDQTtBQUlRO0FBQ0k7QUFDQTtBQUNBO0FBRlo7QUFJUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFGWjtBQUlRO0FBQ0E7QUFGUjtBQUNBO0FBSUk7QUFDSTtBQUNJO0FBRlo7QUFDQTtBQUNBO0FBSUk7QUFDRTtBQUNBO0FBQ0U7QUFGUjtBQUNBO0FBSU07QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUZWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJSTtBQUZKO0FBQ0E7QUFFUTtBQUNJO0FBQ0E7QUFDQTtBQUFaO0FBRVE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQVo7QUFFUTtBQUNBO0FBQVI7QUFDQTtBQUVJO0FBQ0k7QUFDSTtBQUFaO0FBQ0E7QUFDQTtBQUNBO0FBRUk7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNNO0FBQ0k7QUFDQTtBQUFoQjtBQUVnQjtBQUNBO0FBQWhCO0FBRWdCO0FBQWhCO0FBQ0E7QUFFTTtBQUNFO0FBQ0U7QUFBVjtBQUVRO0FBQVI7QUFFWTtBQUNBO0FBQVo7QUFFWTtBQUNBO0FBQVo7QUFFTTtBQUNFO0FBQ0U7QUFBVjtBQUVRO0FBQVI7QUFFWTtBQUNBO0FBQVo7QUFFWTtBQUNBO0FBQVo7QUFFTTtBQUNNO0FBQ0E7QUFDRjtBQUFWO0FBQ0E7QUFDQTtBQUVJO0FBQ0k7QUFDSTtBQUFaO0FBQ0E7QUFDWTtBQUNBO0FBQ1o7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNJO0FBQ1o7QUFDQTtBQUFZO0FBQ0E7QUFFWjtBQUNBO0FBQ0E7QUFBSTtBQUNJO0FBQ0k7QUFFWjtBQUNBO0FBRFk7QUFHWjtBQUNBO0FBQ0E7QUFDQTtBQURJO0FBQ0U7QUFDRTtBQUdSO0FBQ0E7QUFETTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdSO0FBQ0E7QUFETTtBQUNBO0FBQ0U7QUFHUjtBQUNBO0FBRE07QUFDQTtBQUdOO0FBRFE7QUFHUjtBQURRO0FBQ0E7QUFDRTtBQUNFO0FBR1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUk7QUFDSTtBQUNBO0FBQ0k7QUFDQTtBQUVaO0FBQ0E7QUFBWTtBQUNBO0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFFTjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFFTjtBQUFNO0FBQ0E7QUFDQTtBQUVOO0FBQU07QUFFTjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFDQTtBQUVOO0FBQU07QUFFTjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBRU47QUFDQTtBQUNBO0FBQUk7QUFDRTtBQUNFO0FBRVI7QUFDQTtBQUFNO0FBQ0E7QUFFTjtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFDRTtBQUVSO0FBQ0E7QUFBTTtBQUVOO0FBQU07QUFDRTtBQUNBO0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFBSTtBQUNFO0FBQ0E7QUFDRTtBQUVSO0FBQ0E7QUFBTTtBQUNFO0FBRVI7QUFDQTtBQUNBO0FBQUk7QUFDRTtBQUNFO0FBRVI7QUFDQTtBQUNBO0FBQUk7QUFDSTtBQUNBO0FBQ0k7QUFFWjtBQUFRO0FBRVI7QUFDQTtBQUFJO0FBQ0k7QUFDQTtBQUNJO0FBRVo7QUFBUTtBQUVSO0FBQ0E7QUFBSTtBQUNFO0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFJO0FBQ0U7QUFDQTtBQUNJO0FBRVY7QUFBTTtBQUNBO0FBRU47QUFDQTtBQUFJO0FBQ0U7QUFDQTtBQUVOO0FBQ0E7QUFDQTtBQUFNO0FBQ0k7QUFFVjtBQUNVO0FBQ1Y7QUFFVTtBQUFWO0FBR1U7QUFEVjtBQUdNO0FBRE47QUFDQTtBQUdJO0FBQ0U7QUFDQTtBQUNBO0FBRE47QUFDQTtBQUdJO0FBQ0U7QUFDQTtBQUNJO0FBRFY7QUFHTTtBQUNJO0FBRFY7QUFHTTtBQUNBO0FBRE47QUFDQTtBQUdJO0FBQ0k7QUFDQTtBQUNBO0FBRFI7QUFDQTtBQUdJO0FBQ0k7QUFDQTtBQUNJO0FBRFo7QUFJWTtBQUZaO0FBS1k7QUFIWjtBQUtRO0FBQ0E7QUFIUjtBQUNBO0FBQ0E7QUFLSTtBQUhKO0FBQ0E7QUFDQTtBQUtJO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFIUjtBQUNBO0FBS007QUFDRTtBQUNBO0FBQ0E7QUFIUjtBQUNBO0FBS007QUFDQTtBQUNFO0FBQ0E7QUFIUjtBQUNBO0FBS007QUFDRTtBQUhSO0FBQ0E7QUFLTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSE47QUFLTTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBSFI7QUFDQTtBQUtNO0FBQ0E7QUFDRTtBQUhSO0FBQ0E7QUFLTTtBQUNBO0FBQ0U7QUFIUjtBQUNBO0FBS007QUFDQTtBQUhOO0FBQ0E7QUFDQTtBQUtJO0FBQ0U7QUFDRTtBQUhSO0FBQ0E7QUFLTTtBQUNFO0FBQ0E7QUFIUjtBQUtRO0FBQ0E7QUFIUjtBQUNBO0FBS007QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBSFY7QUFDQTtBQUNBO0FBS007QUFDRTtBQUhSO0FBQ0E7QUFLTTtBQUhOO0FBQ0E7QUFLSTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFIUjtBQUtNO0FBSE47QUFLTTtBQUNBO0FBQ0U7QUFIUjtBQUNBO0FBS007QUFDQTtBQUhOO0FBQ0E7QUFDQTtBQUtBO0FBQ0k7QUFISjtBQUtBO0FBSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3Y2REE7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUdJO0FBQ0k7QUFEUjtBQUNBO0FBR0k7QUFESjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFDSjtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDUjtBQUNRO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ0U7QUFDUjtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ0k7QUFDSjtBQUNRO0FBQ0E7QUFDUjtBQUNRO0FBQ0k7QUFDWjtBQUNBO0FBQ1E7QUFDQTtBQUNSO0FBQ1E7QUFDSTtBQUNaO0FBQ1k7QUFDWjtBQUNBO0FBQ0E7QUFDSTtBQUNKO0FBQ007QUFDQTtBQUNOO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUVJO0FBQ0U7QUFBTjtBQUNBO0FBRUk7QUFDSTtBQUFSO0FBQ0E7QUFFSTtBQUNFO0FBQ0E7QUFBTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU07QUFBTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVJO0FBQ0U7QUFBTjtBQUVNO0FBQU47QUFDQTtBQUVJO0FBQ0k7QUFDQTtBQUFSO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNBO0FBQVo7QUFDQTtBQUNBO0FBRUk7QUFDSTtBQUNBO0FBQVI7QUFDQTtBQUVLO0FBQ0c7QUFBUjtBQUVRO0FBQ0k7QUFDQTtBQUNBO0FBQVo7QUFFUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0k7QUFBWjtBQUVRO0FBQ0E7QUFBUjtBQUNBO0FBRUk7QUFDSTtBQUNJO0FBQVo7QUFDQTtBQUNBO0FBRUk7QUFDSTtBQUNJO0FBQ0E7QUFBWjtBQUNBO0FBRVE7QUFDSTtBQUNBO0FBQVo7QUFDQTtBQUVRO0FBQ0E7QUFBUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFEUjtBQUNBO0FBR007QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQURSO0FBQ0E7QUFDQTtBQUdJO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFEUjtBQUNBO0FBR1E7QUFEUjtBQUNBO0FBR0k7QUFDRTtBQUNBO0FBRE47QUFDQTtBQUdJO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBRFY7QUFDQTtBQUdRO0FBQ0E7QUFDSTtBQUNBO0FBRFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0VBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDUjtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ047QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ1I7QUFDUTtBQUNSO0FBQ1E7QUFDRTtBQUNWO0FBQ1U7QUFDQTtBQUNBO0FBQ0E7QUFDVjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ1o7QUFFWTtBQUFaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFHSTtBQUNFO0FBRE47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNSO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFHSTtBQUNJO0FBRFI7QUFHWTtBQUNBO0FBRFo7QUFHWTtBQUNJO0FBRGhCO0FBQ0E7QUFDQTtBQUdZO0FBQ0k7QUFEaEI7QUFDQTtBQUNBO0FBSVk7QUFDQTtBQUZaO0FBSVk7QUFDSTtBQUNBO0FBRmhCO0FBSVk7QUFGWjtBQUlRO0FBRlI7QUFDQTtBQUNBO0FBSUk7QUFDSTtBQUZSO0FBSVk7QUFDQTtBQUZaO0FBQ0E7QUFJWTtBQUNJO0FBRmhCO0FBSWdCO0FBRmhCO0FBQ0E7QUFDQTtBQUNBO0FBS1k7QUFDQTtBQUNBO0FBSFo7QUFLWTtBQUNJO0FBQ0E7QUFDQTtBQUhoQjtBQUNBO0FBS1E7QUFIUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNJO0FBQ0o7QUFDSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQTtBQUNJO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0k7QUFDWjtBQUNBO0FBQ1E7QUFDSTtBQUNBO0FBQ1o7QUFDWTtBQUNaO0FBQ1k7QUFDWjtBQUNRO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDaEI7QUFFZ0I7QUFBaEI7QUFDQTtBQUNBO0FBR0k7QUFDSTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFEaEI7QUFJZ0I7QUFDQTtBQUZoQjtBQUtnQjtBQUNBO0FBSGhCO0FBS1k7QUFDSTtBQUhoQjtBQUtZO0FBSFo7QUFLUTtBQUhSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFFSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUFaO0FBRVk7QUFBWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFDSTtBQUNBO0FBQ1o7QUFDUTtBQUNJO0FBQ0E7QUFDQTtBQUNJO0FBQ0k7QUFDQTtBQUNwQjtBQUNnQjtBQUNBO0FBQ0E7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNSO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDSTtBQUNJO0FBQ0E7QUFHQTtBQUNJO0FBQ0E7QUFEWjtBQUdRO0FBQ0k7QUFDQTtBQURaO0FBR1E7QUFDSTtBQUNBO0FBRFo7QUFDQTtBQUNBO0FBR1E7QUFDQTtBQURSO0FBQ0E7QUFHSTtBQUNJO0FBQ0E7QUFDSTtBQURaO0FBQ0E7QUFHUTtBQUNJO0FBRFo7QUFHUTtBQUNBO0FBRFI7QUFDQTtBQUNBO0FBR0k7QUFDSTtBQUNBO0FBQ0k7QUFEWjtBQUdRO0FBQ0k7QUFEWjtBQUNBO0FBR1E7QUFDQTtBQUNBO0FBRFI7QUFDQTtBQUdJO0FBQ0k7QUFEUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDQTtBQUNKO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNKO0FBQ0k7QUFDSjtBQUNJO0FBQ0E7QUFDRTtBQUNOO0FBQ0E7QUFDSTtBQUNKO0FBQ0k7QUFDQTtBQUNBO0FBQ0o7QUFDSTtBQUNFO0FBQ047QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUNFO0FBQ0Y7QUFDSTtBQUNKO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNOO0FBQ0k7QUFDSjtBQUNJO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ047QUFDSTtBQUNKO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFDTTtBQUNBO0FBQ047QUFDTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNBO0FBQ047QUFDTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSTtBQUNFO0FBQ047QUFDTTtBQUNBO0FBQ0E7QUFDRTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTTtBQUNOO0FBQ007QUFDQTtBQUNOO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDQTtBQUVNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBTjtBQUNBO0FBQ0E7QUFDQTtBQUVFO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFBUjtBQUNBO0FBQ0E7QUFDQTtBQUVFO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVFO0FBQUY7QUFJRTtBQUZGO0FBTUU7QUFKRjtBQVFFO0FBTkY7QUFVRTtBQVJGO0FBWUU7QUFWRjtBQWNFO0FBWkY7QUFjSTtBQUNBO0FBQ0E7QUFDRTtBQVpOO0FBQ0E7QUFDQTtBQUNBO0FBY0U7QUFaRjtBQWNJO0FBQ0E7QUFaSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBY0U7QUFDRTtBQUNBO0FBQ0U7QUFaTjtBQWNJO0FBWko7QUFDQTtBQWNJO0FBQ0E7QUFDQTtBQVpKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFjRTtBQUNFO0FBQ0E7QUFDRTtBQVpOO0FBY0k7QUFaSjtBQUNBO0FBY0k7QUFDQTtBQUNBO0FBWko7QUFjSTtBQUNFO0FBWk47QUFDQTtBQUNBO0FBQ0E7QUFjRTtBQUNFO0FBWko7QUFDQTtBQUNBO0FBY0U7QUFaRjtBQWNJO0FBQ0E7QUFaSjtBQUNBO0FBY0U7QUFDRTtBQVpKO0FBY0k7QUFDRTtBQUNBO0FBQ0E7QUFaTjtBQUNBO0FBY0k7QUFDRTtBQUNFO0FBWlI7QUFDQTtBQWNNO0FBWk47QUFDQTtBQUNBO0FBY0U7QUFaRjtBQUNBO0FBWUk7QUFDRTtBQVZOO0FBQ0E7QUFZSTtBQUNFO0FBVk47QUFDQTtBQVlJO0FBQ0U7QUFDRTtBQVZSO0FBQ0E7QUFhSTtBQVhKO0FBQ0E7QUFhRTtBQVhGO0FBQ0E7QUFXSTtBQUNBO0FBQ0E7QUFUSjtBQVdJO0FBVEo7QUFDQTtBQUNBO0FBV0U7QUFDRTtBQUNFO0FBVE47QUFDQTtBQVdJO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQVRWO0FBQ0E7QUFDQTtBQVdNO0FBVE47QUFDQTtBQUNBO0FBQ0E7QUFXRTtBQUNFO0FBVEo7QUFDQTtBQVdFO0FBQ0U7QUFUSjtBQUNBO0FBV0U7QUFDRTtBQUNFO0FBQ0E7QUFUTjtBQUNBO0FBQ0E7QUFDQTtBQVdFO0FBQ0U7QUFUSjtBQUNBO0FBQ0E7QUFXRTtBQUNFO0FBQ0E7QUFUSjtBQVdJO0FBVEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRGO0FBV0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFURjtBQVdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFURjtBQVdFO0FBVEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQ0U7QUFURjtBQUNBO0FBV0E7QUFDRTtBQUNBO0FBVEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7QUFDRTtBQUNBO0FBVkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBQ0U7QUFDQTtBQVZGO0FBQ0E7QUFDQTtBQVlBO0FBQ0U7QUFDQTtBQVZGO0FBWUU7QUFDQTtBQVZGO0FBQ0E7QUFDQTtBQVlBO0FBQ0U7QUFDQTtBQVZGO0FBWUU7QUFDRTtBQUNBO0FBVko7QUFZRTtBQVZGO0FBQ0E7QUFDQTtBQVlBO0FBQ0U7QUFDRTtBQUNBO0FBVko7QUFZRTtBQVZGO0FBQ0E7QUFDQTtBQVlBO0FBQ0U7QUFDQTtBQUNFO0FBVko7QUFDQTtBQVlFO0FBVkY7QUFDQTtBQVlBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQVZKO0FBWUU7QUFWRjtBQUNBO0FBWUE7QUFWQTtBQUNBO0FBVUU7QUFDQTtBQVJGO0FBVUU7QUFDRTtBQVJKO0FBQ0E7QUFVRTtBQUNFO0FBQ0E7QUFSSjtBQVVFO0FBUkY7QUFDQTtBQVVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQVJKO0FBVUU7QUFSRjtBQUNBO0FBVUE7QUFDRTtBQUNBO0FBQ0U7QUFSSjtBQUNBO0FBVUU7QUFSRjtBQUNBO0FBVUE7QUFDRTtBQUNBO0FBQ0U7QUFSSjtBQVVFO0FBUkY7QUFDQTtBQVVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQVJKO0FBQ0E7QUFVRTtBQVJGO0FBQ0E7QUFVQTtBQUNJO0FBQ0E7QUFDRTtBQVJOO0FBQ0E7QUFVSTtBQVJKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQVJBO0FBQ0E7QUFRRTtBQUNBO0FBQ0U7QUFDQTtBQU5KO0FBQ0E7QUFRRTtBQU5GO0FBVUk7QUFDQTtBQUNFO0FBUk47QUFDQTtBQVVJO0FBUko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFDSTtBQUNBO0FBQ0U7QUFDQTtBQVJOO0FBQ0E7QUFVSTtBQVJKO0FBQ0E7QUFVQTtBQUNFO0FBQ0E7QUFDRTtBQVJKO0FBQ0E7QUFVRTtBQVJGO0FBQ0E7QUFVQTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFSSjtBQUNBO0FBVUU7QUFSRjtBQUNBO0FBVUE7QUFDRTtBQUNBO0FBQ0U7QUFSSjtBQVVFO0FBUkY7QUFDQTtBQVVBO0FBQ0U7QUFDQTtBQUNFO0FBUko7QUFDQTtBQVVFO0FBUkY7QUFDQTtBQUNBO0FBVUE7QUFDRTtBQUNBO0FBQ0U7QUFSSjtBQUNBO0FBVUU7QUFSRjtBQUNBO0FBQ0E7QUFVQTtBQUNJO0FBQ0E7QUFDRTtBQVJOO0FBQ0E7QUFVSTtBQVJKO0FBQ0E7QUFDQTtBQVVBO0FBQ0k7QUFDRTtBQVJOO0FBQ0E7QUFVSTtBQVJKO0FBQ0E7QUFDQTtBQVVBO0FBQ0k7QUFDRTtBQUNBO0FBUk47QUFDQTtBQVVJO0FBUko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbHFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNJO0FBQ0o7QUFDSTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1I7QUFDQTtBQUNBO0FBQ0k7QUFDRTtBQUNOO0FBQ0E7QUFDSTtBQUNKO0FBQ0E7QUFETTtBQUdOO0FBQ0E7QUFESTtBQUdKO0FBQ0E7QUFIUTtBQUtSO0FBQ0E7QUFISTtBQUtKO0FBQ0E7QUFMUTtBQU9SO0FBQ0E7QUFMSTtBQU9KO0FBQ0E7QUFQTTtBQVNOO0FBQ0E7QUFQSTtBQUNFO0FBS0U7QUFLUjtBQUNBO0FBSE07QUFDRTtBQUNFO0FBS1Y7QUFDQTtBQUhRO0FBQ0E7QUFLUjtBQUNBO0FBQ0E7QUFISTtBQUtKO0FBQ0E7QUFMTTtBQU9OO0FBTFE7QUFPUjtBQUNBO0FBTE07QUFPTjtBQUNBO0FBTEk7QUFPSjtBQUNBO0FBUE07QUFTTjtBQUNBO0FBUEk7QUFTSjtBQUNBO0FBVE07QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQVdSO0FBQ0E7QUFUTTtBQVdOO0FBQ0E7QUFUSTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFXUjtBQUNBO0FBQ0E7QUFUSTtBQUNFO0FBQ0E7QUFDRTtBQVdSO0FBQ0E7QUFDQTtBQUNBO0FBVEk7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQVdSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSEE7QUFDSTtBQUNKO0FBQ0k7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSTtBQUNJO0FBQ1I7QUFDQTtBQUNJO0FBQ0k7QUFDUjtBQUNBO0FBQ0k7QUFDSTtBQUNSO0FBQ0E7QUFDSztBQUNHO0FBQ0E7QUFDQTtBQUNSO0FBQ1M7QUFDQTtBQUNJO0FBQ2I7QUFFYTtBQUFiO0FBR2E7QUFEYjtBQUlhO0FBRmI7QUFJUztBQUNBO0FBQ0k7QUFGYjtBQUthO0FBSGI7QUFNYTtBQUpiO0FBT2E7QUFMYjtBQUNBO0FBT1M7QUFDSTtBQUxiO0FBT1M7QUFMVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyDnu5kgQXJyYXkg5re75Yqg5pa55rOVXG4vLyBhcnIuZmluZCguLi4pXG4vLyBhcnIuZmluZEluZGV4KC4uLilcbi8vIGFyci5pbmNsdWRlcyhlKVxuLy8gYXJyLnVuaXF1ZShlcXVhbEZ1bmN0aW9uLCBpc05ld0FycmF5KVxuLy8gQXJyYXkuZnJvbVxuLy8gQXJyYXkuZXF1YWxcbi8vIGFyci5pc0VxdWFsKG90aGVyQXJyYXksIGlzU3RyaWN0KVxuLy8gQXJyYXkuc29ydEJ5TnVtYmVyXG4vLyBhcnIuZmluZFN1YkFycmF5SW5kZXhzKFtdKSAgIOeUqOS6juafpeaJvuaVsOe7hOWGheeahOmDqOWIhuWFg+e0oOeahOe0ouW8lVxuLy8gYXJyLnRyYW5zbGF0aW9uV2l0aFN0YXJ0SW5kZXgoc3RhcnRJbmRleCkg5bCG5pWw57uE5YaF55qE5YWD57Sg5bmz56e7XG4vLyDlpoLvvJpbMSwgMiwgMywgNCwgNV0udHJhbnNsYXRpb25XaXRoU3RhcnRJbmRleCgzKSA9PiBbNCw1LDEsMiwzXVxuLy8gYXJyLmtxX2luc2VydChpbmRleCwgZSkgICDmj5LlhaXkuIDkuKrlhYPntKBcbi8vIGFyci5rcV9leGNsdWRlcyhhcnJheSkgICAvLyDpmaTkuoZhcnJheeaVsOe7hOS4reeahOWFg+e0oFxuXG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgQXJyYXkucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVkaWNhdGUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aCA+Pj4gMDtcbiAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IGxpc3RbaV07XG4gICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gIEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xuICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gbGlzdFtpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbn1cblxuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbmlmICghQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdpbmNsdWRlcycsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB7XG5cbiAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuXG4gICAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG8gPSBPYmplY3QodGhpcyk7XG5cbiAgICAgIC8vIDIuIExldCBsZW4gYmUgPyBUb0xlbmd0aCg/IEdldChPLCBcImxlbmd0aFwiKSkuXG4gICAgICB2YXIgbGVuID0gby5sZW5ndGggPj4+IDA7XG5cbiAgICAgIC8vIDMuIElmIGxlbiBpcyAwLCByZXR1cm4gZmFsc2UuXG4gICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gNC4gTGV0IG4gYmUgPyBUb0ludGVnZXIoZnJvbUluZGV4KS5cbiAgICAgIC8vICAgIChJZiBmcm9tSW5kZXggaXMgdW5kZWZpbmVkLCB0aGlzIHN0ZXAgcHJvZHVjZXMgdGhlIHZhbHVlIDAuKVxuICAgICAgdmFyIG4gPSBmcm9tSW5kZXggfCAwO1xuXG4gICAgICAvLyA1LiBJZiBuIOKJpSAwLCB0aGVuXG4gICAgICAvLyAgYS4gTGV0IGsgYmUgbi5cbiAgICAgIC8vIDYuIEVsc2UgbiA8IDAsXG4gICAgICAvLyAgYS4gTGV0IGsgYmUgbGVuICsgbi5cbiAgICAgIC8vICBiLiBJZiBrIDwgMCwgbGV0IGsgYmUgMC5cbiAgICAgIHZhciBrID0gTWF0aC5tYXgobiA+PSAwID8gbiA6IGxlbiAtIE1hdGguYWJzKG4pLCAwKTtcblxuICAgICAgLy8gNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXG4gICAgICB3aGlsZSAoayA8IGxlbikge1xuICAgICAgICAvLyBhLiBMZXQgZWxlbWVudEsgYmUgdGhlIHJlc3VsdCBvZiA/IEdldChPLCAhIFRvU3RyaW5nKGspKS5cbiAgICAgICAgLy8gYi4gSWYgU2FtZVZhbHVlWmVybyhzZWFyY2hFbGVtZW50LCBlbGVtZW50SykgaXMgdHJ1ZSwgcmV0dXJuIHRydWUuXG4gICAgICAgIC8vIGMuIEluY3JlYXNlIGsgYnkgMS5cbiAgICAgICAgLy8gTk9URTogPT09IHByb3ZpZGVzIHRoZSBjb3JyZWN0IFwiU2FtZVZhbHVlWmVyb1wiIGNvbXBhcmlzb24gbmVlZGVkIGhlcmUuXG4gICAgICAgIGlmIChvW2tdID09PSBzZWFyY2hFbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaysrO1xuICAgICAgfVxuXG4gICAgICAvLyA4LiBSZXR1cm4gZmFsc2VcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyB1bmlxdWVcbmlmICghQXJyYXkucHJvdG90eXBlLnVuaXF1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAndW5pcXVlJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihlcXVhbEZ1bmN0aW9uLCBuZXdBcnJheSA9IHRydWUpIHtcbiAgICAgIGlmIChuZXdBcnJheSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdW5xaXVlX25ldyhlcXVhbEZ1bmN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3VucWl1ZShlcXVhbEZ1bmN0aW9uKTtcbiAgICB9LFxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnX3VucWl1ZV9uZXcnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKGVxdWFsRnVuY3Rpb24pIHtcbiAgICAgIGxldCBhcnJheSA9IEFycmF5LmZyb20odGhpcyk7XG5cbiAgICAgIHJldHVybiBhcnJheS5fdW5xaXVlKGVxdWFsRnVuY3Rpb24pO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ191bnFpdWUnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKGVxdWFsRnVuY3Rpb24pIHtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gLTE7XG5cbiAgICAgIHdoaWxlIChpKysgPCBsZW4pIHtcbiAgICAgICAgdmFyIGogPSBpICsgMTtcblxuICAgICAgICBmb3IgKDsgaiA8IHRoaXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICB2YXIgaXNFcXVhbCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChlcXVhbEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpc0VxdWFsID0gZXF1YWxGdW5jdGlvbih0aGlzW2ldLCB0aGlzW2pdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNFcXVhbCA9IHRoaXNbaV0gPT09IHRoaXNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzRXF1YWwpIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKGotLSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICB9KTtcbn1cblxuXG4vLyBQcm9kdWN0aW9uIHN0ZXBzIG9mIEVDTUEtMjYyLCBFZGl0aW9uIDYsIDIyLjEuMi4xXG4vLyBSZWZlcmVuY2U6IGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1hcnJheS5mcm9tXG5pZiAoIUFycmF5LmZyb20pIHtcbiAgQXJyYXkuZnJvbSA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIHZhciBpc0NhbGxhYmxlID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfTtcbiAgICB2YXIgdG9JbnRlZ2VyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyID09PSAwIHx8ICFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG51bWJlciA+IDAgPyAxIDogLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKTtcbiAgICB9O1xuICAgIHZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gICAgdmFyIHRvTGVuZ3RoID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSB0b0ludGVnZXIodmFsdWUpO1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGxlbiwgMCksIG1heFNhZmVJbnRlZ2VyKTtcbiAgICB9O1xuXG4gICAgLy8gVGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiB0aGUgZnJvbSBtZXRob2QgaXMgMS5cbiAgICByZXR1cm4gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyosIG1hcEZuLCB0aGlzQXJnICovICkge1xuICAgICAgLy8gMS4gTGV0IEMgYmUgdGhlIHRoaXMgdmFsdWUuXG4gICAgICB2YXIgQyA9IHRoaXM7XG5cbiAgICAgIC8vIDIuIExldCBpdGVtcyBiZSBUb09iamVjdChhcnJheUxpa2UpLlxuICAgICAgdmFyIGl0ZW1zID0gT2JqZWN0KGFycmF5TGlrZSk7XG5cbiAgICAgIC8vIDMuIFJldHVybklmQWJydXB0KGl0ZW1zKS5cbiAgICAgIGlmIChhcnJheUxpa2UgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZFwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gNC4gSWYgbWFwZm4gaXMgdW5kZWZpbmVkLCB0aGVuIGxldCBtYXBwaW5nIGJlIGZhbHNlLlxuICAgICAgdmFyIG1hcEZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB2b2lkIHVuZGVmaW5lZDtcbiAgICAgIHZhciBUO1xuICAgICAgaWYgKHR5cGVvZiBtYXBGbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gNS4gZWxzZVxuICAgICAgICAvLyA1LiBhIElmIElzQ2FsbGFibGUobWFwZm4pIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgIGlmICghaXNDYWxsYWJsZShtYXBGbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNS4gYi4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBUID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIDEwLiBMZXQgbGVuVmFsdWUgYmUgR2V0KGl0ZW1zLCBcImxlbmd0aFwiKS5cbiAgICAgIC8vIDExLiBMZXQgbGVuIGJlIFRvTGVuZ3RoKGxlblZhbHVlKS5cbiAgICAgIHZhciBsZW4gPSB0b0xlbmd0aChpdGVtcy5sZW5ndGgpO1xuXG4gICAgICAvLyAxMy4gSWYgSXNDb25zdHJ1Y3RvcihDKSBpcyB0cnVlLCB0aGVuXG4gICAgICAvLyAxMy4gYS4gTGV0IEEgYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBDIHdpdGggYW4gYXJndW1lbnQgbGlzdCBjb250YWluaW5nIHRoZSBzaW5nbGUgaXRlbSBsZW4uXG4gICAgICAvLyAxNC4gYS4gRWxzZSwgTGV0IEEgYmUgQXJyYXlDcmVhdGUobGVuKS5cbiAgICAgIHZhciBBID0gaXNDYWxsYWJsZShDKSA/IE9iamVjdChuZXcgQyhsZW4pKSA6IG5ldyBBcnJheShsZW4pO1xuXG4gICAgICAvLyAxNi4gTGV0IGsgYmUgMC5cbiAgICAgIHZhciBrID0gMDtcbiAgICAgIC8vIDE3LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW7igKYgKGFsc28gc3RlcHMgYSAtIGgpXG4gICAgICB2YXIga1ZhbHVlO1xuICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICAgICAga1ZhbHVlID0gaXRlbXNba107XG4gICAgICAgIGlmIChtYXBGbikge1xuICAgICAgICAgIEFba10gPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbihrVmFsdWUsIGspIDogbWFwRm4uY2FsbChULCBrVmFsdWUsIGspO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEFba10gPSBrVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgayArPSAxO1xuICAgICAgfVxuICAgICAgLy8gMTguIExldCBwdXRTdGF0dXMgYmUgUHV0KEEsIFwibGVuZ3RoXCIsIGxlbiwgdHJ1ZSkuXG4gICAgICBBLmxlbmd0aCA9IGxlbjtcbiAgICAgIC8vIDIwLiBSZXR1cm4gQS5cbiAgICAgIHJldHVybiBBO1xuICAgIH07XG4gIH0oKSk7XG59XG5cbmlmICghQXJyYXkuZXF1YWwpIHtcbiAgQXJyYXkuZXF1YWwgPSBmdW5jdGlvbihhcnIxLCBhcnIyLCBzdHJpY3QgPSB0cnVlKSB7XG4gICAgaWYgKGFycjEgPT09IHVuZGVmaW5lZCB8fCBhcnIyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGVuZ3RoID0gYXJyMS5sZW5ndGhcbiAgICBpZiAobGVuZ3RoICE9PSBhcnIyLmxlbmd0aCkgcmV0dXJuIGZhbHNlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUxID0gYXJyMVtpXTtcbiAgICAgICAgdmFyIHZhbHVlMiA9IGFycjJbaV07XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZTEpICYmIEFycmF5LmlzQXJyYXkodmFsdWUyKSkge1xuICAgICAgICAgIHJlc3VsdCA9IEFycmF5LmVxdWFsKHZhbHVlMSwgdmFsdWUyLCBzdHJpY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9ICh2YWx1ZTEgPT0gdmFsdWUyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUuaXNFcXVhbCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnaXNFcXVhbCcsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24ob3RoZXJBcnJheSwgc3RyaWN0ID0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIEFycmF5LmVxdWFsKHRoaXMsIG90aGVyQXJyYXksIHN0cmljdCk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmlmICghQXJyYXkuc29ydEJ5TnVtYmVyKSB7XG4gIEFycmF5LnNvcnRCeU51bWJlciA9IGZ1bmN0aW9uIChuMSwgbjIsIGFzYyA9IHRydWUpIHtcbiAgICByZXR1cm4gKG4xIC0gbjIpICogKGFzYyA/IDEgOiAtMSk7XG4gIH07XG59XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmRTdWJBcnJheUluZGV4cykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnZmluZFN1YkFycmF5SW5kZXhzJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoc3ViQXJyYXksIGYpIHtcbiAgICAgIGxldCBpbmRleHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgaW4gc3ViQXJyYXkpIHtcbiAgICAgICAgbGV0IHN1YlZhbHVlID0gc3ViQXJyYXlbaV07XG4gICAgICAgIGxldCBmaW5kRnVuYyA9IGYgfHwgZnVuY3Rpb24gKHRoaXNWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzdWJWYWx1ZSA9PT0gdGhpc1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuZmluZEluZGV4KGZpbmRGdW5jKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICBpbmRleHMucHVzaChpbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXhzID0gW107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluZGV4cy5sZW5ndGggPiAwID8gaW5kZXhzIDogbnVsbDtcbiAgICB9LFxuICB9KTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUudHJhbnNsYXRpb25XaXRoU3RhcnRJbmRleCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAndHJhbnNsYXRpb25XaXRoU3RhcnRJbmRleCcsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKHN0YXJ0SW5kZXgpIHtcbiAgICAgIGlmIChzdGFydEluZGV4ID09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydEluZGV4ID49IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsZXQgcHJlID0gdGhpcy5zbGljZShzdGFydEluZGV4KTtcbiAgICAgIGxldCBsYXN0ID0gdGhpcy5zbGljZSgwLCBzdGFydEluZGV4KTtcbiAgICAgIGxldCByZXN1bHQgPSBwcmUuY29uY2F0KGxhc3QpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gIH0pO1xufVxuXG5pZiAoIUFycmF5LnByb3RvdHlwZS5rcV9pbnNlcnQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2txX2luc2VydCcsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oaW5kZXgsIGUpIHtcbiAgICAgIGlmIChlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA+PSB0aGlzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnB1c2goZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDAsIGUpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICB9KTtcbn1cblxuaWYgKCFBcnJheS5wcm90b3R5cGUua3FfZXhjbHVkZXMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2txX2V4Y2x1ZGVzJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihvdGhlckFycmF5KSB7XG4gICAgICBpZiAob3RoZXJBcnJheSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoIW90aGVyQXJyYXkuaW5jbHVkZXMoZWxlbWVudCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgfSk7XG59IiwidmFyIG1hbmFnZXIgPSByZXF1aXJlKCdtYW5hZ2VyJyk7XG5cbmxldCBBdWRpb01hbmFnZXIgPSBjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBoYWxsX2JnbToge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHVybDogY2MuQXVkaW9DbGlwXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2FtZV9iZ206IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB1cmw6IGNjLkF1ZGlvQ2xpcFxuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXBhcmVfYmdtOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdXJsOiBjYy5BdWRpb0NsaXBcbiAgICAgICAgfSxcblxuICAgICAgICAvLyDmiZPmnqpcbiAgICAgICAgZGFRaWFuZzoge1xuICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgdXJsOiBjYy5BdWRpb0NsaXBcbiAgICAgICAgfSxcblxuICAgICAgICBidXR0b25DbGlja1N1cmU6IHtcbiAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgIHVybDogY2MuQXVkaW9DbGlwXG4gICAgICAgIH0sXG5cbiAgICAgICAgZmFwYWk6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB1cmw6IGNjLkF1ZGlvQ2xpcFxuICAgICAgICB9LFxuXG4gICAgICAgIGNsaWNrX3B1YmxpYzoge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHVybDogY2MuQXVkaW9DbGlwXG4gICAgICAgIH0sXG4gICAgICAgIGNsaWNrX2NhbmNlbDoge1xuICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICB1cmw6IGNjLkF1ZGlvQ2xpcFxuICAgICAgICB9LFxuICAgICAgICBjbGlja19jcmVhdGVSb29tOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdXJsOiBjYy5BdWRpb0NsaXBcbiAgICAgICAgfSxcbiAgICAgICAgd2luZG93OiB7XG4gICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgIHVybDogY2MuQXVkaW9DbGlwXG4gICAgICAgIH0sXG4gICAgICAgIGNsaWNrX3dlaXhpbl9sb2dpbjp7XG4gICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgIHVybDogY2MuQXVkaW9DbGlwXG4gICAgICAgIH0sXG4gICAgICAgIGZhbmdQYWk6e1xuICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICB1cmw6IGNjLkF1ZGlvQ2xpcFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICB9LFxuXG4gICAgb25Mb2FkOmZ1bmN0aW9uKCkge1xuICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlID0gdGhpcztcbiAgICAgIHRoaXMuX3JlZ2lzdGVyQXBwQWN0aXZlQ2hhbmdlKCk7XG5cbiAgICAgICAgdGhpcy5zb3VuZE9uID0gdHJ1ZTtcbiAgICAgICAgY2MuZ2FtZS5hZGRQZXJzaXN0Um9vdE5vZGUodGhpcy5ub2RlKTtcbiAgICAgICAgaWYgKGNjLmdhbWUuaXNQZXJzaXN0Um9vdE5vZGUodGhpcy5ub2RlKSkge1xuICAgICAgICAgICAgY2MubG9nKCfmt7vliqDlhajlsYDoioLngrnmiJDlip8nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1WYWx1ZSA9IG1hbmFnZXIuZ2V0TXVzaWNWYWx1ZSgpO1xuICAgICAgICB0aGlzLm1FVmFsdWUgPSBtYW5hZ2VyLmdldE11c2ljRWZmZWN0VmFsdWUoKTtcbiAgICAgICAgdGhpcy5iZ0F1ZGlvSWQgPSAtMTtcbiAgICB9LFxuXG4gICAgc3RvcEhhbGxNdXNpYzogZnVuY3Rpb24oKXtcbiAgICAgICAgY2MuYXVkaW9FbmdpbmUuc3RvcCh0aGlzLmJnQXVkaW9JZCk7XG4gICAgfSxcblxuICAgIHBsYXlNdXNpYzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYmdBdWRpb0lkID0gY2MuYXVkaW9FbmdpbmUucGxheU11c2ljKCB0aGlzLmhhbGxfYmdtLCB0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMuYmdBdWRpb0lkICE9IC0xKSB7XG4gICAgICAgICAgICBjYy5sb2coJ3BsYXknKTtcbiAgICAgICAgICAgIGNjLmF1ZGlvRW5naW5lLnNldFZvbHVtZSh0aGlzLmJnQXVkaW9JZCx0aGlzLm1WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jYy5hdWRpb0VuZ2luZS5wbGF5TXVzaWMoIHVybCwgdHJ1ZSApXG4gICAgfSxcblxuICAgIC8qcGxheURlc2tNdXNpYzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYmdBdWRpb0lkID0gY2MuYXVkaW9FbmdpbmUucGxheU11c2ljKCB0aGlzLmdhbWVfYmdtLCB0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMuYmdBdWRpb0lkICE9IC0xKSB7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5zZXRWb2x1bWUodGhpcy5iZ0F1ZGlvSWQsdGhpcy5tVmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwqL1xuXG4gICAgcGxheUNvbXBhcmVDYXJkc011c2ljOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmJnQXVkaW9JZCA9IGNjLmF1ZGlvRW5naW5lLnBsYXlNdXNpYyggdGhpcy5jb21wYXJlX2JnbSwgdHJ1ZSk7XG4gICAgICBpZiAodGhpcy5iZ0F1ZGlvSWQgIT0gLTEpIHtcbiAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0Vm9sdW1lKHRoaXMuYmdBdWRpb0lkLHRoaXMubVZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcGxheURhUWlhbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIHN0YXJ0ID0gMDsgc3RhcnQgPD0gMS42OyBzdGFydCA9IHN0YXJ0ICsgMC41KSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9wbGF5U0ZYKHRoaXMuZGFRaWFuZyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgc3RhcnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyDigJzmiZPmnqrigJ1cbiAgICBwbGF5SHVtYW5EYVFpYW5nOiBmdW5jdGlvbiAoc2V4ID0gMSkge1xuICAgICAgdmFyIHBhdGggPSBcInJlc291cmNlcy9zb3VuZHMvXCIgKyAoc2V4ID09IDEgPyBcIm1hblwiIDogXCJ3b21hblwiKTtcbiAgICAgIHBhdGggPSBwYXRoICsgXCIvZGFxaWFuZzEud2F2XCI7XG5cbiAgICAgIGxldCB1cmwgPSBjYy51cmwucmF3KHBhdGgpO1xuICAgICAgdGhpcy5fcGxheVNGWCh1cmwpO1xuICAgIH0sXG5cbiAgICBwbGF5UG9rZXJDbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHVybCA9IGNjLnVybC5yYXcoJ3Jlc291cmNlcy9zb3VuZHMvcHVibGljL3Bva2VyX2NsaWNrLndhdicpO1xuICAgICAgdGhpcy5fcGxheVNGWCh1cmwpO1xuICAgIH0sXG5cbiAgICAvLyDmkq3mlL7lhajlnpLmiZPpn7PmlYhcbiAgICBwbGF5SG9tZVJ1bjogZnVuY3Rpb24gKHNleCA9IDEpIHtcbiAgICAgIGxldCBwYXRoID0gdGhpcy5fc291bmRzSHVtYW5QYXRoKHNleCkgKyBcInNwZWNpYWwxLndhdlwiO1xuICAgICAgbGV0IHVybCA9IGNjLnVybC5yYXcocGF0aCk7XG4gICAgICB0aGlzLl9wbGF5U0ZYKHVybCk7XG4gICAgfSxcblxuICAgIC8vIOaSreaUvuWPkeeJjOmfs+aViFxuICAgIHBsYXlGYVBhaTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3BsYXlTRlgodGhpcy5mYXBhaSk7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbGF5U0ZYKHRoaXMuZmFwYWkpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBpbmRleCAqIDAuMSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcGxheUNhcmRUeXBlOiBmdW5jdGlvbiAoc2V4ID0gMSwgdHlwZSA9IC0xKSB7XG4gICAgICAvLyDlj6rmkq3mlL7mma7pgJrnsbvlnovnmoTor63pn7NcbiAgICAgIGlmICgodHlwZSA+PSAxMCkgfHwgKHR5cGUgPCAwKSkge1xuICAgICAgICAvLyAxMCDlj4rku6XkuIrmmK/nibnmrorniYxcbiAgICAgICAgICBsZXQgcGF0aCA9IHRoaXMuX3NvdW5kc0h1bWFuUGF0aChzZXgpICsgKHR5cGUpICsgXCIud2F2XCI7XG4gICAgICAgICAgbGV0IHVybCA9IGNjLnVybC5yYXcocGF0aCk7XG4gICAgICAgICAgdGhpcy5fcGxheVNGWCh1cmwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXRoID0gdGhpcy5fc291bmRzSHVtYW5QYXRoKHNleCkgKyBcImNvbW1vblwiICsgKHR5cGUgKyAxKSArIFwiLndhdlwiO1xuICAgICAgbGV0IHVybCA9IGNjLnVybC5yYXcocGF0aCk7XG4gICAgICB0aGlzLl9wbGF5U0ZYKHVybCk7XG4gICAgfSxcblxuICAgIC8vIOaSreaUviDlvIDlp4vmr5TniYxcbiAgICBwbGF5U3RhcnRDb21wYXJlOiBmdW5jdGlvbiAoc2V4ID0gMSkge1xuICAgICAgbGV0IHBhdGggPSB0aGlzLl9zb3VuZHNIdW1hblBhdGgoc2V4KSArIFwic3RhcnRfY29tcGFyZS53YXZcIjtcbiAgICAgIGxldCB1cmwgPSBjYy51cmwucmF3KHBhdGgpO1xuICAgICAgdGhpcy5fcGxheVNGWCh1cmwpO1xuICAgIH0sXG5cbiAgICBwbGF5V2luOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gY2MudXJsLnJhdygncmVzb3VyY2VzL3NvdW5kcy9vcGVuZmFjZS93aW4ubXAzJyk7XG4gICAgICB0aGlzLl9wbGF5U0ZYKHVybCk7XG4gICAgfSxcblxuICAgIHBsYXlMb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gY2MudXJsLnJhdygncmVzb3VyY2VzL3NvdW5kcy9vcGVuZmFjZS9sb3NlLm1wMycpO1xuICAgICAgdGhpcy5fcGxheVNGWCh1cmwpO1xuICAgIH0sXG5cbiAgICBfc291bmRzSHVtYW5QYXRoOiBmdW5jdGlvbiAoc2V4KSB7XG4gICAgICBsZXQgcGF0aCA9IFwicmVzb3VyY2VzL3NvdW5kcy9cIiArIChzZXggPT0gMSA/IFwibWFuXCIgOiBcIndvbWFuXCIpICsgXCIvXCI7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9LFxuXG4gICAgc2V0QmdNdXNpY1ZvbHVtbjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5tVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuYmdBdWRpb0lkICE9IC0xKSB7XG4gICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0Vm9sdW1lKHRoaXMuYmdBdWRpb0lkLHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRFZmZlY3RNdXNpY1ZvbHVtOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLm1FVmFsdWUgPSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgLyrogYrlpKkqL1xuICAgIHBsYXlDaGF0QXVkaW86ZnVuY3Rpb24oc2V4LCBzdHIpIHtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMuY2hhdFRleHRzKCkuaW5kZXhPZihzdHIpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICAgbGV0IG51bWJlciA9ICgoc2V4ID09IDEpID8gMTAwMCA6IDIwMDApICsgaW5kZXg7XG4gICAgICAgIGxldCBwYXRoID0gXCJyZXNvdXJjZXMvc291bmRzL2NoYXQvXCIgKyBudW1iZXIgKyBcIi53YXZcIjtcbiAgICAgICAgbGV0IHVybCA9IGNjLnVybC5yYXcocGF0aCk7XG4gICAgICAgIHRoaXMuX3BsYXlTRlgodXJsKTtcbiAgICB9LFxuXG4gICAgLyon5b6I6auY5YW05ZKM5L2g5Lus5LiA6LW35omT54mM77yBJyxcbiAgICAgICAgJ+W/q+eCueWEv+WQp++8jOaIkeetieW+l+iKseWEv+mDveiwouS6hn7vvIEnLFxuICAgICAgICAn5oCl5LuA5LmI77yM6K6p5oiR5oOz5oOz5oCO5LmI5omT77yBJyxcbiAgICAgICAgJ+i/meeJjOecn+Wlve+8jOWFqOWekuaJk+acieW4jOacm+WViu+8gScsXG4gICAgICAgICfmiJHmmK/kuIDkuKrnpZ7mnqrmiYvvvIzmiZPmiqLmnKzpooblpKfvvIEnLFxuICAgICAgICAn6L+Z5oqK54mM5pWi5LiN5pWi5YaN5rC05LiA54K55ZWK77yBJyxcbiAgICAgICAgJ+WPiOi+k+WVpu+8geWkp+eIt+e7meadoea0u+i3r+WQp++8gScsXG4gICAgICAgICfkvaDmmK/lprnlprkg6L+Y5piv5ZOl5ZOl5ZWKJyxcbiAgICAgICAgJ+S6pOS4quaci+WPi+WQp+OAguOAgicsXG4gICAgICAgICfmiJHmnInkuovlhYjotbDkuobvvIzkuIvmrKHlho3njqnlkKfvvIEnLFxuICAgICAgICAn5YaN6KeB5LqGIOaIkeS8muaDs+W/teWkp+WutueahO+8jO+8jCcsXG4gICAgICAgICfmgI7kuYjlj4jmlq3nur/kuoYgIOe9kee7nOaAjuS5iOi/meS5iOW3ruWViu+8jO+8jCdcbiAgICAqL1xuICAgIGNoYXRUZXh0czogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJ+S4jeimgeWQteS6hu+8jOS4k+W/g+eOqea4uOaIj+WQp++8gScsXG4gICAgICAgICflpKflrrbkuI3opoHotbDvvIzlhrPmiJjliLDlpKnkuq5+77yBJyxcbiAgICAgICAgJ+Wkp+WutuWlve+8jOW+iOmrmOWFtOingeWIsOWQhOS9je+8gScsXG4gICAgICAgICflkITkvY3kuI3lpb3mhI/mgJ3vvIzmiJHnprvlvIDkuIDkvJrvvIEnLFxuICAgICAgICAn5ZKM5L2g5ZCI5L2c55yf5piv5aSq5oSJ5b+r5LqG77yBJyxcbiAgICAgICAgJ+W/q+eCueWEv+WViu+8jOmDveetieW+l+aIkeiKsemDveiwouS6hu+8gScsXG4gICAgICAgICfkvaDnmoTniYzmiZPlvpflpKrlpb3kuobvvIEnLFxuICAgICAgICAn5L2g5piv5aa55aa5IOi/mOaYr+WTpeWTpeWViicsXG4gICAgICAgICfkuqTkuKrmnIvlj4vlkKfjgILjgIInLFxuICAgICAgICAn5oiR5pyJ5LqL5YWI6LWw5LqG77yM5LiL5qyh5YaN546p5ZCn77yBJyxcbiAgICAgICAgJ+WGjeingeS6hiDmiJHkvJrmg7Plv7XlpKflrrbnmoTvvIzvvIwnLFxuICAgICAgICAn5oCO5LmI5Y+I5pat57q/5LqGICDnvZHnu5zmgI7kuYjov5nkuYjlt67llYrvvIzvvIwnXG4gICAgICBdO1xuICAgIH0sXG5cbiAgICBwYXVzZU11c2ljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zb3VuZE9uID0gZmFsc2U7XG4gICAgICAgIGNjLmF1ZGlvRW5naW5lLnBhdXNlTXVzaWMoKTtcbiAgICB9LFxuXG4gICAgcmVzdW1lTXVzaWM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNvdW5kT24gPSB0cnVlO1xuICAgICAgICBjYy5hdWRpb0VuZ2luZS5yZXN1bWVNdXNpYygpO1xuICAgIH0sXG5cbiAgICBfcGxheVNGWDogZnVuY3Rpb24oY2xpcCkge1xuICAgICAgICBpZiAodGhpcy5zb3VuZE9uKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW9JZCA9IGNjLmF1ZGlvRW5naW5lLnBsYXlFZmZlY3QoIGNsaXAsIGZhbHNlICk7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5zZXRWb2x1bWUoYXVkaW9JZCx0aGlzLm1FVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGF1ZGlvSWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgIC8vIE1BUks6IOWJjeWQjuWPsOaTjeS9nFxuICAgIF9yZWdpc3RlckFwcEFjdGl2ZUNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5nYW1lLm9uKGNjLmdhbWUuRVZFTlRfSElERSwgdGhpcy5fYXBwRW50ZXJCYWNrZ3JvdW5kLCB0aGlzKTtcbiAgICAgICAgY2MuZ2FtZS5vbihjYy5nYW1lLkVWRU5UX1NIT1csIHRoaXMuX2FwcEJlY29tQWN0aXZlLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICAqIOi/m+WFpeWQjuWPsFxuICAgICAgKi9cbiAgICBfYXBwRW50ZXJCYWNrZ3JvdW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBub3cgPSBjYy5zeXMubm93KCk7XG4gICAgICAgIGlmIChub3cgLSB0aGlzLl9sYXN0QXBwRW50ZXJCYWNrZ3JvdW5kVGltZSA8IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RBcHBFbnRlckJhY2tncm91bmRUaW1lID0gbm93O1xuXG4gICAgICAgIHRoaXMucGF1c2VNdXNpYygpO1xuICAgIH0sXG5cbiAgLyoqXG4gICAqIOi/m+WFpeWJjeWPsCBcbiAgICovXG4gIF9hcHBCZWNvbUFjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgIGxldCBub3cgPSBjYy5zeXMubm93KCk7XG4gICAgaWYgKG5vdyAtIHRoaXMuX2xhc3RBcHBCZWNvbUFjdGl2ZVRpbWUgPCAxMDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEFwcEJlY29tQWN0aXZlVGltZSA9IG5vdztcblxuICAgIHRoaXMucmVzdW1lTXVzaWMoKTtcbiAgfSxcblxuICAvKuehruWumuaMiemSrumfs+aViCovXG4gICAgcGxheUJ0bkNsaWNrU0ZYOmZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9wbGF5U0ZYKHRoaXMuYnV0dG9uQ2xpY2tTdXJlKTtcbiAgICB9LFxuICAvKuWFrOWFseaMiemSru+8jOaMiemUruaIluiAheWFs+mXreaMiemSruS5i+exu+eahOmfs+aViCovXG4gICAgcGFseUJ0blB1YmxpY1NGWDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3BsYXlTRlgodGhpcy5jbGlja19wdWJsaWMpO1xuICAgIH0sXG5cbiAgICAvKuWPlua2iOaMiemSrumfs+aViCovXG4gICAgcGFseUJ0bkNhbmNlbENsaWNrU0ZYOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcGxheVNGWCh0aGlzLmNsaWNrX2NhbmNlbCk7XG4gICAgfSxcbiAgICBwYWx5QnRuQ3JlYXRlUm9vbVNGWDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3BsYXlTRlgodGhpcy5jbGlja19jcmVhdGVSb29tKTtcbiAgICB9LFxuICAgIHBhbHlXaW5kb3dTRlg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcGxheVNGWCh0aGlzLndpbmRvdyk7XG4gICAgfSxcbiAgICBwYWx5V2VpWGluTG9naW5TRlg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcGxheVNGWCh0aGlzLmNsaWNrX3dlaXhpbl9sb2dpbik7XG4gICAgfSxcbiAgICBwYWx5RmFuZ1BhaVNGWDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9wbGF5U0ZYKHRoaXMuZmFuZ1BhaSk7XG4gICAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvTWFuYWdlcjtcbiIsImNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBncmF5U3ByaXRlOiBjYy5TcHJpdGUsXG5cbiAgICAgICAgX2NhcmROYW1lOiBudWxsLFxuICAgICAgICBfa3FDYXJkTW9kZTogbnVsbFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZ3JheVNwcml0ZS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyDpgJrov4fniYzlkI3orr7nva7niYxcbiAgICBzZXRDYXJkOiBmdW5jdGlvbiAoY2FyZE5hbWUpIHtcbiAgICAgIHRoaXMuX3NldENhcmROYW1lKGNhcmROYW1lKTtcblxuICAgICAgdGhpcy5fbG9hZENhcmRGcmFtZShjYXJkTmFtZSwgZnVuY3Rpb24gKHNwcml0ZUZyYW1lKSB7XG4gICAgICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoJ2NjLlNwcml0ZScpLnNwcml0ZUZyYW1lID0gc3ByaXRlRnJhbWU7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBjYXJkTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhcmROYW1lO1xuICAgIH0sXG5cbiAgICBjYXJkTW9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2txQ2FyZE1vZGU7XG4gICAgfSxcblxuICAgIF9zZXRDYXJkTmFtZTogZnVuY3Rpb24gKGNhcmROYW1lKSB7XG4gICAgICB0aGlzLl9jYXJkTmFtZSA9IGNhcmROYW1lO1xuICAgICAgdGhpcy5fa3FDYXJkTW9kZSA9IG5ldyBLUUNhcmQoY2FyZE5hbWUpO1xuICAgIH0sXG5cbiAgICAvLyDorr7nva7pgInmi6nnirbmgIFcbiAgICBzZXRTZWxlY3RlZDogZnVuY3Rpb24gKHNlbGVjdGVkID0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZ3JheVNwcml0ZS5ub2RlLmFjdGl2ZSA9IHNlbGVjdGVkO1xuICAgIH0sXG5cbiAgICBpc1NlbGVjdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ncmF5U3ByaXRlLm5vZGUuYWN0aXZlO1xuICAgIH0sXG5cbiAgICBfY2FyZEZ1bGxOYW1lOiBmdW5jdGlvbiAoY2FyZFNob3J0TmFtZSkge1xuICAgICAgdmFyIGNhcmROYW1lID0gY2FyZFNob3J0TmFtZTtcbiAgICAgIGlmICghY2FyZE5hbWUuc3RhcnRzV2l0aChcInB1YmxpYy1waWMtY2FyZC1wb2tlclwiKSkge1xuICAgICAgICBjYXJkTmFtZSA9IFwicHVibGljLXBpYy1jYXJkLXBva2VyLVwiICsgY2FyZE5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYXJkTmFtZTtcbiAgICB9LFxuXG4gICAgX2xvYWRDYXJkRnJhbWU6IGZ1bmN0aW9uIChjYXJkTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIGNjLmFzc2VydChjYWxsYmFjayk7XG5cbiAgICAgIGNjLmxvYWRlci5sb2FkUmVzKFwiaW1hZ2VzL3Bva2VyTGlzdC9wb2NrTGlzdFwiLCBjYy5TcHJpdGVBdGxhcywgZnVuY3Rpb24gKGVyciwgYXRsYXMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNjLmVycm9yKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FyZE5hbWUgPSB0aGlzLl9jYXJkRnVsbE5hbWUoY2FyZE5hbWUpO1xuICAgICAgICB2YXIgZnJhbWUgPSBhdGxhcy5nZXRTcHJpdGVGcmFtZShjYXJkTmFtZSk7XG4gICAgICAgIGNhbGxiYWNrKGZyYW1lKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcbn0pO1xuIiwiY29uc3QgS1FDYXJkID0gcmVxdWlyZSgnS1FDYXJkJyk7XG5jb25zdCBLUUNhcmRGaW5kVHlwZUV4dGVuc2lvbiA9IHJlcXVpcmUoJ0tRQ2FyZEZpbmRUeXBlRXh0ZW5zaW9uJyk7XG5jb25zdCBBdWRpb01hbmFnZXIgPSByZXF1aXJlKCdBdWRpb01hbmFnZXInKTtcbmNvbnN0IHBsYXkgPSByZXF1aXJlKCdwbGF5Jyk7XG5jb25zdCBLUUNhcmRTY29yZXRzSGVscGVyID0gcmVxdWlyZSgnS1FDYXJkU2NvcmV0c0hlbHBlcicpO1xuLy8g54mM57G75Z6LIGNvbXBvbmVudFxuLy9cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG4gICAgc3RhdGljczoge1xuICAgICAgICBpbnN0YW5jZXM6IG51bGwsXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGNhcmRzTGF5b3V0OiBjYy5MYXlvdXQsXG4gICAgICAgIGJ0bkR1aVppOiBjYy5CdXR0b24sXG4gICAgICAgIGJ0bkxpYW5nRHVpOiBjYy5CdXR0b24sXG4gICAgICAgIGJ0blNhblRpYW86IGNjLkJ1dHRvbixcbiAgICAgICAgYnRuU2h1blppOiBjYy5CdXR0b24sXG4gICAgICAgIGJ0blRvbmdIdWE6IGNjLkJ1dHRvbixcbiAgICAgICAgYnRuSHVMdTogY2MuQnV0dG9uLFxuICAgICAgICBidG5UaWVaaGk6IGNjLkJ1dHRvbixcbiAgICAgICAgYnRuVG9uZ0h1YVNodW46IGNjLkJ1dHRvbixcbiAgICAgICAgYnRuV3VUb25nOiBjYy5CdXR0b24sXG4gICAgICAgIHR5cGVCdXR0b25zTm9kZTogY2MuTm9kZSxcbiAgICAgICAgYnRuRGVsZXRlVG91RGFvOiBjYy5CdXR0b24sICAgLy8g5aS06YGTXG4gICAgICAgIGJ0bkRlbGV0ZVpob25nRGFvOiBjYy5CdXR0b24sIC8vIOS4remBk1xuICAgICAgICBidG5EZWxldGVXZWlEYW86IGNjLkJ1dHRvbiwgICAvLyDlsL7pgZNcbiAgICAgICAgYnRuQ2FuY2VsQWxsOiBjYy5CdXR0b24sICAgICAgLy8g5YWo6YOo5Y+W5raIXG4gICAgICAgIGJ0bkRvbmU6IGNjLkJ1dHRvbiwgICAgICAgICAgIC8vIOehruWumuWHuueJjFxuICAgICAgICB0aW1lTm9kZTogY2MuTm9kZSxcbiAgICAgICAgbGFiZWxUaW1lOiBjYy5MYWJlbCxcbiAgICAgICAgbGF5b3V0VG91RGFvOiBjYy5MYXlvdXQsXG4gICAgICAgIGxheW91dFpob25nRGFvOiBjYy5MYXlvdXQsXG4gICAgICAgIGxheW91dFdlaURhbzogY2MuTGF5b3V0LFxuXG4gICAgICAgIGNhcmRQcmVmYWI6IGNjLlByZWZhYixcbiAgICAgICAgY2FyZFR5cGVQcmVmYWI6IGNjLlByZWZhYixcbiAgICAgICAgZ29uZ1hpTmk6Y2MuTm9kZSxcbiAgICAgICAgdGVTaHVQYWk6Y2MuTm9kZSxcbiAgICAgICAgLyojIyMjIyovXG4gICAgICAgIHd1VG9uZ19pbWc6Y2MuU3ByaXRlRnJhbWUsXG4gICAgICAgIHRvbmdIdWFTaHVuX2ltZzpjYy5TcHJpdGVGcmFtZSxcbiAgICAgICAgQnRuQ2xpY2tHb25nWGlOaUNvbWZpcm06ZmFsc2UsICAvL+eUqOS6juajgOafpeeUqOaIt+aYr+WQpueCueWHu+S6huaBreWWnOS9oOmhtemdoueahOehruWumuaMiemSrlxuICAgICAgICBjYXJkc0xheW91dFNvcnRDb2xvcjogZmFsc2UsXG4gICAgICAgIC8qIyMjIyMqL1xuXG4gICAgICAgIF9jYXJkT2Zmc2V0WTogbnVsbCxcblxuICAgICAgICBfa3FDYXJkTW9kZXM6IFtdLFxuICAgICAgICBfYWxsQ2FyZE1vZGVzOiBbXSxcbiAgICAgICAgX2ZpbmRDYXJkVHlwZU9iamVjdDogbnVsbCwgIC8vIOeUqOadpeiusOW9leaJvuWIsOeahOeJjOWei+WvueixoVxuXG4gICAgICAgIF9maW5pc2hTZWxlY3RDYXJkc0NhbGxiYWNrOiBudWxsLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5CdG5DbGlja0dvbmdYaU5pQ29tZmlybSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhcmRzTGF5b3V0U29ydENvbG9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NhcmRPZmZzZXRZID0gMDtcbiAgICAgICAgdGhpcy5fcmVnaXN0ZXJUb3VjaEV2ZW50cygpO1xuICAgICAgICB0aGlzLl9yZWdpc3RlckRhb3NMYXlvdXRDbGlja0V2ZW50KCk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9LFxuXG4gICAgLyojIyMjI+eCueWHu+epuueZveWcsOaWueWwhueJjOaUtuWbnuWOuyovXG4gICAgb25DbGlja0NhcmRUeXBlQ29tYmluZU5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRDYXJkc1Bvc2l0aW9uWSgpO1xuICAgIH0sXG5cbiAgICBfaGlkZURlbGV0ZUJ1dHRvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idG5EZWxldGVUb3VEYW8ubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5idG5EZWxldGVaaG9uZ0Rhby5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ0bkRlbGV0ZVdlaURhby5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyDph43nva7vvIzlm57liLDmnIDliJ3lp4vmnInnirbmgIFcbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9oaWRlRGVsZXRlQnV0dG9ucygpO1xuICAgICAgICB0aGlzLmNsZWFyQ2FyZHMoKTtcbiAgICAgICAgdGhpcy50aW1lU3RvcCgpO1xuICAgICAgICB0aGlzLl90eXBlQnV0dG9ucygpLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLmludGVyYWN0YWJsZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fYWxsQ2FyZE1vZGVzID0gW107XG4gICAgfSxcblxuICAgIGNhcmRzTGF5b3V0U29ydDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY2MubG9nKGNjLm1hUGFpKTtcbiAgICAgICAgdmFyIG5vZGVBeXkgPSBlLnRhcmdldC5jaGlsZHJlbjtcbiAgICAgICAgaWYobm9kZUF5eVswXS5hY3RpdmUgPT0gdHJ1ZSl7Ly/mjInlpKflsI9cbiAgICAgICAgICAgIHRoaXMuY2FyZHNMYXlvdXRTb3J0Q29sb3IgPSB0cnVlO1xuICAgICAgICAgICAgbm9kZUF5eVswXS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIG5vZGVBeXlbMV0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q2FyZHNQb3NpdGlvblgoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKG5vZGVBeXlbMV0uYWN0aXZlID09IHRydWUpey8v5oyJ6Iqx6ImyXG4gICAgICAgICAgICB0aGlzLmNhcmRzTGF5b3V0U29ydENvbG9yID0gZmFsc2U7XG4gICAgICAgICAgICBub2RlQXl5WzBdLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBub2RlQXl5WzFdLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcmVzZXRDYXJkc1Bvc2l0aW9uWCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vdGhpcy5jYXJkc0xheW91dFNvcnRDb2xvciA9IG5vZGVBeXlbMV0uYWN0aXZlID09IGZhbHNlO1xuICAgICAgICAvL3RoaXMuY2FyZHNMYXlvdXRTb3J0Q29sb3IgPT0gdHJ1ZVxuICAgIH0sXG5cbiAgICBhZGRDYXJkczogZnVuY3Rpb24gKGNhcmROYW1lcykge1xuICAgICAgICBjYy5hc3NlcnQoY2FyZE5hbWVzKTtcbiAgICAgICAgdGhpcy5fcmVzZXRDYXJkc1Bvc2l0aW9uWSgpO1xuICAgICAgICAvL2NhcmROYW1lcy5zb3J0KGZ1bmN0aW9uKGExLGEyKXtcbiAgICAgICAgLy8gICAgcmV0dXJuIGExLnNwbGl0KCdfJylbMF0gLSBhMi5zcGxpdCgnXycpWzBdO1xuICAgICAgICAvL30pXG4gICAgICAgIGNhcmROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQsaW5kZXgpe1xuICAgICAgICAgICAgdGhpcy5hZGRDYXJkKGNhcmQsZmFsc2UsaW5kZXgpXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIC8vdGhpcy5jYXJkc0xheW91dFNvcnQoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRDYXJkc1Bvc2l0aW9uWCgpO1xuICAgICAgICB0aGlzLl9yZWxvYWRLUUNhcmRNb2Rlc0lubmVyKCk7XG4gICAgICAgIHRoaXMuX3Jlc2V0VHlwZUJ1dHRvbkVuYWJsZXNXaXRoTW9kZWxzKHRoaXMuX2txQ2FyZE1vZGVzKTtcbiAgICB9LFxuXG4gICAgYWRkQ2FyZDogZnVuY3Rpb24gKGNhcmROYW1lLCBhdXRvQ2hhbmdlUG9zaXRpb25YID0gZmFsc2UsaW5kZXggPSBudWxsKSB7XG4gICAgICAgIGNjLmFzc2VydChjYXJkTmFtZS5sZW5ndGggPiAwKTtcblxuICAgICAgICBsZXQgY2FyZFByZWZhYiA9IGNjLmluc3RhbnRpYXRlKHRoaXMuY2FyZFByZWZhYik7XG4gICAgICAgIGNhcmRQcmVmYWIubmFtZSA9IGNhcmROYW1lO1xuICAgICAgICBpZihjYy5tYVBhaSl7XG4gICAgICAgICAgICB2YXIgY2FyZE1hUGFpID0gJzNfJyArIGNjLm1hUGFpO1xuICAgICAgICAgICAgaWYoY2FyZE5hbWUgPT0gY2FyZE1hUGFpKXtcbiAgICAgICAgICAgICAgICBjYXJkUHJlZmFiLmNvbG9yID0gbmV3IGNjLkNvbG9yKDIyNiwgMTQ1LCAxNDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhcmRQcmVmYWIuZ2V0Q29tcG9uZW50KCdDYXJkUHJlZmFiJykuc2V0Q2FyZChjYXJkTmFtZSxpbmRleCk7XG4gICAgICAgIHRoaXMuY2FyZHNMYXlvdXQubm9kZS5hZGRDaGlsZChjYXJkUHJlZmFiKTtcbiAgICAgICAgY2FyZFByZWZhYi5zZXRQb3NpdGlvblkodGhpcy5fY2FyZE9mZnNldFkpO1xuXG4gICAgICAgIGlmIChhdXRvQ2hhbmdlUG9zaXRpb25YKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNldENhcmRzUG9zaXRpb25YKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9sZXQgbmV3Q2FyZCA9IG5ldyBLUUNhcmQoY2FyZE5hbWUsbnVsbCxpbmRleCk7XG4gICAgICAgIC8vbGV0IG9yaWdpbkNhcmQgPSB0aGlzLl9hbGxDYXJkTW9kZXMuZmluZChmdW5jdGlvbihjYXJkKSB7XG4gICAgICAgIC8vICAgIHJldHVybiBjYXJkLmlzRXF1YWwobmV3Q2FyZCk7XG4gICAgICAgIC8vfSk7XG4gICAgICAgIC8vaWYgKG9yaWdpbkNhcmQgPT0gbnVsbCAmJiAhYXV0b0NoYW5nZVBvc2l0aW9uWCkge1xuICAgICAgICAvLyAgICB0aGlzLl9hbGxDYXJkTW9kZXMucHVzaChuZXdDYXJkKTtcbiAgICAgICAgLy99XG4gICAgfSxcblxuICAgIGFkZENhcmRNb2RlczogZnVuY3Rpb24gKGNhcmROYW1lcykge1xuICAgICAgICBjYy5hc3NlcnQoY2FyZE5hbWVzLmxlbmd0aCA+IDApO1xuICAgICAgICB0aGlzLl9hbGxDYXJkTW9kZXMgPSBbXTtcbiAgICAgICAgY2FyZE5hbWVzLmZvckVhY2goZnVuY3Rpb24oY2FyZE5hbWUsaW5kZXgpe1xuICAgICAgICAgICAgbGV0IG5ld0NhcmQgPSBuZXcgS1FDYXJkKGNhcmROYW1lLG51bGwsaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fYWxsQ2FyZE1vZGVzLnB1c2gobmV3Q2FyZCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIHJlbG9hZENhcmRzOiBmdW5jdGlvbiAoY2FyZE5hbWVzKSB7XG4gICAgICAgIC8vY2FyZE5hbWVzPVsnMV8xJywgJzJfMScsICczXzExJywgJzFfMTInLCAnMl8yJywgJzNfMicsICc0XzExJywgJzRfMTInLCAnM18xMycsICcyXzUnLCAnMV8xMycsICc0XzMnLCAnMV8zJ107XG4gICAgICAgIC8vIGNhcmROYW1lcz1bJzFfMScsICcyXzEnLCAnM18xMScsICcxXzEyJywgJzJfMicsICczXzInLCAnNF8xMScsICc0XzEyJywgJzNfMTMnLCAnMl81JywgJzFfMTMnLCAnNF8zJywgJzFfMyddO1xuICAgICAgICAvL+S4ieW6puWQjOiKsVxuICAgICAgICAvLyBjYXJkTmFtZXM9WycyXzEzJywgJzJfNScsICcyXzcnLCAnM18xJywgJzNfMicsICczXzQnLCAnM18zJywgJzNfMTMnLCAnMV8xMicsICcxXzYnLCAnMV8xJywgJzFfNCcsICcxXzUnXTtcbiAgICAgICAgLy/kuInlkIzoirHpobpcbiAgICAgICAgLy8gIGNhcmROYW1lcz1bJzJfMScsICcyXzInLCAnMl8zJywgJzJfNCcsICcyXzUnLCAnM182JywgJzNfNycsICczXzgnLCAnM185JywgJzNfMTAnLCAnNF8xJywgJzRfMicsICc0XzMnXTtcbiAgICAgICAgLy/kuIDmnaHpvplcbiAgICAgICAgLy8gY2FyZE5hbWVzPVsnMl8xJywgJzJfMicsICcyXzMnLCAnMl80JywgJzJfNScsICczXzYnLCAnM183JywgJzNfOCcsICczXzknLCAnM18xMCcsICcxXzExJywgJzFfMTInLCAnMV8xMyddO1xuICAgICAgICAvL+S4iemhuuWtkFxuICAgICAgICAvL2NhcmROYW1lcz1bJzRfMScsICczXzInLCAnNF8zJywgJzFfNycsICc0XzUnLCAnNF82JywgJzNfOScsICc0XzgnLCAnM18xJywgJzFfMTMnLCAnNF8xMicsICc0XzExJywgJzJfMTAnXTtcbiAgICAgICAgLy8gY2FyZE5hbWVzPVsnM181JywgJzNfNCcsICc0XzMnLCAnMV8yJywgJzNfMScsICc0XzknLCAnM185JywgJzRfOCcsICczXzEwJywgJzFfMTMnLCAnNF8xMicsICc0XzExJywgJzJfMTAnXTtcbiAgICAgICAgLy8gY2FyZE5hbWVzPVsnM181JywgJzNfNCcsICc0XzMnLCAnMV8yJywgJzNfMScsICc0XzUnLCAnM182JywgJzRfOCcsICczXzYnLCAnMV8xMycsICc0XzEyJywgJzRfMTEnLCAnMl83J107XG4gICAgICAgIC8vY2FyZE5hbWVzPVsnM180JywgJzNfNCcsICc0XzYnLCAnMl8yMCcsICcxXzIwJywgJzFfMjAnLCAnM182JywgJzRfOCcsICczXzYnLCAnMV84JywgJzRfMTInLCAnNF8xMScsICcyXzIwJ107XG4gICAgICAgIC8v5LiJ5Liw5aSp5LiLXG4gICAgICAgIC8vY2FyZE5hbWVzPVsnMV8xJywgJzJfMScsICczXzEnLCAnMV8yJywgJzJfMicsICczXzInLCAnNF8xJywgJzRfMicsICczXzMnLCAnMl8zJywgJzFfMycsICc0XzMnLCAnMV8xMyddO1xuICAgICAgICAvLzTkuLDlpKnkuItcbiAgICAgICAgLy8gY2FyZE5hbWVzPVsnMV8xJywgJzJfMScsICczXzEnLCAnMV80JywgJzJfNCcsICczXzInLCAnNF8yJywgJzFfMicsICczXzQnLCAnMl8zJywgJzFfMycsICc0XzMnLCAnMV8yJ107XG4gICAgICAgIC8v5YWt5bKB5Y2KXG4gICAgICAgIC8vIGNhcmROYW1lcz1bJzFfMScsICcyXzEnLCAnM18xMScsICcxXzEyJywgJzJfMicsICczXzInLCAnNF8xMScsICc0XzEyJywgJzNfMTMnLCAnMl81JywgJzFfMTMnLCAnNF8zJywgJzFfMyddO1xuICAgICAgICAvL2NhcmROYW1lcz1bJzFfOScsICcyXzExJywgJzNfOCcsICcxXzEyJywgJzJfMicsICczXzInLCAnMV8xMycsICcyXzUnLCAnM181JywnMV80JywgJzJfNCcsICczXzQnLCAnM18xMCddO1xuICAgICAgICAvLyBjYXJkTmFtZXM9Wyc0XzknLCAnMl8zJywgJzNfNCcsICczXzYnLCAnMl8xJywgJzJfNCcsICcyXzInLCAnMl81JywgJzJfMTMnLCcyXzgnLCAnMl8xMCcsICcyXzExJywgJzJfMTInXTtcbiAgICAgICAgLy8gICBjYXJkTmFtZXM9Wyc0XzInLCAnMl8zJywgJzNfNCcsICczXzUnLCAnMl8xJywgJzJfNCcsICcyXzInLCAnMl81JywgJzJfMTMnLCcyXzgnLCAnMl8xMCcsICcyXzExJywgJzJfMTInXTtcbiAgICAgICAgLy9jYXJkTmFtZXM9Wyc0XzEnLCAnMl8xJywgJzFfNCcsICczXzQnLCAnMV82JywgJzJfNicsICcxXzgnLCAnM184JywgJzJfOCcsJzJfMTInLCAnMV8xMicsICcyXzEzJywgJzNfMTMnXTtcbiAgICAgICAgLy8gY2FyZE5hbWVzPVsnNF85JywgJzJfMycsICczXzQnLCAnM182JywgJzJfOCcsICcyXzknLCAnMl8xMCcsICcyXzExJywgJzJfMTMnLCczXzEzJywgJzNfMTInLCAnMl8xMicsICcxXzEyJ107XG4gICAgICAgIC8vIGNhcmROYW1lcz1bJzRfOScsICcyXzknLCAnM180JywgJzNfNicsICcxXzgnLCAnMl8xJywgJzJfNScsICcyXzQnLCAnMl8zJywnM18xMycsICczXzEyJywgJzJfMicsICcxXzEyJ107XG4gICAgICAgIC8vY2FyZE5hbWVzPVsnM18yJywgJzRfMicsICcyXzQnLCAnM181JywgJzFfNScsICczXzcnLCAnMl83JywgJzNfMTAnLCAnMl8xJywnMl8xMycsICcyXzEwJywgJzJfMTInLCAnMl8xMSddO1xuICAgICAgICAvL2NhcmROYW1lcz1bJzRfMicsICc0XzMnLCAnNF80JywgJzRfNScsICc0XzUnLCAnNF82JywgJzRfMTInLCAnNF8xMycsICcyXzEyJywnM18xMicsICcyXzgnLCAnM184JywgJzJfMTEnXTtcbiAgICAgICAgLy9jYXJkTmFtZXM9Wyc0XzMnLCAnMV8zJywgJzRfNScsICc0XzUnLCAnM181JywgJzJfNScsICcxXzIwJywgJzRfMTEnLCAnM18xMicsJzRfMTInLCAnNF84JywgJzRfMScsICcxXzEyJ107XG4gICAgICAgIC8vY2FyZE5hbWVzPVsnNF8zJywgJzFfMycsICc0XzUnLCAnNF81JywgJzJfMjAnLCAnMV8yMCcsICcxXzIwJywgJzRfMTEnLCAnM18xMicsJzRfMTInLCAnNF84JywgJzRfMScsICcxXzEyJ107XG4gICAgICAgIC8vY2FyZE5hbWVzPVsnNF8xMCcsICc0XzExJywgJzRfMTMnLCAnNF81JywgJzJfMjAnLCAnMV8yMCcsICcxXzIwJywgJzRfMTInLCAnM18xMicsJzRfMTInLCAnNF84JywgJzJfMTInLCAnMV8xMiddO1xuICAgICAgICB0aGlzLmNsZWFyQ2FyZHMoKTtcbiAgICAgICAgdGhpcy5fa3FDYXJkTW9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGRDYXJkcyhjYXJkTmFtZXMpO1xuICAgIH0sXG5cbiAgICBjbGVhckNhcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2FyZHNMYXlvdXQubm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB0aGlzLmxheW91dFRvdURhby5ub2RlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgIHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICB0aGlzLmxheW91dFdlaURhby5ub2RlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgfSxcblxuICAgIHJlbW92ZUNhcmQ6IGZ1bmN0aW9uIChjYXJkTmFtZSkge1xuICAgICAgICBpZiAoIWNhcmROYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYXJkc0xheW91dC5ub2RlLmdldENoaWxkQnlOYW1lKGNhcmROYW1lKS5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgfSxcblxuICAgIHNldEZpbmlzaFNlbGVjdENhcmRzQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9maW5pc2hTZWxlY3RDYXJkc0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgX3JlbG9hZEtRQ2FyZE1vZGVzSW5uZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fa3FDYXJkTW9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjYXJkUHJlZmFiTm9kZSkge1xuICAgICAgICAgICAgbGV0IGNhcmRQcmVmYWIgPSBjYXJkUHJlZmFiTm9kZS5nZXRDb21wb25lbnQoJ0NhcmRQcmVmYWInKTtcbiAgICAgICAgICAgIHJldHVybiBjYXJkUHJlZmFiLmNhcmRNb2RlKCk7XG4gICAgICAgIH0pLnNvcnQoS1FDYXJkLnNvcnQpO1xuICAgICAgICB0aGlzLl9maW5kQ2FyZFR5cGVPYmplY3QgPSBudWxsO1xuICAgIH0sXG5cbiAgICBfdHlwZUJ1dHRvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuYnRuRHVpWmksXG4gICAgICAgICAgICB0aGlzLmJ0bkxpYW5nRHVpLFxuICAgICAgICAgICAgdGhpcy5idG5TYW5UaWFvLFxuICAgICAgICAgICAgdGhpcy5idG5TaHVuWmksXG4gICAgICAgICAgICB0aGlzLmJ0blRvbmdIdWEsXG4gICAgICAgICAgICB0aGlzLmJ0bkh1THUsXG4gICAgICAgICAgICB0aGlzLmJ0blRpZVpoaSxcbiAgICAgICAgICAgIHRoaXMuYnRuVG9uZ0h1YVNodW4sXG4gICAgICAgICAgICAvKiMjIyMjKi9cbiAgICAgICAgICAgIC8vdGhpcy5idG5XdVRvbmcsXG4gICAgICAgICAgICAvKiMjIyMjKi9cbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgX3Jlc2V0VHlwZUJ1dHRvbkVuYWJsZXNXaXRoTW9kZWxzOiBmdW5jdGlvbiAoY2FyZE1vZGVzKSB7XG4gICAgICAgIC8qY2FyZE1vZGVzLmxlbmd0aCA9PSAxMyovXG4gICAgICAgIGNhcmRNb2RlcyA9IGNhcmRNb2RlcyB8fCB0aGlzLl9rcUNhcmRNb2RlcztcblxuICAgICAgICAvKiMjIyMj5Yid5aeL5YyW54mMKi9cbiAgICAgICAgdmFyIEJ1dHRvbnNMYXlvdXRDaGlsZHMgPSB0aGlzLnR5cGVCdXR0b25zTm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yKHZhciBpPTA7aTxCdXR0b25zTGF5b3V0Q2hpbGRzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgQnV0dG9uc0xheW91dENoaWxkc1tpXS5pbnRlcmFjdGFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnRuRHVpWmkuaW50ZXJhY3RhYmxlID0gS1FDYXJkLmNvbnRhaW5EdWlaaShjYXJkTW9kZXMpO1xuICAgICAgICB0aGlzLmJ0bkxpYW5nRHVpLmludGVyYWN0YWJsZSA9IEtRQ2FyZC5jb250YWluTGlhRHVpKGNhcmRNb2Rlcyk7XG4gICAgICAgIHRoaXMuYnRuU2FuVGlhby5pbnRlcmFjdGFibGUgPSBLUUNhcmQuY29udGFpblNhblRpYW8oY2FyZE1vZGVzKTtcbiAgICAgICAgdGhpcy5idG5TaHVuWmkuaW50ZXJhY3RhYmxlID0gS1FDYXJkLmNvbnRhaW5TaHVuWmkoY2FyZE1vZGVzKTtcbiAgICAgICAgdGhpcy5idG5Ub25nSHVhLmludGVyYWN0YWJsZSA9IEtRQ2FyZC5jb250YWluVG9uZ0h1YShjYXJkTW9kZXMpO1xuICAgICAgICB0aGlzLmJ0bkh1THUuaW50ZXJhY3RhYmxlID0gS1FDYXJkLmNvbnRhaW5IdUx1KGNhcmRNb2Rlcyk7XG4gICAgICAgIHRoaXMuYnRuVGllWmhpLmludGVyYWN0YWJsZSA9IEtRQ2FyZC5jb250YWluVGllWmhpKGNhcmRNb2Rlcyk7XG4gICAgICAgIHRoaXMuYnRuVG9uZ0h1YVNodW4uaW50ZXJhY3RhYmxlID0gS1FDYXJkLmNvbnRhaW5Ub25nSHVhU2h1bihjYXJkTW9kZXMpO1xuICAgICAgICAvL3RoaXMuYnRuV3VUb25nLmludGVyYWN0YWJsZSA9IEtRQ2FyZC5jb250YWluV3VUb25nKGNhcmRNb2Rlcyk7XG4gICAgICAgIC8vS1FDYXJkLmlzVGVTaHVQYWkoY2FyZE1vZGVzKVxuICAgICAgICAvL2xldCB0eXBlTmFtZSA9IEtRQ2FyZC5jYXJkc1R5cGVOYW1lKGNhcmRNb2Rlcyk7XG4gICAgICAgIC8vS1FDYXJkLmlzTGl1RHVpQmFuKGNhcmRNb2Rlcyk7XG4gICAgICAgIC8vY2MubG9nKHR5cGVOYW1lKTsgY2MubG9nKCfnibnmrorniYxuYW1lJyk7XG4gICAgICAgIC8vYWxlcnQodGhpcy5idG5TaHVuWmkuaW50ZXJhY3RhYmxlKVxuICAgICAgICAvKiMjIyMj5aaC5p6c5pyJ5aSa5LiA6Imy77yM5bCx5piv6K6+572u5peg5ZCM5oyJ6ZKu55qE5Y+v5Lqk5LqS5oCnKi9cbiAgICAgICAgLy9pZihjYy5kdW9ZaVNlID09IDApIHtcbiAgICAgICAgLy8gICAgdGhpcy53dVRvbmdOb2RlID0gdGhpcy50eXBlQnV0dG9uc05vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJidG5XdVRvbmdcIik7XG4gICAgICAgIC8vICAgIHRoaXMuYnRuV3VUb25nID0gdGhpcy53dVRvbmdOb2RlLmdldENvbXBvbmVudChjYy5CdXR0b24pO1xuICAgICAgICAvLyAgICB0aGlzLmJ0bld1VG9uZy5pbnRlcmFjdGFibGUgPSBLUUNhcmQuY29udGFpbld1VG9uZyhjYXJkTW9kZXMpO1xuICAgICAgICAvL31cbiAgICAgICAgLyojIyMjIyovXG5cbiAgICAgICAgdGhpcy5fYXV0b0FjdGl2ZVR5cGVCdXR0b25zKCk7XG5cbiAgICAgICAgLyojIyMjI+iuvue9ruaMiemSruWPr+S6pOS6kuWSjOS4jeWPr+S6pOS6kuaXtueahOmAj+aYjuW6piovXG4gICAgICAgIGZvcih2YXIgaT0wO2k8QnV0dG9uc0xheW91dENoaWxkcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGlmKEJ1dHRvbnNMYXlvdXRDaGlsZHNbaV0uZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbikuaW50ZXJhY3RhYmxlKXtcbiAgICAgICAgICAgICAgICBCdXR0b25zTGF5b3V0Q2hpbGRzW2ldLm9wYWNpdHkgPSAyNTU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBCdXR0b25zTGF5b3V0Q2hpbGRzW2ldLm9wYWNpdHkgPSAxMjU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8g5bCG5om+5Yiw5LqG54mM57G75Z6L55qE54mM56qB5Ye65Ye65p2lXG4gICAgX3N0aWNrT3V0RmluZENhcmRUeXBlOiBmdW5jdGlvbiAodGl0bGUsIGZpbmRNZXRob2RzKSB7XG5cbiAgICAgICAgLy8g5YWI5qC55o2u54mM57G75Z6L5om+5Ye65omA5pyJ55qE57Si5byV6ZuG5ZCIXG4gICAgICAgIHZhciBmaW5kZWRJbmRleHNBcnJheSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmRDYXJkVHlwZU9iamVjdCA9IHRoaXMuX2ZpbmRDYXJkVHlwZU9iamVjdCB8fCB7fTtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmRDYXJkVHlwZU9iamVjdC50aXRsZSAhPSB0aXRsZSkge1xuICAgICAgICAgICAgZmluZGVkSW5kZXhzQXJyYXkgPSAoZmluZE1ldGhvZHMoKSB8fCBbXSkucmV2ZXJzZSgpO1xuXG4gICAgICAgICAgICBmb3IodmFyIGkgPTA7aTxmaW5kZWRJbmRleHNBcnJheS5sZW5ndGgtMTtpKyspey8v5Yig6Zmk5ZCM57G75Z6L54mMXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZmluZGVkSW5kZXhzQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgLyppZih0aXRsZSA9PSAnbGlhbmdEdWknKXtcbiAgICAgICAgICAgICAgICAgbGV0IGpTdHJpbmdzcG9pbnQgPSBpbmRleC5tYXAoZnVuY3Rpb24oaW5kZXhzKXtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2txQ2FyZE1vZGVzW2luZGV4c10ucG9pbnQ7XG4gICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgIHZhciBpc0JyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgIHZhciByZXBOdW0gPSBqU3RyaW5nc3BvaW50LnJlZHVjZShmdW5jdGlvbihwLG4pe1xuICAgICAgICAgICAgICAgICBpZighcFtuXSl7XG4gICAgICAgICAgICAgICAgIHBbbl0gPSAxO1xuICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgcFtuXSArPSAxXG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgcmV0dXJuIHBcbiAgICAgICAgICAgICAgICAgfSx7fSk7XG4gICAgICAgICAgICAgICAgIGZvcih2YXIgeSBpbiByZXBOdW0pe1xuICAgICAgICAgICAgICAgICBpZihyZXBOdW1beV0gPj0gMyl7XG4gICAgICAgICAgICAgICAgIGlzQnJlYWsgPSB0cnVlO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgaWYoaXNCcmVhayl7XG4gICAgICAgICAgICAgICAgIGNjLmxvZyhyZXBOdW0pXG4gICAgICAgICAgICAgICAgIGNjLmxvZyhmaW5kZWRJbmRleHNBcnJheSlcbiAgICAgICAgICAgICAgICAgY2MubG9nKGkpXG4gICAgICAgICAgICAgICAgIGNjLmxvZygnLS0tLS0tLS0yOTEnKVxuICAgICAgICAgICAgICAgICBmaW5kZWRJbmRleHNBcnJheS5zcGxpY2UoaSwxKTtcbiAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgdmFyIGlTdHJpbmcgPSAnJztcbiAgICAgICAgICAgICAgICBmb3IodmFyIGogPWkrMTtqPGZpbmRlZEluZGV4c0FycmF5Lmxlbmd0aDtqKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGZpbmRlZEluZGV4c0FycmF5W2pdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgalN0cmluZyA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBpU3RyaW5ncyA9IHMubWFwKGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYXJkTW9kZWwgPSB0aGlzLl9rcUNhcmRNb2Rlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FyZE1vZGVsLmNhcmROYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGpTdHJpbmdzID0gaW5kZXgubWFwKGZ1bmN0aW9uKGluZGV4cyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FyZE1vZGVsID0gdGhpcy5fa3FDYXJkTW9kZXNbaW5kZXhzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXJkTW9kZWwuY2FyZE5hbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgciA9IDA7ciA8IGluZGV4Lmxlbmd0aDtyKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgalN0cmluZyA9IGpTdHJpbmcgKyBpU3RyaW5nc1tyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlTdHJpbmcgPSBpU3RyaW5nICsgalN0cmluZ3Nbcl07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZihqU3RyaW5nID09IGlTdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluZGVkSW5kZXhzQXJyYXkuc3BsaWNlKGksMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZmluZENhcmRUeXBlT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgICAgICBpbmRleHNBcnJheTogZmluZGVkSW5kZXhzQXJyYXksXG4gICAgICAgICAgICAgICAgLy9pbmRleDogdGl0bGU9PVwiZHVpWmlcIj9maW5kZWRJbmRleHNBcnJheS5sZW5ndGgtMTowXG4gICAgICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmaW5kZWRJbmRleHNBcnJheSA9IHRoaXMuX2ZpbmRDYXJkVHlwZU9iamVjdC5pbmRleHNBcnJheTtcbiAgICAgICAgaWYgKCFmaW5kZWRJbmRleHNBcnJheSB8fCBmaW5kZWRJbmRleHNBcnJheS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWwhuW3suacieeahOeqgeWHuueahOeJjOeahOS9jee9rumHjee9ruWbnuWIneWni+S9jee9rlxuICAgICAgICB0aGlzLl9yZXNldENhcmRzUG9zaXRpb25ZKCk7XG5cbiAgICAgICAgLy8g6K6h566X5Ye66KaB56qB5Ye655qE54mM5pWw57uEXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRDYXJkVHlwZU9iamVjdC5pbmRleDtcbiAgICAgICAgbGV0IGluZGV4cyA9IGZpbmRlZEluZGV4c0FycmF5W2luZGV4XTtcblxuICAgICAgICBsZXQgc2VsZWN0ZWRDYXJkTmFtZXMgPSBpbmRleHMubWFwKGZ1bmN0aW9uKGluZGV4KXtcbiAgICAgICAgICAgIGxldCBjYXJkTW9kZWwgPSB0aGlzLl9rcUNhcmRNb2Rlc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gY2FyZE1vZGVsLmNhcmROYW1lKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy9jYy5sb2coc2VsZWN0ZWRDYXJkTmFtZXMpXG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjYXJkTm9kZSkge1xuICAgICAgICAgICAgbGV0IGNhcmRQcmVmYWIgPSBjYXJkTm9kZS5nZXRDb21wb25lbnQoJ0NhcmRQcmVmYWInKTtcbiAgICAgICAgICAgIGlmKHNlbGVjdGVkQ2FyZE5hbWVzLmluY2x1ZGVzKGNhcmRQcmVmYWIuY2FyZE5hbWUoKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZUluZGV4ID0gc2VsZWN0ZWRDYXJkTmFtZXMuaW5kZXhPZihjYXJkUHJlZmFiLmNhcmROYW1lKCkpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZE5hbWVzLnNwbGljZShuYW1lSW5kZXgsMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2NjLmxvZyhjYXJkTm9kZXMpXG4gICAgICAgIC8vY2MubG9nKGluZGV4KVxuICAgICAgICAvL2NjLmxvZyhmaW5kZWRJbmRleHNBcnJheSlcbiAgICAgICAgLy9jYy5sb2coJy0tLS0tLS0tLS0yNDgnKVxuICAgICAgICAvLyDnqoHlh7rorqHnrpflh7rmnaXnmoTniYzmlbDnu4RcbiAgICAgICAgdGhpcy5fY2hhbmdlQ2FyZFByZWZhYnNZKGNhcmROb2Rlcyk7XG4gICAgICAgIC8vIOS/neWtmOWlve+8jOeUqOS6juWGjeasoeeCueWHu+S6hueqgeWHuuS4i+S4gOe7hOeJjFxuICAgICAgICBpbmRleCA9IChpbmRleCArIDEpICUgZmluZGVkSW5kZXhzQXJyYXkubGVuZ3RoO1xuICAgICAgICB0aGlzLl9maW5kQ2FyZFR5cGVPYmplY3QuaW5kZXggPSBpbmRleDtcbiAgICB9LFxuXG4gICAgY2xpY2tEdWlaaTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGlja091dEZpbmRDYXJkVHlwZShcImR1aVppXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuZmluZER1aVppKHRoaXMuX2txQ2FyZE1vZGVzKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgY2xpY2tMaWFuZ0R1aTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGlja091dEZpbmRDYXJkVHlwZShcImxpYW5nRHVpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuZmluZExpYUR1aSh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrU2FuVGlhbzogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGlja091dEZpbmRDYXJkVHlwZShcInNhblRpYW9cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEtRQ2FyZC5maW5kU2FuVGlhbyh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrU2h1blppOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0aWNrT3V0RmluZENhcmRUeXBlKFwic2h1blppXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuZmluZFNodW5aaSh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrVG9uZ0h1YTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGlja091dEZpbmRDYXJkVHlwZShcInRvbmdIdWFcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEtRQ2FyZC5maW5kVG9uZ0h1YSh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrSHVMdTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGlja091dEZpbmRDYXJkVHlwZShcImh1THVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEtRQ2FyZC5maW5kSHVMdSh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrVGllWmhpOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0aWNrT3V0RmluZENhcmRUeXBlKFwidGllWmhpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuZmluZFRpZVpoaSh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIC8qIyMjIyMqL1xuICAgIGNsaWNrV3VUb25nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCLngrnlh7vkuobkupTlkIzmjInpkq5cIik7XG4gICAgICAgIHRoaXMuX3N0aWNrT3V0RmluZENhcmRUeXBlKFwid3VUb25nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuZmluZFd1VG9uZyh0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcbiAgICAvKiMjIyMjKi9cblxuICAgIGNsaWNrVG9uZ0h1YVNodW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RpY2tPdXRGaW5kQ2FyZFR5cGUoXCJ0b25nSHVhU2h1blwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gS1FDYXJkLmZpbmRUb25nSHVhU2h1bih0aGlzLl9rcUNhcmRNb2Rlcyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIGNsaWNrQ2FuY2VsQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xpY2tEZWxldGVUb3VEYW8oKTtcbiAgICAgICAgdGhpcy5jbGlja0RlbGV0ZVpob25nRGFvKCk7XG4gICAgICAgIHRoaXMuY2xpY2tEZWxldGVXZWlEYW8oKTtcbiAgICB9LFxuXG4gICAgLyrngrnlh7vlrozmiJDmjInpkq4qL1xuICAgIGNsaWNrRG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgdG91Q2FyZE1vZGVscyA9IHRoaXMuX3Rhb0Rhb0NhcmRNb2RlcygpO1xuICAgICAgICBsZXQgemhvbmdDYXJkTW9kZXMgPSB0aGlzLl96aG9uZ0Rhb0NhcmRNb2RlcygpO1xuICAgICAgICBsZXQgd2VpQ2FyZE1vZGVzID0gdGhpcy5fd2VpRGFvQ2FyZE1vZGVzKCk7XG4gICAgICAgIHRoaXMuX2RpZFNlbGVjdGVkQ2FyZHModG91Q2FyZE1vZGVscywgemhvbmdDYXJkTW9kZXMsIHdlaUNhcmRNb2Rlcyk7XG4gICAgfSxcblxuICAgIC8q54K55Ye75oGt5Zac5L2g6aG16Z2i55qE56Gu5a6a5oyJ6ZKuKi9cbiAgICBvbkJ0bkdvbmdYaU5pQ29tZmlybUNsaWNrOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy/orrDlvZXnjqnlrrbngrnlh7vkuobnoa7lrprmjInpkq7vvJpcbiAgICAgICAgdGhpcy5CdG5DbGlja0dvbmdYaU5pQ29tZmlybSA9IHRydWU7XG4gICAgICAgIC8v5YWI6KaB5b6X5Yiw546p5a6255qEMTPlvKDniYwgdGVTaHVQYWlDYXJkc1t7J251bWJlcic6MSwnc3VpdCc6J3MnfSx7Li4ufSx7Li4ufV1cbiAgICAgICAgdmFyIHRlU2h1UGFpQ2FyZHMgPSBjYy50ZVNodVBhaUNhcmRzO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZVNodVBhaUNhcmRzKTtcbiAgICAgICAgdmFyIHRlU2h1UGFpQ2FyZHNTZXJ2ZXJJbmZvID0gdGhpcy5fY29udmVydENhcmRzVG9TZXJ2ZXJNb2RlbDIodGVTaHVQYWlDYXJkcyk7XG4gICAgICAgIHZhciByZXN1bHQgPSBbdGVTaHVQYWlDYXJkc1NlcnZlckluZm9dO1xuICAgICAgICBjb25zb2xlLmxvZyhcIueCueWHu+S6huaBreWWnOS9oOmhtemdoueahOehruWumuaMiemSrlwiKTtcbiAgICAgICAgY29uc29sZS5sb2codGVTaHVQYWlDYXJkc1NlcnZlckluZm8pO1xuICAgICAgICBpZiAodGhpcy5fZmluaXNoU2VsZWN0Q2FyZHNDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fZmluaXNoU2VsZWN0Q2FyZHNDYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9kaWRTZWxlY3RlZENhcmRzOiBmdW5jdGlvbiAodG91Q2FyZHMsIHpob25nQ2FyZHMsIHdlaUNhcmRzKSB7XG4gICAgICAgIHRvdUNhcmRzID0gdG91Q2FyZHMgfHwgW107XG4gICAgICAgIHpob25nQ2FyZHMgPSB6aG9uZ0NhcmRzIHx8IFtdO1xuICAgICAgICB3ZWlDYXJkcyA9IHdlaUNhcmRzIHx8IFtdO1xuICAgICAgICBsZXQgdG91U2VydmVySW5mbyA9IHRoaXMuX2NvbnZlcnRDYXJkc1RvU2VydmVyTW9kZWwodG91Q2FyZHMpO1xuICAgICAgICBsZXQgemhvbmdTZXJ2ZXJJbmZvID0gdGhpcy5fY29udmVydENhcmRzVG9TZXJ2ZXJNb2RlbCh6aG9uZ0NhcmRzKTtcbiAgICAgICAgbGV0IHdlaVNlcnZlckluZm8gPSB0aGlzLl9jb252ZXJ0Q2FyZHNUb1NlcnZlck1vZGVsKHdlaUNhcmRzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFt0b3VTZXJ2ZXJJbmZvLCB6aG9uZ1NlcnZlckluZm8sIHdlaVNlcnZlckluZm9dO1xuXG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hTZWxlY3RDYXJkc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hTZWxlY3RDYXJkc0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xpY2tEZWxldGVUb3VEYW86IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGVsZXRlRGFvQ2FyZHNPZkxheW91dCh0aGlzLmxheW91dFRvdURhby5ub2RlKTtcbiAgICB9LFxuXG4gICAgY2xpY2tEZWxldGVaaG9uZ0RhbzogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kZWxldGVEYW9DYXJkc09mTGF5b3V0KHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZSk7XG4gICAgfSxcblxuICAgIGNsaWNrRGVsZXRlV2VpRGFvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2RlbGV0ZURhb0NhcmRzT2ZMYXlvdXQodGhpcy5sYXlvdXRXZWlEYW8ubm9kZSk7XG4gICAgfSxcblxuICAgIC8vIOiuoeaXtuWZqOS6i+S7tlxuICAgIHRpbWVTdGFydDogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIGNjLmFzc2VydChkdXJhdGlvbiA+IDApO1xuICAgICAgICB0aGlzLnRpbWVTdG9wKCk7XG4gICAgICAgIHRoaXMudGltZU5vZGUuYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl90aW1lUmVtYWluRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5sYWJlbFRpbWUuc3RyaW5nID0gU3RyaW5nKGR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLl90aW1lTWV0aG9kLCAxLCBkdXJhdGlvbik7XG4gICAgfSxcblxuICAgIHRpbWVTdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5zY2hlZHVsZSh0aGlzLl90aW1lTWV0aG9kKTtcbiAgICAgICAgdGhpcy50aW1lTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgX3RpbWVNZXRob2Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGltZVJlbWFpbkR1cmF0aW9uID0gdGhpcy5fdGltZVJlbWFpbkR1cmF0aW9uIC0gMTtcblxuICAgICAgICB2YXIgcmVtYWluID0gTWF0aC5tYXgodGhpcy5fdGltZVJlbWFpbkR1cmF0aW9uLCAwKTtcbiAgICAgICAgdGhpcy5sYWJlbFRpbWUuc3RyaW5nID0gKHJlbWFpbiA8IDEwICYmIHJlbWFpbiA+IDApID8gKCcwJyArIHJlbWFpbikgOiByZW1haW47XG5cbiAgICAgICAgaWYgKHRoaXMuX3RpbWVSZW1haW5EdXJhdGlvbiA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lT3V0QXV0b1NlbGVjdENhcmRzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8g6LaF5pe25ZCO77yM6Ieq5Yqo6YCJ54mMXG4gICAgX3RpbWVPdXRBdXRvU2VsZWN0Q2FyZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOmakOiXj+aBreWWnOS9oFxuICAgICAgICAgKi9cbiAgICAgICAgcGxheS5nb25nWGlOaVNob3coZmFsc2UpO1xuICAgICAgICBpZiAodHlwZW9mKGNjLnRlU2h1UGFpQ2FyZHMpICE9IFwidW5kZWZpbmVkXCIgJiYgY2MudGVTaHVQYWlDYXJkcyAhPSBudWxsICYmIGNjLnRlU2h1UGFpQ2FyZHMgIT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMub25CdG5Hb25nWGlOaUNvbWZpcm1DbGljaygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IFt0b3VDYXJkTW9kZWxzLCB6aG9uZ0NhcmRNb2Rlcywgd2VpQ2FyZE1vZGVzXSA9IHRoaXMuX2NhY2xlQXV0b1NlbGVjdGVkQ2FyZHMoKTtcblxuICAgICAgICBpZiAodG91Q2FyZE1vZGVscyA9PSBudWxsIHx8IHpob25nQ2FyZE1vZGVzID09IG51bGwgfHwgd2VpQ2FyZE1vZGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRvdUNhcmRNb2RlbHMgPSB0aGlzLl9hbGxDYXJkTW9kZXMuc2xpY2UoLTMpO1xuICAgICAgICAgICAgemhvbmdDYXJkTW9kZXMgPSB0aGlzLl9hbGxDYXJkTW9kZXMuc2xpY2UoNSwgMTApO1xuICAgICAgICAgICAgd2VpQ2FyZE1vZGVzID0gdGhpcy5fYWxsQ2FyZE1vZGVzLnNsaWNlKDAsIDUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2MubG9nKHRvdUNhcmRNb2RlbHMpXG4gICAgICAgIGNjLmxvZyh6aG9uZ0NhcmRNb2RlcylcbiAgICAgICAgY2MubG9nKHdlaUNhcmRNb2RlcylcbiAgICAgICAgY2MubG9nKHRoaXMuX2FsbENhcmRNb2RlcylcbiAgICAgICAgY2MubG9nKFwi6Ieq5Yqo6YCJ54mMIHRvdUNhcmRNb2RlbHMgemhvbmdDYXJkTW9kZXMgd2VpQ2FyZE1vZGVz77yaXCIpO1xuICAgICAgICB0aGlzLl9kaWRTZWxlY3RlZENhcmRzKHRvdUNhcmRNb2RlbHMsIHpob25nQ2FyZE1vZGVzLCB3ZWlDYXJkTW9kZXMpO1xuICAgIH0sXG5cbiAgICBfY2FjbGVBdXRvU2VsZWN0ZWRDYXJkczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBjYXJkcyA9IHRoaXMuX2FsbENhcmRNb2Rlcy5maWx0ZXIoZnVuY3Rpb24oaSl7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZXN1bHRDYXJkcyA9IFtdO1xuICAgICAgICBmb3IodmFyIGkgPSAxO2kgPCAzOyBpKyspe1xuICAgICAgICAgICAgbGV0IGNhcmRzcyA9IEtRQ2FyZC5hdXRvU2VsZWN0Q2FyZHMoY2FyZHMsIDUpO1xuICAgICAgICAgICAgY2FyZHMgPSBjYXJkcy5rcV9leGNsdWRlcyhjYXJkc3MpO1xuICAgICAgICAgICAgcmVzdWx0Q2FyZHMucHVzaChjYXJkc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdENhcmRzLnB1c2goY2FyZHMpO1xuICAgICAgICBsZXQgdG91U2NvcmUgPSBLUUNhcmQuc2NvcmVPZkNhcmRzKHJlc3VsdENhcmRzWzJdKTtcbiAgICAgICAgbGV0IHpob25nU2NvcmUgPSBLUUNhcmQuc2NvcmVPZkNhcmRzKHJlc3VsdENhcmRzWzFdKTtcbiAgICAgICAgbGV0IHdlaVNjb3JlID0gS1FDYXJkLnNjb3JlT2ZDYXJkcyhyZXN1bHRDYXJkc1swXSk7XG4gICAgICAgIGNjLmxvZyhyZXN1bHRDYXJkcylcbiAgICAgICAgY2MubG9nKHRoaXMuX2FsbENhcmRNb2RlcylcbiAgICAgICAgY2MubG9nKFwi54mM5YiG5pWw6Ieq5Yqo6YCJ54mM77yaXCIsIHRvdVNjb3JlLCB6aG9uZ1Njb3JlLCB3ZWlTY29yZSk7XG4gICAgICAgIC8vbGV0IHdlaUNhcmRNb2RlcyA9IEtRQ2FyZC5hdXRvU2VsZWN0Q2FyZHMoY2FyZHMsIDUpO1xuICAgICAgICAvL2NhcmRzID0gY2FyZHMua3FfZXhjbHVkZXMod2VpQ2FyZE1vZGVzKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy9sZXQgemhvbmdDYXJkTW9kZXMgPSBLUUNhcmQuYXV0b1NlbGVjdENhcmRzKGNhcmRzLCA1KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy9sZXQgdG91Q2FyZE1vZGVzID0gY2FyZHMua3FfZXhjbHVkZXMoemhvbmdDYXJkTW9kZXMpO1xuICAgICAgICAvL2lmICh0b3VDYXJkTW9kZXMubGVuZ3RoID09IDMgJiYgemhvbmdDYXJkTW9kZXMubGVuZ3RoID09IDUgJiYgd2VpQ2FyZE1vZGVzLmxlbmd0aCA9PSA1KSB7XG4gICAgICAgIC8vICAgIHJldHVybiBbdG91Q2FyZE1vZGVzLCB6aG9uZ0NhcmRNb2Rlcywgd2VpQ2FyZE1vZGVzXTtcbiAgICAgICAgLy99XG4gICAgICAgIGlmIChyZXN1bHRDYXJkc1syXS5sZW5ndGggPT0gMyAmJiByZXN1bHRDYXJkc1sxXS5sZW5ndGggPT0gNSAmJiByZXN1bHRDYXJkc1swXS5sZW5ndGggPT0gNSkge1xuICAgICAgICAgICAgcmV0dXJuIFtyZXN1bHRDYXJkc1syXSwgcmVzdWx0Q2FyZHNbMV0sIHJlc3VsdENhcmRzWzBdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuXG4gICAgX2NvbnZlcnRDYXJkc1RvU2VydmVyTW9kZWw6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdC50eXBlID0gS1FDYXJkLmNhcmRzVHlwZShjYXJkcyk7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IEtRQ2FyZC5zY29yZU9mQ2FyZHMoY2FyZHMpO1xuICAgICAgICBpZiAocmVzdWx0LnR5cGUgPj0gS1FDYXJkLlRZUEUuU2FuVGFvSHVhICYmIGNjLm1vc2hpICE9IDEpIHtcbiAgICAgICAgICAgIC8vIOeJueauiueJjFxuICAgICAgICAgICAgcmVzdWx0LmlzQ29udGFpbkV4dHJhID0gdGhpcy5faXNDb250YWluRXh0cmFDYXJkc1R5cGUocmVzdWx0LnR5cGUsIGNhcmRzKTtcbiAgICAgICAgICAgIC8vcmVzdWx0LmlzQ29udGFpbkV4dHJhID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdC5jYXJkcyA9IGNhcmRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmNhcmRzID0gS1FDYXJkLmNvbnZlcnRUb1NlcnZlckNhcmRzKGNhcmRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKiMjIyMjKi9cbiAgICBfY29udmVydENhcmRzVG9TZXJ2ZXJNb2RlbDI6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIHJlc3VsdC50eXBlID0gS1FDYXJkLmNhcmRzVHlwZShjYXJkcyk7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IEtRQ2FyZC5zY29yZU9mQ2FyZHMyKGNhcmRzKTtcbiAgICAgICAgaWYgKHJlc3VsdC50eXBlID49IEtRQ2FyZC5UWVBFLlNhblRhb0h1YSAmJiBjYy5tb3NoaSAhPSAxKSB7XG4gICAgICAgICAgICAvLyDnibnmrorniYxcbiAgICAgICAgICAgIHJlc3VsdC5pc0NvbnRhaW5FeHRyYSA9IHRydWU7XG4gICAgICAgICAgICByZXN1bHQuY2FyZHMgPSBjYXJkcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICAvKiMjIyMjKi9cbiAgICAvLyDnibnmrorniYzph4zmmK/lkKbov5jlkKvmnInnibnmrorniYxcbiAgICAvLyDljIXlkKvnmoTmg4XlhrXmnInvvJpcbiAgICAvLyDkuInmoYPoirEg5Y+v6IO95ZCr5pyJ5ZCM6Iqx6aG6XG4gICAgLy8g5LiJ6aG65a2QIOWPr+iDveWQq+acieWQjOiKsemhulxuICAgIC8vIOWFreWvueWNiiDlj6/og73lkKvmnInpk4HmlK9cbiAgICBfaXNDb250YWluRXh0cmFDYXJkc1R5cGU6IGZ1bmN0aW9uICh0eXBlLCBjYXJkcykge1xuICAgICAgICBpZiAodHlwZSA9PSBLUUNhcmQuVFlQRS5TYW5UYW9IdWEpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuY29udGFpblRvbmdIdWFTaHVuKGNhcmRzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IEtRQ2FyZC5UWVBFLlNhblNodW5aaSkge1xuICAgICAgICAgICAgcmV0dXJuIEtRQ2FyZC5jb250YWluVG9uZ0h1YVNodW4oY2FyZHMpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gS1FDYXJkLlRZUEUuTGl1RHVpQmFuKSB7XG4gICAgICAgICAgICByZXR1cm4gS1FDYXJkLmNvbnRhaW5UaWVaaGkoY2FyZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8g6Kem5pG45LqL5Lu2XG4gICAgX3JlZ2lzdGVyVG91Y2hFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYXJkc0xheW91dC5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLl90b3VjaENhcmRMYXlvdXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FyZHNMYXlvdXQubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLl90b3VjaENhcmRMYXlvdXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FyZHNMYXlvdXQubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMuX3RvdWNoQ2FyZExheW91dEVuZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5jYXJkc0xheW91dC5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5fdG91Y2hDYXJkTGF5b3V0RW5kLmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBfdG91Y2hDYXJkTGF5b3V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuYnViYmxlcyA9IHRydWU7XG4gICAgICAgIGxldCBsb2NhdGlvbiA9IGV2ZW50LmdldExvY2F0aW9uKCk7XG4gICAgICAgIGxldCBjYXJkUHJlZmFiID0gdGhpcy5fY2FyZFByZWZhYkluQ2FyZExheW91dFdpdGhMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgICAgIGlmIChjYXJkUHJlZmFiKSB7XG4gICAgICAgICAgICBjYXJkUHJlZmFiLmdldENvbXBvbmVudCgnQ2FyZFByZWZhYicpLnNldFNlbGVjdGVkKHRydWUpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3RvdWNoQ2FyZExheW91dEVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2NoYW5nZVNlbGVjdGVkQ2FyZFByZWZhYnNZKCk7XG4gICAgICAgIHRoaXMuX2Rpc2VjbGVjdENhcmRQcmVmYWJzKCk7XG4gICAgfSxcblxuICAgIF9jYXJkUHJlZmFiSW5DYXJkTGF5b3V0V2l0aExvY2F0aW9uOiBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgbG9jYXRpb24gPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIobG9jYXRpb24pO1xuICAgICAgICBsZXQgY2FyZE5vZGVzID0gdGhpcy5jYXJkc0xheW91dC5ub2RlLmNoaWxkcmVuLnNvcnQoZnVuY3Rpb24gKGNhcmROb2RlMSwgY2FyZE5vZGUyKSB7XG4gICAgICAgICAgICBsZXQgcmVjdDEgPSBjYXJkTm9kZTEuZ2V0Qm91bmRpbmdCb3goKTtcbiAgICAgICAgICAgIGxldCByZWN0MiA9IGNhcmROb2RlMi5nZXRCb3VuZGluZ0JveCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY3QyLnggLSByZWN0MS54O1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gY2FyZE5vZGVzKSB7XG4gICAgICAgICAgICBsZXQgY2FyZE5vZGUgPSBjYXJkTm9kZXNbaW5kZXhdO1xuXG4gICAgICAgICAgICBsZXQgcmVjdCA9IGNhcmROb2RlLmdldEJvdW5kaW5nQm94KCk7XG5cbiAgICAgICAgICAgIGlmIChjYy5yZWN0Q29udGFpbnNQb2ludChyZWN0LCBsb2NhdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgX2NoYW5nZVNlbGVjdGVkQ2FyZFByZWZhYnNZOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLl9zZWxlY3RlZENhcmRQcmVmYWJzKCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZUNhcmRQcmVmYWJzWShjYXJkTm9kZXMpO1xuXG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5UG9rZXJDbGljaygpO1xuICAgIH0sXG5cbiAgICBfY2hhbmdlQ2FyZFByZWZhYnNZOiBmdW5jdGlvbiAoY2FyZE5vZGVzKSB7XG4gICAgICAgIGNhcmROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkTm9kZSkge1xuICAgICAgICAgICAgbGV0IHkgPSBjYXJkTm9kZS5nZXRQb3NpdGlvblkoKTtcbiAgICAgICAgICAgIGlmICh5ID09IHRoaXMuX2NhcmRPZmZzZXRZKSB7XG4gICAgICAgICAgICAgICAgY2FyZE5vZGUuc2V0UG9zaXRpb25ZKHRoaXMuX2NhcmRPZmZzZXRZICsgNTUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYXJkTm9kZS5zZXRQb3NpdGlvblkodGhpcy5fY2FyZE9mZnNldFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBfc2VsZWN0ZWRDYXJkUHJlZmFiczogZnVuY3Rpb24gKGluY2x1ZGVTdGlja091dCA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIHJldHVybiBjYXJkTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChjYXJkTm9kZSkge1xuICAgICAgICAgICAgbGV0IGNhcmRQcmVmYWIgPSBjYXJkTm9kZS5nZXRDb21wb25lbnQoJ0NhcmRQcmVmYWInKTtcbiAgICAgICAgICAgIGxldCBpc1NlbGVjdGVkID0gY2FyZFByZWZhYi5pc1NlbGVjdGVkKCk7XG4gICAgICAgICAgICBpZiAoIWlzU2VsZWN0ZWQgJiYgaW5jbHVkZVN0aWNrT3V0KSB7XG4gICAgICAgICAgICAgICAgaXNTZWxlY3RlZCA9IGNhcmROb2RlLmdldFBvc2l0aW9uWSgpID4gMTA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpc1NlbGVjdGVkO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgX2Rpc2VjbGVjdENhcmRQcmVmYWJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW47XG4gICAgICAgIGNhcmROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBub2RlLmdldENvbXBvbmVudCgnQ2FyZFByZWZhYicpLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIOmHjee9riBjYXJkcyDnmoQgWFxuICAgIF9yZXNldENhcmRzUG9zaXRpb25YOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vbGV0IGludGVydmFsID0gOTg7XG4gICAgICAgIGxldCBpbnRlcnZhbCA9IDc4O1xuICAgICAgICBsZXQgY2FyZE5vZGVzID0gdGhpcy5jYXJkc0xheW91dC5ub2RlLmNoaWxkcmVuIHx8IFtdO1xuICAgICAgICBsZXQgbGVuZ3RoID0gY2FyZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWlkZGxlSW5kZXggPSBsZW5ndGggLyAyO1xuICAgICAgICBsZXQgY2FyZFdpZHRoID0gMTU0O1xuXG5cbiAgICAgICAgLy90aGlzLmNhcmRzTGF5b3V0U29ydCgpO1xuICAgICAgICBpZih0aGlzLmNhcmRzTGF5b3V0U29ydENvbG9yID09IHRydWUpe1xuICAgICAgICAgICAgdGhpcy5jYXJkc0xheW91dC5ub2RlLmNoaWxkcmVuLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICAgICAgICAgIGxldCBjb21wb25lbnQxID0gbjEuZ2V0Q29tcG9uZW50KCdDYXJkUHJlZmFiJyk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudDIgPSBuMi5nZXRDb21wb25lbnQoJ0NhcmRQcmVmYWInKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Mi5jYXJkTW9kZSgpLmNvbG9yIC0gY29tcG9uZW50MS5jYXJkTW9kZSgpLmNvbG9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5jYXJkc0xheW91dC5ub2RlLmNoaWxkcmVuLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICAgICAgICAgIGxldCBjb21wb25lbnQxID0gbjEuZ2V0Q29tcG9uZW50KCdDYXJkUHJlZmFiJyk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudDIgPSBuMi5nZXRDb21wb25lbnQoJ0NhcmRQcmVmYWInKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50MS5jYXJkTW9kZSgpLnNvcnQoY29tcG9uZW50Mi5jYXJkTW9kZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vY2FyZE5vZGVzLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICAvLyAgICBsZXQgY29tcG9uZW50MSA9IG4xLmdldENvbXBvbmVudCgnQ2FyZFByZWZhYicpO1xuICAgICAgICAvLyAgICBsZXQgY29tcG9uZW50MiA9IG4yLmdldENvbXBvbmVudCgnQ2FyZFByZWZhYicpO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICByZXR1cm4gY29tcG9uZW50MS5jYXJkTW9kZSgpLnNvcnQoY29tcG9uZW50Mi5jYXJkTW9kZSgpKTtcbiAgICAgICAgLy99KTtcblxuICAgICAgICBjYXJkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FyZE5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICBjYXJkTm9kZS56SW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIGxldCB4ID0gKGluZGV4IC0gbWlkZGxlSW5kZXgpICogaW50ZXJ2YWwgKyBjYXJkV2lkdGggLyAzO1xuICAgICAgICAgICAgY2FyZE5vZGUuc2V0UG9zaXRpb25YKHgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8g6YeN572uIGNhcmRzIOeahCBY5Li6MFxuICAgIHJlc2V0Q2FyZHNQb3NpdGlvblgxOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIGxldCBsZW5ndGggPSBjYXJkTm9kZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXJkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FyZE5vZGUpIHtcbiAgICAgICAgICAgIGNhcmROb2RlLnNldFBvc2l0aW9uWSgwKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9yZXNldENhcmRzUG9zaXRpb25ZOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIGNhcmROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkTm9kZSkge1xuICAgICAgICAgICAgY2FyZE5vZGUuc2V0UG9zaXRpb25ZKHRoaXMuX2NhcmRPZmZzZXRZKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgLy8g5aS044CB5Lit44CB5bC+6YGTIGxheW91dCDnmoTngrnlh7vkuovku7ZcbiAgICBfcmVnaXN0ZXJEYW9zTGF5b3V0Q2xpY2tFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGF5b3V0VG91RGFvID0gdGhpcy5sYXlvdXRUb3VEYW87XG4gICAgICAgIHZhciBsYXlvdXRaaG9uZ0RhbyA9IHRoaXMubGF5b3V0WmhvbmdEYW87XG4gICAgICAgIHZhciBsYXlvdXRXZWlEYW8gPSB0aGlzLmxheW91dFdlaURhbztcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvL+WktOmBk+eCueWHu1xuICAgICAgICB0aGlzLmxheW91dFRvdURhby5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jbGlja1RvdURhb0xheW91dChldmVudCk7XG4gICAgICAgICAgICAvKiMjIyMj54K55Ye756ys5LqM6YGT5Ymp5LiL55qE54mM6Ieq5Yqo6YCJ5LiK5Y67IyMjIyMgYmVnaW4qL1xuICAgICAgICAgICAgLy/lpoLmnpzliankuIvnmoTniYzlsI/kuo415bygXG4gICAgICAgICAgICBpZih0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4ubGVuZ3RoIDw9IDUpe1xuICAgICAgICAgICAgICAgIC8v5aaC5p6c5bC+6YGT5aGr5ruh77yM5oqK5a6D5pS+5YWl5Lit6YGTXG4gICAgICAgICAgICAgICAgaWYobGF5b3V0WmhvbmdEYW8ubm9kZS5jaGlsZHJlbi5sZW5ndGggPCA1ICYmIGxheW91dFdlaURhby5ub2RlLmNoaWxkcmVuLmxlbmd0aCA9PSA1KXtcbiAgICAgICAgICAgICAgICAgICAgLy8g56qB5Ye66K6h566X5Ye65p2l55qE54mM5pWw57uEXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoYW5nZUNhcmRQcmVmYWJzWShjYXJkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9hZGREYW9DYXJkVG9MYXlvdXQobGF5b3V0WmhvbmdEYW8ubm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5Lit6YGT5aGr5ruh77yM5oqK5a6D5pS+5YWl5bC+6YGTXG4gICAgICAgICAgICAgICAgZWxzZSBpZihsYXlvdXRXZWlEYW8ubm9kZS5jaGlsZHJlbi5sZW5ndGggPCA1ICYmIGxheW91dFpob25nRGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmROb2RlcyA9IHRoaXMuY2FyZHNMYXlvdXQubm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hhbmdlQ2FyZFByZWZhYnNZKGNhcmROb2Rlcyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2FkZERhb0NhcmRUb0xheW91dChsYXlvdXRXZWlEYW8ubm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyojIyMjI2VuZCovXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIC8v5Lit6YGT54K55Ye7XG4gICAgICAgIHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdGhpcy5fY2xpY2taaG9uZ0Rhb0xheW91dChldmVudCk7XG4gICAgICAgICAgICAvKiMjIyMjYmVnaW4qL1xuICAgICAgICAgICAgLy/kuK3pgZPlv4Xpobvloavmu6HmiY3mnaXmiafooYxcbiAgICAgICAgICAgIGlmKGxheW91dFpob25nRGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDUpe1xuICAgICAgICAgICAgICAgIC8v5aaC5p6c5Ymp5LiL55qE54mM5bCP5LqO562J5LqONeW8oFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuY2FyZHNMYXlvdXQubm9kZS5jaGlsZHJlbi5sZW5ndGggPD0gNSl7XG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5bC+6YGT5aGr5ruh77yM5oqK5a6D5pS+5YWl5aS06YGTXG4gICAgICAgICAgICAgICAgICAgIGlmKGxheW91dFRvdURhby5ub2RlLmNoaWxkcmVuLmxlbmd0aCA8IDMgJiYgbGF5b3V0V2VpRGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g56qB5Ye66K6h566X5Ye65p2l55qE54mM5pWw57uEXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZE5vZGVzID0gdGhpcy5jYXJkc0xheW91dC5ub2RlLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hhbmdlQ2FyZFByZWZhYnNZKGNhcmROb2Rlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9hZGREYW9DYXJkVG9MYXlvdXQobGF5b3V0VG91RGFvLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5aS06YGT5aGr5ruh77yM5oqK5a6D5pS+5YWl5bC+6YGTXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobGF5b3V0V2VpRGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoIDwgNSAmJiBsYXlvdXRUb3VEYW8ubm9kZS5jaGlsZHJlbi5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmROb2RlcyA9IHRoaXMuY2FyZHNMYXlvdXQubm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoYW5nZUNhcmRQcmVmYWJzWShjYXJkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fYWRkRGFvQ2FyZFRvTGF5b3V0KGxheW91dFdlaURhby5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyojIyMjI2VuZCovXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIC8v5bC+6YGT54K55Ye7XG4gICAgICAgIHRoaXMubGF5b3V0V2VpRGFvLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrV2VpRGFvTGF5b3V0KGV2ZW50KTtcbiAgICAgICAgICAgIC8qIyMjIyNiZWdpbiovXG4gICAgICAgICAgICAvL+WwvumBk+W/hemhu+Whq+a7oeaJjeadpeaJp+ihjFxuICAgICAgICAgICAgaWYobGF5b3V0V2VpRGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDUpe1xuICAgICAgICAgICAgICAgIC8v5aaC5p6c5Ymp5LiL55qE54mM5bCP5LqO562J5LqONeW8oFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuY2FyZHNMYXlvdXQubm9kZS5jaGlsZHJlbi5sZW5ndGggPD0gNSl7XG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5Lit6YGT5aGr5ruh77yM5oqK5a6D5pS+5YWl5aS06YGTXG4gICAgICAgICAgICAgICAgICAgIGlmKGxheW91dFRvdURhby5ub2RlLmNoaWxkcmVuLmxlbmd0aCA8IDMgJiYgbGF5b3V0WmhvbmdEYW8ubm9kZS5jaGlsZHJlbi5sZW5ndGggPT0gNSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnqoHlh7rorqHnrpflh7rmnaXnmoTniYzmlbDnu4RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGFuZ2VDYXJkUHJlZmFic1koY2FyZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2FkZERhb0NhcmRUb0xheW91dChsYXlvdXRUb3VEYW8ubm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzlpLTpgZPloavmu6HvvIzmiorlroPmlL7lhaXkuK3pgZNcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihsYXlvdXRaaG9uZ0Rhby5ub2RlLmNoaWxkcmVuLmxlbmd0aCA8IDUgJiYgbGF5b3V0VG91RGFvLm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jaGFuZ2VDYXJkUHJlZmFic1koY2FyZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2FkZERhb0NhcmRUb0xheW91dChsYXlvdXRaaG9uZ0Rhby5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyojIyMjI2VuZCovXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIF9jbGlja1RvdURhb0xheW91dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGxldCBjbGlja0NhcmQgPSB0aGlzLl9kYW9DYXJkTm9kZUluTGF5b3V0V2l0aEV2ZW50KHRoaXMubGF5b3V0VG91RGFvLm5vZGUsIGV2ZW50KTtcbiAgICAgICAgaWYgKGNsaWNrQ2FyZCkge1xuICAgICAgICAgICAgdGhpcy5fZGVsZXRlRGFvQ2FyZChjbGlja0NhcmQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkZERhb0NhcmRUb0xheW91dCh0aGlzLmxheW91dFRvdURhby5ub2RlLCAzKTtcbiAgICB9LFxuXG4gICAgX2NsaWNrWmhvbmdEYW9MYXlvdXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBsZXQgY2xpY2tDYXJkID0gdGhpcy5fZGFvQ2FyZE5vZGVJbkxheW91dFdpdGhFdmVudCh0aGlzLmxheW91dFpob25nRGFvLm5vZGUsIGV2ZW50KTtcbiAgICAgICAgaWYgKGNsaWNrQ2FyZCkge1xuICAgICAgICAgICAgdGhpcy5fZGVsZXRlRGFvQ2FyZChjbGlja0NhcmQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWRkRGFvQ2FyZFRvTGF5b3V0KHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZSk7XG4gICAgfSxcblxuICAgIF9jbGlja1dlaURhb0xheW91dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGxldCBjbGlja0NhcmQgPSB0aGlzLl9kYW9DYXJkTm9kZUluTGF5b3V0V2l0aEV2ZW50KHRoaXMubGF5b3V0V2VpRGFvLm5vZGUsIGV2ZW50KTtcbiAgICAgICAgaWYgKGNsaWNrQ2FyZCkge1xuICAgICAgICAgICAgdGhpcy5fZGVsZXRlRGFvQ2FyZChjbGlja0NhcmQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkZERhb0NhcmRUb0xheW91dCh0aGlzLmxheW91dFdlaURhby5ub2RlKTtcbiAgICB9LFxuXG4gICAgX2Rhb0NhcmROb2RlSW5MYXlvdXRXaXRoRXZlbnQ6IGZ1bmN0aW9uIChub2RlLCBldmVudCkge1xuICAgICAgICBsZXQgY2FyZE5vZGVzID0gbm9kZS5jaGlsZHJlbiB8fCBbXTtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gZXZlbnQuZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgbG9jYXRpb24gPSBub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKGxvY2F0aW9uKTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gY2FyZE5vZGVzKSB7XG4gICAgICAgICAgICBsZXQgY2FyZE5vZGUgPSBjYXJkTm9kZXNbaW5kZXhdO1xuICAgICAgICAgICAgbGV0IHJlY3QgPSBjYXJkTm9kZS5nZXRCb3VuZGluZ0JveCgpO1xuICAgICAgICAgICAgaWYgKGNjLnJlY3RDb250YWluc1BvaW50KHJlY3QsIGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXJkTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBfYWRkRGFvQ2FyZFRvTGF5b3V0OiBmdW5jdGlvbiAobm9kZSwgbWF4TnVtYmVyQ2FyZCA9IDUpIHtcbiAgICAgICAgbGV0IGNhcmROb2RlcyA9IG5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIGlmIChjYXJkTm9kZXMubGVuZ3RoID49IDUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZW1haW5Db3VudCA9IG1heE51bWJlckNhcmQgLSBjYXJkTm9kZXMubGVuZ3RoO1xuICAgICAgICB2YXIgc2VsZWN0ZWRDYXJkcyA9IHRoaXMuX3NlbGVjdGVkQ2FyZFByZWZhYnModHJ1ZSkgfHwgW107XG4gICAgICAgIGlmIChzZWxlY3RlZENhcmRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZWN0ZWRDYXJkcy5sZW5ndGggPiByZW1haW5Db3VudCkge1xuICAgICAgICAgICAgc2VsZWN0ZWRDYXJkcyA9IHNlbGVjdGVkQ2FyZHMuc2xpY2UoMCwgcmVtYWluQ291bnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNlbGVjdGVkQ2FyZE5hbWVzID0gc2VsZWN0ZWRDYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmRQcmVmYWIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXJkUHJlZmFiLmdldENvbXBvbmVudCgnQ2FyZFByZWZhYicpLmNhcmROYW1lKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhcmROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkVHlwZU5vZGUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkQ2FyZE5hbWVzLnB1c2goY2FyZFR5cGVOb2RlLmdldENvbXBvbmVudCgnQ2FyZFR5cGVTcHJpdGUnKS5jYXJkTmFtZSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGNhcmRNb2RlcyA9IHNlbGVjdGVkQ2FyZE5hbWVzLm1hcChmdW5jdGlvbiAoY2FyZE5hbWUsaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgS1FDYXJkKGNhcmROYW1lLG51bGwsaW5kZXgpO1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uIChjMSwgYzIpIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuc29ydChjMSwgYzIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHRvdUNhcmRNb2RlcyA9IChub2RlID09IHRoaXMubGF5b3V0VG91RGFvLm5vZGUpID8gY2FyZE1vZGVzIDogdGhpcy5fdGFvRGFvQ2FyZE1vZGVzKCk7XG4gICAgICAgIGxldCB6aG9uZ0NhcmRNb2RlcyA9IChub2RlID09IHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZSkgPyBjYXJkTW9kZXMgOiB0aGlzLl96aG9uZ0Rhb0NhcmRNb2RlcygpO1xuICAgICAgICBsZXQgd2VpQ2FyZE1vZGVzID0gKG5vZGUgPT0gdGhpcy5sYXlvdXRXZWlEYW8ubm9kZSkgPyBjYXJkTW9kZXMgOiB0aGlzLl93ZWlEYW9DYXJkTW9kZXMoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1ZhbGlkQ2FyZE1vZGVzKHRvdUNhcmRNb2RlcywgemhvbmdDYXJkTW9kZXMsIHdlaUNhcmRNb2RlcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUucmVtb3ZlQWxsQ2hpbGRyZW4oKTtcblxuICAgICAgICBjYXJkTW9kZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FyZE1vZGUpIHtcbiAgICAgICAgICAgIGxldCBjYXJkTmFtZSA9IGNhcmRNb2RlLmNhcmROYW1lKCk7XG4gICAgICAgICAgICBsZXQgY2FyZFR5cGVTcHJpdGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmNhcmRUeXBlUHJlZmFiKTtcbiAgICAgICAgICAgIGlmKGNjLm1hUGFpKXtcbiAgICAgICAgICAgICAgICB2YXIgY2FyZE1hUGFpID0gJzNfJyArIGNjLm1hUGFpO1xuICAgICAgICAgICAgICAgIGlmKGNhcmROYW1lID09IGNhcmRNYVBhaSl7XG4gICAgICAgICAgICAgICAgICAgIGNhcmRUeXBlU3ByaXRlLmNvbG9yID0gbmV3IGNjLkNvbG9yKDIyNiwgMTQ1LCAxNDUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhcmRUeXBlU3ByaXRlLmdldENvbXBvbmVudCgnQ2FyZFR5cGVTcHJpdGUnKS5zZXRDYXJkKGNhcmROYW1lKTtcbiAgICAgICAgICAgIG5vZGUuYWRkQ2hpbGQoY2FyZFR5cGVTcHJpdGUpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIHNlbGVjdGVkQ2FyZHMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZXNldENhcmRzUG9zaXRpb25ZKCk7XG4gICAgICAgIHRoaXMuX3Jlc2V0Q2FyZHNQb3NpdGlvblgoKTtcblxuICAgICAgICB0aGlzLl9hdXRvQWN0aXZlRGVsZXRlRGFvQnV0dG9ucygpO1xuXG4gICAgICAgIHRoaXMuX3JlbG9hZEtRQ2FyZE1vZGVzSW5uZXIoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRUeXBlQnV0dG9uRW5hYmxlc1dpdGhNb2RlbHMoKTtcblxuICAgIH0sXG5cbiAgICAvLyDliKDpmaQg5aS044CB5Lit5oiW5bC+6YGT5Lit55qE5p+Q5Lit54mMXG4gICAgX2RlbGV0ZURhb0NhcmQ6IGZ1bmN0aW9uIChjYXJkVHlwZU5vZGUsIHJlbG9hZFR5cGVCdXR0b25FbmFibGVzID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGNhcmROYW1lID0gY2FyZFR5cGVOb2RlLmdldENvbXBvbmVudCgnQ2FyZFR5cGVTcHJpdGUnKS5jYXJkTmFtZSgpO1xuICAgICAgICB0aGlzLmFkZENhcmQoY2FyZE5hbWUsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX3Jlc2V0Q2FyZHNQb3NpdGlvblkoKTtcblxuICAgICAgICBjYXJkVHlwZU5vZGUucmVtb3ZlRnJvbVBhcmVudCh0cnVlKTtcbiAgICAgICAgdGhpcy5fYXV0b0FjdGl2ZURlbGV0ZURhb0J1dHRvbnMoKTtcblxuICAgICAgICBpZiAocmVsb2FkVHlwZUJ1dHRvbkVuYWJsZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZEtRQ2FyZE1vZGVzSW5uZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0VHlwZUJ1dHRvbkVuYWJsZXNXaXRoTW9kZWxzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8g5Yig6ZmkIOWktOmBk+aIluS4remBk+aIluWwvumBk+S4iuaJgOacieeahCDniYxcbiAgICBfZGVsZXRlRGFvQ2FyZHNPZkxheW91dDogZnVuY3Rpb24gKGRhb0xheW91dCkge1xuICAgICAgICBsZXQgY2FyZE5vZGVzID0gQXJyYXkuZnJvbShkYW9MYXlvdXQuY2hpbGRyZW4pO1xuICAgICAgICBjYXJkTm9kZXMuZm9yRWFjaCh0aGlzLl9kZWxldGVEYW9DYXJkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuX3JlbG9hZEtRQ2FyZE1vZGVzSW5uZXIoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRUeXBlQnV0dG9uRW5hYmxlc1dpdGhNb2RlbHMoKTtcbiAgICB9LFxuXG4gICAgLy8g5Yik5pat6IO95ZCm5L2/55So6YCJ5oup5Lit55qE54mMXG4gICAgLy8g5Y2z77ya5aS06YGT6KaB5bCP5LqO5Lit6YGT44CB5Lit6YGT6KaB5bCP5LqO5bC+6YGTXG4gICAgX2lzVmFsaWRDYXJkTW9kZXM6IGZ1bmN0aW9uICh0b3VDYXJkTW9kZXMsIHpob25nQ2FyZE1vZGVzLCB3ZWlDYXJkTW9kZXMpIHtcbiAgICAgICAgdG91Q2FyZE1vZGVzID0gdG91Q2FyZE1vZGVzIHx8IFtdO1xuICAgICAgICB6aG9uZ0NhcmRNb2RlcyA9IHpob25nQ2FyZE1vZGVzIHx8IFtdO1xuICAgICAgICB3ZWlDYXJkTW9kZXMgPSB3ZWlDYXJkTW9kZXMgfHwgW107XG4gICAgICAgIGNjLmxvZyh0b3VDYXJkTW9kZXMubGVuZ3RoLCB6aG9uZ0NhcmRNb2Rlcy5sZW5ndGgsIHdlaUNhcmRNb2Rlcy5sZW5ndGgpO1xuICAgICAgICBpZiAodG91Q2FyZE1vZGVzLmxlbmd0aCA8IDMgfHwgemhvbmdDYXJkTW9kZXMubGVuZ3RoIDwgNSB8fCB3ZWlDYXJkTW9kZXMubGVuZ3RoIDwgNSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG91U2NvcmUgPSBLUUNhcmQuc2NvcmVPZkNhcmRzKHRvdUNhcmRNb2Rlcyk7XG4gICAgICAgIGxldCB6aG9uZ1Njb3JlID0gS1FDYXJkLnNjb3JlT2ZDYXJkcyh6aG9uZ0NhcmRNb2Rlcyk7XG4gICAgICAgIGxldCB3ZWlTY29yZSA9IEtRQ2FyZC5zY29yZU9mQ2FyZHMod2VpQ2FyZE1vZGVzKTtcbiAgICAgICAgY2MubG9nKFwi54mM5YiG5pWw77yaXCIsIHRvdVNjb3JlLCB6aG9uZ1Njb3JlLCB3ZWlTY29yZSk7XG4gICAgICAgIHJldHVybiAodG91U2NvcmUgPCB6aG9uZ1Njb3JlKSAmJiAoemhvbmdTY29yZSA8PSB3ZWlTY29yZSk7XG4gICAgfSxcblxuICAgIC8vIOWktOmBk+S4iuW3suacieeahOeJjFxuICAgIF90YW9EYW9DYXJkTW9kZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmRNb2Rlc09mQ2FyZFByZWZhYnModGhpcy5sYXlvdXRUb3VEYW8ubm9kZS5jaGlsZHJlbik7XG4gICAgfSxcblxuICAgIC8vIOS4remBk+S4iuW3suacieeahOeJjFxuICAgIF96aG9uZ0Rhb0NhcmRNb2RlczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FyZE1vZGVzT2ZDYXJkUHJlZmFicyh0aGlzLmxheW91dFpob25nRGFvLm5vZGUuY2hpbGRyZW4pO1xuICAgIH0sXG5cbiAgICAvLyDlsL7pgZPkuIrlt7LmnInnmoTniYxcbiAgICBfd2VpRGFvQ2FyZE1vZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYXJkTW9kZXNPZkNhcmRQcmVmYWJzKHRoaXMubGF5b3V0V2VpRGFvLm5vZGUuY2hpbGRyZW4pO1xuICAgIH0sXG5cbiAgICBfY2FyZE1vZGVzT2ZDYXJkUHJlZmFiczogZnVuY3Rpb24gKGNhcmRUeXBlTm9kZXMpIHtcbiAgICAgICAgaWYgKCFjYXJkVHlwZU5vZGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2FyZE1vZGVzID0gY2FyZFR5cGVOb2Rlcy5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGxldCBjb21wb25lbnQgPSBub2RlLmdldENvbXBvbmVudCgnQ2FyZFR5cGVTcHJpdGUnKTtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQuY2FyZE1vZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNhcmRNb2RlcyB8fCBbXTtcbiAgICB9LFxuXG4gICAgLy8g6Ieq5Yqo6K6+572uIOWktOOAgeS4reOAgeWwvumBk+eahOWIoOmZpOaMiemSrueahOWPr+ingeaAp1xuICAgIF9hdXRvQWN0aXZlRGVsZXRlRGFvQnV0dG9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9hdXRvQWN0aXZlRGVsZXRlRGFvQnV0dG9uKHRoaXMubGF5b3V0VG91RGFvLm5vZGUsIHRoaXMuYnRuRGVsZXRlVG91RGFvLm5vZGUpO1xuICAgICAgICB0aGlzLl9hdXRvQWN0aXZlRGVsZXRlRGFvQnV0dG9uKHRoaXMubGF5b3V0WmhvbmdEYW8ubm9kZSwgdGhpcy5idG5EZWxldGVaaG9uZ0Rhby5ub2RlKTtcbiAgICAgICAgdGhpcy5fYXV0b0FjdGl2ZURlbGV0ZURhb0J1dHRvbih0aGlzLmxheW91dFdlaURhby5ub2RlLCB0aGlzLmJ0bkRlbGV0ZVdlaURhby5ub2RlKTtcbiAgICB9LFxuXG4gICAgX2F1dG9BY3RpdmVEZWxldGVEYW9CdXR0b246IGZ1bmN0aW9uIChsYXlvdXQsIGJ1dHRvbikge1xuICAgICAgICBidXR0b24uYWN0aXZlID0gbGF5b3V0LmNoaWxkcmVuLmxlbmd0aCA+IDA7XG4gICAgfSxcblxuICAgIC8vIOiHquWKqOiuvue9riDigJzlhajpg6jlj5bmtojigJ3jgIHigJznoa7lrprlh7rniYzigJ3jgIHigJznsbvlnovpgInmi6nigJ3mjInpkq7nmoTlj6/op4HmgKdcbiAgICBfYXV0b0FjdGl2ZVR5cGVCdXR0b25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYXJkTm9kZXMgPSB0aGlzLmNhcmRzTGF5b3V0Lm5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgIGxldCBoYXNDYXJkVW5TZWxlY3RlZCA9IGNhcmROb2Rlcy5sZW5ndGggPiAwO1xuICAgICAgICB0aGlzLmJ0bkRvbmUubm9kZS5hY3RpdmUgPSAhaGFzQ2FyZFVuU2VsZWN0ZWQ7XG4gICAgICAgIHRoaXMuYnRuQ2FuY2VsQWxsLm5vZGUuYWN0aXZlID0gdGhpcy5idG5Eb25lLm5vZGUuYWN0aXZlO1xuICAgICAgICB0aGlzLnR5cGVCdXR0b25zTm9kZS5hY3RpdmUgPSBoYXNDYXJkVW5TZWxlY3RlZDtcbiAgICB9LFxuXG59KTtcbiIsImNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIF9jYXJkTmFtZTogbnVsbCxcbiAgICAgIF9jYXJkTW9kZWw6IG51bGwsXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIHNldENhcmQ6IGZ1bmN0aW9uIChjYXJkTmFtZSkge1xuICAgICAgdGhpcy5fY2FyZE5hbWUgPSBjYXJkTmFtZTtcbiAgICAgIHRoaXMuX2NhcmRNb2RlbCA9IG5ldyBLUUNhcmQoY2FyZE5hbWUpO1xuICAgICAgdGhpcy5fbG9hZENhcmRGcmFtZShjYXJkTmFtZSwgZnVuY3Rpb24gKHNwcml0ZUZyYW1lKSB7XG4gICAgICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoJ2NjLlNwcml0ZScpLnNwcml0ZUZyYW1lID0gc3ByaXRlRnJhbWU7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBjYXJkTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhcmROYW1lO1xuICAgIH0sXG5cbiAgICBjYXJkTW9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhcmRNb2RlbDtcbiAgICB9LFxuXG4gICAgX2NhcmRGdWxsTmFtZTogZnVuY3Rpb24gKGNhcmRTaG9ydE5hbWUpIHtcbiAgICAgIHZhciBjYXJkTmFtZSA9IGNhcmRTaG9ydE5hbWU7XG4gICAgICBpZiAoIWNhcmROYW1lLnN0YXJ0c1dpdGgoXCJwdWJsaWMtcGljLWNhcmQtcG9rZXJcIikpIHtcbiAgICAgICAgY2FyZE5hbWUgPSBcInB1YmxpYy1waWMtY2FyZC1wb2tlci1cIiArIGNhcmROYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FyZE5hbWU7XG4gICAgfSxcblxuICAgIF9sb2FkQ2FyZEZyYW1lOiBmdW5jdGlvbiAoY2FyZE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBjYy5hc3NlcnQoY2FsbGJhY2spO1xuXG4gICAgICBjYy5sb2FkZXIubG9hZFJlcyhcImltYWdlcy9wb2tlckxpc3QvcG9ja0xpc3RcIiwgY2MuU3ByaXRlQXRsYXMsIGZ1bmN0aW9uIChlcnIsIGF0bGFzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYy5lcnJvcihlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhcmROYW1lID0gdGhpcy5fY2FyZEZ1bGxOYW1lKGNhcmROYW1lKTtcbiAgICAgICAgdmFyIGZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoY2FyZE5hbWUpO1xuICAgICAgICBjYWxsYmFjayhmcmFtZSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG59KTtcbiIsIi8vIOeUqOS6juWcqOa4uOaIj+i/h+eoi+S4re+8jOWxleekuueUqOaIt+eahOiBiuWkqea2iOaBr1xuXG5sZXQgQ2hhdE1lc3NhZ2UgPSBjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgcmljaFRleHQ6IGNjLlJpY2hUZXh0LFxuICAgICAgc3ByaXRlQmFja2dyb3VuZDogY2MuU3ByaXRlLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgIH0sXG5cbiAgICBzZXRTdHJpbmc6IGZ1bmN0aW9uIChzdHJpbmcgPSBcIlwiLCBhdXRvSGlkZSA9IHRydWUpIHtcbiAgICAgIGlmIChzdHJpbmcubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgbGV0IG1heFdpZHRoID0gMzAwO1xuICAgICAgbGV0IHJlYWxTdHIgPSBDaGF0TWVzc2FnZS5wYXJzZVN0cmluZyhzdHJpbmcpO1xuXG4gICAgICAvLyDnlLHkuo4gY2MuUmljaFRleHQg5Zyo5oyH5a6aIG1heFdpZHRoIOWQju+8jOivpee7k+eCueeahCB3aWR0aCDkvJrkuIDnm7RcbiAgICAgIC8vIOaYryBtYXhXaWR0aCDlgLzjgILogIzlnKjlsIYgbWF4V2lkdGgg5oyH5a6a5Li6MOaXtu+8jOWFtiBjb250ZW50U2l6ZS53aWR0aCDkvJpcbiAgICAgIC8vIOaYr+WGheWuueeahOecn+ato+aJgOmcgOeahOWuveW6plxuICAgICAgLy9cbiAgICAgIC8vIOaJgOS7pei/memHjOWFiOWwhiBtYXhXaWR0aCDorr7kuLogMO+8jOiOt+WPluWFtuWunumZheWGheWuuSB3aWR0aCDlkI7lho3osIPmlbRcbiAgICAgIHRoaXMucmljaFRleHQubWF4V2lkdGggPSAwO1xuICAgICAgdGhpcy5yaWNoVGV4dC5zdHJpbmcgPSByZWFsU3RyO1xuXG4gICAgICBsZXQgY29udGVudFdpZHRoID0gdGhpcy5yaWNoVGV4dC5ub2RlLmdldENvbnRlbnRTaXplKCkud2lkdGg7XG4gICAgICBpZiAoY29udGVudFdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgdGhpcy5yaWNoVGV4dC5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLnJpY2hUZXh0LnN0cmluZyA9IHJlYWxTdHI7XG4gICAgICAgIGNvbnRlbnRXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5vZGUud2lkdGggPSBjb250ZW50V2lkdGggKyAyODtcbiAgICAgIHRoaXMubm9kZS5oZWlnaHQgPSB0aGlzLnJpY2hUZXh0Lm5vZGUuZ2V0Q29udGVudFNpemUoKS5oZWlnaHQgKyAyMDtcblxuICAgICAgdGhpcy5zcHJpdGVCYWNrZ3JvdW5kLm5vZGUud2lkdGggPSB0aGlzLm5vZGUud2lkdGg7XG4gICAgICB0aGlzLnNwcml0ZUJhY2tncm91bmQubm9kZS5oZWlnaHQgPSB0aGlzLm5vZGUuaGVpZ2h0O1xuXG4gICAgICBpZiAoYXV0b0hpZGUpIHtcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMuX2hpZGVOb2RlLmJpbmQodGhpcyksIDMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaGlkZU5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuXG59KTtcblxuLy8g5bCGIDxicTEwPiDmlLnkuLrvvJogPGltZyBzcmM9J2JnMTAnLz5cbkNoYXRNZXNzYWdlLnBhcnNlU3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuICBsZXQgcmVzdWx0ID0gc3RyLnJlcGxhY2UoLzxicVxcZHsxLDJ9Pi9nLCBmdW5jdGlvbihtYXRjaCl7XG4gICAgdmFyIGJxID0gbWF0Y2gucmVwbGFjZShcIjxcIiwgXCIgPGltZyBzcmM9J1wiKS5yZXBsYWNlKFwiPlwiLCBcIicvPiBcIik7XG4gICAgcmV0dXJuIGJxO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSxcblxubW9kdWxlLmV4cG9ydHMgPSBDaGF0TWVzc2FnZTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIHNldFN0cmluZzogZnVuY3Rpb24gKHN0cikge1xuICAgICAgdGhpcy5fcmljaFRleHQoKS5zdHJpbmcgPSBzdHI7XG4gICAgfSxcblxuICAgIF9yaWNoVGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wb25lbnQoJ2NjLlJpY2hUZXh0Jyk7XG4gICAgfSxcblxuXG59KTtcbiIsImNvbnN0IEtRQ2FyZFJlc0hlbHBlciA9IHJlcXVpcmUoJ0tRQ2FyZFJlc0hlbHBlcicpO1xuY29uc3QgQXVkaW9NYW5hZ2VyID0gcmVxdWlyZSgnQXVkaW9NYW5hZ2VyJyk7XG5jb25zdCBLUUNhcmQgPSByZXF1aXJlKCdLUUNhcmQnKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdG91TGF5b3V0OiBjYy5MYXlvdXQsXG4gICAgICAgIHpob25nTGF5b3V0OiBjYy5MYXlvdXQsXG4gICAgICAgIHdlaUxheW91dDogY2MuTGF5b3V0LFxuICAgICAgICBsYWJlbFRvdVNjb3JlOiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxUb3VTY29yZVJpZ2h0OiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxaaG9uZ1Njb3JlOiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxaaG9uZ1Njb3JlUmlnaHQ6IGNjLkxhYmVsLFxuICAgICAgICBsYWJlbFdlaVNjb3JlOiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxXZWlTY29yZVJpZ2h0OiBjYy5MYWJlbCxcblxuICAgICAgICB0b3VTY3JvZVRpdGxlOiBjYy5Ob2RlLCAgLy/lpLTpgZPlrZdcbiAgICAgICAgemhvbmdTY3JvZVRpdGxlOiBjYy5Ob2RlLCAvL+S4remBk+Wtl1xuICAgICAgICB3ZWlTY3JvZVRpdGxlOiBjYy5Ob2RlLCAgLy/lsL7pgZPlrZdcblxuICAgICAgICBzY29yZVN0eWxlOiAwLCAgLy8gMCDooajnpLrliIbmlbDlnKjlt6bovrkgIDEg6KGo56S65YiG5pWw5Zyo5Y+z6L65IDLkuI3mmL7npLrliIbmlbBcbiAgICAgICAgX2Rhb0xheW91dHM6IG51bGwsIC8vIOWktOOAgeS4reOAgeWwvumbhuWQiFxuICAgICAgICBfbGFiZWxTY29yZXM6IG51bGwsXG4gICAgICAgIF9zY29yZXM6IG51bGwsXG5cblxuICAgICAgICB0ZVNodUxheW91dDogY2MuTGF5b3V0LFxuICAgICAgICBsYWJlbFRlU2h1UGFpVGl0bGU6IGNjLkxhYmVsLFxuICAgICAgICBwTnVtOjAsLy/njqnlrrbkurrmlbBcbiAgICAgICAgdGVTaHVUaW1lOjAsLy/nibnmrorniYzlh7rniYzpobrluo9cbiAgICAgICAgdGVTaHVOdW06MCwvL+eJueauiueJjOS6uuaVsFxuICAgICAgICAvLyBbe1xuICAgICAgICAvLyAgICAgJ2NhcmRzJzpbeydzdWl0JzpzdWl0LCdudW1iZXInOm51bWJlcn0se31dLC8v54m55q6K54mM5LiN55So5LygXG4gICAgICAgIC8vICAgICAndHlwZSc6MCxcbiAgICAgICAgLy8gICAgICd2YWx1ZSc6NCxcbiAgICAgICAgLy8gICAgICdpc0NvbnRhaW5FeHRyYSc6dHJ1ZSwvL2lzIFNwZWNpYWwg54m55q6K54mM5LygXG4gICAgICAgIC8vICAgIH0sXG4gICAgICAgIC8vICAgIHtcbiAgICAgICAgLy8gICAgICdjYXJkcyc6W3snc3VpdCc6c3VpdCwnbnVtYmVyJzpudW1iZXJ9LHt9XSxcbiAgICAgICAgLy8gICAgICd0eXBlJzowLFxuICAgICAgICAvLyAgICAgJ3ZhbHVlJzo0XG4gICAgICAgIC8vICAgfV1cbiAgICAgICAgX3VzZXI6IG51bGwsICAgICAgIC8vIOeUqOS6juavlOeJjOeahOaVsOaNrlxuICAgICAgICBfY2FyZHNJbmZvOiBudWxsLFxuICAgICAgICBfY29tcGFyZUluZGV4OiAwLCAgLy8g5bCG6KaB5q+U6L6D55qEIOe0ouW8lSAgMH4yXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kYW9MYXlvdXRzID0gW3RoaXMudG91TGF5b3V0LCB0aGlzLnpob25nTGF5b3V0LCB0aGlzLndlaUxheW91dF07XG4gICAgICAgIHRoaXMuX2xhYmVsU2NvcmVzID0gW1t0aGlzLmxhYmVsVG91U2NvcmUsIHRoaXMubGFiZWxUb3VTY29yZVJpZ2h0XSwgW3RoaXMubGFiZWxaaG9uZ1Njb3JlLCB0aGlzLmxhYmVsWmhvbmdTY29yZVJpZ2h0XSwgW3RoaXMubGFiZWxXZWlTY29yZSx0aGlzLmxhYmVsV2VpU2NvcmVSaWdodF1dO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Njb3Jlcykge1xuICAgICAgICAgICAgdGhpcy5zZXRTY29yZXModGhpcy5fc2NvcmVzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb21wYXJlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRlU2h1TGF5b3V0Lm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFiZWxUZVNodVBhaVRpdGxlLnN0cmluZyA9ICcnO1xuICAgICAgICB0aGlzLm5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9zZXRDYXJkc1RvTGF5b3V0OiBmdW5jdGlvbiAobGF5b3V0LCBjYXJkcykge1xuICAgICAgICBsZXQgbm9kZSA9IGxheW91dC5ub2RlO1xuICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHNwcml0ZU5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICBsZXQgc3ByaXRlID0gc3ByaXRlTm9kZS5nZXRDb21wb25lbnQoJ2NjLlNwcml0ZScpO1xuICAgICAgICAgICAgbGV0IGNhcmQgPSBjYXJkc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIWNhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBLUUNhcmRSZXNIZWxwZXIuc2V0Q2FyZFNwcml0ZUZyYW1lKHNwcml0ZSwgY2FyZC5jYXJkTmFtZSgpKTtcbiAgICAgICAgICAgIHNwcml0ZU5vZGUuY29sb3IgPSBuZXcgY2MuQ29sb3IoMjU1LCAyNTUsIDI1NSk7XG4gICAgICAgICAgICBpZihjYy5tYVBhaSl7XG4gICAgICAgICAgICAgICAgdmFyIGNhcmRNYVBhaSA9ICczXycgKyBjYy5tYVBhaTtcbiAgICAgICAgICAgICAgICBpZihjYXJkLmNhcmROYW1lKCkgPT0gY2FyZE1hUGFpKXtcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlTm9kZS5jb2xvciA9IG5ldyBjYy5Db2xvcigyMjYsIDE0NSwgMTQ1KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzZXRDb21wYXJlRGF0YTogZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgdGhpcy5fdXNlciA9IHVzZXI7XG4gICAgICAgIHRoaXMuX2NhcmRzSW5mbyA9IHVzZXIuY2FyZEluZm87XG4gICAgICAgIGxldCBjYXJkc0luZm8gPSB1c2VyLmNhcmRJbmZvO1xuICAgICAgICBsZXQgY2FyZHMgPSBjYXJkc0luZm8ubWFwKGZ1bmN0aW9uIChjYXJkSW5mb0l0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBLUUNhcmQuY2FyZHNGcm9tQXJyYXkoY2FyZEluZm9JdGVtLmNhcmRzKTtcbiAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhcnJheSwgc3ViQ2FyZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheS5jb25jYXQoc3ViQ2FyZHMpO1xuICAgICAgICB9LCBbXSk7XG5cblxuICAgICAgICAvL+eJueauiueJjFxuICAgICAgICB0aGlzLnRlU2h1TGF5b3V0Lm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFiZWxUZVNodVBhaVRpdGxlLnN0cmluZyA9ICcnO1xuICAgICAgICB0aGlzLnBOdW0gPSB1c2VyLnBsYXllck51bTsvL+eOqeWutuS6uuaVsFxuICAgICAgICB0aGlzLnRlU2h1VGltZSA9IHVzZXIudGVTaHVUaW1lOy8v54m55q6K54mM5Ye654mM6aG65bqP5Lq65pWwXG4gICAgICAgIHRoaXMudGVTaHVOdW0gPSB1c2VyLlRlU2h1TnVtOy8v54m55q6K54mM5Lq65pWwXG4gICAgICAgIGxldCBzY29yZXMgPSBbdXNlci5zY29yZTEgfHwgMCwgdXNlci5zY29yZTIgfHwgMCwgdXNlci5zY29yZTMgfHwgMF07XG4gICAgICAgIHRoaXMuc2V0Q2FyZHMoY2FyZHMpO1xuICAgICAgICB0aGlzLnNldFNjb3JlcyhzY29yZXMpO1xuXG4gICAgfSxcblxuICAgIC8vIOS4i+S4gOS4quimgeavlOi+g+eahOWIhuaVsFxuICAgIC8vIOWmguaenOayoeacieimgeavlOi+g+eahOS6hu+8jOWImei/lOWbniAwXG4gICAgbmV4dENvbXBhcmVTY29yZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuX2NhcmRzSW5mb1t0aGlzLl9jb21wYXJlSW5kZXhdO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGEudmFsdWU7XG4gICAgfSxcblxuICAgIHNldFRlU2h1Q2FyZHM6IGZ1bmN0aW9uIChjYXJkcyxjYXJkc05hbWVzKSB7XG4gICAgICAgIGNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCl7XG4gICAgICAgICAgICBpZihjYXJkLnBvaW50ID09IDE0KXtcbiAgICAgICAgICAgICAgICBjYXJkLnBvaW50ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdmFyIHRpbWUgPSAoKHRoaXMucE51bSkgLSAodGhpcy50ZVNodU51bSkpICogMyArICh0aGlzLnRlU2h1VGltZSk7Ly8zIOaYrzPpgZPniYznmoTml7bpl7RcbiAgICAgICAgbGV0IHR5cGVOYW1lID0gS1FDYXJkLmNhcmRzVHlwZU5hbWUoY2FyZHNOYW1lcyk7XG4gICAgICAgIGlmKHR5cGVOYW1lID09IFwi5LiJ5ZCM6IqxXCIgKXtcbiAgICAgICAgICAgIGNhcmRzLnNvcnQoS1FDYXJkLnNvcnRCeUNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgY2FyZHMuc29ydChLUUNhcmQuc29ydEJ5UG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50ZVNodUxheW91dC5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zZXRDYXJkc1RvTGF5b3V0KHRoaXMudGVTaHVMYXlvdXQsIGNhcmRzKTtcbiAgICAgICAgICAgIHRoaXMubGFiZWxUZVNodVBhaVRpdGxlLnN0cmluZyA9IHR5cGVOYW1lO1xuICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBsYXlDYXJkVHlwZSh0aGlzLl91c2VyLnNleCwgdGhpcy5fY2FyZHNJbmZvWzBdLnR5cGUpO1xuICAgICAgICB9LHRpbWUpO1xuXG4gICAgfSxcbiAgICBfY29udmVydENhcmRzVG9DYXJkTmFtZXM6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgICAvLyBbe1wic3VpdFwiOlwic1wiLFwibnVtYmVyXCI6MTB9XVxuICAgICAgICBsZXQgc3VpdENvbG9yTWFwID1bJycsJ2QnLCdjJywnaCcsJ3MnXTtcbiAgICAgICAgcmV0dXJuIGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICAgICAgdmFyIGNhcmROdW1iZXIgPSBjYXJkLnBvaW50O1xuICAgICAgICAgICAgbGV0IGNvbG9yID0gc3VpdENvbG9yTWFwW2NhcmQuY29sb3JdO1xuICAgICAgICAgICAgbGV0IG51bWJlciA9IE1hdGgubWF4KE1hdGgubWluKGNhcmROdW1iZXIsIDEzKSwgMSk7XG4gICAgICAgICAgICByZXR1cm4ge251bWJlcjpudW1iZXIsc3VpdDpjb2xvcn07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0Q2FyZHM6IGZ1bmN0aW9uIChjYXJkcykge1xuXG4gICAgICAgIC8vIOS4jeS8muWGjeacieeJueauiueJjOS6hlxuICAgICAgICB0aGlzLnRlU2h1TGF5b3V0Lm5vZGUuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgaWYodGhpcy5fdXNlci5pc0NvbnRhaW5FeHRyYSA9PSB0cnVlKXtcbiAgICAgICAgICAgIHZhciBjYXJkc05hbWVzID0gdGhpcy5fY29udmVydENhcmRzVG9DYXJkTmFtZXMoY2FyZHMpO1xuICAgICAgICAgICAgaWYgKEtRQ2FyZC5pc1RlU2h1UGFpKGNhcmRzTmFtZXMpICYmIGNjLm1vc2hpICE9IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlU2h1Q2FyZHMoY2FyZHMsY2FyZHNOYW1lcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgY2FyZFNwcml0ZXMgPSB0aGlzLl9hbGxDYXJkU3ByaXRlcygpO1xuICAgICAgICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChrcUNhcmQsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gY2FyZFNwcml0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY2FyZFNwcml0ZSA9IGNhcmRTcHJpdGVzW2luZGV4XTtcblxuICAgICAgICAgICAgS1FDYXJkUmVzSGVscGVyLmxvYWRDYXJkU3ByaXRlRnJhbWUoa3FDYXJkLmNhcmROYW1lKCksIGZ1bmN0aW9uIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgICAgIGNhcmRTcHJpdGUuc3ByaXRlRnJhbWUgPSBzcHJpdGVGcmFtZTtcbiAgICAgICAgICAgICAgICBjYXJkU3ByaXRlLm5vZGUuY29sb3IgPSBuZXcgY2MuQ29sb3IoMjU1LCAyNTUsIDI1NSk7XG4gICAgICAgICAgICAgICAgaWYoY2MubWFQYWkpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZE1hUGFpID0gJ3B1YmxpYy1waWMtY2FyZC1wb2tlci0zXycgKyBjYy5tYVBhaTtcbiAgICAgICAgICAgICAgICAgICAgaWYoc3ByaXRlRnJhbWUubmFtZSA9PSBjYXJkTWFQYWkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZFNwcml0ZS5ub2RlLmNvbG9yID0gbmV3IGNjLkNvbG9yKDIyNiwgMTQ1LCAxNDUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0U2NvcmVzOiBmdW5jdGlvbiAoc2NvcmVzKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYWJlbFNjb3JlcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zY29yZXMgPSBzY29yZXM7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2NvcmVTdHJpbmdzID0gc2NvcmVzLm1hcCAoZnVuY3Rpb24gKHNjb3JlKSB7XG4gICAgICAgICAgICBzY29yZSA9IE51bWJlcihzY29yZSk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gKHNjb3JlID4gMCkgPyAoXCIrIFwiICsgc2NvcmUpIDogKFwiLSBcIiArIHNjb3JlICogLTEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcmVTdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKHN0cmluZywgaW5kZXgpIHtcbiAgICAgICAgICAgIGxldCBsYWJlbHMgPSB0aGlzLl9sYWJlbFNjb3Jlc1tpbmRleF07XG4gICAgICAgICAgICBsYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBsYWJlbC5zdHJpbmcgPSBzdHJpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgc2hvd1RvdUNhcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKHRoaXMuX3VzZXIuaXNDb250YWluRXh0cmE9PXRydWUpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG91TGF5b3V0Lm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuc2NvcmVTdHlsZSA9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsVG91U2NvcmVSaWdodC5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zY29yZVN0eWxlID09IDApIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxUb3VTY29yZS5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy50b3VTY3JvZVRpdGxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VTY3JvZVRpdGxlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGVzID0gdGhpcy5fY2FyZHNJbmZvW3RoaXMuX2NvbXBhcmVJbmRleF0udHlwZSA9PSAzID8gMzMzOnRoaXMuX2NhcmRzSW5mb1t0aGlzLl9jb21wYXJlSW5kZXhdLnR5cGU7XG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5Q2FyZFR5cGUodGhpcy5fdXNlci5zZXgsIHR5cGVzKTtcbiAgICAgICAgdGhpcy5fY29tcGFyZUluZGV4ICs9IDE7XG5cbiAgICB9LFxuXG4gICAgc2hvd1pob25nQ2FyZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYodGhpcy5fdXNlci5pc0NvbnRhaW5FeHRyYT09dHJ1ZSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy56aG9uZ0xheW91dC5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnNjb3JlU3R5bGUgPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbFpob25nU2NvcmVSaWdodC5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY29yZVN0eWxlID09IDApIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxaaG9uZ1Njb3JlLm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnpob25nU2Nyb2VUaXRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuemhvbmdTY3JvZVRpdGxlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGVzID0gdGhpcy5fY2FyZHNJbmZvW3RoaXMuX2NvbXBhcmVJbmRleF0udHlwZSA9PSA2ID8gNTU1OnRoaXMuX2NhcmRzSW5mb1t0aGlzLl9jb21wYXJlSW5kZXhdLnR5cGU7XG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5Q2FyZFR5cGUodGhpcy5fdXNlci5zZXgsIHR5cGVzKTtcbiAgICAgICAgdGhpcy5fY29tcGFyZUluZGV4ICs9IDE7XG4gICAgfSxcblxuICAgIHNob3dXZWlDYXJkczogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZih0aGlzLl91c2VyLmlzQ29udGFpbkV4dHJhPT10cnVlKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndlaUxheW91dC5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnNjb3JlU3R5bGUgPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbFdlaVNjb3JlUmlnaHQubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2NvcmVTdHlsZSA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsV2VpU2NvcmUubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMud2VpU2Nyb2VUaXRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2VpU2Nyb2VUaXRsZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBsYXlDYXJkVHlwZSh0aGlzLl91c2VyLnNleCwgdGhpcy5fY2FyZHNJbmZvW3RoaXMuX2NvbXBhcmVJbmRleF0udHlwZSk7XG4gICAgICAgIHRoaXMuX2NvbXBhcmVJbmRleCArPSAxO1xuICAgIH0sXG5cbiAgICBzaG93TmV4dENhcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2Rhb0xheW91dHMgPSBbdGhpcy50b3VMYXlvdXQsIHRoaXMuemhvbmdMYXlvdXQsIHRoaXMud2VpTGF5b3V0XTtcbiAgICAgICAgbGV0IGxheW91dCA9IHRoaXMuX2Rhb0xheW91dHMuZmluZChmdW5jdGlvbiAobGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gIWxheW91dC5ub2RlLmFjdGl2ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGxheW91dCA9PSB0aGlzLnRvdUxheW91dCkge1xuICAgICAgICAgICAgdGhpcy5zaG93VG91Q2FyZHMoKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXlvdXQgPT0gdGhpcy56aG9uZ0xheW91dCkge1xuICAgICAgICAgICAgdGhpcy5zaG93WmhvbmdDYXJkcygpO1xuICAgICAgICB9IGVsc2UgaWYgKGxheW91dCA9PSB0aGlzLndlaUxheW91dCkge1xuICAgICAgICAgICAgdGhpcy5zaG93V2VpQ2FyZHMoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIF9jbGVhckNhcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NsZWFyTGF5b3V0Q2FyZHModGhpcy50b3VMYXlvdXQpO1xuICAgICAgICB0aGlzLl9jbGVhckxheW91dENhcmRzKHRoaXMuemhvbmdMYXlvdXQpO1xuICAgICAgICB0aGlzLl9jbGVhckxheW91dENhcmRzKHRoaXMud2VpTGF5b3V0KTtcbiAgICB9LFxuXG4gICAgX2NsZWFyTGF5b3V0Q2FyZHM6IGZ1bmN0aW9uIChsYXlvdXQpIHtcbiAgICAgICAgdGhpcy5fY2FyZFNwcml0ZXNXaXRoTGF5b3V0KGxheW91dCkuZm9yRWFjaChmdW5jdGlvbiAoc3ByaXRlKSB7XG4gICAgICAgICAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgX2NhcmRTcHJpdGVzV2l0aExheW91dDogZnVuY3Rpb24gKGxheW91dCkge1xuICAgICAgICBsZXQgbm9kZSA9IGxheW91dC5ub2RlO1xuICAgICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmdldENvbXBvbmVudCgnY2MuU3ByaXRlJyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBfYWxsQ2FyZFNwcml0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHRvdUNhcmRTcHJpdGVzID0gdGhpcy5fY2FyZFNwcml0ZXNXaXRoTGF5b3V0KHRoaXMudG91TGF5b3V0KTtcbiAgICAgICAgbGV0IHpob25nQ2FyZFNwcml0ZXMgPSB0aGlzLl9jYXJkU3ByaXRlc1dpdGhMYXlvdXQodGhpcy56aG9uZ0xheW91dCk7XG4gICAgICAgIGxldCB3ZWlDYXJkU3ByaXRlcyA9IHRoaXMuX2NhcmRTcHJpdGVzV2l0aExheW91dCh0aGlzLndlaUxheW91dCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0b3VDYXJkU3ByaXRlcy5jb25jYXQoemhvbmdDYXJkU3ByaXRlcykuY29uY2F0KHdlaUNhcmRTcHJpdGVzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG59KTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGxhYmVsVGltZTogY2MuTGFiZWwsXG5cbiAgICAgICAgX2NhbGxiYWNrOiBudWxsLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYWJlbFRpbWUuc3RyaW5nID0gXCIwXCI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOW8gOWni+WAkuiuoeaXtlxuICAgICAqIFxuICAgICAqIEBwYXJhbSAge051bWJlcn0gdGltZSDml7bplb9cbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sg5YCS6K6h5pe255qE5Zue6LCDXG4gICAgICovXG4gICAgc3RhcnRDb3VudGRvd246IGZ1bmN0aW9uKHRpbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmxhYmVsVGltZS5zdHJpbmcgPSBcIlwiICsgdGltZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLl9jb3VudERvd24sIDEsIHRpbWUpO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlKHRoaXMuX2NvdW50RG93bik7XG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGxldCBpc1RpbWVvdXQgPSBOdW1iZXIodGhpcy5sYWJlbFRpbWUuc3RyaW5nKSA8PSAwO1xuICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gdGhpcy5fY2FsbGJhY2s7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayhpc1RpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBudWxsO1xuICAgIH0sXG5cbiAgICBfY291bnREb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBOdW1iZXIodGhpcy5sYWJlbFRpbWUuc3RyaW5nIHx8IFwiMFwiKTtcbiAgICAgICAgdGltZSA9IHRpbWUgLSAxO1xuXG4gICAgICAgIGlmICh0aW1lIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYWJlbFRpbWUuc3RyaW5nID0gU3RyaW5nKHRpbWUpO1xuICAgIH0sXG5cblxufSk7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBwbGFjZUhvbGRlcnNDb3VudCAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG4gIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcbiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuICByZXR1cm4gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIHJldHVybiBiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgcGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxuXG4gIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICBsID0gcGxhY2VIb2xkZXJzID4gMCA/IGxlbiAtIDQgOiBsZW5cblxuICB2YXIgTCA9IDBcblxuICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBvdXRwdXQgPSAnJ1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPT0nXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSlcbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9J1xuICB9XG5cbiAgcGFydHMucHVzaChvdXRwdXQpXG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiY29uc3QgS1FDYXJkID0gcmVxdWlyZSgnS1FDYXJkJyk7XG5jb25zdCBBdWRpb01hbmFnZXIgPSByZXF1aXJlKCdBdWRpb01hbmFnZXInKTtcblxubGV0IFJlc3VsdFN0YXR1cyA9IHtcbiAgV0lOOiAyLFxuICBEUkFXOiAxLFxuICBMT1NFOiAwLFxufTtcblxuXG5sZXQgR2FtZVJlc3VsdCA9IGNjLkNsYXNzKHtcbiAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gIHByb3BlcnRpZXM6IHtcbiAgICB3aW5Ob2RlOiBjYy5Ob2RlLFxuICAgIGxvc2VOb2RlOiBjYy5Ob2RlLFxuICAgIGRyYXdOb2RlOiBjYy5Ob2RlLFxuICAgIGNvbnRlbnROb2RlOiBjYy5Ob2RlLFxuXG4gICAgcmVzdWx0SXRlbXM6IFtjYy5Ob2RlXSxcblxuICAgIF9kZXNrSW5mbzogbnVsbCxcbiAgICBfdXNlcklkOiBudWxsLFxuICAgIF9jbG9zZUNhbGxiYWNrOiBudWxsLFxuICB9LFxuXG4gIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9oaWRlUmVzdWx0SXRlbXMoKTtcbiAgfSxcblxuICBzaG93UmVzdWx0czogZnVuY3Rpb24gKGRlc2tJbmZvLCBjdXJyZW50VXNlcklkKSB7XG4gICAgdGhpcy5fZGVza0luZm8gPSBkZXNrSW5mbztcbiAgICB0aGlzLl91c2VySWQgPSBjdXJyZW50VXNlcklkO1xuXG4gICAgbGV0IHJlc3VsdFN0YXR1cyA9IHRoaXMuX3Jlc3VsdFN0YXR1cygpO1xuICAgIHRoaXMuY29udGVudE5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLndpbk5vZGUuYWN0aXZlID0gIChyZXN1bHRTdGF0dXMgPT0gUmVzdWx0U3RhdHVzLldJTik7XG4gICAgdGhpcy5kcmF3Tm9kZS5hY3RpdmUgPSAocmVzdWx0U3RhdHVzID09IFJlc3VsdFN0YXR1cy5EUkFXKTtcbiAgICB0aGlzLmxvc2VOb2RlLmFjdGl2ZSA9IChyZXN1bHRTdGF0dXMgPT0gUmVzdWx0U3RhdHVzLkxPU0UpO1xuXG4gICAgaWYgKHRoaXMud2luTm9kZS5hY3RpdmUpIHtcbiAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5V2luKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxvc2VOb2RlLmFjdGl2ZSkge1xuICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBsYXlMb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5ub2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5hbGVydCgpO1xuICAgIHRoaXMubm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jykuc2V0RGlzbWlzc0NhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2Nsb3NlQ2FsbGJhY2tcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgbGV0IHBsYXllckluZm9zID0gZGVza0luZm8ucGxheWVycy5zb3J0KGZ1bmN0aW9uIChwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMi5jU2NvcmUgLSBwMS5jU2NvcmU7XG4gICAgfSk7XG4gICAgbGV0IGl0ZW1Db21wcyA9IHRoaXMucmVzdWx0SXRlbXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZS5nZXRDb21wb25lbnQoJ1Jlc3VsdEl0ZW0nKTtcbiAgICB9KTtcbiAgICBpdGVtQ29tcHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbUNvbXAsIGluZGV4KSB7XG4gICAgICBpdGVtQ29tcC5ub2RlLmFjdGl2ZSA9IGluZGV4IDwgcGxheWVySW5mb3MubGVuZ3RoO1xuICAgICAgaWYgKCFpdGVtQ29tcC5ub2RlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCB1c2VyID0gcGxheWVySW5mb3NbaW5kZXhdO1xuICAgICAgaXRlbUNvbXAudXBkYXRlV2l0aFBsYXllckluZm8odXNlciwgZGVza0luZm8uaXNSYW5kb21EZXNrKTtcbiAgICAgIGxldCBjYXJkcyA9IHRoaXMuX2NhcmRzRnJvbVVzZXIodXNlcik7XG4gICAgICBpdGVtQ29tcC5zZXRDYXJkcyhjYXJkcyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBzZXRDbG9zZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9jbG9zZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH0sXG5cbiAgX2NhcmRzRnJvbVVzZXI6IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgbGV0IGNhcmRzID0gdXNlci5jYXJkSW5mby5tYXAoZnVuY3Rpb24gKGNhcmRJbmZvSXRlbSkge1xuICAgICAgcmV0dXJuIEtRQ2FyZC5jYXJkc0Zyb21BcnJheShjYXJkSW5mb0l0ZW0uY2FyZHMpO1xuICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIHN1YkNhcmRzKSB7XG4gICAgICByZXR1cm4gYXJyYXkuY29uY2F0KHN1YkNhcmRzKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gY2FyZHM7XG4gIH0sXG5cbiAgX2hpZGVSZXN1bHRJdGVtczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzdWx0SXRlbXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZS5hY2l0dmUgPSBmYWxzZTtcbiAgICB9KTtcbiAgfSxcblxuICBfcmVzdWx0U3RhdHVzOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgcGxheWVySW5mb3MgPSB0aGlzLl9kZXNrSW5mby5wbGF5ZXJzO1xuICAgIGxldCB1c2VyID0gcGxheWVySW5mb3MuZmluZChmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIHVzZXIuaWQgPT0gdGhpcy5fdXNlcklkO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICBsZXQgc2NvcmUgPSB1c2VyLmNTY29yZTtcbiAgICBpZiAodGhpcy5fZGVza0luZm8uaXNSYW5kb21EZXNrKSB7XG4gICAgICAvLyDlpoLmnpzmmK/pmo/mnLrlnLrnmoTor53vvIzlupTor6XnlKjpkrvnn7PmnaXliKTmlq3ovpPotaJcbiAgICAgIHNjb3JlID0gdXNlci5kaWFtb25kO1xuICAgIH1cblxuICAgIGlmIChzY29yZSA+IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHRTdGF0dXMuV0lOO1xuICAgIH0gZWxzZSBpZiAoc2NvcmUgPCAwKSB7XG4gICAgICByZXR1cm4gUmVzdWx0U3RhdHVzLkxPU0U7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlc3VsdFN0YXR1cy5EUkFXO1xuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZVJlc3VsdDtcbiIsIi8qIyMjIyMqL1xyXG4vL++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vdK777+977+977+977+977+977+977+977+977+92rXvv73vv73vv73NrO+/ve+/ve+/ve+/ve+/ve+/ve+/vca177+977+977+977+977+9XHJcbiB2YXIgR2V0Q2FyZFBvaW50c1NhbWVDb3VudCA9IGZ1bmN0aW9uIChjYXJkcykge1xyXG4gICAgdGhpcy5jYXJkTnVtYmVycyA9IHt9O1xyXG4gICAgZm9yKHZhciBpIGluIGNhcmRzKXtcclxuICAgICAgICB2YXIgcztcclxuICAgICAgICBpZih0eXBlb2YoY2FyZHNbaV0ubnVtYmVyKSA9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgICAgIHMgPSBjYXJkc1tpXS5wb2ludDtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcyA9IGNhcmRzW2ldLm51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5jYXJkTnVtYmVyc1tzXSl7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZE51bWJlcnNbc10gKys7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZE51bWJlcnNbc10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NjLmxvZyh0aGlzLmNhcmROdW1iZXJzW2NhcmRzW2ldLm51bWJlcl0pXHJcbiAgICAgICAgLy9jYy5sb2coY2FyZHMpXHJcbiAgICAgICAgLy9jYy5sb2coY2FyZHNbaV0ubnVtYmVyKVxyXG4gICAgICAgIC8vY2MubG9nKCctLS03JylcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmNhcmROdW1iZXJzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHZXRDYXJkUG9pbnRzU2FtZUNvdW50O1xyXG4iLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGxhYmVsTnVtYmVyczogW2NjLkxhYmVsXSxcbiAgICAgICAgY2FsbGJhY2tKb2luUm9vbTogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNsaWNrQ2xlYXIoKTtcbiAgICB9LFxuXG4gICAgY2xpY2tOdW1iZXI6IGZ1bmN0aW9uIChldmVudCwgbnVtYmVyKSB7XG4gICAgICB2YXIgbGFiZWwgPSB0aGlzLl9sYXN0RW1wdHlMYWJlbCgpO1xuICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgIGxhYmVsLnN0cmluZyA9IG51bWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBpc0NvbXBsZXRlID0gKHRoaXMuX2xhc3RFbXB0eUxhYmVsKCkgPT0gbnVsbCk7XG4gICAgICBsZXQgaW52aXRlTnVtYmVyID0gdGhpcy5fcm9vbU51bWJlcigpO1xuICAgICAgaWYgKGludml0ZU51bWJlci5sZW5ndGggPT0gNikge1xuICAgICAgICB0aGlzLmNhbGxiYWNrSm9pblJvb20gPSBpbnZpdGVOdW1iZXI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNlbmRDb2RlIDpmdW5jdGlvbigpeyAgLy/lj5HpgIHpgoDor7fnoIFcbiAgICAgIGxldCB1c2VySWQgPSBTb2NrZXQuaW5zdGFuY2UudXNlckluZm8uaWQ7XG4gICAgICBsZXQgaW52aXRlTnVtYmVyID0gdGhpcy5jYWxsYmFja0pvaW5Sb29tO1xuICAgICAgY29uc29sZS5sb2coaW52aXRlTnVtYmVyICxcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcbiAgICAgIGlmKCBpbnZpdGVOdW1iZXIubGVuZ3RoPT02KXsgIFxuICAgICAgICBTb2NrZXQuc2VuZEludml0ZUNvZGUoaW52aXRlTnVtYmVyLCB1c2VySWQpO1xuICAgICAgICB0aGlzLmNhbGxiYWNrSm9pblJvb20gPSAnJzsgICAvL+a4heepuumCgOivt+eggVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbGlja0NsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrSm9pblJvb20gPSAnJztcbiAgICAgIHRoaXMubGFiZWxOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIGxhYmVsLnN0cmluZyA9IFwiXCI7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2xpY2tEZWxldGVPbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBsYWJlbCA9IHRoaXMuX2xhc3ROdW1iZXJMYWJlbCgpO1xuICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgIGxhYmVsLnN0cmluZyA9IFwiXCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9sYXN0RW1wdHlMYWJlbDogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggaW4gdGhpcy5sYWJlbE51bWJlcnMpIHtcbiAgICAgICAgdmFyIGxhYmVsID0gdGhpcy5sYWJlbE51bWJlcnNbaW5kZXhdO1xuICAgICAgICBpZiAobGFiZWwuc3RyaW5nID09IG51bGxcbiAgICAgICAgfHwgbGFiZWwuc3RyaW5nLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgX2xhc3ROdW1iZXJMYWJlbDogZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSB0aGlzLmxhYmVsTnVtYmVycy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgIGxldCBsYWJlbCA9IHRoaXMubGFiZWxOdW1iZXJzW2luZGV4XTtcbiAgICAgICAgaWYgKGxhYmVsLnN0cmluZyAmJiBsYWJlbC5zdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgX3Jvb21OdW1iZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsTnVtYmVycy5yZWR1Y2UoZnVuY3Rpb24gKHJvb21OdW1iZXIsIGxhYmVsKSB7XG4gICAgICAgIHJldHVybiByb29tTnVtYmVyICsgKGxhYmVsLnN0cmluZyB8fCBcIlwiKTtcbiAgICAgIH0sIFwiXCIpO1xuICAgIH0sXG59KTtcbiIsIi8vIOeJjOiKseiJsuW4ruWKqeexu1xuLy8g55So5LqO6K6h566X5LiA5Liq54mM5pWw57uE55qE6Iqx6Imy55u45ZCM55qE54mM55qE5byg5pWwXG52YXIgS1FDYXJkQ29sb3JzSGVscGVyID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIHRoaXMuY29sb3JOdW1iZXIgPSB7fTtcblxuICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkKSB7XG4gICAgbGV0IGNvbG9yID0gY2FyZC5jb2xvcjtcbiAgICB2YXIgbnVtYmVyID0gdGhpcy5jb2xvck51bWJlcltjb2xvcl0gfHwgMDtcbiAgICB0aGlzLmNvbG9yTnVtYmVyW2NvbG9yXSA9IG51bWJlciArIDE7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vLyDnm7jlkIzoirHoibLnmoTniYznmoTmnIDlpKfmlbDph49cbktRQ2FyZENvbG9yc0hlbHBlci5wcm90b3R5cGUubWF4TnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgZm9yIChsZXQgcHJvcCBpbiB0aGlzLmNvbG9yTnVtYmVyKSB7XG4gICAgbGV0IG51bWJlciA9IHRoaXMuY29sb3JOdW1iZXJbcHJvcF07XG4gICAgcmVzdWx0ID0gTWF0aC5tYXgobnVtYmVyLCByZXN1bHQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS1FDYXJkQ29sb3JzSGVscGVyO1xuIiwiY29uc3QgS1FDYXJkID0gcmVxdWlyZSgnS1FDYXJkJyk7XG5jb25zdCBBcnJheUV4dGVuc2lvbiA9IHJlcXVpcmUoJ0FycmF5RXh0ZW5zaW9uJyk7XG5jb25zdCBLUUNhcmRQb2ludHNIZWxwZXIgPSByZXF1aXJlKCdLUUNhcmRQb2ludHNIZWxwZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8g5a+75om+IGNhcmRNb2RlcyDkuK3nmoQg5a+55a2QXG4vLyDov5nkvJrov5Tlm54g5a+55a2QIOeahOe0ouW8leaVsOe7hFxuLy8g5aaC77yaW1sxLCAzXSwgWzQsIDVdXVxuS1FDYXJkLmZpbmREdWlaaSA9IGZ1bmN0aW9uIChjYXJkTW9kZXMpIHtcbiAgbGV0IHNEdWlaaUluZGV4cyA9IEtRQ2FyZC5maW5kU2FuVGlhbyhjYXJkTW9kZXMpIHx8IFtdO1xuICBsZXQgcmVzdWx0ID0gS1FDYXJkLl9maW5kUG9pbnRMZW5ndGgoY2FyZE1vZGVzLCAyKSB8fCBbXTtcbiAgaWYocmVzdWx0Lmxlbmd0aCA8IDIgKXtcbiAgICBpZihzRHVpWmlJbmRleHMubGVuZ3RoID4gMCl7XG4gICAgICBzRHVpWmlJbmRleHMuZm9yRWFjaChmdW5jdGlvbihpbmRleHMpIHtcbiAgICAgICAgdmFyIHMxID0gW2luZGV4c1swXSxpbmRleHNbMV1dO1xuICAgICAgICAvL3ZhciBzMiA9IFtpbmRleHNbMV0saW5kZXhzWzJdXTtcbiAgICAgICAgLy9yZXN1bHQucHVzaChzMik7XG4gICAgICAgIHJlc3VsdC5wdXNoKHMxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdHJlc3VsdCA9IEtRQ2FyZC5maW5kR3VpUGFpKGNhcmRNb2RlcywyKTtcbiAgICBmb3IodmFyIGkgPSAwO2kgPCB0cmVzdWx0Lmxlbmd0aDtpKyspe1xuICAgICAgcmVzdWx0LnB1c2godHJlc3VsdFtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmVzdWx0ID0gS1FDYXJkLnJlcGVhdChyZXN1bHQpO1xuXG4gIHJldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCA6IFtdO1xufTtcblxuS1FDYXJkLl9maW5kUG9pbnRMZW5ndGggPSBmdW5jdGlvbiAoY2FyZE1vZGVzLCBsZW5ndGgpIHtcbiAgaWYgKGNhcmRNb2Rlcy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBsZXQgb2JqID0gY2FyZE1vZGVzLnJlZHVjZShmdW5jdGlvbihvYmosIGNhcmQsIGluZGV4KSB7XG4gICAgbGV0IHBvaW50SW5kZXhzID0gb2JqW2NhcmQucG9pbnRdIHx8IFtdO1xuICAgIG9ialtjYXJkLnBvaW50XSA9IHBvaW50SW5kZXhzO1xuICAgIHBvaW50SW5kZXhzLnB1c2goaW5kZXgpO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcblxuICBsZXQgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgbGV0IHBvaW50SW5kZXhzID0gb2JqW3Byb3BdO1xuICAgIGlmIChwb2ludEluZGV4cy5sZW5ndGggPT0gbGVuZ3RoKSB7XG4gICAgICBwb2ludEluZGV4cy5zb3J0KGZ1bmN0aW9uIChuMSwgbjIpIHtcbiAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdC5wdXNoKHBvaW50SW5kZXhzKTtcbiAgICB9XG4gIH1cblxuICByZXN1bHQuc29ydChmdW5jdGlvbiAoYXJyMSwgYXJyMikge1xuICAgIGxldCBuMSA9IGFycjFbMF07XG4gICAgbGV0IG4yID0gYXJyMlswXTtcbiAgICByZXR1cm4gbjIgLSBuMTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCA6IFtdO1xufTtcblxuLy8g5om+IOS4pOWvuSDnmoTntKLlvJXmlbDnu4Rcbi8vIOWmgu+8mltbMSwgMiwgMywgNF0sIFs1LCA2LCA3LCA4XV1cbktRQ2FyZC5maW5kTGlhRHVpID0gZnVuY3Rpb24gKGNhcmRNb2Rlcykge1xuICBsZXQgZHVpWmlJbmRleHMgPSBLUUNhcmQuZmluZER1aVppKGNhcmRNb2RlcykgfHwgW107XG4gIGxldCBkdWlaaUluZGV4ID0gS1FDYXJkLmZpbmRHdWlQYWkoY2FyZE1vZGVzLDIpIHx8IFtdO1xuXG4gIGlmKGR1aVppSW5kZXhzLmxlbmd0aCA8IDEgJiYgZHVpWmlJbmRleC5sZW5ndGggPiAwKXtcbiAgICBkdWlaaUluZGV4LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICAgIGR1aVppSW5kZXhzLnVuc2hpZnQoaW5kZXhzKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoZHVpWmlJbmRleHMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkdWlaaUluZGV4cy5sZW5ndGg7ICsraSkge1xuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGR1aVppSW5kZXhzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZihyZXN1bHQubGVuZ3RoIDwgMTApe1xuICAgICAgICBsZXQgcHJlID0gZHVpWmlJbmRleHNbaV07XG4gICAgICAgIGxldCBuZXh0ID0gZHVpWmlJbmRleHNbal07XG4gICAgICAgIHZhciBzID0gcHJlLmNvbmNhdChuZXh0KTtcbiAgICAgICAgdmFyIG5ld1MgPSBbXTtcbiAgICAgICAgZm9yKHZhciBxID0gMDtxIDwgcy5sZW5ndGggO3ErKyl7XG4gICAgICAgICAgaWYobmV3Uy5pbmRleE9mKHNbcV0pID09IC0xKXtcbiAgICAgICAgICAgIG5ld1MucHVzaChzW3FdKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihuZXdTLmxlbmd0aCA9PSA0KXtcbiAgICAgICAgICBuZXdTLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzdWx0LnVuc2hpZnQobmV3Uyk7XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuXG4gICAgfVxuICB9XG4gIHJlc3VsdCA9IEtRQ2FyZC5yZXBlYXQocmVzdWx0KTtcbiAgaWYocmVzdWx0Lmxlbmd0aCA+IDYpe1xuICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLDYpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyDmib7kuInmnaFcbi8vIOWmgu+8mltbMSwgMiwgM11dO1xuS1FDYXJkLmZpbmRTYW5UaWFvID0gZnVuY3Rpb24gKGNhcmRNb2Rlcykge1xuICBpZihjYXJkTW9kZXMubGVuZ3RoIDwgMyl7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGxldCByZXN1bHQgPSBLUUNhcmQuX2ZpbmRQb2ludExlbmd0aChjYXJkTW9kZXMsIDMpIHx8IFtdO1xuICAvL2Zvcih2YXIgcSA9MDtxPHJlc3VsdC5sZW5ndGg7cSsrKXtcbiAgLy8gIHZhciBpbmRleHMgPSByZXN1bHRbcV1bMF07XG4gIC8vICBpZihjYXJkTW9kZXNbaW5kZXhzXS5wb2ludCA+PSAyMCl7XG4gIC8vICAgIHJlc3VsdC5zcGxpY2UocSwxKTtcbiAgLy8gIH1cbiAgLy99XG4gIGlmKHJlc3VsdC5sZW5ndGggPCAyICl7XG4gICAgbGV0IHRpZVpoaUluZGV4c0FycmF5ID0gS1FDYXJkLmZpbmRUaWVaaGkoY2FyZE1vZGVzKTtcbiAgICBpZih0aWVaaGlJbmRleHNBcnJheS5sZW5ndGggPiAwKXtcbiAgICAgIHRpZVpoaUluZGV4c0FycmF5LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICAgIC8vbGV0IHNhblRpYW9JbmRleHMxID0gW2luZGV4c1sxXSwgaW5kZXhzWzJdLCBpbmRleHNbM11dO1xuICAgICAgICAvL2xldCBzYW5UaWFvSW5kZXhzMiA9IFtpbmRleHNbMF0sIGluZGV4c1sxXSwgaW5kZXhzWzNdXTtcbiAgICAgICAgLy9sZXQgc2FuVGlhb0luZGV4czMgPSBbaW5kZXhzWzBdLCBpbmRleHNbMl0sIGluZGV4c1szXV07XG4gICAgICAgIGxldCBzYW5UaWFvSW5kZXhzMCA9IFtpbmRleHNbMF0sIGluZGV4c1sxXSwgaW5kZXhzWzJdXTtcbiAgICAgICAgcmVzdWx0LnB1c2goc2FuVGlhb0luZGV4czApO1xuICAgICAgICAvL3Jlc3VsdC51bnNoaWZ0KHNhblRpYW9JbmRleHMxKTtcbiAgICAgICAgLy9yZXN1bHQudW5zaGlmdChzYW5UaWFvSW5kZXhzMik7XG4gICAgICAgIC8vcmVzdWx0LnVuc2hpZnQoc2FuVGlhb0luZGV4czMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciB0cmVzdWx0ID0gS1FDYXJkLmZpbmRHdWlQYWkoY2FyZE1vZGVzLDMpO1xuICAgIGZvcih2YXIgaSA9IDA7aSA8IHRyZXN1bHQubGVuZ3RoO2krKyl7XG4gICAgICByZXN1bHQucHVzaCh0cmVzdWx0W2ldKTtcbiAgICB9XG4gIH1cbiAgLyppZihyZXN1bHQubGVuZ3RoIDwgMSl7XG4gICAgLy8g6ZOB5pSv5piv5YyF5ZCr5LiJ5p2h55qEXG4gICAgbGV0IHRpZVpoaUluZGV4c0FycmF5ID0gS1FDYXJkLmZpbmRUaWVaaGkoY2FyZE1vZGVzKTtcbiAgICBpZiAodGllWmhpSW5kZXhzQXJyYXkpIHtcbiAgICAgIHRpZVpoaUluZGV4c0FycmF5LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICAgIC8vbGV0IHNhblRpYW9JbmRleHMxID0gW2luZGV4c1sxXSwgaW5kZXhzWzJdLCBpbmRleHNbM11dO1xuICAgICAgICAvL2xldCBzYW5UaWFvSW5kZXhzMiA9IFtpbmRleHNbMF0sIGluZGV4c1sxXSwgaW5kZXhzWzNdXTtcbiAgICAgICAgLy9sZXQgc2FuVGlhb0luZGV4czMgPSBbaW5kZXhzWzBdLCBpbmRleHNbMl0sIGluZGV4c1szXV07XG4gICAgICAgIGxldCBzYW5UaWFvSW5kZXhzMCA9IFtpbmRleHNbMF0sIGluZGV4c1sxXSwgaW5kZXhzWzJdXTtcbiAgICAgICAgcmVzdWx0LnB1c2goc2FuVGlhb0luZGV4czApO1xuICAgICAgICAvL3Jlc3VsdC51bnNoaWZ0KHNhblRpYW9JbmRleHMxKTtcbiAgICAgICAgLy9yZXN1bHQudW5zaGlmdChzYW5UaWFvSW5kZXhzMik7XG4gICAgICAgIC8vcmVzdWx0LnVuc2hpZnQoc2FuVGlhb0luZGV4czMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9Ki9cblxuICAvL2lmKHJlc3VsdC5sZW5ndGggPiAxMCl7XG4gIC8vICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwxMCk7XG4gIC8vfVxuXG4gIHJlc3VsdCA9IEtRQ2FyZC5yZXBlYXQocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0IDogW107XG59O1xuXG4vLyDmib7lkIzoirHpobpcbktRQ2FyZC5maW5kVG9uZ0h1YVNodW4gPSBmdW5jdGlvbiAoY2FyZE1vZGVzLCBsZW5ndGggPSA1KSB7XG4gIGlmIChjYXJkTW9kZXMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgdmFyIHNhblNodW5aaSA9IEtRQ2FyZC5zYW5TaHVuWmkxKGNhcmRNb2RlcyxsZW5ndGgpO1xuICBpZihzYW5TaHVuWmlbMF0gPT0gbnVsbCl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvcih2YXIgaT0wO2k8c2FuU2h1blppWzBdLmxlbmd0aDtpKyspIHtcbiAgICB2YXIgcyA9IHNhblNodW5aaVswXVtpXTtcbiAgICBpZiAoS1FDYXJkLmlzVG9uZ0h1YVNodW4ocywgbGVuZ3RoKSkge1xuICAgICAgcmVzdWx0LnB1c2goc2FuU2h1blppWzFdW2ldKTtcblxuICAgIH1cbiAgfVxuICBpZihyZXN1bHQubGVuZ3RoID4gMCl7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9ZWxzZXtcbiAgICByZXR1cm4gS1FDYXJkLmZpbmRUb25nSHVhU2h1bjEoY2FyZE1vZGVzKTtcbiAgfVxufTtcbktRQ2FyZC5maW5kVG9uZ0h1YVNodW4xID0gZnVuY3Rpb24gKGNhcmRzLCBsZW5ndGggPSA1KSB7XG4gIGlmIChjYXJkcy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY2FyZHMgPSBBcnJheS5mcm9tKGNhcmRzKTtcbiAgdmFyIGNvbG9yUyA9IFtdOyAvL+m7keahg1xuICB2YXIgY29sb3JIID0gW107IC8v57qi5b+DXG4gIHZhciBjb2xvckMgPSBbXTsgLy/mooXoirFcbiAgdmFyIGNvbG9yRCA9IFtdOyAvL+aWueWdl1xuICB2YXIgcG9pbnRTID0gW107IC8v6buR5qGDXG4gIHZhciBwb2ludEggPSBbXTsgLy/nuqLlv4NcbiAgdmFyIHBvaW50QyA9IFtdOyAvL+aiheiKsVxuICB2YXIgcG9pbnREID0gW107IC8v5pa55Z2XXG4gIGZvcih2YXIgaT0wO2k8Y2FyZHMubGVuZ3RoO2krKyl7XG4gICAgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzQnKXtcbiAgICAgIGlmKHBvaW50Uy5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgIHBvaW50Uy5wdXNoKGNhcmRzW2ldLnBvaW50KTtcbiAgICAgICAgY29sb3JTLnB1c2goY2FyZHNbaV0pO1xuICAgICAgfVxuXG4gICAgfWVsc2UgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzMnKXtcbiAgICAgIGlmKHBvaW50SC5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgIHBvaW50SC5wdXNoKGNhcmRzW2ldLnBvaW50KTtcbiAgICAgICAgY29sb3JILnB1c2goY2FyZHNbaV0pO1xuICAgICAgfVxuICAgIH1lbHNlIGlmKGNhcmRzW2ldLmNvbG9yID09ICcyJyl7XG4gICAgICBpZihwb2ludEMuaW5kZXhPZihjYXJkc1tpXS5wb2ludCkgPT0gLTEpe1xuICAgICAgICBwb2ludEMucHVzaChjYXJkc1tpXS5wb2ludCk7XG4gICAgICAgIGNvbG9yQy5wdXNoKGNhcmRzW2ldKTtcbiAgICAgIH1cbiAgICB9ZWxzZSBpZihjYXJkc1tpXS5jb2xvciA9PSAnMScpe1xuICAgICAgaWYocG9pbnRELmluZGV4T2YoY2FyZHNbaV0ucG9pbnQpID09IC0xKXtcbiAgICAgICAgcG9pbnRELnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgICAgICBjb2xvckQucHVzaChjYXJkc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbG9yID0gW2NvbG9yUyxjb2xvckgsY29sb3JDLGNvbG9yRF07XG4gIHZhciBjb2xvclN1bSA9IFtdOyAgICAvL+aAu+WFseacieWHoOenjeiKseiJsiBbNSwzLDAuLi4uXVxuICBmb3IodmFyIGk9MDtpPGNvbG9yLmxlbmd0aDtpKyspe1xuICAgIGlmKGNvbG9yW2ldLmxlbmd0aCA+PSA1KXtcbiAgICAgIGNvbG9yW2ldLnNvcnQoZnVuY3Rpb24oYTEsYTIpe1xuICAgICAgICByZXR1cm4gYTEucG9pbnQgLSBhMi5wb2ludDtcbiAgICAgIH0pXG4gICAgICBjb2xvclN1bS5wdXNoKGNvbG9yW2ldKTtcbiAgICB9XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IodmFyIGk9MDtpPGNvbG9yU3VtLmxlbmd0aDtpKyspIHtcbiAgICB2YXIgcyA9IGNvbG9yU3VtW2ldXG4gICAgZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyA1KSA8PSBzLmxlbmd0aDsgKytzdGFydCkge1xuICAgICAgdmFyIHN1YkNhcmRzID0gcy5zbGljZShzdGFydCwgc3RhcnQgKyA1KTtcbiAgICAgIGlmIChLUUNhcmQuaXNUb25nSHVhU2h1bihzdWJDYXJkcykpIHtcbiAgICAgICAgbGV0IGluZGV4cyA9IFtdO1xuICAgICAgICBzdWJDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uKGNhKSB7XG4gICAgICAgICAgZm9yKHZhciBxID0gMDtxIDwgY2FyZHMubGVuZ3RoOyBxKyspe1xuICAgICAgICAgICAgdmFyIHIgPSBjYXJkc1txXTtcbiAgICAgICAgICAgIGlmKHIgPT09IGNhKXtcbiAgICAgICAgICAgICAgaW5kZXhzLnB1c2gocSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeVBvaW50KTtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQoaW5kZXhzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZihyZXN1bHQubGVuZ3RoID4gMCl7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfWVsc2V7XG4gICAgbGV0IGNvbnZlcnRlZENhcmRzID0gS1FDYXJkLl9jb252ZXJ0T25lVG9BMShjYXJkcyk7XG4gICAgaWYgKGNhcmRzID09PSBjb252ZXJ0ZWRDYXJkcykge1xuICAgICAgY2FyZHMuZm9yRWFjaChmdW5jdGlvbihhZGZzKXtcbiAgICAgICAgaWYoYWRmcy5wb2ludCA9PSAxNCl7XG4gICAgICAgICAgYWRmcy5wb2ludCA9IDE7XG4gICAgICAgICAgYWRmcy5zY29yZXMgPSAxO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIEtRQ2FyZC5maW5kVG9uZ0h1YVNodW4yMChjYXJkcyk7XG4gICAgfVxuICAgIHJldHVybiBLUUNhcmQuZmluZFRvbmdIdWFTaHVuMShjb252ZXJ0ZWRDYXJkcyk7XG4gIH1cbiAgLy9yZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHQgOiBudWxsO1xufTtcbktRQ2FyZC5maW5kVG9uZ0h1YVNodW4yMCA9IGZ1bmN0aW9uIChjYXJkLCBsZW5ndGggPSA1KSB7XG4gIGlmIChjYXJkLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkKSB8fCBbXTtcbiAgdmFyIGNhcmRzID0gY2FyZC5rcV9leGNsdWRlcyhjYXJkMjApO1xuXG4gIGNhcmRzID0gQXJyYXkuZnJvbShjYXJkcyk7XG4gIHZhciBjb2xvclMgPSBbXTsgLy/pu5HmoYNcbiAgdmFyIGNvbG9ySCA9IFtdOyAvL+e6ouW/g1xuICB2YXIgY29sb3JDID0gW107IC8v5qKF6IqxXG4gIHZhciBjb2xvckQgPSBbXTsgLy/mlrnlnZdcbiAgdmFyIHBvaW50UyA9IFtdOyAvL+m7keahg1xuICB2YXIgcG9pbnRIID0gW107IC8v57qi5b+DXG4gIHZhciBwb2ludEMgPSBbXTsgLy/mooXoirFcbiAgdmFyIHBvaW50RCA9IFtdOyAvL+aWueWdl1xuICBmb3IodmFyIGk9MDtpPGNhcmRzLmxlbmd0aDtpKyspe1xuICAgIGlmKGNhcmRzW2ldLmNvbG9yID09ICc0Jyl7XG4gICAgICBpZihwb2ludFMuaW5kZXhPZihjYXJkc1tpXS5wb2ludCkgPT0gLTEpe1xuICAgICAgICBwb2ludFMucHVzaChjYXJkc1tpXS5wb2ludCk7XG4gICAgICAgIGNvbG9yUy5wdXNoKGNhcmRzW2ldKTtcbiAgICAgIH1cblxuICAgIH1lbHNlIGlmKGNhcmRzW2ldLmNvbG9yID09ICczJyl7XG4gICAgICBpZihwb2ludEguaW5kZXhPZihjYXJkc1tpXS5wb2ludCkgPT0gLTEpe1xuICAgICAgICBwb2ludEgucHVzaChjYXJkc1tpXS5wb2ludCk7XG4gICAgICAgIGNvbG9ySC5wdXNoKGNhcmRzW2ldKTtcbiAgICAgIH1cbiAgICB9ZWxzZSBpZihjYXJkc1tpXS5jb2xvciA9PSAnMicpe1xuICAgICAgaWYocG9pbnRDLmluZGV4T2YoY2FyZHNbaV0ucG9pbnQpID09IC0xKXtcbiAgICAgICAgcG9pbnRDLnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgICAgICBjb2xvckMucHVzaChjYXJkc1tpXSk7XG4gICAgICB9XG4gICAgfWVsc2UgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzEnKXtcbiAgICAgIGlmKHBvaW50RC5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgIHBvaW50RC5wdXNoKGNhcmRzW2ldLnBvaW50KTtcbiAgICAgICAgY29sb3JELnB1c2goY2FyZHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBjb2xvciA9IFtjb2xvclMsY29sb3JILGNvbG9yQyxjb2xvckRdO1xuICB2YXIgY29sb3JTdW0gPSBbXTsgICAgLy/mgLvlhbHmnInlh6Dnp43oirHoibIgWzUsMywwLi4uLl1cbiAgZm9yKHZhciBpPTA7aTxjb2xvci5sZW5ndGg7aSsrKXtcbiAgICBpZihjb2xvcltpXS5sZW5ndGggPj0gcGFyc2VJbnQoNSAtIGNhcmQyMC5sZW5ndGgpKXtcbiAgICAgIGNvbG9yW2ldLnNvcnQoZnVuY3Rpb24oYTEsYTIpe1xuICAgICAgICByZXR1cm4gYTEucG9pbnQgLSBhMi5wb2ludDtcbiAgICAgIH0pXG4gICAgICBjb2xvclN1bS5wdXNoKGNvbG9yW2ldKTtcbiAgICB9XG4gIH1cbiAgY2MubG9nKGNvbG9yU3VtKVxuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yKHZhciBpPTA7aTxjb2xvclN1bS5sZW5ndGg7aSsrKSB7XG4gICAgdmFyIHMgPSBjb2xvclN1bVtpXVxuICAgIGZvcih2YXIgaiA9IDE7aiA8PSBjYXJkMjAubGVuZ3RoOysrail7XG4gICAgICB2YXIgbnVtID0gNSAtIGo7XG4gICAgICBmb3IgKHZhciBzdGFydCA9IDA7IChzdGFydCArIG51bSkgPD0gcy5sZW5ndGg7ICsrc3RhcnQpIHtcbiAgICAgICAgdmFyIHN1YkNhcmRzID0gcy5zbGljZShzdGFydCwgc3RhcnQgKyBudW0pO1xuICAgICAgICB2YXIgYm9vbCA9IHBhcnNlSW50KHN1YkNhcmRzW251bS0xXVsnc2NvcmVzJ10pIC0gcGFyc2VJbnQoc3ViQ2FyZHNbMF1bJ3Njb3JlcyddKSA8IDU7XG4gICAgICAgIGlmKGJvb2wpe1xuICAgICAgICAgIGxldCBpbmRleHMgPSBbXTtcbiAgICAgICAgICB2YXIgbmV3Q2FyZDIwID0gY2FyZDIwLnNsaWNlKDAsaik7XG4gICAgICAgICAgc3ViQ2FyZHMgPSBzdWJDYXJkcy5jb25jYXQobmV3Q2FyZDIwKTtcbiAgICAgICAgICBzdWJDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uKGNhKSB7XG4gICAgICAgICAgICBmb3IodmFyIHEgPSAwO3EgPCBjYXJkLmxlbmd0aDsgcSsrKXtcbiAgICAgICAgICAgICAgdmFyIHIgPSBjYXJkW3FdO1xuICAgICAgICAgICAgICBpZihyID09PSBjYSl7XG4gICAgICAgICAgICAgICAgaW5kZXhzLnB1c2gocSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeU51bWJlcik7XG5cbiAgICAgICAgICByZXN1bHQudW5zaGlmdChpbmRleHMpO1xuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2MubG9nKHJlc3VsdClcbiAgY2MubG9nKCctLS0tLS0tLTM1NycpXG4gIGlmKHJlc3VsdC5sZW5ndGggPiAwKXtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9ZWxzZXtcbiAgICBsZXQgY29udmVydGVkQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0ExKGNhcmQpO1xuICAgIGlmIChjYXJkID09PSBjb252ZXJ0ZWRDYXJkcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gS1FDYXJkLmZpbmRUb25nSHVhU2h1bjIwKGNvbnZlcnRlZENhcmRzKTtcbiAgfVxuICAvL3JldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCA6IG51bGw7XG59O1xuXG4vLyDmib7pk4HmlK9cbi8vIOWmgu+8mltbMSwyLDMsNF1dXG5LUUNhcmQuZmluZFRpZVpoaSA9IGZ1bmN0aW9uIChjYXJkTW9kZXMpIHtcbiAgdmFyIHJlc3VsdCA9ICBLUUNhcmQuX2ZpbmRQb2ludExlbmd0aChjYXJkTW9kZXMsIDQpO1xuICBpZihyZXN1bHQubGVuZ3RoID4gMCl7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXN1bHQgPSBbXTtcbiAgLy8g5LqU5ZCM5piv5YyF5ZCr6ZOB5pSv55qEXG4gIGxldCB3dVRvbmdJbmRleHNBcnJheSA9IEtRQ2FyZC5maW5kV3VUb25nKGNhcmRNb2Rlcyk7XG4gIGlmICh3dVRvbmdJbmRleHNBcnJheSkge1xuICAgIHd1VG9uZ0luZGV4c0FycmF5LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICBsZXQgdGllWmhpSW5kZXhzMCA9IFtpbmRleHNbMF0sIGluZGV4c1sxXSwgaW5kZXhzWzJdLCBpbmRleHNbM11dO1xuICAgICAgbGV0IHRpZVpoaUluZGV4czEgPSBbaW5kZXhzWzBdLCBpbmRleHNbMV0sIGluZGV4c1syXSwgaW5kZXhzWzRdXTtcbiAgICAgIGxldCB0aWVaaGlJbmRleHMyID0gW2luZGV4c1swXSwgaW5kZXhzWzFdLCBpbmRleHNbM10sIGluZGV4c1s0XV07XG4gICAgICBsZXQgdGllWmhpSW5kZXhzMyA9IFtpbmRleHNbMF0sIGluZGV4c1syXSwgaW5kZXhzWzNdLCBpbmRleHNbNF1dO1xuICAgICAgbGV0IHRpZVpoaUluZGV4czQgPSBbaW5kZXhzWzFdLCBpbmRleHNbMl0sIGluZGV4c1szXSwgaW5kZXhzWzRdXTtcbiAgICAgIHJlc3VsdC5wdXNoKHRpZVpoaUluZGV4czApO1xuICAgICAgcmVzdWx0LnB1c2godGllWmhpSW5kZXhzMSk7XG4gICAgICByZXN1bHQucHVzaCh0aWVaaGlJbmRleHMyKTtcbiAgICAgIHJlc3VsdC5wdXNoKHRpZVpoaUluZGV4czMpO1xuICAgICAgcmVzdWx0LnB1c2godGllWmhpSW5kZXhzNCk7XG4gICAgfSk7XG4gIH1cbiAgaWYocmVzdWx0Lmxlbmd0aCA+IDEwKXtcbiAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwxMCk7XG4gIH1cbiAgcmVzdWx0ID0gS1FDYXJkLnJlcGVhdChyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHQgOiBLUUNhcmQuZmluZEd1aVBhaShjYXJkTW9kZXMsNCk7XG59O1xuLy/mib7kupTlkIxcbktRQ2FyZC5maW5kV3VUb25nID0gZnVuY3Rpb24gKGNhcmRNb2Rlcykge1xuICBpZihjYXJkTW9kZXMubGVuZ3RoIDwgNSl7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXN1bHQgPSB0aGlzLl9maW5kUG9pbnRMZW5ndGgoY2FyZE1vZGVzLCA1KSB8fCBbXTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0IDogS1FDYXJkLmZpbmRHdWlQYWkoY2FyZE1vZGVzLDUpO1xufTtcbi8vIOaJvumhuuWtkFxuLy8g5aaC77yaW1sxLCAyLCAzLCA0LCA1XV1cbktRQ2FyZC5maW5kU2h1blppID0gZnVuY3Rpb24gKGNhcmRNb2RlcyxsZW5ndGggPSA1KSB7XG4gIGlmIChjYXJkTW9kZXMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmKHR5cGVvZihjYXJkTW9kZXNbMF1bJ3BvaW50J10pPT1cInVuZGVmaW5lZFwiKXtcbiAgICBjYXJkTW9kZXMgPSBLUUNhcmQuY2FyZHNGcm9tQXJyYXkoY2FyZE1vZGVzKTtcbiAgfVxuICAvLyDlhYjmoLnmja7ngrnmlbDljrvph41cbiAgbGV0IHVuaXF1ZUNhcmRzID0gY2FyZE1vZGVzLnVuaXF1ZShmdW5jdGlvbihjYXJkMSwgY2FyZDIpIHtcbiAgICByZXR1cm4gY2FyZDEucG9pbnQgPT0gY2FyZDIucG9pbnQ7XG4gIH0pO1xuICB1bmlxdWVDYXJkcy5zb3J0KEtRQ2FyZC5zb3J0QnlQb2ludCk7XG5cbiAgLy8g5aaC5p6c5pyJIEHvvIzliJnlnKjmnIDlkI7mt7vliqAgMTRcbiAgbGV0IGNhcmRBID0gY2FyZE1vZGVzLmZpbmQoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICByZXR1cm4gY2FyZC5wb2ludCA9PSAxO1xuICB9KTtcbiAgaWYgKGNhcmRBKSB7XG4gICAgbGV0IGNhcmRBUGx1cyA9IG5ldyBLUUNhcmQoY2FyZEEpO1xuICAgIGNhcmRBUGx1cy5wb2ludCA9IDE0O1xuICAgIHVuaXF1ZUNhcmRzLnB1c2goY2FyZEFQbHVzKTtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSBbXTtcblxuICAvLyDnlLHkuo7ngrnmlbDmmK/llK/kuIDkuJTljYfluo/vvIzlj6rpnIDopoHkvp3mrKHpgY3ljobliKTmlq3mmK/lkKbmmK/pobrlrZDljbPlj69cbiAgZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyBsZW5ndGgpIDw9IHVuaXF1ZUNhcmRzLmxlbmd0aDsgKytzdGFydCkge1xuICAgIGxldCBzdWJDYXJkcyA9IHVuaXF1ZUNhcmRzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gICAgaWYgKEtRQ2FyZC5pc1NodW5aaShzdWJDYXJkcywgbGVuZ3RoKSkge1xuICAgICAgbGV0IGluZGV4cyA9IFtdO1xuICAgICAgc3ViQ2FyZHMuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgICAgIGxldCBpbmRleCA9IGNhcmRNb2Rlcy5maW5kSW5kZXgoZnVuY3Rpb24gKG9yaWdpbkNhcmQpIHtcblxuICAgICAgICAgIGlmIChjYXJkLnBvaW50ID09IDE0KSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luQ2FyZC5wb2ludCA9PSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjYXJkID09PSBvcmlnaW5DYXJkO1xuICAgICAgICB9KTtcbiAgICAgICAgaW5kZXhzLnB1c2goaW5kZXgpO1xuICAgICAgfSk7XG5cbiAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeU51bWJlcik7XG4gICAgICByZXN1bHQucHVzaChpbmRleHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOWkhOeQhueCueaVsOmHjeWkjeeahOaDheWGtVxuICAvLyDmr5TlpoIgQSBBIEsgUSBKIDEwIOi/meenjSBcbiAgbGV0IHJlcGVhdEluZGV4c0FycmF5ID0gS1FDYXJkLl9maW5kUmVwZWF0UG9pbnRJbmRleHNBcnJheShyZXN1bHQsIGNhcmRNb2Rlcyk7XG4gIHJlcGVhdEluZGV4c0FycmF5LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgcmVzdWx0LnB1c2goaW5kZXhzKTtcbiAgfSk7XG5cbiAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gKGFycjEsIGFycjIpIHtcbiAgICByZXR1cm4gYXJyMVswXSAtIGFycjJbMF07XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCA6IEtRQ2FyZC5maW5kU2h1blppMjAoY2FyZE1vZGVzKTtcbn07XG5LUUNhcmQuZmluZFNodW5aaTIwID0gZnVuY3Rpb24gKGNhcmRNb2RlcyAsbGVuZ3RoID0gNSkge1xuICBpZiAoY2FyZE1vZGVzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkTW9kZXMpO1xuICB2YXIgY2FyZHMgPSBjYXJkTW9kZXMua3FfZXhjbHVkZXMoY2FyZDIwKTtcbiAgLy8g5YWI5qC55o2u54K55pWw5Y676YeNXG4gIHZhciBuZXdBcnIgPSBbXTtcbiAgdmFyIG5ld0FycnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXJkcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChuZXdBcnJzLmluZGV4T2YoY2FyZHNbaV1bJ3BvaW50J10pID09IC0xKSB7XG4gICAgICBuZXdBcnIucHVzaChjYXJkc1tpXSk7XG4gICAgICBuZXdBcnJzLnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgIH1cbiAgfVxuXG4gIG5ld0Fyci5zb3J0KGZ1bmN0aW9uIChuMSwgbjIpIHtcbiAgICByZXR1cm4gbjEucG9pbnQgLSBuMi5wb2ludDtcbiAgfSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yKHZhciBqID0gMTtqIDw9IGNhcmQyMC5sZW5ndGg7KytqKXtcbiAgICB2YXIgbnVtID0gbGVuZ3RoIC0gajtcbiAgICBmb3IgKHZhciBzdGFydCA9IDA7IChzdGFydCArIG51bSkgPD0gbmV3QXJyLmxlbmd0aDsgKytzdGFydCkge1xuICAgICAgdmFyIHN1YkNhcmRzID0gbmV3QXJyLnNsaWNlKHN0YXJ0LCBzdGFydCArIG51bSk7XG4gICAgICB2YXIgYm9vbCA9IHBhcnNlSW50KHN1YkNhcmRzW251bS0xXVsncG9pbnQnXSkgLSBwYXJzZUludChzdWJDYXJkc1swXVsncG9pbnQnXSkgPCBsZW5ndGg7XG4gICAgICBpZihib29sKXtcbiAgICAgICAgbGV0IGluZGV4cyA9IFtdO1xuICAgICAgICB2YXIgbmV3Q2FyZDIwID0gY2FyZDIwLnNsaWNlKDAsaik7XG4gICAgICAgIHN1YkNhcmRzID0gc3ViQ2FyZHMuY29uY2F0KG5ld0NhcmQyMCk7XG4gICAgICAgIHN1YkNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgICAgICAgIGZvcih2YXIgcSA9IDA7cSA8IGNhcmRNb2Rlcy5sZW5ndGg7IHErKyl7XG4gICAgICAgICAgICB2YXIgciA9IGNhcmRNb2Rlc1txXTtcbiAgICAgICAgICAgIGlmKHIgPT09IGNhcmQpe1xuICAgICAgICAgICAgICBpbmRleHMucHVzaChxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeU51bWJlcik7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KGluZGV4cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYocmVzdWx0Lmxlbmd0aCA+IDApe1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1lbHNle1xuICAgIGxldCBjb252ZXJ0ZWRDYXJkcyA9IEtRQ2FyZC5fY29udmVydE9uZVRvQTEoY2FyZE1vZGVzKTtcbiAgICBpZiAoY2FyZE1vZGVzID09PSBjb252ZXJ0ZWRDYXJkcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gS1FDYXJkLmZpbmRTaHVuWmkyMChjb252ZXJ0ZWRDYXJkcyk7XG4gIH1cbn07XG5LUUNhcmQuX2ZpbmRSZXBlYXRQb2ludEluZGV4c0FycmF5ID0gZnVuY3Rpb24oaW5kZXhzQXJyYXksIG9yaWdpbkNhcmRzKSB7XG4gIGxldCByZXBlYXRJbmRleHNBcnJheSA9IFtdO1xuICBpbmRleHNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGluZGV4cykge1xuICAgIGxldCBjYXJkcyA9IGluZGV4cy5tYXAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiBvcmlnaW5DYXJkc1tpbmRleF07XG4gICAgfSk7XG5cbiAgICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQsIGluZGV4KSB7XG4gICAgICBsZXQgb3JpZ2luSW5kZXggPSBvcmlnaW5DYXJkcy5maW5kSW5kZXgoZnVuY3Rpb24ob3JpZ2luQ2FyZCkge1xuICAgICAgICBpZih0eXBlb2YoY2FyZCkgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JpZ2luQ2FyZCAhPT0gY2FyZCAmJiBvcmlnaW5DYXJkLnBvaW50ID09IGNhcmQucG9pbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG9yaWdpbkluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCByZXBlYXRJbmRleHMgPSBpbmRleHMuc2xpY2UoKTtcbiAgICAgIHJlcGVhdEluZGV4c1tpbmRleF0gPSBvcmlnaW5JbmRleDtcbiAgICAgIHJlcGVhdEluZGV4c0FycmF5LnB1c2gocmVwZWF0SW5kZXhzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcGVhdEluZGV4c0FycmF5O1xufTtcblxuLy8g5om+5ZCM6IqxXG4vLyDlpoLvvJpbWzEsIDIsIDMsIDQsIDVdXVxuS1FDYXJkLmZpbmRUb25nSHVhID0gZnVuY3Rpb24gKGNhcmRNb2RlcywgbGVuZ3RoID0gNSkge1xuICBpZiAoY2FyZE1vZGVzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGxldCBjYXJkcyA9IEFycmF5LmZyb20oY2FyZE1vZGVzKTtcbiAgY2FyZHMuc29ydChLUUNhcmQuc29ydEJ5Q29sb3IpO1xuXG4gIGxldCByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyBsZW5ndGgpIDw9IGNhcmRzLmxlbmd0aDsgKytzdGFydCkge1xuICAgIGxldCBzdWJDYXJkcyA9IGNhcmRzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gICAgaWYgKEtRQ2FyZC5pc1RvbmdIdWEoc3ViQ2FyZHMsIGxlbmd0aCkpIHtcbiAgICAgIGxldCBpbmRleHMgPSBbXTtcbiAgICAgIHN1YkNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgICAgICBsZXQgaW5kZXggPSBjYXJkTW9kZXMuZmluZEluZGV4KGZ1bmN0aW9uIChvcmlnaW5DYXJkKSB7XG4gICAgICAgICAgcmV0dXJuIGNhcmQgPT09IG9yaWdpbkNhcmQ7XG4gICAgICAgIH0pO1xuICAgICAgICAgIGluZGV4cy5wdXNoKGluZGV4KTtcbiAgICAgIH0pO1xuICAgICAgLy9pbmRleHMgPSBpbmRleHMubGVuZ3RoID4gNSA/IGluZGV4cy5zcGxpY2UoMSwxKSA6IGluZGV4cztcbiAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeU51bWJlcik7XG4gICAgICByZXN1bHQucHVzaChpbmRleHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHQgOiBLUUNhcmQuZmluZFRvbmdIdWEyMChjYXJkTW9kZXMpO1xufTtcbktRQ2FyZC5maW5kVG9uZ0h1YTIwID0gZnVuY3Rpb24gKGNhcmRNb2Rlcykge1xuICBpZiAoY2FyZE1vZGVzLmxlbmd0aCA8IDUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZE1vZGVzKTtcbiAgdmFyIGNhcmRzID0gY2FyZE1vZGVzLmtxX2V4Y2x1ZGVzKGNhcmQyMCk7XG4gIC8vIOWFiOagueaNrueCueaVsOWOu+mHjVxuICBjYXJkcy5zb3J0KEtRQ2FyZC5zb3J0QnlDb2xvcik7XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IodmFyIGogPSAxO2ogPD0gY2FyZDIwLmxlbmd0aDsrK2ope1xuICAgIHZhciBudW0gPSA1IC0gajtcbiAgICBmb3IgKHZhciBzdGFydCA9IDA7IChzdGFydCArIG51bSkgPD0gY2FyZHMubGVuZ3RoOyArK3N0YXJ0KSB7XG4gICAgICB2YXIgc3ViQ2FyZHMgPSBjYXJkcy5zbGljZShzdGFydCwgc3RhcnQgKyBudW0pO1xuICAgICAgaWYgKEtRQ2FyZC5pc1RvbmdIdWEoc3ViQ2FyZHMsIG51bSkpIHtcbiAgICAgICAgbGV0IGluZGV4cyA9IFtdO1xuICAgICAgICB2YXIgbmV3Q2FyZDIwID0gY2FyZDIwLnNsaWNlKDAsaik7XG4gICAgICAgIHN1YkNhcmRzID0gc3ViQ2FyZHMuY29uY2F0KG5ld0NhcmQyMCk7XG4gICAgICAgIHN1YkNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgICAgICAgIGZvcih2YXIgcSA9IDA7cSA8IGNhcmRNb2Rlcy5sZW5ndGg7IHErKyl7XG4gICAgICAgICAgICB2YXIgciA9IGNhcmRNb2Rlc1txXTtcbiAgICAgICAgICAgIGlmKHIgPT09IGNhcmQpe1xuICAgICAgICAgICAgICBpbmRleHMucHVzaChxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGluZGV4cy5zb3J0KEFycmF5LnNvcnRCeU51bWJlcik7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KGluZGV4cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0IDogW107XG59O1xuXG5LUUNhcmQuZmluZEh1THUgPSBmdW5jdGlvbiAoY2FyZE1vZGVzKSB7XG4gIGxldCBsZW5ndGggPSA1O1xuICBpZiAoY2FyZE1vZGVzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG5cbiAgdmFyIHBfMz1LUUNhcmQuZmluZFNhblRpYW8oY2FyZE1vZGVzKTtcbiAgdmFyIHBfND1LUUNhcmQuZmluZFRpZVpoaShjYXJkTW9kZXMpO1xuICB2YXIgcDI9S1FDYXJkLmZpbmREdWlaaShjYXJkTW9kZXMpIHx8IFtdO1xuICAvL3ZhciBwXzMgPSAgdGhpcy5fZmluZFBvaW50TGVuZ3RoKGNhcmRNb2RlcywgMykgfHwgW107XG4gIC8vdmFyIHBfNCA9IHRoaXMuX2ZpbmRQb2ludExlbmd0aChjYXJkTW9kZXMsIDQpIHx8IFtdO1xuICAvL3ZhciBwMiA9IHRoaXMuX2ZpbmRQb2ludExlbmd0aChjYXJkTW9kZXMsIDIpIHx8IFtdO1xuICBpZihwMi5sZW5ndGggPD0gMCl7XG4gICAgaWYgKHBfMykge1xuICAgICAgcF8zLmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICAgIGxldCBzYW5UaWFvSW5kZXhzMCA9IFtpbmRleHNbMF0sIGluZGV4c1sxXV07XG4gICAgICAgIC8vbGV0IHNhblRpYW9JbmRleHMxID0gW2luZGV4c1swXSwgaW5kZXhzWzJdXTtcbiAgICAgICAgbGV0IHNhblRpYW9JbmRleHMzID0gW2luZGV4c1sxXSwgaW5kZXhzWzJdXTtcbiAgICAgICAgcDIucHVzaChzYW5UaWFvSW5kZXhzMCk7XG4gICAgICAgIC8vcDIudW5zaGlmdChzYW5UaWFvSW5kZXhzMSk7XG4gICAgICAgIHAyLnB1c2goc2FuVGlhb0luZGV4czMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBfNCkge1xuICAgICAgcF80LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICAgIGxldCBzYW5UaWFvSW5kZXhzMCA9IFtpbmRleHNbMF0sIGluZGV4c1sxXV07XG4gICAgICAgIC8vbGV0IHNhblRpYW9JbmRleHMxID0gW2luZGV4c1swXSwgaW5kZXhzWzJdXTtcbiAgICAgICAgLy9sZXQgc2FuVGlhb0luZGV4czIgPSBbaW5kZXhzWzBdLCBpbmRleHNbM11dO1xuICAgICAgICAvL2xldCBzYW5UaWFvSW5kZXhzMyA9IFtpbmRleHNbMV0sIGluZGV4c1syXV07XG4gICAgICAgIC8vbGV0IHNhblRpYW9JbmRleHM0ID0gW2luZGV4c1sxXSwgaW5kZXhzWzNdXTtcbiAgICAgICAgbGV0IHNhblRpYW9JbmRleHM2ID0gW2luZGV4c1syXSwgaW5kZXhzWzNdXTtcbiAgICAgICAgcDIucHVzaChzYW5UaWFvSW5kZXhzMCk7XG4gICAgICAgIC8vcDIudW5zaGlmdChzYW5UaWFvSW5kZXhzMSk7XG4gICAgICAgIC8vcDIudW5zaGlmdChzYW5UaWFvSW5kZXhzMik7XG4gICAgICAgIC8vcDIudW5zaGlmdChzYW5UaWFvSW5kZXhzMyk7XG4gICAgICAgIC8vcDIudW5zaGlmdChzYW5UaWFvSW5kZXhzNCk7XG4gICAgICAgIHAyLnB1c2goc2FuVGlhb0luZGV4czYpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cblxuXG4gIGlmICgocDIgPT0gbnVsbCkgfHwgKHBfMyA9PSBudWxsKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgdHJlc3VsdD1bXVxuICBwMi5mb3JFYWNoKGZ1bmN0aW9uIChpXzMpIHtcbiAgICB2YXIgcz1pXzM7XG4gICAgcF8zLmZvckVhY2goZnVuY3Rpb24gKGlfMikge1xuICAgICAgcyA9IGlfMy5jb25jYXQoaV8yKTtcbiAgICAgIGZvcih2YXIgaSA9MDtpPHMubGVuZ3RoLTE7aSsrKXtcbiAgICAgICAgdmFyIGluZGV4ID0gc1tpXTtcbiAgICAgICAgZm9yKHZhciBqID1pKzE7ajxzLmxlbmd0aDtqKyspe1xuICAgICAgICAgIGlmKGluZGV4ID09IHNbal0pIHtcbiAgICAgICAgICAgIHMgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHMgPT0gbnVsbCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihzICE9PSBudWxsKXtcbiAgICAgICAgdHJlc3VsdC5wdXNoKHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgaWYodHJlc3VsdC5sZW5ndGggPiAxMCl7XG4gICAgdHJlc3VsdCA9IHRyZXN1bHQuc2xpY2UoMCwxMCk7XG4gIH1cbiAgcmV0dXJuIHRyZXN1bHQubGVuZ3RoID4gMCA/IHRyZXN1bHQgOiBLUUNhcmQuZmluZEh1THUyMChjYXJkTW9kZXMpO1xufTtcbktRQ2FyZC5maW5kSHVMdTIwID0gZnVuY3Rpb24gKGNhcmRNb2Rlcykge1xuICBsZXQgbGVuZ3RoID0gNTtcbiAgaWYgKGNhcmRNb2Rlcy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHBfMz1LUUNhcmQuZmluZEd1aVBhaShjYXJkTW9kZXMsMyk7XG4gIHZhciBwXzQ9S1FDYXJkLmZpbmRHdWlQYWkoY2FyZE1vZGVzLDQpO1xuICB2YXIgcF8yPUtRQ2FyZC5maW5kR3VpUGFpKGNhcmRNb2RlcywyKTtcbiAgaWYocF8yPT1udWxsKXtcbiAgICBwXzI9W107XG4gIH1cbiAgaWYgKHBfMykge1xuICAgIHBfMy5mb3JFYWNoKGZ1bmN0aW9uKGluZGV4cykge1xuICAgICAgbGV0IHNhblRpYW9JbmRleHMwID0gW2luZGV4c1swXSwgaW5kZXhzWzFdXTtcbiAgICAgIGxldCBzYW5UaWFvSW5kZXhzMyA9IFtpbmRleHNbMV0sIGluZGV4c1syXV07XG4gICAgICBwXzIudW5zaGlmdChzYW5UaWFvSW5kZXhzMCk7XG4gICAgICBwXzIudW5zaGlmdChzYW5UaWFvSW5kZXhzMyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocF80KSB7XG4gICAgcF80LmZvckVhY2goZnVuY3Rpb24oaW5kZXhzKSB7XG4gICAgICBsZXQgc2FuVGlhb0luZGV4czAgPSBbaW5kZXhzWzBdLCBpbmRleHNbMV1dO1xuICAgICAgbGV0IHNhblRpYW9JbmRleHM2ID0gW2luZGV4c1syXSwgaW5kZXhzWzNdXTtcbiAgICAgIHBfMi51bnNoaWZ0KHNhblRpYW9JbmRleHMwKTtcbiAgICAgIHBfMi51bnNoaWZ0KHNhblRpYW9JbmRleHM2KTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICgocF8yID09IG51bGwpIHx8IChwXzMgPT0gbnVsbCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHRyZXN1bHQ9W11cbiAgcF8yLmZvckVhY2goZnVuY3Rpb24gKGlfMykge1xuICAgIHZhciBzPWlfMztcbiAgICBwXzMuZm9yRWFjaChmdW5jdGlvbiAoaV8yKSB7XG4gICAgICBzID0gaV8zLmNvbmNhdChpXzIpO1xuICAgICAgZm9yKHZhciBpID0wO2k8cy5sZW5ndGgtMTtpKyspe1xuICAgICAgICB2YXIgaW5kZXggPSBzW2ldO1xuICAgICAgICBmb3IodmFyIGogPWkrMTtqPHMubGVuZ3RoO2orKyl7XG4gICAgICAgICAgaWYoaW5kZXggPT0gc1tqXSkge1xuICAgICAgICAgICAgcyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYocyA9PSBudWxsKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKHMgIT09IG51bGwpe1xuICAgICAgICB0cmVzdWx0LnVuc2hpZnQocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBpZih0cmVzdWx0Lmxlbmd0aCA+IDEwKXtcbiAgICB0cmVzdWx0ID0gdHJlc3VsdC5zbGljZSgwLDEwKTtcbiAgfVxuICByZXR1cm4gdHJlc3VsdC5sZW5ndGggPiAwID8gdHJlc3VsdCA6IFtdO1xufTtcblxuS1FDYXJkLmZpbmRHdWlQYWkgPSBmdW5jdGlvbiAoY2FyZE1vZGVzLG51bUJlciA9IDEpIHtcbiAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZE1vZGVzKS5tYXAoZnVuY3Rpb24oY2FyZCl7Ly/lvpfliLDprLzniYznmoTntKLlvJVcbiAgICBmb3IodmFyIHEgPSAwO3EgPCBjYXJkTW9kZXMubGVuZ3RoOyBxKyspe1xuICAgICAgdmFyIHIgPSBjYXJkTW9kZXNbcV07XG4gICAgICBpZihyID09PSBjYXJkKXtcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgY2FyZHMgPSBjYXJkTW9kZXMua3FfZXhjbHVkZXMoS1FDYXJkLmNvbnRhaW4yMChjYXJkTW9kZXMpKTsvL+WIoOmZpOaJgOacieeJjOeahOmsvOeJjFxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvcih2YXIgaiA9IDE7aiA8PSBjYXJkMjAubGVuZ3RoOysrail7XG4gICAgdmFyIG51bSA9IG51bUJlci1qOy8v6Zmk6ay854mM5aSWIOaIkeW6lOivpeaJvuWkmuWwkeW8oOeJjOWMuemFjVxuICAgIHZhciBpbmRleHMgPSBLUUNhcmQuX2ZpbmRQb2ludExlbmd0aChjYXJkTW9kZXMsIG51bSkgfHwgW107XG4gICAgZm9yKHZhciB0ID0gMDt0IDwgaW5kZXhzLmxlbmd0aDsgdCsrKSB7XG4gICAgICBpZihudW1CZXIgPT0gMil7Ly/mmK/lr7nlrZDnmoTml7blgJnmiorprLzniYzlkozljZXlvKDljLnphY3pg73lvqrnjq/kuIDpgY1cbiAgICAgICAgZm9yKHZhciBvID0gMDtvIDwgY2FyZDIwLmxlbmd0aDsrK28pe1xuICAgICAgICAgIHZhciBzID0gaW5kZXhzW3RdLmNvbmNhdChjYXJkMjBbb10pO1xuICAgICAgICAgIGlmKHMubGVuZ3RoID09IG51bUJlcil7XG4gICAgICAgICAgICByZXN1bHQucHVzaChzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIgcyA9IGluZGV4c1t0XS5jb25jYXQoY2FyZDIwLnNsaWNlKDAsaikpOy8v5L6d5qyh55u45Yqg6ay854mM56ys5LiA5qyh5Yqg5LiA5bygIOmAkuWinlxuICAgICAgICBpZihzLmxlbmd0aCA9PSBudW1CZXIpe1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmKHJlc3VsdC5sZW5ndGggPiAxMCl7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsMTApO1xuICB9XG4gIHJlc3VsdCA9IEtRQ2FyZC5yZXBlYXQocmVzdWx0KTsvL+WOu+mHjVxuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHQgOiBbXTtcbn07XG5cbktRQ2FyZC5yZXBlYXQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIGZvcih2YXIgaSA9MDtpPHJlc3VsdC5sZW5ndGg7aSsrKXtcbiAgICB2YXIgaW5kZXggPSByZXN1bHRbaV07XG5cbiAgICB2YXIgbmV3QXl5ID0gW107XG4gICAgZm9yKHZhciBvID0gMDtvIDwgaW5kZXgubGVuZ3RoO28rKyl7Ly/mnInph43lpI3lubLmjonkvaBcbiAgICAgIGlmKG5ld0F5eS5pbmRleE9mKGluZGV4W29dKSA9PSAtMSl7XG4gICAgICAgIG5ld0F5eS5wdXNoKGluZGV4W29dKTtcbiAgICAgIH1lbHNle1xuICAgICAgICByZXN1bHQuc3BsaWNlKGksMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcih2YXIgaiA9aSsxO2o8cmVzdWx0Lmxlbmd0aC0xO2orKyl7XG4gICAgICAgIHZhciBzID0gcmVzdWx0W2pdO1xuICAgICAgICB2YXIgalN0cmluZyA9ICcnO1xuICAgICAgICB2YXIgaVN0cmluZyA9ICcnO1xuICAgICAgZm9yKHZhciByID0gMDtyIDwgcy5sZW5ndGg7cisrKXtcbiAgICAgICAgICBqU3RyaW5nID0galN0cmluZyArIHNbcl07XG4gICAgICAgICAgaVN0cmluZyA9IGlTdHJpbmcgKyBpbmRleFtyXTtcbiAgICAgICAgfVxuICAgICAgaWYoalN0cmluZyA9PSBpU3RyaW5nKXsvL+aciemHjeWkjeW5suaOieS9oFxuICAgICAgICByZXN1bHQuc3BsaWNlKGksMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbktRQ2FyZC50ZXN0RmluZCA9IGZ1bmN0aW9uIChjYXJkTW9kZXMpIHtcbiAgdmFyIFd1VG9uZyA9IEtRQ2FyZC5maW5kV3VUb25nKGNhcmRNb2RlcykgfHwgW107XG4gIHZhciBUb25nSHVhU2h1biA9IEtRQ2FyZC5maW5kVG9uZ0h1YVNodW4oY2FyZE1vZGVzKSB8fCBbXTtcbiAgdmFyIFRpZVpoaSA9IEtRQ2FyZC5maW5kVGllWmhpKGNhcmRNb2RlcykgfHwgW107XG4gIHZhciBIdUx1ID0gS1FDYXJkLmZpbmRIdUx1KGNhcmRNb2RlcykgfHwgW107XG4gIHZhciBUb25nSHVhID0gS1FDYXJkLmZpbmRUb25nSHVhKGNhcmRNb2RlcykgfHwgW107XG4gIHZhciBTaHVuWmkgPSBLUUNhcmQuZmluZFNodW5aaShjYXJkTW9kZXMpIHx8IFtdO1xuICB2YXIgU2FuVGlhbyA9IEtRQ2FyZC5maW5kU2FuVGlhbyhjYXJkTW9kZXMpIHx8IFtdO1xuICB2YXIgTGlhRHVpID0gS1FDYXJkLmZpbmRMaWFEdWkoY2FyZE1vZGVzKSB8fCBbXTtcbiAgdmFyIER1aVppID0gS1FDYXJkLmZpbmREdWlaaShjYXJkTW9kZXMpIHx8IFtdO1xuICB2YXIgcmVzdWx0ID0gW1xuICAgIFd1VG9uZyxcbiAgICBUb25nSHVhU2h1bixcbiAgICBUaWVaaGksXG4gICAgSHVMdSxcbiAgICBUb25nSHVhLFxuICAgIFNodW5aaSxcbiAgICBTYW5UaWFvLFxuICAgIExpYUR1aSxcbiAgICBEdWlaaSxcbiAgXVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIOeJjOeCueaVsOW4ruWKqeexu1xuLy8g55So5p2l6K6h566X5LiA5Liq54mM5pWw57uE5YaF55qE55u45ZCM54K55pWw55qE54mM55qE5byg5pWwXG52YXIgS1FDYXJkUG9pbnRzSGVscGVyID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgdGhpcy5wb2ludE51bWJlcnMgPSB7fTtcbiAgICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkKSB7XG4gICAgICAgIGxldCBwb2ludCA9IGNhcmQucG9pbnQ7XG4gICAgICAgIHZhciBudW1iZXIgPSB0aGlzLnBvaW50TnVtYmVyc1twb2ludF0gfHwgMDtcbiAgICAgICAgdGhpcy5wb2ludE51bWJlcnNbcG9pbnRdID0gbnVtYmVyICsgMTtcbiAgICB9LmJpbmQodGhpcykpO1xufTtcblxuLy8g55u45ZCM54K55pWw54mM55qE5pyA5aSn5pWw6YePXG5LUUNhcmRQb2ludHNIZWxwZXIucHJvdG90eXBlLm1heE51bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIGZvciAobGV0IHByb3AgaW4gdGhpcy5wb2ludE51bWJlcnMpIHtcbiAgICBsZXQgbnVtYmVyID0gdGhpcy5wb2ludE51bWJlcnNbcHJvcF07XG4gICAgICAvL2lmKG51bWJlciA8IDIwKXtcbiAgICAgICAgICByZXN1bHQgPSBNYXRoLm1heChudW1iZXIsIHJlc3VsdCk7XG4gICAgICAvL31cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBLUUNhcmRQb2ludHNIZWxwZXI7XG5cbi8qdmFyIGNhcmRzID0gW1xuICAgIHsnc3VpdCc6J3MnLG51bWJlcjoyfSxcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6Mn0sXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjR9LFxuICAgIHsnc3VpdCc6J3MnLG51bWJlcjo0fSxcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6Nn0sXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjZ9LFxuICAgIHsnc3VpdCc6J3MnLG51bWJlcjo4fSxcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6OH0sXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjEwfSxcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6MTB9LFxuICAgIHsnc3VpdCc6J3MnLG51bWJlcjoxMn0sXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjEyfSxcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6MTR9XG5dO1xudmFyIHRlc3QgPSBuZXcgS1FDYXJkUG9pbnRzU2FtZShjYXJkcyk7XG5jb25zb2xlLmxvZyh0ZXN0KTsqL1xuIiwibGV0IEhlbHBlciA9IHtcbiAgbG9hZENhcmRTcHJpdGVGcmFtZTogZnVuY3Rpb24gKGNhcmROYW1lLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX2xvYWRDYXJkRnJhbWUoY2FyZE5hbWUsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBzZXRDYXJkU3ByaXRlRnJhbWU6IGZ1bmN0aW9uIChzcHJpdGUsIGNhcmROYW1lKSB7XG4gICAgdGhpcy5sb2FkQ2FyZFNwcml0ZUZyYW1lKGNhcmROYW1lLCBmdW5jdGlvbiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZSA9IHNwcml0ZUZyYW1lO1xuICAgIH0pO1xuICB9LFxuXG4gIF9jYXJkRnVsbE5hbWU6IGZ1bmN0aW9uIChjYXJkU2hvcnROYW1lKSB7XG4gICAgdmFyIGNhcmROYW1lID0gY2FyZFNob3J0TmFtZTtcbiAgICBpZiAoIWNhcmROYW1lLnN0YXJ0c1dpdGgoXCJwdWJsaWMtcGljLWNhcmQtcG9rZXJcIikpIHtcbiAgICAgIGNhcmROYW1lID0gXCJwdWJsaWMtcGljLWNhcmQtcG9rZXItXCIgKyBjYXJkTmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FyZE5hbWU7XG4gIH0sXG5cbiAgX2xvYWRDYXJkRnJhbWU6IGZ1bmN0aW9uIChjYXJkTmFtZSwgY2FsbGJhY2spIHtcbiAgICBjYy5hc3NlcnQoY2FsbGJhY2spO1xuXG4gICAgY2MubG9hZGVyLmxvYWRSZXMoXCJpbWFnZXMvcG9rZXJMaXN0L3BvY2tMaXN0XCIsIGNjLlNwcml0ZUF0bGFzLCBmdW5jdGlvbiAoZXJyLCBhdGxhcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBlcnIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2FyZE5hbWUgPSB0aGlzLl9jYXJkRnVsbE5hbWUoY2FyZE5hbWUpO1xuICAgICAgdmFyIGZyYW1lID0gYXRsYXMuZ2V0U3ByaXRlRnJhbWUoY2FyZE5hbWUpO1xuICAgICAgY2FsbGJhY2soZnJhbWUpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhlbHBlcjtcbiIsImNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xuY29uc3QgS1FDYXJkRmluZFR5cGVFeHRlbnNpb24gPSByZXF1aXJlKCdLUUNhcmRGaW5kVHlwZUV4dGVuc2lvbicpO1xuY29uc3QgS1FDYXJkQ29sb3JzSGVscGVyID0gcmVxdWlyZSgnS1FDYXJkQ29sb3JzSGVscGVyJyk7XG5jb25zdCBLUUNhcmRTY29yZXRzSGVscGVyID0gcmVxdWlyZSgnS1FDYXJkU2NvcmV0c0hlbHBlcicpO1xuXG5LUUNhcmQuc2NvcmVPZkNhcmRzID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIGlmKGNhcmRzID09IG51bGwgfHwgY2FyZHMubGVuZ3RoID09IG51bGwpIHtcbiAgICBjYXJkcyA9IFtdO1xuICB9XG5cbiAgdmFyIGlzVG91ID0gY2FyZHMubGVuZ3RoID09IDM7XG4gIGxldCB0eXBlU2NvcmUgPSBLUUNhcmQuX3R5cGVTY29yZU9mQ2FyZHMoY2FyZHMpO1xuICB2YXIgY2FsZUNhcmRzID0gS1FDYXJkLl9jb252ZXJ0T25lVG9BKGNhcmRzLnNsaWNlKCkpO1xuICBjYWxlQ2FyZHMuZm9yRWFjaChmdW5jdGlvbihjYXJkKXtcbiAgICBpZihjYXJkLnNjb3JlcyA9PSAxKXtcbiAgICAgIGNhcmQuc2NvcmVzID0gMTQ7XG4gICAgfVxuICB9KVxuICAvL2NhbGVDYXJkcyA9IEtRQ2FyZC5Tb3J0KGNhbGVDYXJkcyk7XG4gIHZhciBjYXJkMjAgPSBLUUNhcmQuY29udGFpbjIwKGNhbGVDYXJkcyk7XG4gIHZhciBwb2ludEhlbHBlciA9IG5ldyBLUUNhcmRTY29yZXRzSGVscGVyKGNhbGVDYXJkcy5rcV9leGNsdWRlcyhjYXJkMjApKTtcbiAgdmFyIG1heE51bSA9IHBvaW50SGVscGVyLm1heE51bWJlcigpLyotY2FyZDIwLmxlbmd0aCA9PSAwID8gMTogcG9pbnRIZWxwZXIubWF4TnVtYmVyKCktY2FyZDIwLmxlbmd0aCovO1xuXG4gIHZhciBtYXhTY29yZSA9IDA7Ly/ojrflj5bpmaTprLzniYzlpJbmnIDlpKfnmoTnmoTngrnmlbBcbiAgZm9yKHZhciBpIGluIHBvaW50SGVscGVyLnBvaW50TnVtYmVycykge1xuICAgIGlmIChwYXJzZUludChpKSA+IG1heFNjb3JlICYmIHBvaW50SGVscGVyLnBvaW50TnVtYmVyc1tpXSA9PSBtYXhOdW0pIHtcbiAgICAgIG1heFNjb3JlID0gcGFyc2VJbnQoaSk7XG4gICAgfVxuICB9XG4gIGNhbGVDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQpe1xuICAgIGlmKGNhcmQuc2NvcmVzID49IDIwKXtcbiAgICAgIGNhcmQuc2NvcmVzID0gbWF4U2NvcmU7XG4gICAgfVxuICB9KVxuICBjYXJkMjAuZm9yRWFjaChmdW5jdGlvbihjYXJkKXtcbiAgICBjYXJkLnNjb3JlcyA9IG1heFNjb3JlO1xuICB9KVxuICAvL2NjLmxvZyhtYXhOdW0pXG4gIC8vY2MubG9nKG1heFNjb3JlKVxuICAvL2NjLmxvZyhjYWxlQ2FyZHMua3FfZXhjbHVkZXMoY2FyZDIwKSlcbiAgLy9jYy5sb2coJy0tLS0zNScpXG4gIGNhbGVDYXJkcy5zb3J0KEtRQ2FyZC5zb3J0KTtcbiAgaWYodHlwZVNjb3JlID09IDkwMDAwMDAwMDAwMDAwMDApe1xuICAgIC8v5LqU5ZCMXG4gICAgY2FsZUNhcmRzLnNvcnQoZnVuY3Rpb24oYTEsYTIpe1xuICAgICAgcmV0dXJuIGEyLnNjb3JlcyAtIGExLnNjb3JlcztcbiAgICB9KTtcbiAgICB2YXIgdG90YWxWYWx1ZSA9IFwiXCI7XG4gICAgLy92YXIgdG90YWxDb2xvciA9IFwiXCI7XG4gICAgZm9yKHZhciBpIGluIGNhbGVDYXJkcykge1xuICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbaV0uc2NvcmVzO1xuICAgICAgLy92YXIgYyA9IGNhbGVDYXJkc1tpXS5jb2xvcjtcbiAgICAgIHRvdGFsVmFsdWUgPSAocGFyc2VJbnQocykgPj0gMTAgPyBzIDogXCIwXCIrcykrdG90YWxWYWx1ZTtcbiAgICAgIC8vdG90YWxDb2xvciA9IGMrdG90YWxDb2xvcjtcbiAgICB9XG4gICAgLy90b3RhbFZhbHVlID0gdG90YWxWYWx1ZSt0b3RhbENvbG9yO1xuICAgIC8vY2MubG9nKHRvdGFsVmFsdWUpXG4gICAgLy9jYy5sb2cocGFyc2VJbnQodG90YWxWYWx1ZSkpXG4gICAgLy9jYy5sb2codHlwZVNjb3JlK3BhcnNlSW50KHRvdGFsVmFsdWUpKVxuICAgIHJldHVybiB0eXBlU2NvcmUrcGFyc2VJbnQodG90YWxWYWx1ZSk7XG4gIH1cbiAgZWxzZSBpZih0eXBlU2NvcmUgPT0gODAwMDAwMDAwMDAwMDAwMCkge1xuICAgIC8v5ZCM6Iqx6aG65q+U5pyA5aSn55qE6YKj5byg77yM5aaC5p6c5Lik5byg55u45ZCM6YKj5bCx5piv55u45ZCMXG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApey8v5pyJ6ay854mM55qE5pe25YCZ6KaB5pS55Y+Y6ay854mM55qE5YiG5pWwXG4gICAgICBjYWxlQ2FyZHMgPSBLUUNhcmQuX2NoYW5nZUNhcmRTY29ycyhjYWxlQ2FyZHMpO1xuICAgIH1cbiAgICB2YXIgdG90YWxWYWx1ZSA9IFwiXCI7XG4gICAgdmFyIHZhbHVlQ29sb3IgPSBcIlwiOy8v54mM6ImyXG4gICAgZm9yKHZhciBpIGluIGNhbGVDYXJkcykge1xuICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbaV0uc2NvcmVzO1xuICAgICAgdG90YWxWYWx1ZSA9IChwYXJzZUludChzKSA+PSAxMCA/IHMgOiBcIjBcIitzKSt0b3RhbFZhbHVlO1xuICAgICAgdmFyIGMgPSBjYWxlQ2FyZHNbaV0uY29sb3I7Ly/niYzoibJcbiAgICAgIHZhbHVlQ29sb3IgPSBjICsgdmFsdWVDb2xvcjsvL+eJjOiJslxuICAgIH1cbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHRvdGFsVmFsdWUgKyB2YWx1ZUNvbG9yKTtcbiAgfVxuICBlbHNlIGlmKHR5cGVTY29yZSA9PSA3MDAwMDAwMDAwMDAwMDAwKSB7XG4gICAgLy/pk4HmlK8s5om+5Ye66YKj5Zub5byg5piv5LuA5LmI54mMXG5cbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2YXIgb25lVmFsdWUgPSBcIlwiO1xuICAgIHZhciB2YWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIHZhciBvbmVWYWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIGZvcih2YXIgdyBpbiBjYWxlQ2FyZHMpIHtcbiAgICAgIGlmKG1heFNjb3JlID09IGNhbGVDYXJkc1t3XS5zY29yZXMpey8v5LiJ5p2hXG4gICAgICAgIHZhciBzID0gY2FsZUNhcmRzW3ddLnNjb3JlcztcbiAgICAgICAgc3RyID0gKHBhcnNlSW50KHMpPj0xMCA/IHMgOlwiMFwiK3MpICsgc3RyO1xuXG4gICAgICAgIHZhciBjID0gY2FsZUNhcmRzW3ddLmNvbG9yOy8v54mM6ImyXG4gICAgICAgIHZhbHVlQ29sb3IgPSBjICsgdmFsdWVDb2xvcjsvL+eJjOiJslxuICAgICAgfWVsc2V7XG4gICAgICAgIHZhciBzID0gY2FsZUNhcmRzW3ddLnNjb3JlcztcbiAgICAgICAgb25lVmFsdWUgPSAocGFyc2VJbnQocyk+PTEwID8gcyA6XCIwXCIrcykgKyBvbmVWYWx1ZTtcblxuICAgICAgICB2YXIgYyA9IGNhbGVDYXJkc1t3XS5jb2xvcjsvL+eJjOiJslxuICAgICAgICBvbmVWYWx1ZUNvbG9yID0gYyArIG9uZVZhbHVlQ29sb3I7Ly/niYzoibJcblxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgcXdlID0gJyc7XG4gICAgcXdlID0gb25lVmFsdWVDb2xvci5zdWJzdHIoMCxvbmVWYWx1ZUNvbG9yLmxlbmd0aCAtMSk7XG4gICAgb25lVmFsdWVDb2xvciA9IG9uZVZhbHVlQ29sb3Iuc3Vic3RyKG9uZVZhbHVlQ29sb3IubGVuZ3RoIC0xKTtcbiAgICBzdHIgPSBzdHIrb25lVmFsdWUgKyBvbmVWYWx1ZUNvbG9yICsgdmFsdWVDb2xvciArIHF3ZTtcbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHN0cik7XG4gIH1cbiAgZWxzZSBpZih0eXBlU2NvcmUgPT0gNjAwMDAwMDAwMDAwMDAwMCkge1xuICAgIC8v6JGr6IqmXG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgdmFyIG9uZVZhbHVlID0gXCJcIjtcbiAgICB2YXIgdmFsdWVDb2xvciA9IFwiXCI7Ly/niYzoibJcbiAgICB2YXIgb25lVmFsdWVDb2xvciA9IFwiXCI7Ly/niYzoibJcbiAgICBmb3IodmFyIHcgaW4gY2FsZUNhcmRzKSB7XG4gICAgICBpZihtYXhTY29yZSA9PSBjYWxlQ2FyZHNbd10uc2NvcmVzKXsvL+S4ieadoVxuICAgICAgICB2YXIgcyA9IGNhbGVDYXJkc1t3XS5zY29yZXM7XG4gICAgICAgIHN0ciA9IChwYXJzZUludChzKT49MTAgPyBzIDpcIjBcIitzKSArIHN0cjtcblxuICAgICAgICB2YXIgYyA9IGNhbGVDYXJkc1t3XS5jb2xvcjsvL+eJjOiJslxuICAgICAgICB2YWx1ZUNvbG9yID0gYyArIHZhbHVlQ29sb3I7Ly/niYzoibJcbiAgICAgIH1lbHNle1xuICAgICAgICB2YXIgcyA9IGNhbGVDYXJkc1t3XS5zY29yZXM7XG4gICAgICAgIG9uZVZhbHVlID0gKHBhcnNlSW50KHMpPj0xMCA/IHMgOlwiMFwiK3MpICsgb25lVmFsdWU7XG5cbiAgICAgICAgdmFyIGMgPSBjYWxlQ2FyZHNbd10uY29sb3I7Ly/niYzoibJcbiAgICAgICAgb25lVmFsdWVDb2xvciA9IGMgKyBvbmVWYWx1ZUNvbG9yOy8v54mM6ImyXG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihpc1RvdSl7XG4gICAgICBvbmVWYWx1ZSA9IG9uZVZhbHVlKycwMDAwJztcbiAgICAgIG9uZVZhbHVlQ29sb3IgPSBvbmVWYWx1ZUNvbG9yKycwMCc7XG4gICAgfVxuXG4gICAgc3RyID0gc3RyK29uZVZhbHVlICsgdmFsdWVDb2xvciArIG9uZVZhbHVlQ29sb3I7XG4gICAgcmV0dXJuIHR5cGVTY29yZStwYXJzZUludChzdHIpO1xuXG4gIH1cbiAgZWxzZSBpZih0eXBlU2NvcmUgPT0gNTAwMDAwMDAwMDAwMDAwMCkge1xuICAgIC8v5ZCM6IqxLOacieWPr+iDvemcgOimgeavlDXlvKDniYxcbiAgICB2YXIgdG90YWxTY29yZSA9IFwiXCI7XG4gICAgdmFyIHRvdGFsQ29sb3IgPSBcIlwiO1xuICAgIC8vdmFyIGNvbG9ycyA9IDA7Ly/ojrflj5bniYznmoTnsbvlnovpopzoibJcbiAgICAvL2Zvcih2YXIgaSBpbiBjYWxlQ2FyZHMpIHtcbiAgICAvLyAgaWYocGFyc2VJbnQoY2FsZUNhcmRzW2ldLnBvaW50KSA8IDIwKXtcbiAgICAvLyAgICBjb2xvcnMgPSBwYXJzZUludChjYWxlQ2FyZHNbaV0uY29sb3IpO1xuICAgIC8vICAgIGJyZWFrO1xuICAgIC8vICB9XG4gICAgLy99XG5cbiAgICBmb3IodmFyIGkgaW4gY2FsZUNhcmRzKSB7XG4gICAgICB2YXIgcGFpUG9pbnQgPSBwYXJzZUludChjYWxlQ2FyZHNbaV0ucG9pbnQpO1xuICAgICAgdmFyIGNvbG9ycyA9IHBhcnNlSW50KGNhbGVDYXJkc1tpXS5wb2ludCkgPCAyMCA/IGNhbGVDYXJkc1tpXS5jb2xvcjogNTtcbiAgICAgIHRvdGFsQ29sb3IgPSBjb2xvcnMgKyB0b3RhbENvbG9yO1xuICAgICAgdG90YWxTY29yZSA9IChwYWlQb2ludD49MTAgPyBwYWlQb2ludCA6IFwiMFwiK3BhaVBvaW50KSt0b3RhbFNjb3JlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHRvdGFsU2NvcmUrdG90YWxDb2xvcik7XG4gIH1cbiAgZWxzZSBpZih0eXBlU2NvcmUgPT0gNDAwMDAwMDAwMDAwMDAwMCkge1xuICAgIC8v6aG65a2QXG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApey8v5pyJ6ay854mM55qE5pe25YCZ6KaB5pS55Y+Y6ay854mM55qE5YiG5pWwXG4gICAgICBjYWxlQ2FyZHMgPSBLUUNhcmQuX2NoYW5nZUNhcmRTY29ycyhjYWxlQ2FyZHMpO1xuICAgIH1cbiAgICB2YXIgdG90YWxWYWx1ZSA9IFwiXCI7XG4gICAgdmFyIHZhbHVlQ29sb3IgPSBcIlwiOy8v54mM6ImyXG4gICAgZm9yKHZhciBpIGluIGNhbGVDYXJkcykge1xuICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbaV0uc2NvcmVzO1xuICAgICAgdG90YWxWYWx1ZSA9IChwYXJzZUludChzKSA+PSAxMCA/IHMgOiBcIjBcIitzKSt0b3RhbFZhbHVlO1xuXG4gICAgICB2YXIgYyA9IGNhbGVDYXJkc1tpXS5jb2xvcjsvL+eJjOiJslxuICAgICAgdmFsdWVDb2xvciA9IGMgKyB2YWx1ZUNvbG9yOy8v54mM6ImyXG4gICAgfVxuICAgIHJldHVybiB0eXBlU2NvcmUrcGFyc2VJbnQodG90YWxWYWx1ZSArIHZhbHVlQ29sb3IpO1xuICB9XG4gIGVsc2UgaWYodHlwZVNjb3JlID09IDMwMDAwMDAwMDAwMDAwMDApIHtcbiAgICAvL+S4ieadoe+8jOaJvuWHuuaYr+WTquW8oOeJjOaciTPlvKBcbiAgICAvL2NhbGVDYXJkcy5zb3J0KEtRQ2FyZC5zb3J0KTtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2YXIgb25lVmFsdWUgPSBcIlwiO1xuICAgIHZhciB2YWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIHZhciBvbmVWYWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIHZhciBvbmVWYWx1ZUNvbG9yMjAgPSBcIlwiOy8v54mM6ImyXG4gICAgZm9yKHZhciB3IGluIGNhbGVDYXJkcykge1xuICAgICAgaWYobWF4U2NvcmUgPT0gY2FsZUNhcmRzW3ddLnNjb3Jlcyl7Ly/kuInmnaFcbiAgICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbd10uc2NvcmVzO1xuICAgICAgICBzdHIgPSAocGFyc2VJbnQocyk+PTEwID8gcyA6XCIwXCIrcykgKyBzdHI7XG5cbiAgICAgICAgdmFyIGMgPSBjYWxlQ2FyZHNbd10uY29sb3I7Ly/niYzoibJcbiAgICAgICAgdmFsdWVDb2xvciA9IGMgKyB2YWx1ZUNvbG9yOy8v54mM6ImyXG4gICAgICB9ZWxzZXtcbiAgICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbd10uc2NvcmVzO1xuICAgICAgICBvbmVWYWx1ZSA9IChwYXJzZUludChzKT49MTAgPyBzIDpcIjBcIitzKSArIG9uZVZhbHVlO1xuXG4gICAgICAgIHZhciBjID0gY2FsZUNhcmRzW3ddLmNvbG9yOy8v54mM6ImyXG4gICAgICAgIGlmKHBhcnNlSW50KHMpIDwgMjApe1xuICAgICAgICAgIG9uZVZhbHVlQ29sb3IgPSBjICsgb25lVmFsdWVDb2xvcjsvL+eJjOiJslxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBvbmVWYWx1ZUNvbG9yMjAgPSBjICsgb25lVmFsdWVDb2xvcjIwOy8v54mM6ImyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYoaXNUb3Upe1xuICAgICAgb25lVmFsdWUgPSBvbmVWYWx1ZSsnMDAwMCc7XG4gICAgICB2YWx1ZUNvbG9yID0gdmFsdWVDb2xvcisnMDAnO1xuICAgIH1cbiAgICBzdHIgPSBzdHIrb25lVmFsdWUgKyBvbmVWYWx1ZUNvbG9yICsgdmFsdWVDb2xvciArIG9uZVZhbHVlQ29sb3IyMDtcbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHN0cik7XG5cbiAgfVxuICBlbHNlIGlmKHR5cGVTY29yZSA9PSAyMDAwMDAwMDAwMDAwMDAwKSB7XG4gICAgLy9jYWxlQ2FyZHMuc29ydChLUUNhcmQuc29ydCk7XG4gICAgLy/kuKTlr7ks5pyJ5Y+v6IO96ZyA6KaB5q+UNeW8oOeJjFxuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBvbmVWYWx1ZSA9ICcnO1xuICAgIHZhciB2YWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIHZhciBvbmVWYWx1ZUNvbG9yID0gXCJcIjsvL+eJjOiJslxuICAgIGZvcih2YXIgaSBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAgIGlmKHBvaW50SGVscGVyLnBvaW50TnVtYmVyc1tpXSA9PSAyKSB7Ly/kuKTlr7lcbiAgICAgICAgZm9yKHZhciB3IGluIGNhbGVDYXJkcykge1xuICAgICAgICAgIGlmKGkgPT0gY2FsZUNhcmRzW3ddLnNjb3Jlcyl7XG4gICAgICAgICAgICB2YXIgcyA9IGNhbGVDYXJkc1t3XS5zY29yZXM7XG4gICAgICAgICAgICBzdHIgPSAocGFyc2VJbnQocyk+PTEwID8gcyA6XCIwXCIrcykgKyBzdHI7XG4gICAgICAgICAgICB2YXIgYyA9IGNhbGVDYXJkc1t3XS5jb2xvcjsvL+eJjOiJslxuICAgICAgICAgICAgdmFsdWVDb2xvciA9IGMgKyB2YWx1ZUNvbG9yOy8v54mM6ImyXG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IodmFyIHEgaW4gY2FsZUNhcmRzKSB7Ly/ljZXlvKDliqDoirHoibJcbiAgICAgICAgICBpZihpID09IGNhbGVDYXJkc1txXS5zY29yZXMpe1xuICAgICAgICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbcV0uc2NvcmVzO1xuICAgICAgICAgICAgb25lVmFsdWUgPSAocGFyc2VJbnQocyk+PTEwID8gcyA6XCIwXCIrcykgKyBvbmVWYWx1ZTtcblxuICAgICAgICAgICAgdmFyIGMgPSBjYWxlQ2FyZHNbcV0uY29sb3I7Ly/niYzoibJcbiAgICAgICAgICAgIG9uZVZhbHVlQ29sb3IgPSBvbmVWYWx1ZUNvbG9yICsgYzsvL+eJjOiJslxuXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH1cbiAgICBjYy5sb2coc3RyKVxuICAgIGNjLmxvZyhvbmVWYWx1ZSlcbiAgICBzdHIgPSBzdHIrb25lVmFsdWUgK29uZVZhbHVlQ29sb3IgKyB2YWx1ZUNvbG9yO1xuICAgIHJldHVybiB0eXBlU2NvcmUrcGFyc2VJbnQoc3RyKTtcbiAgfVxuICBlbHNlIGlmKHR5cGVTY29yZSA9PSAxMDAwMDAwMDAwMDAwMDAwKSB7XG4gICAgLy/lr7nlrZBcbiAgICAvL2NhbGVDYXJkcy5zb3J0KEtRQ2FyZC5zb3J0KTtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2YXIgb25lVmFsdWUgPSBcIlwiO1xuICAgIHZhciBvbmVWYWx1ZUNvbG9yID0gXCJcIjtcbiAgICB2YXIgdmFsdWVDb2xvciA9IFwiXCI7XG5cbiAgICBpZihjYXJkMjAubGVuZ3RoID4gMCl7XG4gICAgICBjYWxlQ2FyZHMuc29ydChmdW5jdGlvbihjYXJkMSxjYXJkMikge1xuICAgICAgICByZXR1cm4gY2FyZDIucG9pbnQtY2FyZDEucG9pbnQ7XG4gICAgICB9KTtcbiAgICAgIGNhbGVDYXJkcyA9IGNhbGVDYXJkcy5rcV9leGNsdWRlcyhjYXJkMjApO1xuICAgICAgY2FsZUNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCxpbmRleCkge1xuICAgICAgICB2YXIgcyA9IGNhcmQuc2NvcmVzO1xuICAgICAgICB2YXIgYyA9IGNhcmQuY29sb3I7XG4gICAgICAgIHN0ciA9IHN0cisocGFyc2VJbnQocyk+PTEwID8gcyA6XCIwXCIrcyk7XG4gICAgICAgIGlmKGluZGV4ID09IDApe1xuICAgICAgICAgIHZhciBzMjAgPSBjYXJkMjBbMF0uc2NvcmVzO1xuICAgICAgICAgIHN0ciA9IHN0cisocGFyc2VJbnQoczIwKT49MTAgPyBzMjAgOlwiMFwiK3MyMCk7XG4gICAgICAgICAgdmFsdWVDb2xvciA9IHZhbHVlQ29sb3IrYztcbiAgICAgICAgICB2YWx1ZUNvbG9yID0gdmFsdWVDb2xvcitjYXJkMjBbMF0uY29sb3I7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIG9uZVZhbHVlQ29sb3IgPSBvbmVWYWx1ZUNvbG9yK2M7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2MubG9nKHN0cilcbiAgICAgIGNjLmxvZygnLS0tLS0tLS0yNzQnKVxuICAgICAgaWYoaXNUb3Upe1xuICAgICAgICBzdHIgPSBzdHIrJzAwMDAnO1xuICAgICAgICB2YWx1ZUNvbG9yID0gdmFsdWVDb2xvcisnMDAnO1xuICAgICAgfVxuICAgICAgc3RyID0gc3RyICsgb25lVmFsdWVDb2xvciArIHZhbHVlQ29sb3I7XG4gICAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHN0cik7XG4gICAgfVxuXG4gICAgZm9yKHZhciBpIGluIHBvaW50SGVscGVyLnBvaW50TnVtYmVycykge1xuICAgICAgaWYocG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW2ldID09IG1heE51bSkgey8v5a+55a2QXG4gICAgICAgIGZvcih2YXIgdyBpbiBjYWxlQ2FyZHMpIHsvL+WvueWtkOWKoOiKseiJslxuICAgICAgICAgIGlmKGkgPT0gY2FsZUNhcmRzW3ddLnNjb3Jlcyl7XG4gICAgICAgICAgICB2YXIgcyA9IGNhbGVDYXJkc1t3XS5zY29yZXM7XG4gICAgICAgICAgICB2YWx1ZUNvbG9yID0gY2FsZUNhcmRzW3ddLmNvbG9yICsgdmFsdWVDb2xvcjtcbiAgICAgICAgICAgIHN0ciA9IChwYXJzZUludChzKT49MTAgPyBzIDpcIjBcIitzKSArIHN0cjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IodmFyIHEgaW4gY2FsZUNhcmRzKSB7Ly/ljZXlvKDliqDoirHoibJcbiAgICAgICAgICBpZihpID09IGNhbGVDYXJkc1txXS5zY29yZXMpe1xuICAgICAgICAgICAgdmFyIHMgPSBjYWxlQ2FyZHNbcV0uc2NvcmVzO1xuICAgICAgICAgICAgb25lVmFsdWVDb2xvciA9IGNhbGVDYXJkc1txXS5jb2xvciArIG9uZVZhbHVlQ29sb3I7XG4gICAgICAgICAgICBvbmVWYWx1ZSA9IChwYXJzZUludChzKT49MTAgPyBzIDpcIjBcIitzKSArIG9uZVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICB9XG4gICAgLy9jYy5sb2cob25lVmFsdWVDb2xvcilcbiAgICAvL2NjLmxvZyh2YWx1ZUNvbG9yKVxuICAgIGlmKGlzVG91KXtcbiAgICAgIG9uZVZhbHVlID0gb25lVmFsdWUrJzAwMDAnO1xuICAgICAgdmFsdWVDb2xvciA9IHZhbHVlQ29sb3IrJzAwJztcbiAgICB9XG4gICAgc3RyID0gc3RyK29uZVZhbHVlK29uZVZhbHVlQ29sb3IrdmFsdWVDb2xvcjtcbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHN0cik7XG4gIH1cbiAgZWxzZSBpZih0eXBlU2NvcmUgPT0gMCkge1xuICAgIC8v5LmM6b6ZXG4gICAgdmFyIHZhbHVlUG9pbnQgPSBcIlwiO1xuICAgIHZhciB2YWx1ZUNvbG9yID0gXCJcIjtcbiAgICBmb3IodmFyIHEgaW4gY2FsZUNhcmRzKSB7XG4gICAgICB2YXIgcyA9IGNhbGVDYXJkc1txXS5zY29yZXM7XG4gICAgICB2YXIgYyA9IGNhbGVDYXJkc1txXS5jb2xvcjsvL+WNleW8oOWKoOiKseiJslxuICAgICAgdmFsdWVQb2ludCA9IChwYXJzZUludChzKT49MTAgPyBzIDpcIjBcIitzKSArIHZhbHVlUG9pbnQ7XG4gICAgICB2YWx1ZUNvbG9yID0gYyArIHZhbHVlQ29sb3I7XG4gICAgfVxuICAgIGlmKGlzVG91KXtcbiAgICAgIHZhbHVlUG9pbnQgPSB2YWx1ZVBvaW50KycwMDAwJztcbiAgICAgIHZhbHVlQ29sb3IgPSB2YWx1ZUNvbG9yKycwMCc7XG4gICAgfVxuICAgIHZhbHVlUG9pbnQgPSB2YWx1ZVBvaW50ICsgdmFsdWVDb2xvcjtcbiAgICByZXR1cm4gdHlwZVNjb3JlK3BhcnNlSW50KHZhbHVlUG9pbnQpO1xuICB9XG5cblxuICB2YXIgY2FyZHNUb3RhbFBvaW50PTA7XG4gIGNhbGVDYXJkcy5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQpIHtcbiAgICBjYXJkc1RvdGFsUG9pbnQgKz0gY2FyZC5wb2ludDtcbiAgfSk7XG5cbiAgbGV0IHJlc3VsdCA9IHR5cGVTY29yZSArIGNhcmRzVG90YWxQb2ludDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5LUUNhcmQuX2NoYW5nZUNhcmRTY29ycyA9IGZ1bmN0aW9uKGNhcmRNb2RlbCkge1xuICBjYXJkTW9kZWwuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgY2FyZC5zY29yZXMgPSBjYXJkLnBvaW50O1xuICAgIGlmIChjYXJkLnNjb3JlcyA9PSAxNCkge1xuICAgICAgY2FyZC5zY29yZXMgPSAxO1xuICAgIH1cbiAgfSk7XG4gIHZhciBpczE0ID0gZmFsc2U7Ly/mmK8gayBxIGogMTAgQTtcbiAgdmFyIGlzMSA9IGZhbHNlOy8v5LiN5pivMSAyIDMgNCA1XG4gIGNhcmRNb2RlbC5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQpIHtcbiAgICBpZiAoY2FyZC5zY29yZXMgPCA5KSB7XG4gICAgICBpczE0ID0gdHJ1ZTsgLy/kuI3mmK8gayBxIGogMTAgQTtcbiAgICAgIGlmIChjYXJkLnNjb3JlcyA8IDYgJiYgY2FyZC5zY29yZXMgPiAxICkge1xuICAgICAgICBpczEgPSB0cnVlOy8v5pivMSAyIDMgNCA1XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuXG4gIGlmIChpczE0KSB7IC8v5LiN5pivIGsgcSBqIDEwIEE7XG4gICAgY2FyZE1vZGVsLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgICAgaWYgKGNhcmQuc2NvcmVzID09IDE0KSB7XG4gICAgICAgIGNhcmQuc2NvcmVzID0gMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoaXMxNCAmJiAhaXMxKSB7IC8v5LiN5pivIGsgcSBqIDEwIEE7XG4gICAgY2FyZE1vZGVsLnNvcnQoZnVuY3Rpb24oYTEsIGEyKSB7XG4gICAgICByZXR1cm4gYTEuc2NvcmVzIC0gYTIuc2NvcmVzO1xuICAgIH0pO1xuXG4gICAgdmFyIHNjb3Jlc0F5eSA9IFtdOyAvL+S4gOWJr+eJjOeahOWIhuaVsFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICB2YXIgcyA9IHBhcnNlSW50KGNhcmRNb2RlbFswXS5zY29yZXMpICsgaTsgLy/mnIDlsI/nmoTniYznmoTliIbmlbBcbiAgICAgIHNjb3Jlc0F5eS5wdXNoKHMpO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNjb3Jlc0F5eS5sZW5ndGg7IGorKykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXJkTW9kZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNhcmRTY29yZXMgPSBjYXJkTW9kZWxbaV0uc2NvcmVzO1xuICAgICAgICBpZiAoY2FyZFNjb3JlcyA9PSBzY29yZXNBeXlbal0gJiYgY2FyZFNjb3JlcyA8IDE1KSB7XG4gICAgICAgICAgc2NvcmVzQXl5LnNwbGljZShqLCAxKTsgLy/liKDpmaTkuI3mmK/prLzniYznmoTliIZcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYXJkTW9kZWwuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7IC8v5pS55Y+Y54mM55qE5YiG5pWwXG4gICAgICBpZiAoY2FyZC5wb2ludCA+PSAyMCkge1xuICAgICAgICBjYXJkLnNjb3JlcyA9IHNjb3Jlc0F5eS5zcGxpY2UoMCwxKVswXTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICB9IGVsc2UgeyAvL+aYryBrIHEgaiAxMCBBO1xuICAgIGNhcmRNb2RlbC5zb3J0KGZ1bmN0aW9uKGExLCBhMikge1xuICAgICAgcmV0dXJuIGEyLnNjb3JlcyAtIGExLnNjb3JlcztcbiAgICB9KTtcbiAgICB2YXIgbnVtID0gMTQ7XG4gICAgaWYoaXMxKXsvL+aYrzEgMiAzIDQgNVxuICAgICAgbnVtID0gNTtcbiAgICB9XG4gICAgdmFyIHNjb3Jlc0F5eSA9IFtdOyAvL+S4gOWJr+eJjOeahOWIhuaVsFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBzY29yZXNBeXkucHVzaChudW0pO1xuICAgICAgbnVtIC09IDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2NvcmVzQXl5Lmxlbmd0aDsgaisrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhcmRNb2RlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2FyZFNjb3JlcyA9IGNhcmRNb2RlbFtpXS5zY29yZXM7XG4gICAgICAgIGlmIChjYXJkU2NvcmVzID09IHNjb3Jlc0F5eVtqXSAmJiBjYXJkU2NvcmVzIDwgMTUpIHtcbiAgICAgICAgICBzY29yZXNBeXkuc3BsaWNlKGosIDEpOyAvL+WIoOmZpOS4jeaYr+msvOeJjOeahOWIhlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNjLmxvZyhzY29yZXNBeXkpXG4gICAgY2MubG9nKGNhcmRNb2RlbClcbiAgICBjYy5sb2coJy0tLS0tLS0tLS00MTInKVxuICAgIGNhcmRNb2RlbC5mb3JFYWNoKGZ1bmN0aW9uKGNhcmQpIHsgLy/mib7lh7rpgInkuK3nmoTniYxcbiAgICAgIGlmIChjYXJkLnBvaW50ID49IDIwKSB7XG4gICAgICAgIGNhcmQuc2NvcmVzID0gc2NvcmVzQXl5LnNwbGljZSgwLCAxKVswXTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICAgIGNjLmxvZyhjYXJkTW9kZWwpXG4gIH1cblxuICBjYXJkTW9kZWwuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgaWYgKGNhcmQuc2NvcmVzID09IDEpIHtcbiAgICAgIGNhcmQuc2NvcmVzID0gMTQ7XG4gICAgfVxuICB9KTtcbiAgY2FyZE1vZGVsLnNvcnQoZnVuY3Rpb24oYTEsIGEyKSB7XG4gICAgcmV0dXJuIGExLnNjb3JlcyAtIGEyLnNjb3JlcztcbiAgfSk7XG4gIHJldHVybiBjYXJkTW9kZWw7XG59O1xuLyojIyMjIyovXG5LUUNhcmQuc2NvcmVPZkNhcmRzMiA9IGZ1bmN0aW9uIChjYXJkcykge1xuICBpZihjYXJkcyA9PSBudWxsIHx8IGNhcmRzLmxlbmd0aCA9PSBudWxsKSB7XG4gICAgY2FyZHMgPSBbXTtcbiAgfVxuICBpZih0eXBlb2YoY2FyZHNbMF0ucG9pbnQpID09ICd1bmRlZmluZWQnKXtcbiAgICBjYXJkcyA9IEtRQ2FyZC5jYXJkc0Zyb21BcnJheShjYXJkcyk7XG4gIH1cbiAgdmFyIGNhbGVDYXJkcyA9IEtRQ2FyZC5fY29udmVydE9uZVRvQShjYXJkcy5zbGljZSgpKTtcbiAgY2FsZUNhcmRzLnNvcnQoS1FDYXJkLnNvcnQpXG4gIC8vdmFyIHBvaW50SGVscGVyID0gbmV3IEtRQ2FyZFBvaW50c0hlbHBlcihjYWxlQ2FyZHMpO1xuICB2YXIgdmFsdWVTdHIgPSBcIlwiO1xuICBmb3IodmFyIGkgaW4gY2FsZUNhcmRzKSB7XG4gICAgbGV0IHMgPSBjYWxlQ2FyZHNbaV0ucG9pbnQ7XG4gICAgdmFsdWVTdHIgPSAocGFyc2VJbnQocyk+PTEwP3M6XCIwXCIrcykrdmFsdWVTdHI7XG4gICAgaWYoaSA9PSA0KXtcbiAgICAgIHZhbHVlU3RyID0gJy4nK3ZhbHVlU3RyO1xuICAgIH1cbiAgfVxuICAvL2NjLmxvZyhOdW1iZXIodmFsdWVTdHIpKVxuICAvL2NjLmxvZyh2YWx1ZVN0cilcbiAgLy9jYy5sb2coJy0tLS0tLS0tLeeJueauiueJjOeul+WIhicpXG4gIHJldHVybiB2YWx1ZVN0cjtcbn07XG5cbktRQ2FyZC5fdHlwZVNjb3JlT2ZDYXJkcyA9IGZ1bmN0aW9uIChjYXJkcykge1xuICB2YXIgdHlwZVNjb3JlID0gMDtcbiAgaWYoS1FDYXJkLmNvbnRhaW5XdVRvbmcoY2FyZHMpKXtcbiAgICB0eXBlU2NvcmUgPSA5MDAwMDAwMDAwMDAwMDAwO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluVG9uZ0h1YVNodW4oY2FyZHMpKSB7XG4gICAgdHlwZVNjb3JlID0gODAwMDAwMDAwMDAwMDAwMDtcbiAgfSBlbHNlIGlmIChLUUNhcmQuY29udGFpblRpZVpoaShjYXJkcykpIHtcbiAgICB0eXBlU2NvcmUgPSA3MDAwMDAwMDAwMDAwMDAwO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluSHVMdShjYXJkcykpIHtcbiAgICB0eXBlU2NvcmUgPSA2MDAwMDAwMDAwMDAwMDAwO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluVG9uZ0h1YShjYXJkcykpIHtcbiAgICB0eXBlU2NvcmUgPSA1MDAwMDAwMDAwMDAwMDAwO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluU2h1blppKGNhcmRzKSkge1xuICAgIHR5cGVTY29yZSA9IDQwMDAwMDAwMDAwMDAwMDA7XG4gIH0gZWxzZSBpZiAoS1FDYXJkLmNvbnRhaW5TYW5UaWFvKGNhcmRzKSkge1xuICAgIHR5cGVTY29yZSA9IDMwMDAwMDAwMDAwMDAwMDA7XG4gIH0gZWxzZSBpZiAoS1FDYXJkLmNvbnRhaW5MaWFEdWkoY2FyZHMpKSB7XG4gICAgdHlwZVNjb3JlID0gMjAwMDAwMDAwMDAwMDAwMDtcbiAgfSBlbHNlIGlmIChLUUNhcmQuY29udGFpbkR1aVppKGNhcmRzKSkge1xuICAgIHR5cGVTY29yZSA9IDEwMDAwMDAwMDAwMDAwMDA7XG4gIH1cblxuICByZXR1cm4gdHlwZVNjb3JlO1xufTtcblxuLy8g5qC55o2u54mM5Z6L6L+b6KGM5o6S5bqPXG5LUUNhcmQuX3R5cGVDYXJkc1NvcnQgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgaWYgKChjYXJkcyA9PSBudWxsKSB8fCAoY2FyZHMubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGNhcmRzO1xuICB9XG4gIGlmKEtRQ2FyZC5jb250YWluV3VUb25nKGNhcmRzKSl7XG4gICAgcmV0dXJuIEtRQ2FyZC5fdHlwZUNhcmRzU29ydFd1dG9uZyhjYXJkcyk7XG4gIH0gZWxzZSBpZiAoS1FDYXJkLmNvbnRhaW5Ub25nSHVhU2h1bihjYXJkcykpIHtcbiAgICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0U2h1blppKGNhcmRzKTtcbiAgfSBlbHNlIGlmIChLUUNhcmQuY29udGFpblRpZVpoaShjYXJkcykpIHtcbiAgICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0VGllWmhpKGNhcmRzKTtcbiAgfSBlbHNlIGlmIChLUUNhcmQuY29udGFpbkh1THUoY2FyZHMpKSB7XG4gICAgcmV0dXJuIEtRQ2FyZC5fdHlwZUNhcmRzU29ydEh1THUoY2FyZHMpO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluVG9uZ0h1YShjYXJkcykpIHtcbiAgICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0VG9uZ0h1YShjYXJkcyk7XG4gIH0gZWxzZSBpZiAoS1FDYXJkLmNvbnRhaW5TaHVuWmkoY2FyZHMpKSB7XG4gICAgcmV0dXJuIEtRQ2FyZC5fdHlwZUNhcmRzU29ydFNodW5aaShjYXJkcyk7XG4gIH0gZWxzZSBpZiAoS1FDYXJkLmNvbnRhaW5TYW5UaWFvKGNhcmRzKSkge1xuICAgIHJldHVybiBLUUNhcmQuX3R5cGVDYXJkc1NvcnRTYW5UaWFvKGNhcmRzKTtcbiAgfSBlbHNlIGlmIChLUUNhcmQuY29udGFpbkxpYUR1aShjYXJkcykpIHtcbiAgICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0TGlhbmdEdWkoY2FyZHMpO1xuICB9IGVsc2UgaWYgKEtRQ2FyZC5jb250YWluRHVpWmkoY2FyZHMpKSB7XG4gICAgcmV0dXJuIEtRQ2FyZC5fdHlwZUNhcmRzU29ydER1aVppKGNhcmRzKTtcbiAgfVxuXG4gIHJldHVybiBjYXJkcy5zb3J0KEtRQ2FyZC5zb3J0QnlQb2ludCkucmV2ZXJzZSgpO1xufTtcblxuS1FDYXJkLl90eXBlQ2FyZHNTb3J0U2h1blppID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIHJldHVybiBjYXJkcy5zb3J0KEtRQ2FyZC5zb3J0QnlQb2ludCkucmV2ZXJzZSgpO1xufTtcblxuS1FDYXJkLl90eXBlQ2FyZHNTb3J0VGllWmhpID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIHJldHVybiBLUUNhcmQuX3R5cGVDYXJkc1NvcnRCeU51bWJlck9mUG9pbnRzKGNhcmRzKTtcbn07XG5cbi8qIyMjIyMqL1xuS1FDYXJkLl90eXBlQ2FyZHNTb3J0V3V0b25nID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIHJldHVybiBLUUNhcmQuX3R5cGVDYXJkc1NvcnRCeU51bWJlck9mUG9pbnRzKGNhcmRzKTtcbn07XG4vKiMjIyMjKi9cblxuS1FDYXJkLl90eXBlQ2FyZHNTb3J0SHVMdSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0QnlOdW1iZXJPZlBvaW50cyhjYXJkcyk7XG59O1xuXG5LUUNhcmQuX3R5cGVDYXJkc1NvcnRUb25nSHVhID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gIHJldHVybiBjYXJkcy5zb3J0KEtRQ2FyZC5zb3J0QnlQb2ludCkucmV2ZXJzZSgpO1xufTtcblxuS1FDYXJkLl90eXBlQ2FyZHNTb3J0U2FuVGlhbyA9IGZ1bmN0aW9uIChjYXJkcykge1xuICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0QnlOdW1iZXJPZlBvaW50cyhjYXJkcyk7XG59O1xuXG5LUUNhcmQuX3R5cGVDYXJkc1NvcnRMaWFuZ0R1aSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0QnlOdW1iZXJPZlBvaW50cyhjYXJkcyk7XG59O1xuXG5LUUNhcmQuX3R5cGVDYXJkc1NvcnREdWlaaSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICByZXR1cm4gS1FDYXJkLl90eXBlQ2FyZHNTb3J0QnlOdW1iZXJPZlBvaW50cyhjYXJkcyk7XG59O1xuXG5LUUNhcmQuX3R5cGVDYXJkc1NvcnRCeU51bWJlck9mUG9pbnRzID0gZnVuY3Rpb24oY2FyZHMpIHtcbiAgbGV0IHBvaW50SGVscGVyID0gbmV3IEtRQ2FyZFNjb3JldHNIZWxwZXIoY2FyZHMpO1xuICBsZXQgbmV3Q2FyZHMgPSBjYXJkcy5zbGljZSgpLnNvcnQoZnVuY3Rpb24oY2FyZDEsIGNhcmQyKSB7XG4gICAgbGV0IG51bWJlck9mQ2FyZDEgPSBwb2ludEhlbHBlci5wb2ludE51bWJlcnNbY2FyZDEucG9pbnRdO1xuICAgIGxldCBudW1iZXJPZkNhcmQyID0gcG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW2NhcmQyLnBvaW50XTtcblxuICAgIGlmIChudW1iZXJPZkNhcmQyICE9IG51bWJlck9mQ2FyZDEpIHtcbiAgICAgIHJldHVybiBudW1iZXJPZkNhcmQyIC0gbnVtYmVyT2ZDYXJkMTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FyZDIucG9pbnQgLSBjYXJkMS5wb2ludDtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NhcmRzO1xufTtcblxuS1FDYXJkLnRlc3RTY29yZSA9IGZ1bmN0aW9uKCkge1xuXG59OyIsIi8vIOeJjOeCueaVsOW4ruWKqeexu1xyXG4vLyDnlKjmnaXorqHnrpfkuIDkuKrniYzmlbDnu4TlhoXnmoTnm7jlkIzngrnmlbDnmoTniYznmoTlvKDmlbBcclxudmFyIEtRQ2FyZFNjb3JldHNIZWxwZXIgPSBmdW5jdGlvbiAoY2FyZHMpIHtcclxuICAgIHRoaXMucG9pbnROdW1iZXJzID0ge307XHJcbiAgICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkKSB7XHJcbiAgICAgICAgbGV0IHBvaW50ID0gY2FyZC5zY29yZXM7XHJcbiAgICAgICAgdmFyIG51bWJlciA9IHRoaXMucG9pbnROdW1iZXJzW3BvaW50XSB8fCAwO1xyXG4gICAgICAgIHRoaXMucG9pbnROdW1iZXJzW3BvaW50XSA9IG51bWJlciArIDE7XHJcbiAgICB9LmJpbmQodGhpcykpO1xyXG59O1xyXG5cclxuLy8g55u45ZCM54K55pWw54mM55qE5pyA5aSn5pWw6YePXHJcbktRQ2FyZFNjb3JldHNIZWxwZXIucHJvdG90eXBlLm1heE51bWJlciA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgcmVzdWx0ID0gMDtcclxuICBmb3IgKGxldCBwcm9wIGluIHRoaXMucG9pbnROdW1iZXJzKSB7XHJcbiAgICBsZXQgbnVtYmVyID0gdGhpcy5wb2ludE51bWJlcnNbcHJvcF07XHJcbiAgICAgIC8vaWYobnVtYmVyIDwgMjApe1xyXG4gICAgICAgICAgcmVzdWx0ID0gTWF0aC5tYXgobnVtYmVyLCByZXN1bHQpO1xyXG4gICAgICAvL31cclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gS1FDYXJkU2NvcmV0c0hlbHBlcjtcclxuXHJcbi8qdmFyIGNhcmRzID0gW1xyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjJ9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjJ9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjR9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjR9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjZ9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjZ9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjh9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjh9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjEwfSxcclxuICAgIHsnc3VpdCc6J3MnLG51bWJlcjoxMH0sXHJcbiAgICB7J3N1aXQnOidzJyxudW1iZXI6MTJ9LFxyXG4gICAgeydzdWl0JzoncycsbnVtYmVyOjEyfSxcclxuICAgIHsnc3VpdCc6J3MnLG51bWJlcjoxNH1cclxuXTtcclxudmFyIHRlc3QgPSBuZXcgS1FDYXJkUG9pbnRzU2FtZShjYXJkcyk7XHJcbmNvbnNvbGUubG9nKHRlc3QpOyovXHJcbiIsImNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xuY29uc3QgS1FDYXJkRmluZFR5cGVFeHRlbnNpb24gPSByZXF1aXJlKCdLUUNhcmRGaW5kVHlwZUV4dGVuc2lvbicpO1xuXG4vLyDniYzoh6rliqjpgInmi6nnmoTmianlsZVcblxuLyoqXG4gKiDoh6rliqjpgInmi6nniYzvvIznlLHlpKfliLDlsI9cbiAqXG4gKiBAcGFyYW0gIHtbS1FDYXJkXX0gb3JpZ2luQ2FyZHMgIOiiq+mAieaLqeeahOWOn+Wni+eJjOaVsOe7hFxuICpcbiAqIEByZXR1cm4ge1tLUUNhcmRdfVxuICovXG5LUUNhcmQuYXV0b1NlbGVjdENhcmRzID0gZnVuY3Rpb24ob3JpZ2luQ2FyZHMsIG1heExlbmd0aCkge1xuICAgIGlmIChvcmlnaW5DYXJkcy5sZW5ndGggPD0gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5DYXJkcztcbiAgICB9XG4gICAgb3JpZ2luQ2FyZHMuZm9yRWFjaChmdW5jdGlvbihjYXJkKXtcbiAgICAgICAgaWYoY2FyZC5zY29yZXMgPT0gMSl7XG4gICAgICAgICAgICBjYXJkLnNjb3JlcyA9IDE0O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGNhcmRzID0gb3JpZ2luQ2FyZHMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgIHJldHVybiBhLnNjb3JlcyAtIGIuc2NvcmVzO1xuICAgIH0pO1xuICAgIC8vY2MubG9nKGNhcmRzKVxuICAgIC8vY2MubG9nKG9yaWdpbkNhcmRzKVxuICAgIC8vY2MubG9nKCctLS0tLS0tLTI1JylcbiAgICAvL2NhcmRzLnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgICAvLyAgICByZXR1cm4gYS5zY29yZXMgLSBiLnNjb3JlcztcbiAgICAvL30pO1xuICAgIC8vb3JpZ2luQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0Eob3JpZ2luQ2FyZHMpO1xuXG4gICAgbGV0IGZpbmRGdW5jcyA9IFtcbiAgICAgICAgS1FDYXJkLmZpbmRXdVRvbmcsXG4gICAgICAgIEtRQ2FyZC5maW5kVG9uZ0h1YVNodW4sXG4gICAgICAgIEtRQ2FyZC5maW5kVGllWmhpLFxuICAgICAgICBLUUNhcmQuZmluZEh1THUsXG4gICAgICAgIEtRQ2FyZC5maW5kVG9uZ0h1YSxcbiAgICAgICAgS1FDYXJkLmZpbmRTaHVuWmksXG4gICAgICAgIEtRQ2FyZC5maW5kU2FuVGlhbyxcbiAgICAgICAgS1FDYXJkLmZpbmRMaWFEdWksXG4gICAgICAgIEtRQ2FyZC5maW5kRHVpWmlcbiAgICBdO1xuXG4gICAgbGV0IGluZGV4QXJyYXlzID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbmRGdW5jcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgZnVuYyA9IGZpbmRGdW5jc1tpXTtcbiAgICAgICAgaW5kZXhBcnJheXMgPSAoZnVuYy5iaW5kKEtRQ2FyZCkpKGNhcmRzKTtcbiAgICAgICAgaWYgKGluZGV4QXJyYXlzICYmIGluZGV4QXJyYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGluZGV4cyA9IFtdO1xuICAgIGlmIChpbmRleEFycmF5cyAmJiBpbmRleEFycmF5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIOaJvuWHuuWQjOexu+Wei+eahOeJjOmHjOeahOWIhuaVsOacgOWkp+eahOeJjFxuICAgICAgICB2YXIgbWF4U2NvcmUgPSAwO1xuICAgICAgICBpbmRleEFycmF5cy5mb3JFYWNoKHRlbXBJbmRleHMgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGVtcENhcmRzID0gdGVtcEluZGV4cy5tYXAoaW5kZXggPT4gY2FyZHNbaW5kZXhdKTtcbiAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gS1FDYXJkLnNjb3JlT2ZDYXJkcyh0ZW1wQ2FyZHMpO1xuICAgICAgICAgICAgaWYgKHNjb3JlID4gbWF4U2NvcmUpIHtcbiAgICAgICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgICAgIGluZGV4cyA9IHRlbXBJbmRleHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCB0YXJnZXRDYXJkcyA9IGluZGV4cy5tYXAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGNhcmRzW2luZGV4XTtcbiAgICB9KTtcblxuICAgIGlmICh0YXJnZXRDYXJkcy5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgY2FyZHMgPSBjYXJkcy5rcV9leGNsdWRlcyh0YXJnZXRDYXJkcyk7XG4gICAgICAgIHdoaWxlKHRhcmdldENhcmRzLmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICAgICAgdGFyZ2V0Q2FyZHMucHVzaChjYXJkcy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhcmdldENhcmRzLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICB0YXJnZXRDYXJkcyA9IHRhcmdldENhcmRzLnNsaWNlKG8sIG1heExlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENhcmRzO1xufTtcblxuS1FDYXJkLnRlc3RBdXRvU2VsZWN0ID0gZnVuY3Rpb24oY2FyZHMpIHtcblxufTsiLCJjb25zdCBLUUNhcmRDb2xvcnNIZWxwZXIgPSByZXF1aXJlKCdLUUNhcmRDb2xvcnNIZWxwZXInKTtcbmNvbnN0IEtRQ2FyZFBvaW50c0hlbHBlciA9IHJlcXVpcmUoJ0tRQ2FyZFBvaW50c0hlbHBlcicpO1xuY29uc3QgTnVtYmVyRXh0ZW5zaW9uID0gcmVxdWlyZSgnTnVtYmVyRXh0ZW5zaW9uJyk7XG5jb25zdCBHZXRDYXJkUG9pbnRzU2FtZUNvdW50ID0gcmVxdWlyZSgnR2V0Q2FyZFBvaW50c1NhbWVDb3VudCcpO1xuXG5jYyA9IGNjIHx8IHt9O1xuY2MuYXNzZXJ0ID0gY2MuYXNzZXJ0IHx8IGNvbnNvbGUuYXNzZXJ0IHx8IGZ1bmN0aW9uICgpIHt9O1xuY2MubG9nID0gY2MubG9nIHx8IGNvbnNvbGUubG9nIHx8IGZ1bmN0aW9uICgpIHt9O1xuY2MuZXJyb3IgPSBjYy5lcnJvciB8fCBjb25zb2xlLmVycm9yIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyDniYwgTW9kZWwg57G777yM5bCB6KOF5LqG6Iqx6Imy5ZKM54K55pWwXG4vLyDkvb/nlKjvvJpcbi8vIG5ldyBLUUNhcmQoMjIpO1xudmFyIEtRQ2FyZCA9IGZ1bmN0aW9uIChwb2ludCwgY29sb3IgLGluZGV4KSB7XG4gICAgdGhpcy5jb2xvciA9IG51bGw7XG4gICAgdGhpcy5wb2ludCA9IG51bGw7XG4gICAgdGhpcy5zaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLl9pbml0V2l0aENvbG9yQW5kUG9pbnQgPSBmdW5jdGlvbiAoY29sb3IsIHBvaW50KSB7XG4gICAgICAgIGlmIChjb2xvciA9PSAncycpIHsgY29sb3IgPSA0O31cbiAgICAgICAgaWYgKGNvbG9yID09ICdoJykgeyBjb2xvciA9IDM7fVxuICAgICAgICBpZiAoY29sb3IgPT0gJ2MnKSB7IGNvbG9yID0gMjt9XG4gICAgICAgIGlmIChjb2xvciA9PSAnZCcpIHsgY29sb3IgPSAxO31cblxuICAgICAgICB0aGlzLnBvaW50ID0gTnVtYmVyKHBvaW50KTtcbiAgICAgICAgdGhpcy5zY29yZXMgPSBOdW1iZXIocG9pbnQpO1xuICAgICAgICB0aGlzLmNvbG9yID0gTnVtYmVyKGNvbG9yKTtcbiAgICAgICAgdGhpcy5jb2xvclNjb3JlcyA9IE51bWJlcihjb2xvcik7XG5cbiAgICAgICAgY2MuYXNzZXJ0KHRoaXMucG9pbnQgPiAwKTtcbiAgICAgICAgY2MuYXNzZXJ0KHRoaXMuY29sb3IgPiAwKTtcbiAgICB9O1xuXG4gICAgdGhpcy5faW5pdFdpdGhOdW1iZXIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHRoaXMucG9pbnQgPSBNYXRoLmZsb29yKG51bWJlciAvIDEwKTtcbiAgICAgICAgdGhpcy5jb2xvciA9IG51bWJlciAlIDEwO1xuICAgICAgICBjYy5hc3NlcnQodGhpcy5wb2ludCA+IDApO1xuICAgICAgICBjYy5hc3NlcnQodGhpcy5jb2xvciA+IDApO1xuICAgIH07XG5cbiAgICB0aGlzLl9pbml0V2l0aE9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdC5wb2ludCkge1xuICAgICAgICAgICAgdGhpcy5faW5pdFdpdGhDb2xvckFuZFBvaW50KG9iamVjdC5jb2xvciwgb2JqZWN0LnBvaW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmplY3Quc3VpdCkge1xuICAgICAgICAgICAgdGhpcy5faW5pdFdpdGhDb2xvckFuZFBvaW50KG9iamVjdC5zdWl0LCBvYmplY3QubnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYXJkTmFtZSgpO1xuICAgIH07XG5cbiAgICB0aGlzLmNhcmROYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvciArIFwiX1wiICsgdGhpcy5wb2ludDtcbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0ID0gZnVuY3Rpb24gKG90aGVyQ2FyZCwgYXNjID0gZmFsc2UsIEFpc01heCA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5zb3J0KHRoaXMsIG90aGVyQ2FyZCwgYXNjLCBBaXNNYXgpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzRXF1YWwgPSBmdW5jdGlvbiAob3RoZXJDYXJkKSB7XG4gICAgICAgIGlmICghb3RoZXJDYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLnBvaW50ID09IG90aGVyQ2FyZC5wb2ludCkgJiYgKHRoaXMuY29sb3IgPT0gb3RoZXJDYXJkLmNvbG9yKVxuICAgICAgICAgICAgJiYgKHRoaXMuc2luZGV4ID09IG90aGVyQ2FyZC5zaW5kZXgpO1xuICAgIH07XG5cbiAgICBpZiAocG9pbnQgJiYgY29sb3IpIHtcbiAgICAgICAgdGhpcy5faW5pdFdpdGhDb2xvckFuZFBvaW50KGNvbG9yLCBwb2ludCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbnVtYmVyID0gTnVtYmVyKHBvaW50KTtcbiAgICBpZiAoIU51bWJlci5pc05hTihudW1iZXIpKSB7XG4gICAgICAgIHRoaXMuX2luaXRXaXRoTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mKHBvaW50KSA9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyDop6PmnpAgeHh4eGRfZCDlvaLlvI9cbiAgICAgICAgbGV0IGZvdW5kID0gcG9pbnQubWF0Y2goLyhcXC4pKlxcZF9cXGQrLyk7XG4gICAgICAgIGlmICgoZm91bmQgaW5zdGFuY2VvZiBBcnJheSkgJiYgZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZvdW5kWzBdO1xuICAgICAgICAgICAgbGV0IG51bWJlcnMgPSByZXN1bHQuc3BsaXQoJ18nKTtcblxuICAgICAgICAgICAgbGV0IGNvbG9yID0gTnVtYmVyKG51bWJlcnNbMF0pO1xuICAgICAgICAgICAgbGV0IHBvaW50ID0gTnVtYmVyKG51bWJlcnNbMV0pO1xuICAgICAgICAgICAgdGhpcy5faW5pdFdpdGhDb2xvckFuZFBvaW50KGNvbG9yLCBwb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihwb2ludCkgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhpcy5faW5pdFdpdGhPYmplY3QocG9pbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2MuZXJyb3IoXCLliJ3lp4vljJbplJnor6/vvJpcIiArIHBvaW50ICsgXCIgXCIgKyBjb2xvcik7XG59O1xuXG4vLyDovazmjaLmiJDmnI3liqHlmajnmoTniYwgbW9kZWxcbktRQ2FyZC5wcm90b3R5cGUudG9TZXJ2ZXJDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgICdzdWl0JzogdGhpcy5jb2xvcixcbiAgICAgICAgJ251bWJlcic6IHRoaXMucG9pbnQsXG4gICAgfTtcbn07XG5cbktRQ2FyZC5DT0xPUl9TUEFERSAgID0gNDtcbktRQ2FyZC5DT0xPUl9IRUFSVCAgID0gMztcbktRQ2FyZC5DT0xPUl9DTFVCICAgID0gMjtcbktRQ2FyZC5DT0xPUl9ESUFNT05EID0gMTtcblxubW9kdWxlLmV4cG9ydHMgPSBLUUNhcmQ7XG5cbktRQ2FyZC5jYXJkc0Zyb21BcnJheSA9IGZ1bmN0aW9uIChjYXJkTmFtZXMpIHtcbiAgICByZXR1cm4gY2FyZE5hbWVzLm1hcChmdW5jdGlvbiAoY2FyZE5hbWUsaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLUUNhcmQoY2FyZE5hbWUsbnVsbCxpbmRleCk7XG4gICAgfSk7XG59O1xuXG4vLyDlsIblpJrlvKDniYzovazmjaLmiJDmnI3liqHlmajnmoTlvaLlvI9cbktRQ2FyZC5jb252ZXJ0VG9TZXJ2ZXJDYXJkcyA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIHJldHVybiBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgcmV0dXJuIGNhcmQudG9TZXJ2ZXJDYXJkKCk7XG4gICAgfSk7XG59O1xuXG5LUUNhcmQuVFlQRSA9IHtcbiAgICBXdUxvbmc6IDAsXG4gICAgRHVpWmk6IDEsXG4gICAgTGlhbmdEdWk6IDIsXG4gICAgU2FuVGlhbzogMyxcbiAgICBTaHVuWmk6IDQsXG4gICAgVG9uZ0h1YTogNSxcbiAgICBIdUx1OiA2LFxuICAgIFRpZVpoaTogNyxcbiAgICBUb25nSHVhU2h1bjogOCxcbiAgICAvKiMjIyMjKi9cbiAgICBXdVRvbmc6OSxcbiAgICAvKiMjIyMjKi9cbiAgICBTYW5UYW9IdWE6IDEwLCAgLy8g54m55q6K54mMXG4gICAgU2FuU2h1blppOiAxMSxcbiAgICBMaXVEdWlCYW46IDEyLFxuXG4gICAgV3VEdWlTYW5UaWFvOjEzLFxuICAgIFNpVGFvU2FuVGlhbzogMTQsXG5cbiAgICBDb3VZaVNlOiAxNSxcbiAgICBTYW5GZW5UaWFuWGlhOiAxNixcbiAgICBTYW5Ub25nSHVhU2h1bjogMTcsXG4gICAgWWlUaWFvTG9uZzogMTgsXG4gICAgUWluZ0xvbmc6IDE5LFxufTtcblxuLy8g54mM57G75Z6L5ZCNXG5LUUNhcmQuY2FyZHNUeXBlTmFtZSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGxldCBuYW1lcyA9IFsn5LmM6b6ZJywgJ+WvueWtkCcsICfkuKTlr7knLCAn5LiJ5p2hJywgJ+mhuuWtkCcsICflkIzoirEnLCAn6JGr6IqmJywgJ+mTgeaUrycsICflkIzoirHpobonLCAn5LqU5ZCMJyxcbiAgICAgICAgJ+S4ieWQjOiKsScsICfkuInpobrlrZAnLCflha3lr7nljYonLCAn5LqU5a+55LiJ5p2hJywgJ+Wbm+Wll+S4ieadoScsXG4gICAgICAgICflh5HkuIDoibInLCfkuInliIblpKnkuIsnLCAn5LiJ5ZCM6Iqx6aG6JywgJ+S4gOadoem+mScsICfmuIXpvpknXTtcbiAgICBsZXQgdHlwZSA9IEtRQ2FyZC5jYXJkc1R5cGUoY2FyZHMpO1xuICAgIHJldHVybiBuYW1lc1t0eXBlXTtcbn07XG5cbi8vIOaJvuWHuueJjOeahOexu+Wei1xuS1FDYXJkLmNhcmRzVHlwZSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGlmIChLUUNhcmQuaXNRaW5nTG9uZyhjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLlFpbmdMb25nO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuaXNZaVRpYW9Mb25nKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuWWlUaWFvTG9uZztcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmlzU2FuVG9uZ0h1YVNodW4oY2FyZHMpKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuVFlQRS5TYW5Ub25nSHVhU2h1bjtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmlzU2FuRmVuVGlhblhpYShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLlNhbkZlblRpYW5YaWE7XG4gICAgfVxuXG4gICAgaWYgKEtRQ2FyZC5pc0xpdUR1aUJhbihjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLkxpdUR1aUJhbjtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmlzU2FuVG9uZ0h1YShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLlNhblRhb0h1YTtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmlzU2FuU2h1blppKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuU2FuU2h1blppO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuaXNTYW5TaHVuWmkxKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuU2FuU2h1blppO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuaXNDb3VZaVNlKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuQ291WWlTZTtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmlzV3VEdWlTYW5UaWFvKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuV3VEdWlTYW5UaWFvO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuaXNTaVRhb1NhblRpYW8oY2FyZHMpKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuVFlQRS5TaVRhb1NhblRpYW87XG4gICAgfVxuXG4gICAgLyojIyMjIyovXG4gICAgaWYgKEtRQ2FyZC5jb250YWluV3VUb25nKGNhcmRzLCA1KSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuV3VUb25nO1xuICAgIH1cblxuICAgIC8vaWYgKEtRQ2FyZC5jb250YWluV3VUb25nKGNhcmRzKSkge1xuICAgIC8vICAgIHJldHVybiBLUUNhcmQuVFlQRS5XdVRvbmc7XG4gICAgLy99XG4gICAgLy9cbiAgICAvL2lmIChLUUNhcmQuY29udGFpbld1VG9uZyhjYXJkcykpIHtcbiAgICAvLyAgICByZXR1cm4gS1FDYXJkLlRZUEUuV3VUb25nO1xuICAgIC8vfVxuICAgIC8qIyMjIyMqL1xuXG4gICAgaWYgKEtRQ2FyZC5jb250YWluVG9uZ0h1YVNodW4oY2FyZHMsIDUpKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuVFlQRS5Ub25nSHVhU2h1bjtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLmNvbnRhaW5UaWVaaGkoY2FyZHMpKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuVFlQRS5UaWVaaGk7XG4gICAgfVxuXG4gICAgaWYgKEtRQ2FyZC5jb250YWluSHVMdShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLkh1THU7XG4gICAgfVxuXG4gICAgaWYgKEtRQ2FyZC5jb250YWluVG9uZ0h1YShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLlRvbmdIdWE7XG4gICAgfVxuXG4gICAgaWYgKEtRQ2FyZC5jb250YWluU2h1blppKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuU2h1blppO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuY29udGFpblNhblRpYW8oY2FyZHMpKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuVFlQRS5TYW5UaWFvO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuY29udGFpbkxpYUR1aShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIEtRQ2FyZC5UWVBFLkxpYW5nRHVpO1xuICAgIH1cblxuICAgIGlmIChLUUNhcmQuY29udGFpbkR1aVppKGNhcmRzKSkge1xuICAgICAgICByZXR1cm4gS1FDYXJkLlRZUEUuRHVpWmk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEtRQ2FyZC5UWVBFLld1TG9uZztcbn07XG5cbi8vIOWIpOaWreaYr+WQpuaYr+WQjOiKsVxuS1FDYXJkLmlzVG9uZ0h1YSA9IGZ1bmN0aW9uKGNhcmRzLCBtaW5MZW5ndGggPSAzKSB7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGNvbG9ycyA9IGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICByZXR1cm4gY2FyZC5jb2xvcjtcbiAgICB9KTtcblxuICAgIGxldCBjb2xvciA9IGNvbG9yc1swXTtcbiAgICBmb3IgKGxldCBpbmRleCBpbiBjb2xvcnMpIHtcbiAgICAgICAgbGV0IGUgPSBjb2xvcnNbaW5kZXhdO1xuICAgICAgICBpZiAoZSAhPSBjb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLy8g5piv5ZCm5YyF5ZCr5ZCM6IqxXG5LUUNhcmQuY29udGFpblRvbmdIdWEgPSBmdW5jdGlvbiAoY2FyZHMsIG1pbkxlbmd0aCA9IDUpIHtcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEtRQ2FyZC5maW5kVG9uZ0h1YShjYXJkcykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vY2FyZHMgPSBBcnJheS5mcm9tKGNhcmRzKTtcbiAgICAvL2NhcmRzLnNvcnQoS1FDYXJkLnNvcnRCeUNvbG9yKTtcbiAgICAvL1xuICAgIC8vZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyBtaW5MZW5ndGgpIDw9IGNhcmRzLmxlbmd0aDsgKytzdGFydCkge1xuICAgIC8vICAgIGxldCBzdWJDYXJkcyA9IGNhcmRzLnNsaWNlKHN0YXJ0LCBzdGFydCArIG1pbkxlbmd0aCk7XG4gICAgLy8gICAgaWYgKEtRQ2FyZC5pc1RvbmdIdWEoc3ViQ2FyZHMsIG1pbkxlbmd0aCkpIHtcbiAgICAvLyAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgfVxuICAgIC8vfVxuXG4gICAgLy9yZXR1cm4gS1FDYXJkLmNvbnRhaW5Ub25nSHVhMjAoY2FyZHMpO1xufTtcbktRQ2FyZC5jb250YWluVG9uZ0h1YTIwID0gZnVuY3Rpb24gKGNhcmQpIHtcbiAgICBpZiAoY2FyZC5sZW5ndGggPCA1KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZCk7XG4gICAgdmFyIGNhcmRzID0gY2FyZC5rcV9leGNsdWRlcyhjYXJkMjApO1xuICAgIGNhcmRzLnNvcnQoS1FDYXJkLnNvcnRCeUNvbG9yKTtcblxuICAgIGZvcih2YXIgaiA9IDE7aiA8PSBjYXJkMjAubGVuZ3RoOysrail7XG4gICAgICAgIHZhciBudW0gPSA1IC0gajtcbiAgICAgICAgZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyBudW0pIDw9IGNhcmRzLmxlbmd0aDsgKytzdGFydCkge1xuICAgICAgICAgICAgdmFyIHN1YkNhcmRzID0gY2FyZHMuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbnVtKTtcbiAgICAgICAgICAgIGlmIChLUUNhcmQuaXNUb25nSHVhKHN1YkNhcmRzLCBudW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIOWIpOaWreaYr+WQpuaYr+mhuuWtkFxuS1FDYXJkLmlzU2h1blppID0gZnVuY3Rpb24oY2FyZHMsIG1pbkxlbmd0aCA9IDMpIHtcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoS1FDYXJkLl9pc1NodW5aaUFLUShjYXJkcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHBvaW50cyA9IGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICByZXR1cm4gY2FyZC5wb2ludDtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uIChuMSwgbjIpIHtcbiAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgfSk7XG5cbiAgICB2YXIgcG9pbnQgPSBwb2ludHNbMF07XG4gICAgZm9yICh2YXIgaW5kZXggaW4gcG9pbnRzKSB7XG4gICAgICAgIHZhciBlID0gcG9pbnRzW2luZGV4XTtcbiAgICAgICAgaWYgKGUgIT0gcG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvaW50ID0gcG9pbnQgKyAxO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuLy8g5Yik5pat5piv5ZCm5pivIEEgSyBRIEogMTAg6L+Z5Liq6aG65a2QXG5LUUNhcmQuX2lzU2h1blppQUtRID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGxlbmd0aCA9IGNhcmRzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBwb2ludDFzID0gWzFdO1xuICAgIGxldCBwb2ludDE0cyA9IFsxNF07XG4gICAgbGV0IHBvaW50SyA9IDEzO1xuXG4gICAgTnVtYmVyKGxlbmd0aCAtIDEpLmtxX3RpbWVzKGZ1bmN0aW9uKHRpbWVzKSB7XG4gICAgICAgIHBvaW50MXMucHVzaChwb2ludEsgLSB0aW1lcyk7XG4gICAgICAgIHBvaW50MTRzLnB1c2gocG9pbnRLIC0gdGltZXMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEtRQ2FyZC5faXNDYXJkc0NvbnRhaW5Qb2ludHMoY2FyZHMsIHBvaW50MXMpIHx8IEtRQ2FyZC5faXNDYXJkc0NvbnRhaW5Qb2ludHMoY2FyZHMsIHBvaW50MTRzKTtcbn07XG5cbi8vIGNhcmRzIOS4reaYr+WQpuWMheWQqyBwb2ludHMg6L+Z5Lqb54K55pWwXG5cbktRQ2FyZC5faXNDYXJkc0NvbnRhaW5Qb2ludHMgPSBmdW5jdGlvbihjYXJkcywgcG9pbnRzKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHBvaW50cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgbGV0IHBvaW50ID0gcG9pbnRzW2luZGV4XTtcbiAgICAgICAgbGV0IHBvaW50Q2FyZEluZGV4ID0gY2FyZHMuZmluZEluZGV4KGZ1bmN0aW9uKGNhcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXJkLnBvaW50ID09IHBvaW50O1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocG9pbnRDYXJkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5LUUNhcmQuY29udGFpbjIwID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgaWYodHlwZW9mKGNhcmRzWzBdLnBvaW50KSA9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIGNhcmRzID0gS1FDYXJkLmNhcmRzRnJvbUFycmF5KGNhcmRzKTtcbiAgICB9XG4gICAgdmFyIG5ld0NhcmQgPSBjYXJkcy5maWx0ZXIoZnVuY3Rpb24oY2FyZCl7Ly/ph43mlrDotYvlgLxjYXJkc1xuICAgICAgICBpZihjYXJkLnBvaW50ID49IDIwKXtcbiAgICAgICAgICAgIHJldHVybiBjYXJkO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0NhcmQgfHwgW107XG59O1xuLy8g5piv5ZCm5YyF5ZCr6aG65a2QXG5LUUNhcmQuY29udGFpblNodW5aaSA9IGZ1bmN0aW9uIChjYXJkcywgbWluTGVuZ3RoID0gNSkge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCBtaW5MZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoS1FDYXJkLmZpbmRTaHVuWmkoY2FyZHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgICAvL2xldCB1bmlxdWVDYXJkcyA9IGNhcmRzLnVuaXF1ZShmdW5jdGlvbihjYXJkMSwgY2FyZDIpIHtcbiAgICAvLyAgICByZXR1cm4gY2FyZDEucG9pbnQgPT0gY2FyZDIucG9pbnQ7XG4gICAgLy99KTtcbiAgICAvL3VuaXF1ZUNhcmRzLnNvcnQoS1FDYXJkLnNvcnRCeVBvaW50KTtcbiAgICAvL1xuICAgIC8vbGV0IG1pblBvaW50Q2FyZCA9IHVuaXF1ZUNhcmRzWzBdO1xuICAgIC8vaWYgKG1pblBvaW50Q2FyZC5wb2ludCA9PSAxKSB7XG4gICAgLy8gICAgbGV0IEFQbHVzQ2FyZCA9IG5ldyBLUUNhcmQobWluUG9pbnRDYXJkKTtcbiAgICAvLyAgICBBUGx1c0NhcmQucG9pbnQgPSAxNDtcbiAgICAvLyAgICB1bmlxdWVDYXJkcy5wdXNoKEFQbHVzQ2FyZCk7XG4gICAgLy99XG4gICAgLy9cbiAgICAvL2ZvciAodmFyIHN0YXJ0ID0gMDsgKHN0YXJ0ICsgbWluTGVuZ3RoKSA8PSB1bmlxdWVDYXJkcy5sZW5ndGg7ICsrc3RhcnQpIHtcbiAgICAvLyAgICBsZXQgc3ViQ2FyZHMgPSB1bmlxdWVDYXJkcy5zbGljZShzdGFydCwgc3RhcnQgKyBtaW5MZW5ndGgpO1xuICAgIC8vICAgIGlmIChLUUNhcmQuaXNTaHVuWmkoc3ViQ2FyZHMsIG1pbkxlbmd0aCkpIHtcbiAgICAvLyAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgfVxuICAgIC8vfVxuICAgIC8vXG4gICAgLy9yZXR1cm4gS1FDYXJkLmNvbnRhaW5TaHVuWmkyMChjYXJkcyk7XG59O1xuLypLUUNhcmQuY29udGFpblNodW5aaTIwID0gZnVuY3Rpb24gKGNhcmQpIHtcbiAgICBpZiAoY2FyZC5sZW5ndGggPCA1KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZCk7XG4gICAgdmFyIGNhcmRzID0gY2FyZC5rcV9leGNsdWRlcyhjYXJkMjApO1xuICAgIC8vIOWFiOagueaNrueCueaVsOWOu+mHjVxuICAgIHZhciBuZXdBcnIgPSBbXTtcbiAgICB2YXIgbmV3QXJycyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG5ld0FycnMuaW5kZXhPZihjYXJkc1tpXS5wb2ludCkgPT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0Fyci5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgICAgIG5ld0FycnMucHVzaChjYXJkc1tpXS5wb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9uZXdBcnIuZm9yRWFjaChmdW5jdGlvbihjYXJkKXtcbiAgICAvLyAgICBpZihjYXJkLnNjb3JlcyA9PSAxNCl7XG4gICAgLy8gICAgICAgIGNhcmQuc2NvcmVzID0gMTtcbiAgICAvLyAgICB9XG4gICAgLy99KVxuICAgIG5ld0Fyci5zb3J0KGZ1bmN0aW9uIChuMSwgbjIpIHtcbiAgICAgICAgcmV0dXJuIG4xLnBvaW50IC0gbjIucG9pbnQ7XG4gICAgfSk7XG4gICAgZm9yKHZhciBqID0gMTtqIDw9IGNhcmQyMC5sZW5ndGg7KytqKXtcbiAgICAgICAgdmFyIG51bSA9IDUgLSBqO1xuICAgICAgICBmb3IgKHZhciBzdGFydCA9IDA7IChzdGFydCArIG51bSkgPD0gbmV3QXJyLmxlbmd0aDsgKytzdGFydCkge1xuICAgICAgICAgICAgdmFyIHN1YkNhcmRzID0gbmV3QXJyLnNsaWNlKHN0YXJ0LCBzdGFydCArIG51bSk7XG4gICAgICAgICAgICB2YXIgYm9vbCA9IHBhcnNlSW50KHN1YkNhcmRzW251bS0xXVsnc2NvcmVzJ10pIC0gcGFyc2VJbnQoc3ViQ2FyZHNbMF1bJ3Njb3JlcyddKSA8IDU7XG4gICAgICAgICAgICBpZihib29sKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyDnlLHkuo7ngrnmlbDmmK/llK/kuIDkuJTljYfluo/vvIzlj6rpnIDopoHkvp3mrKHpgY3ljobliKTmlq3mmK/lkKbmmK/pobrlrZDljbPlj69cbiAgICBsZXQgY29udmVydGVkQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0ExKGNhcmQpO1xuICAgIGlmIChjYXJkID09PSBjb252ZXJ0ZWRDYXJkcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBLUUNhcmQuY29udGFpblNodW5aaTIwKGNvbnZlcnRlZENhcmRzKTtcbn07Ki9cbi8vIOaYr+WQpuaYr+WQjOiKsemhulxuS1FDYXJkLmlzVG9uZ0h1YVNodW4gPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICByZXR1cm4gS1FDYXJkLmlzVG9uZ0h1YShjYXJkcykgJiYgS1FDYXJkLmlzU2h1blppKGNhcmRzKTtcbn07XG5cbi8vIOaYr+WQpuWMheWQq+acieWQjOiKsemhulxuS1FDYXJkLmNvbnRhaW5Ub25nSHVhU2h1biA9IGZ1bmN0aW9uIChjYXJkcywgbWluTGVuZ3RoID0gNSkge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCBtaW5MZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoS1FDYXJkLmZpbmRUb25nSHVhU2h1bihjYXJkcykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vdmFyIHNhblNodW5aaSA9IEtRQ2FyZC5zYW5TaHVuWmkxKGNhcmRzLG1pbkxlbmd0aClbMF07XG4gICAgLy9pZihzYW5TaHVuWmkgPT0gbnVsbCl7XG4gICAgLy8gICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vfVxuICAgIC8vdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIC8vZm9yKHZhciBpPTA7aTxzYW5TaHVuWmkubGVuZ3RoO2krKykge1xuICAgIC8vICAgIHZhciBzID0gc2FuU2h1blppW2ldO1xuICAgIC8vICAgIGlmIChLUUNhcmQuaXNUb25nSHVhU2h1bihzLCBtaW5MZW5ndGgpKSB7XG4gICAgLy8gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vICAgIH1cbiAgICAvL31cbiAgICAvL3JldHVybiBLUUNhcmQuY29udGFpblRvbmdIdWFTaHVuMShjYXJkcyk7XG5cbn07XG4vKktRQ2FyZC5jb250YWluVG9uZ0h1YVNodW4xID0gZnVuY3Rpb24gKGNhcmRzLCBtaW5MZW5ndGggPSA1KSB7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB0ZW1wQ2FyZHMgPSBBcnJheS5mcm9tKGNhcmRzKS5zb3J0KEtRQ2FyZC5zb3J0QnlDb2xvcik7XG4gICAgZm9yICh2YXIgc3RhcnQgPSAwOyAoc3RhcnQgKyBtaW5MZW5ndGgpIDw9IHRlbXBDYXJkcy5sZW5ndGg7ICsrc3RhcnQpIHtcbiAgICAgICAgbGV0IHN1YkNhcmRzID0gdGVtcENhcmRzLnNsaWNlKHN0YXJ0LCBzdGFydCArIG1pbkxlbmd0aCk7XG4gICAgICAgIGlmIChLUUNhcmQuaXNUb25nSHVhU2h1bihzdWJDYXJkcywgbWluTGVuZ3RoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udmVydGVkQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0ExKGNhcmRzKTtcbiAgICBpZiAoY2FyZHMgPT09IGNvbnZlcnRlZENhcmRzKSB7XG4gICAgICAgIHJldHVybiBLUUNhcmQuY29udGFpblRvbmdIdWFTaHVuMjAoY2FyZHMpO1xuICAgIH1cbiAgICByZXR1cm4gS1FDYXJkLmNvbnRhaW5Ub25nSHVhU2h1bjEoY29udmVydGVkQ2FyZHMpO1xuICAgIC8vcmV0dXJuIGZhbHNlO1xufTtcbktRQ2FyZC5jb250YWluVG9uZ0h1YVNodW4yMCA9IGZ1bmN0aW9uIChjYXJkLCBtaW5MZW5ndGggPSA1KSB7XG4gICAgaWYgKGNhcmQubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZCkgfHwgW107XG4gICAgdmFyIGNhcmRzID0gY2FyZC5rcV9leGNsdWRlcyhjYXJkMjApO1xuXG4gICAgY2FyZHMgPSBBcnJheS5mcm9tKGNhcmRzKTtcbiAgICB2YXIgY29sb3JTID0gW107IC8v6buR5qGDXG4gICAgdmFyIGNvbG9ySCA9IFtdOyAvL+e6ouW/g1xuICAgIHZhciBjb2xvckMgPSBbXTsgLy/mooXoirFcbiAgICB2YXIgY29sb3JEID0gW107IC8v5pa55Z2XXG4gICAgdmFyIHBvaW50UyA9IFtdOyAvL+m7keahg1xuICAgIHZhciBwb2ludEggPSBbXTsgLy/nuqLlv4NcbiAgICB2YXIgcG9pbnRDID0gW107IC8v5qKF6IqxXG4gICAgdmFyIHBvaW50RCA9IFtdOyAvL+aWueWdl1xuICAgIGZvcih2YXIgaT0wO2k8Y2FyZHMubGVuZ3RoO2krKyl7XG4gICAgICAgIGlmKGNhcmRzW2ldLmNvbG9yID09ICc0Jyl7XG4gICAgICAgICAgICBpZihwb2ludFMuaW5kZXhPZihjYXJkc1tpXS5wb2ludCkgPT0gLTEpe1xuICAgICAgICAgICAgICAgIHBvaW50Uy5wdXNoKGNhcmRzW2ldLnBvaW50KTtcbiAgICAgICAgICAgICAgICBjb2xvclMucHVzaChjYXJkc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfWVsc2UgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzMnKXtcbiAgICAgICAgICAgIGlmKHBvaW50SC5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgICAgICAgICAgcG9pbnRILnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgICAgICAgICAgICAgIGNvbG9ySC5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2UgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzInKXtcbiAgICAgICAgICAgIGlmKHBvaW50Qy5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgICAgICAgICAgcG9pbnRDLnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgICAgICAgICAgICAgIGNvbG9yQy5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2UgaWYoY2FyZHNbaV0uY29sb3IgPT0gJzEnKXtcbiAgICAgICAgICAgIGlmKHBvaW50RC5pbmRleE9mKGNhcmRzW2ldLnBvaW50KSA9PSAtMSl7XG4gICAgICAgICAgICAgICAgcG9pbnRELnB1c2goY2FyZHNbaV0ucG9pbnQpO1xuICAgICAgICAgICAgICAgIGNvbG9yRC5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb2xvciA9IFtjb2xvclMsY29sb3JILGNvbG9yQyxjb2xvckRdO1xuICAgIHZhciBjb2xvclN1bSA9IFtdOyAgICAvL+aAu+WFseacieWHoOenjeiKseiJsiBbNSwzLDAuLi4uXVxuICAgIGZvcih2YXIgaT0wO2k8Y29sb3IubGVuZ3RoO2krKyl7XG4gICAgICAgIGlmKGNvbG9yW2ldLmxlbmd0aCA+PSBwYXJzZUludCg1IC0gY2FyZDIwLmxlbmd0aCkpe1xuICAgICAgICAgICAgLy9jb2xvcltpXS5mb3JFYWNoKGZ1bmN0aW9uKGNhKXtcbiAgICAgICAgICAgIC8vICAgIGlmKGNhLnNjb3JlcyA9PSAxNCl7XG4gICAgICAgICAgICAvLyAgICAgICAgY2Euc2NvcmVzID0gMTtcbiAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgIC8vfSlcbiAgICAgICAgICAgIGNvbG9yW2ldLnNvcnQoZnVuY3Rpb24oYTEsYTIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBhMSAtIGEyO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbG9yU3VtLnB1c2goY29sb3JbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yKHZhciBpPTA7aTxjb2xvclN1bS5sZW5ndGg7aSsrKSB7XG4gICAgICAgIHZhciBzID0gY29sb3JTdW1baV1cbiAgICAgICAgZm9yKHZhciBqID0gMTtqIDw9IGNhcmQyMC5sZW5ndGg7KytqKXtcbiAgICAgICAgICAgIHZhciBudW0gPSA1IC0gajtcbiAgICAgICAgICAgIGZvciAodmFyIHN0YXJ0ID0gMDsgKHN0YXJ0ICsgbnVtKSA8PSBzLmxlbmd0aDsgKytzdGFydCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJDYXJkcyA9IHMuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbnVtKTtcbiAgICAgICAgICAgICAgICB2YXIgYm9vbCA9IHBhcnNlSW50KHN1YkNhcmRzW251bS0xXVsnc2NvcmVzJ10pIC0gcGFyc2VJbnQoc3ViQ2FyZHNbMF1bJ3Njb3JlcyddKSA8IDU7XG4gICAgICAgICAgICAgICAgaWYoYm9vbCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBsZXQgY29udmVydGVkQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0ExKGNhcmQpO1xuICAgIGlmIChjYXJkID09PSBjb252ZXJ0ZWRDYXJkcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBLUUNhcmQuY29udGFpblRvbmdIdWFTaHVuMjAoY29udmVydGVkQ2FyZHMpO1xufTsqL1xuXG5cbi8vIOaYr+WQpuaYr+a4hem+mVxuS1FDYXJkLmlzUWluZ0xvbmcgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMTM7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkcyk7XG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHZhciBjb2xvclMgPSBbXTsgLy/pu5HmoYNcbiAgICB2YXIgY29sb3JIID0gW107IC8v57qi5b+DXG4gICAgdmFyIGNvbG9yQyA9IFtdOyAvL+aiheiKsVxuICAgIHZhciBjb2xvckQgPSBbXTsgLy/mlrnlnZdcbiAgICBmb3IodmFyIGk9MDtpPGNhcmRzLmxlbmd0aDtpKyspe1xuICAgICAgICBpZihjYXJkc1tpXS5zdWl0ID09ICdzJyl7XG4gICAgICAgICAgICBjb2xvclMucHVzaChjYXJkc1tpXSk7XG4gICAgICAgIH1lbHNlIGlmKGNhcmRzW2ldLnN1aXQgPT0gJ2gnKXtcbiAgICAgICAgICAgIGNvbG9ySC5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgfWVsc2UgaWYoY2FyZHNbaV0uc3VpdCA9PSAnYycpe1xuICAgICAgICAgICAgY29sb3JDLnB1c2goY2FyZHNbaV0pO1xuICAgICAgICB9ZWxzZSBpZihjYXJkc1tpXS5zdWl0ID09ICdkJyl7XG4gICAgICAgICAgICBjb2xvckQucHVzaChjYXJkc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxzID0gY29sb3JTLmxlbmd0aDsgIC8v6buR5qGD5Liq5pWwXG4gICAgdmFyIGxoID0gY29sb3JILmxlbmd0aDsgIC8v57qi5qGD5Liq5pWwXG4gICAgdmFyIGxjID0gY29sb3JDLmxlbmd0aDsgIC8v5qKF6Iqx5Liq5pWwXG4gICAgdmFyIGxkID0gY29sb3JELmxlbmd0aDsgIC8v5pa55Z2X5Liq5pWwXG4gICAgdmFyIGNvbG9yID0gW2xzLGxoLGxjLGxkXTtcbiAgICB2YXIgY29sb3JTdW0gPSBbXTsgICAgLy/mgLvlhbHmnInlh6Dnp43oirHoibIgWzUsMywwLi4uLl1cbiAgICBmb3IodmFyIGk9MDtpPGNvbG9yLmxlbmd0aDtpKyspe1xuICAgICAgICBpZihjb2xvcltpXSAhPSAwKXtcbiAgICAgICAgICAgIGNvbG9yU3VtLnB1c2goY29sb3JbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmKGNvbG9yU3VtLmxlbmd0aCA9PSAxKXtcbiAgICAgICAgaWYoY29sb3JTdW1bMF0gPT0gMTMpe1xuICAgICAgICAgICAgcmV0dXJuIEtRQ2FyZC5pc1lpVGlhb0xvbmcoY2FyZHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vcmV0dXJuIEtRQ2FyZC5pc1RvbmdIdWFTaHVuKGNhcmRzKTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyDmmK/lkKbmmK/kuIDmnaHpvplcbktRQ2FyZC5pc0xvbmcgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMTM7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBLUUNhcmQuaXNTaHVuWmkoY2FyZHMpO1xufTtcblxuLyojIyMjIyovXG4vKuaYr+WQpuS4gOadoem+mSovXG5LUUNhcmQuaXNZaVRpYW9Mb25nID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgLy9jYXJkczp7bnVtYmVyOjF+MTMgLCdzdWl0JzonaCcuLi59XG4gICAgdmFyIGxlbmd0aCA9IDEzO1xuICAgIGlmKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkcyk7XG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZih0eXBlb2YoY2FyZHNbMF0ubnVtYmVyKSA9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIGNhcmRzID0gS1FDYXJkLmNvbnZlcnRUb1NlcnZlckNhcmRzKGNhcmRzKTtcbiAgICB9XG4gICAgdmFyIG51bWJlciA9IGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICByZXR1cm4gY2FyZC5udW1iZXI7XG4gICAgfSkuc29ydChmdW5jdGlvbiAobjEsIG4yKSB7XG4gICAgICAgIHJldHVybiBuMSAtIG4yO1xuICAgIH0pO1xuICAgIGZvcih2YXIgaT0wO2k8Y2FyZHMubGVuZ3RoLTE7aSsrKSB7XG4gICAgICAgIGlmKG51bWJlcltpXSAhPSBudW1iZXJbaSsxXSAtIDEpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qIyMjIyMqL1xuLyrmmK/lkKbkuInlkIzoirEqL1xuS1FDYXJkLmlzU2FuVG9uZ0h1YSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIHZhciBsZW5ndGggPSAxMztcbiAgICBpZihjYXJkcy5sZW5ndGggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZHMpO1xuICAgIGlmKGNhcmQyMC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZihjYXJkc1swXS5zdWl0KSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNhcmRzID0gS1FDYXJkLl9jb252ZXJ0Q2FyZHNUb0NhcmROYW1lcyhjYXJkcyk7XG4gICAgfVxuICAgIHZhciBjb2xvclMgPSBbXTsgLy/pu5HmoYNcbiAgICB2YXIgY29sb3JIID0gW107IC8v57qi5b+DXG4gICAgdmFyIGNvbG9yQyA9IFtdOyAvL+aiheiKsVxuICAgIHZhciBjb2xvckQgPSBbXTsgLy/mlrnlnZdcbiAgICBmb3IodmFyIGk9MDtpPGNhcmRzLmxlbmd0aDtpKyspe1xuICAgICAgICBpZihjYXJkc1tpXS5zdWl0ID09ICdzJyl7XG4gICAgICAgICAgICBjb2xvclMucHVzaChjYXJkc1tpXSk7XG4gICAgICAgIH1lbHNlIGlmKGNhcmRzW2ldLnN1aXQgPT0gJ2gnKXtcbiAgICAgICAgICAgIGNvbG9ySC5wdXNoKGNhcmRzW2ldKTtcbiAgICAgICAgfWVsc2UgaWYoY2FyZHNbaV0uc3VpdCA9PSAnYycpe1xuICAgICAgICAgICAgY29sb3JDLnB1c2goY2FyZHNbaV0pO1xuICAgICAgICB9ZWxzZSBpZihjYXJkc1tpXS5zdWl0ID09ICdkJyl7XG4gICAgICAgICAgICBjb2xvckQucHVzaChjYXJkc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxzID0gY29sb3JTLmxlbmd0aDsgIC8v6buR5qGD5Liq5pWwXG4gICAgdmFyIGxoID0gY29sb3JILmxlbmd0aDsgIC8v57qi5qGD5Liq5pWwXG4gICAgdmFyIGxjID0gY29sb3JDLmxlbmd0aDsgIC8v5qKF6Iqx5Liq5pWwXG4gICAgdmFyIGxkID0gY29sb3JELmxlbmd0aDsgIC8v5pa55Z2X5Liq5pWwXG4gICAgdmFyIGNvbG9yID0gW2xzLGxoLGxjLGxkXTtcbiAgICB2YXIgY29sb3JTdW0gPSBbXTsgICAgLy/mgLvlhbHmnInlh6Dnp43oirHoibIgWzUsMywwLi4uLl1cbiAgICBmb3IodmFyIGk9MDtpPGNvbG9yLmxlbmd0aDtpKyspe1xuICAgICAgICBpZihjb2xvcltpXSAhPSAwKXtcbiAgICAgICAgICAgIGNvbG9yU3VtLnB1c2goY29sb3JbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy/lpoLmnpzniYzkuK3ljIXlkKvlm5vnp43oirHoibLlsLHkuI3lj6/og73mmK/kuInlkIzoirFcbiAgICBpZihjb2xvclN1bS5sZW5ndGggPT0gNCl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvL+S4ieenjeiKseiJslxuICAgIGlmKGNvbG9yU3VtLmxlbmd0aCA9PSAzKXtcbiAgICAgICAgZm9yKHZhciBpPTA7aTxjb2xvclN1bS5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBpZiAoY29sb3JTdW1baV0gIT0gNSAmJiBjb2xvclN1bVtpXSAhPSAzKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8v5Lik56eN6Iqx6ImyXG4gICAgZWxzZSBpZihjb2xvclN1bS5sZW5ndGggPT0gMil7XG4gICAgICAgIGZvcih2YXIgaT0wO2k8Y29sb3JTdW0ubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgaWYgKChjb2xvclN1bVtpXSAhPSAxMCAmJiBjb2xvclN1bVtpXSAhPSAzKSAmJiAoY29sb3JTdW1baV0gIT0gOCAmJiBjb2xvclN1bVtpXSAhPSA1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvL+S4gOenjeiKseiJslxuICAgIGVsc2UgaWYoY29sb3JTdW0ubGVuZ3RoID09IDEpe1xuICAgICAgICBpZihjb2xvclN1bVswXSA9PSAxMyl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKuaYr+WQpuWHkeS4gOiJsiovXG5LUUNhcmQuaXNDb3VZaVNlID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgdmFyIGxlbmd0aCA9IDEzO1xuICAgIGlmKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkcyk7XG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZih0eXBlb2YoY2FyZHNbMF0uc3VpdCkgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBjYXJkcyA9IEtRQ2FyZC5fY29udmVydENhcmRzVG9DYXJkTmFtZXMoY2FyZHMpO1xuICAgIH1cbiAgICB2YXIgY29sb3JTID0gW107IC8v6buR5qGDXG4gICAgdmFyIGNvbG9ySCA9IFtdOyAvL+e6ouW/g1xuICAgIGZvcih2YXIgaT0wO2k8Y2FyZHMubGVuZ3RoO2krKyl7XG4gICAgICAgIGlmKGNhcmRzW2ldLnN1aXQgPT0gJ3MnIHx8IGNhcmRzW2ldLnN1aXQgPT0gJ2MnKXtcbiAgICAgICAgICAgIGNvbG9yUy5wdXNoKGNhcmRzW2ldKTsvL+WFqOm7kVxuICAgICAgICB9ZWxzZSBpZihjYXJkc1tpXS5zdWl0ID09ICdoJyB8fCBjYXJkc1tpXS5zdWl0ID09ICdkJyl7XG4gICAgICAgICAgICBjb2xvckgucHVzaChjYXJkc1tpXSk7Ly/lhajnuqJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8v5aaC5p6c54mM5Lit5YyF5ZCr5Zub56eN6Iqx6Imy5bCx5LiN5Y+v6IO95piv5LiJ5ZCM6IqxXG4gICAgaWYoY29sb3JTLmxlbmd0aCA9PSAxMyB8fCBjb2xvckgubGVuZ3RoID09IDEzKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vZWxzZSBpZihjb2xvckgubGVuZ3RoID09IDEzKXtcbiAgICAvLyAgICByZXR1cm4gdHJ1ZTtcbiAgICAvL31cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLyojIyMjIyovXG4vLyDmmK/lkKbmmK/lha3lr7nljYpcbktRQ2FyZC5pc0xpdUR1aUJhbiA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGxldCBsZW5ndGggPSAxMjtcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgZHVpWmlMZW5ndGggPSAyO1xuICAgIC8v6K6h566X5LiA5Liq54mM5pWw57uE5YaF55qE55u45ZCM54K55pWw55qE54mM55qE5byg5pWwXG4gICAgbGV0IGNhcmROdW1iZXJzID0gbmV3IEdldENhcmRQb2ludHNTYW1lQ291bnQoY2FyZHMpO1xuICAgIGxldCBudW1iZXJPZkR1aVppID0gMDtcbiAgICBsZXQgbnVtYmVyT2ZZaSA9IDA7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBjYXJkTnVtYmVycykge1xuICAgICAgICBsZXQgdmFsdWUgPSBjYXJkTnVtYmVyc1twcm9wXTtcbiAgICAgICAgaWYgKHZhbHVlID09IGR1aVppTGVuZ3RoKSB7XG4gICAgICAgICAgICBudW1iZXJPZkR1aVppID0gbnVtYmVyT2ZEdWlaaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPj0gNCkge1xuICAgICAgICAgICAgbnVtYmVyT2ZEdWlaaSA9IG51bWJlck9mRHVpWmkgKyAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09IDEpIHtcbiAgICAgICAgICAgIG51bWJlck9mWWkgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtYmVyT2ZEdWlaaSA9PSA2O1xufTtcblxuS1FDYXJkLmlzV3VEdWlTYW5UaWFvID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGxlbmd0aCA9IDEzO1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBkdWlaaUxlbmd0aCA9IDI7XG4gICAgbGV0IHNhblRpYW9MZW5ndGggPSAzO1xuICAgIC8v6K6h566X5LiA5Liq54mM5pWw57uE5YaF55qE55u45ZCM54K55pWw55qE54mM55qE5byg5pWwXG4gICAgbGV0IGNhcmROdW1iZXJzID0gbmV3IEdldENhcmRQb2ludHNTYW1lQ291bnQoY2FyZHMpO1xuICAgIGxldCBudW1iZXJPZkR1aVppID0gMDtcbiAgICBsZXQgbnVtYmVyT2ZTYW5UaWFvID0gMDtcbiAgICBmb3IgKGxldCBwcm9wIGluIGNhcmROdW1iZXJzKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGNhcmROdW1iZXJzW3Byb3BdO1xuICAgICAgICBpZiAodmFsdWUgPT0gZHVpWmlMZW5ndGgpIHtcbiAgICAgICAgICAgIG51bWJlck9mRHVpWmkgPSBudW1iZXJPZkR1aVppICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBzYW5UaWFvTGVuZ3RoKSB7XG4gICAgICAgICAgICBudW1iZXJPZlNhblRpYW8gPSBudW1iZXJPZlNhblRpYW8gKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID49IDQpIHtcbiAgICAgICAgICAgIG51bWJlck9mRHVpWmkgPSBudW1iZXJPZkR1aVppICsgMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtYmVyT2ZEdWlaaSA9PSA1ICYmIG51bWJlck9mU2FuVGlhbyA9PSAxO1xufTtcbi8qIyMjIyMqL1xuS1FDYXJkLmlzU2FuU2h1blppMSA9IGZ1bmN0aW9uKGNhcmRzKXtcbiAgICBpZihjYXJkcy5sZW5ndGggIT0gMTMpe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy/lj5blh7rniYznmoTngrnmlbBcbiAgICBpZih0eXBlb2YoY2FyZHNbMF0uc3VpdCkgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBjYXJkcyA9IEtRQ2FyZC5fY29udmVydENhcmRzVG9DYXJkTmFtZXMoY2FyZHMpO1xuICAgIH1cbiAgICAvL3ZhciBjYXJkMjAgPSBLUUNhcmQuY29udGFpbjIwKGNhcmRzKTtcbiAgICAvL2lmKGNhcmQyMC5sZW5ndGggPiAwKSB7XG4gICAgLy8gICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vfVxuICAgIHZhciBudW1iZXIgPSBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgcmV0dXJuIGNhcmQubnVtYmVyO1xuICAgIH0pO1xuICAgIC8v5o6S5bqPXG4gICAgbnVtYmVyLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICByZXR1cm4gbjEgLSBuMjtcbiAgICB9KTtcbiAgICBpZihLUUNhcmQuZmVuWmh1KG51bWJlciw1LDUpID09IGZhbHNlKXtcbiAgICAgICAgdmFyIG51bWJlciA9IGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhcmQubnVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgLy/mjpLluo9cbiAgICAgICAgbnVtYmVyLnNvcnQoZnVuY3Rpb24gKG4xLCBuMikge1xuICAgICAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgICAgIH0pO1xuICAgICAgICBpZihLUUNhcmQuZmVuWmh1KG51bWJlciw1LDMpID09IGZhbHNlKXtcbiAgICAgICAgICAgIHZhciBudW1iZXIgPSBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZC5udW1iZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8v5o6S5bqPXG4gICAgICAgICAgICBudW1iZXIuc29ydChmdW5jdGlvbiAobjEsIG4yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKEtRQ2FyZC5mZW5aaHUobnVtYmVyLDMsNSkgPT0gZmFsc2Upe1xuICAgICAgICAgICAgICAgIHZhciBBSXNFeGlzdCA9IGZhbHNlOyAgLy/mmK/lkKblrZjlnKhBXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpIGluIGNhcmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmRzW2ldLm51bWJlciA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBSXNFeGlzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZighQUlzRXhpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSBpbiBjYXJkcykge1xuICAgICAgICAgICAgICAgICAgICBpZihjYXJkc1tpXS5udW1iZXIgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZHNbaV0ubnVtYmVyID0gMTQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gS1FDYXJkLmlzU2FuU2h1blppMShjYXJkcyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59O1xuXG4vL+WIpOaWrTXlvKDmiJbogIUz5byg5piv5ZCm6aG65a2QXG5LUUNhcmQuaXNTaHVuWmkxID0gZnVuY3Rpb24oYXJyKXtcbiAgICBmb3IodmFyIGk9MDtpPGFyci5sZW5ndGgtMTtpKyspe1xuICAgICAgICBpZihhcnJbaSsxXSAtIGFycltpXSAhPSAxKXtcbiAgICAgICAgICAgIC8v5LiN5piv6aG65a2QXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5LUUNhcmQuZmVuWmh1ID0gZnVuY3Rpb24gKG51bWJlcixudW0xLG51bTIpIHtcbiAgICB2YXIgYXJyMSA9IFtdO1xuICAgIHZhciBhcnIyID0gW107XG4gICAgZm9yKHZhciBpPTA7aTxudW1iZXIubGVuZ3RoLTE7aSsrKXtcbiAgICAgICAgaWYoaSA9PSAwKXtcbiAgICAgICAgICAgIGFycjEucHVzaChudW1iZXJbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmKG51bWJlcltpKzFdIC0gbnVtYmVyW2ldID09IDApe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYXJyMS5wdXNoKG51bWJlcltpKzFdKTtcbiAgICAgICAgaWYoYXJyMS5sZW5ndGggPT0gbnVtMSl7XG4gICAgICAgICAgICAvL+WPluesrOS4gOe7hOaYr+mhuuWtkFxuICAgICAgICAgICAgaWYoS1FDYXJkLmlzU2h1blppMShhcnIxKSl7XG4gICAgICAgICAgICAgICAgLy/ov5k15Liq5piv6aG65a2QLOS7juaVsOe7hOS4reenu+mZpFxuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8YXJyMS5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBqPTA7ajxudW1iZXIubGVuZ3RoLTE7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG51bWJlcltqXSA9PSBhcnIxW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+S4pOS4quaVsOS4gOagt+eahOWPquWIoOmZpOS4gOS4qlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG51bWJlcltqXSA9PSBudW1iZXJbaisxXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIuc3BsaWNlKGosMSk7ICAgIC8v5LuObnVtYmVy5Lit56e76ZmkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy/mjqXkuIvmnaXlj5bnrKzkuoznu4RcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPG51bWJlci5sZW5ndGgtMTtpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihpID09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyMi5wdXNoKG51bWJlclswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYobnVtYmVyW2krMV0gLSBudW1iZXJbaV0gPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcnIyLnB1c2gobnVtYmVyW2krMV0pO1xuICAgICAgICAgICAgICAgICAgICBpZihhcnIyLmxlbmd0aCA9PSBudW0yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WPluesrOS6jOe7hOaYr+mhuuWtkFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEtRQ2FyZC5pc1NodW5aaTEoYXJyMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPGFycjIubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wO2o8bnVtYmVyLmxlbmd0aC0xO2orKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihudW1iZXJbal0gPT0gYXJyMltpXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kuKTkuKrmlbDkuIDmoLfnmoTlj6rliKDpmaTkuIDkuKpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihudW1iZXJbal0gPT0gbnVtYmVyW2orMV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyLnNwbGljZShqLDEpOyAgICAvL+S7jm51bWJlcuS4reenu+mZpFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5o6l5LiL5p2l5bCx5piv5Ymp5LiL55qE5LqGXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoS1FDYXJkLmlzU2h1blppMShudW1iZXIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nrKzkuInnu4TkuZ/mmK/pobrlrZBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v56ys5LiJ57uE5LiN5piv6aG65a2QXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy/nrKzkuoznu4TkuI3mmK/pobrlrZBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v56ys5LiA57uE5LiN5piv6aG65a2QXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8gaXNTYW5TaHVuWmky5piv5oiR5YaZ55qEXG5LUUNhcmQuaXNTYW5TaHVuWmkgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICB2YXIgbGVuZ3RoID0gMTM7XG4gICAgaWYoY2FyZHMubGVuZ3RoICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmKHR5cGVvZihjYXJkc1swXS5wb2ludCkgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBjYXJkcyA9IEtRQ2FyZC5jYXJkc0Zyb21BcnJheShjYXJkcyk7XG4gICAgfVxuICAgIHZhciBjYXJkMjAgPSBLUUNhcmQuY29udGFpbjIwKGNhcmRzKTtcbiAgICBpZihjYXJkMjAubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNhcmRzID0gQXJyYXkuZnJvbShjYXJkcyk7XG4gICAgY2FyZHMuc29ydChLUUNhcmQuc29ydEJ5UG9pbnQpO1xuICAgIHZhciB3ZWkgPSBbXTtcbiAgICB2YXIgemhvbmcgPSBbXTtcbiAgICB2YXIgdG91ID0gW107XG4gICAgdmFyIHNhblNodW5aaSA9IEtRQ2FyZC5zYW5TaHVuWmkxKGNhcmRzKVswXTsvL+iOt+WPluaJgOaciee7hOWQiOeahOWktOmBk1xuICAgIGlmKCFzYW5TaHVuWmkpeyAvL+S9oOi/nuWktOmBk+mDveayoeaciSDmgI7kuYjmm7TmiJHmt7dcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBuZXdDYXJkID0gY2FyZHMuZmlsdGVyKGZ1bmN0aW9uKGkpey8v6YeN5paw6LWL5YC8Y2FyZHNcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gICAgY29uc3QgbmV3Q2FyZHMxID0gW107XG4gICAgdmFyIG5ld1BvaW50ID0gW107Ly/liKTmlq1wb2ludOaYr+WQpuebuOWQjFxuICAgIHZhciBkdWlaaSA9IFtdOy8v5Y+W5Ye65pyJ5a+55a2Q5b2T5Lit55qE5LiA5byg54mMXG4gICAgZm9yKHZhciBzIGluIGNhcmRzKXtcbiAgICAgICAgaWYobmV3UG9pbnQuaW5kZXhPZihjYXJkc1tzXS5wb2ludCk8MCl7XG4gICAgICAgICAgICBuZXdDYXJkczEucHVzaChjYXJkc1tzXSk7XG4gICAgICAgICAgICBuZXdQb2ludC5wdXNoKGNhcmRzW3NdLnBvaW50KTtcbiAgICAgICAgfWVsc2V7Ly/lj5blh7rmnInlr7nlrZDlvZPkuK3nmoTkuIDlvKDniYxcbiAgICAgICAgICAgIGR1aVppLnB1c2goY2FyZHNbc10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzYW5TaHVuWmkubGVuZ3RoOyArK2opIHsvL+W+queOr+aJgOacieWktOmBk1xuICAgICAgICB2YXIgbnVtYmVyMyA9IHNhblNodW5aaVtqXTtcbiAgICAgICAgaWYodHlwZW9mKG51bWJlcjMpID09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyAoaSkgPCBjYXJkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG5ld0NhcmRzID0gbmV3Q2FyZHMxLmZpbHRlcihmdW5jdGlvbihpKXsvL+mHjeaWsOi1i+WAvGNhcmRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3Q2FyZHMgPSBuZXdDYXJkcy5rcV9leGNsdWRlcyhudW1iZXIzKTsvL+WIoOmZpOeJjOmHjOeahOWktOmBk1xuICAgICAgICAgICAgaWYgKHdlaS5sZW5ndGggIT0gNSkge1xuICAgICAgICAgICAgICAgIGxldCBzdWJDYXJkcyA9IG5ld0NhcmRzLnNsaWNlKGksIGkgKyA1KTtcbiAgICAgICAgICAgICAgICBpZiAoS1FDYXJkLmlzU2h1blppKHN1YkNhcmRzKSkgey8v5b6X5Yiw5bC+6YGTIOWIoOmZpOeJjOmHjOeahOWwvumBk1xuICAgICAgICAgICAgICAgICAgICB3ZWkgPSBzdWJDYXJkcztcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2FyZHMgPSBuZXdDYXJkcy5rcV9leGNsdWRlcyhzdWJDYXJkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYod2VpLmxlbmd0aCA9PSA1KXsvL+aKiuWJqeS9meeahOeJjOWSjOWvueWtkOeahOWNleW8oOWQiOW5tlxuICAgICAgICAgICAgICAgIGxldCB0YXNrcyA9IGR1aVppLmZpbHRlcihmdW5jdGlvbihpKXsvL+mHjeaWsOi1i+WAvOWvueWtkFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0YXNrcyA9IHRhc2tzLmtxX2V4Y2x1ZGVzKG51bWJlcjMpOy8v5Yik5pat5aS06YGT5ZKM5a+55a2Q55qE5Y2V5byg5piv5ZCm5pyJ55u45ZCMIOacieeahOivneWwseWIoOmZpFxuICAgICAgICAgICAgICAgIG5ld0NhcmRzID0gbmV3Q2FyZHMuY29uY2F0KHRhc2tzKTsvL+aKiuWJqeS9meeahOeJjOWSjOWvueWtkOeahOWNleW8oOWQiOW5tlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHpob25nLmxlbmd0aCAhPSA1ICYmIG5ld0NhcmRzLmxlbmd0aCA9PSA1KSB7XG4gICAgICAgICAgICAgICAgaWYgKEtRQ2FyZC5pc1NodW5aaShuZXdDYXJkcykpIHsvL+aYr+S4iemhuuWtkFxuICAgICAgICAgICAgICAgICAgICB6aG9uZyA9IG5ld0NhcmRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHdlaS5sZW5ndGggPT0gNSAmJiB6aG9uZy5sZW5ndGggPT0gNSApey8v5piv5LiJ6aG65a2Q57uI5q2i5b6q546vXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNley8v5p2l5ZCnIOe7p+e7reWQp1xuICAgICAgICAgICAgICAgIHpob25nID0gW107d2VpID0gW107dG91ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYod2VpLmxlbmd0aCA9PSA1ICYmIHpob25nLmxlbmd0aCA9PSA1ICl7Ly/mmK/kuInpobrlrZDnu4jmraLlvqrnjq9cbiAgICAgICAgICAgIHRvdSA9IG51bWJlcjM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNley8v5p2l5ZCnIOe7p+e7reWQp1xuICAgICAgICAgICAgemhvbmcgPSBbXTt3ZWkgPSBbXTt0b3UgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhcmRzID0gbmV3Q2FyZDtcbiAgICBpZiAoS1FDYXJkLl9pc1NhblNodW5aaSh0b3Usemhvbmcsd2VpKSkgey8v5piv5LiJ6aG65a2QXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgY29udmVydGVkQ2FyZHMgPSBLUUNhcmQuX2NvbnZlcnRPbmVUb0ExKGNhcmRzKTtcbiAgICBpZiAoY2FyZHMgPT09IGNvbnZlcnRlZENhcmRzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIEtRQ2FyZC5pc1NhblNodW5aaShjb252ZXJ0ZWRDYXJkcyk7XG59O1xuXG5LUUNhcmQuc2FuU2h1blppMSA9IGZ1bmN0aW9uIChjYXJkcyxsZW5ndGggPSAzKSB7XG4gICAgdmFyIHNodW56aSA9IEtRQ2FyZC5maW5kU2h1blppKGNhcmRzLGxlbmd0aCk7XG4gICAgdmFyIGNhcmRzVCA9IFtdO1xuICAgIHZhciBjYXJkc0luZGV4ID0gW107XG4gICAgaWYoc2h1bnppID09IG51bGwpe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzaHVuemkubGVuZ3RoO2krKyl7XG4gICAgICAgIHZhciBhID0gc2h1bnppW2ldO1xuICAgICAgICB2YXIgY2FyZHNTaHVuemkgPSBbXTtcbiAgICAgICAgLy8gdmFyIGNhcmRzSW5kZXggPSBbXTtcbiAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGEubGVuZ3RoO2orKyl7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBhW2pdO1xuICAgICAgICAgICAgaWYodHlwZW9mKGNhcmRzW2luZGV4XSkgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FyZHNTaHVuemkucHVzaChjYXJkc1tpbmRleF0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgY2FyZHNJbmRleC5wdXNoKGEpO1xuICAgICAgICBjYXJkc1QucHVzaChjYXJkc1NodW56aSk7XG4gICAgfVxuICAgIHJldHVybiBbY2FyZHNULGNhcmRzSW5kZXhdO1xufTtcblxuS1FDYXJkLl9pc1NhblNodW5aaSA9IGZ1bmN0aW9uICh0b3VDYXJkcywgemhvbmdDYXJkcywgd2VpQ2FyZHMpIHtcbiAgICByZXR1cm4gS1FDYXJkLmlzU2h1blppKHRvdUNhcmRzKSAmJiBLUUNhcmQuaXNTaHVuWmkoemhvbmdDYXJkcylcbiAgICAgICAgJiYgS1FDYXJkLmlzU2h1blppKHdlaUNhcmRzKTtcbn07XG4vLyDmmK/lkKbmmK/kuInlkIzoirHpobpcbktRQ2FyZC5pc1NhblRvbmdIdWFTaHVuID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgdmFyIGxlbmd0aCA9IDEzO1xuICAgIGlmKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkcyk7XG4gICAgaWYoY2FyZDIwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgY29sb3JDYXJkc09iamVjdCA9IEtRQ2FyZC5fY29sb3JDbGFzc0NhcmRzKGNhcmRzKTtcblxuICAgIHZhciBzdWJDYXJkcyA9IFtdO1xuICAgIGZvciAobGV0IHByb3AgaW4gY29sb3JDYXJkc09iamVjdCkge1xuICAgICAgICBsZXQgY2FyZHMgPSBjb2xvckNhcmRzT2JqZWN0W3Byb3BdO1xuICAgICAgICBzdWJDYXJkcy5wdXNoKGNhcmRzKTtcbiAgICB9XG5cbiAgICBpZiAoc3ViQ2FyZHMubGVuZ3RoICE9IDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHN1YkNhcmRzID0gc3ViQ2FyZHMuc29ydChmdW5jdGlvbiAoczEsIHMyKSB7XG4gICAgICAgIHJldHVybiBzMS5sZW5ndGggPiBzMi5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBsZXQgdG91Q2FyZHMgPSBzdWJDYXJkc1swXTtcbiAgICBsZXQgemhvbmdDYXJkcyA9IHN1YkNhcmRzWzFdO1xuICAgIGxldCB3ZWlDYXJkcyA9IHN1YkNhcmRzWzJdO1xuXG4gICAgaWYgKCh0b3VDYXJkcy5sZW5ndGggIT0gMykgfHwgKHpob25nQ2FyZHMubGVuZ3RoICE9IDUpIHx8ICh3ZWlDYXJkcy5sZW5ndGggIT0gNSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBLUUNhcmQuX2lzU2FuVG9uZ0h1YVNodW4odG91Q2FyZHMsIHpob25nQ2FyZHMsIHdlaUNhcmRzKTtcbn07XG5cbi8vIOWwhueJjOagueaNriBjb2xvciDov5vooYzliIbnsbtcbktRQ2FyZC5fY29sb3JDbGFzc0NhcmRzID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGNvbG9yQ2FyZHNPYmplY3QgPSB7fTtcbiAgICBjYXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChjYXJkKSB7XG4gICAgICAgIGxldCBjb2xvciA9IGNhcmQuY29sb3I7XG4gICAgICAgIHZhciBzdWJDYXJkcyA9IGNvbG9yQ2FyZHNPYmplY3RbY29sb3JdO1xuICAgICAgICBpZiAoIXN1YkNhcmRzKSB7XG4gICAgICAgICAgICBzdWJDYXJkcyA9IFtdO1xuICAgICAgICAgICAgY29sb3JDYXJkc09iamVjdFtjb2xvcl0gPSBzdWJDYXJkcztcbiAgICAgICAgfVxuICAgICAgICBzdWJDYXJkcy5wdXNoKGNhcmQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbG9yQ2FyZHNPYmplY3Q7XG59O1xuXG4vLyDmmK/lkKbmmK/kuInlkIzoirHpobpcbktRQ2FyZC5faXNTYW5Ub25nSHVhU2h1biA9IGZ1bmN0aW9uICh0b3VDYXJkcywgemhvbmdDYXJkcywgd2VpQ2FyZHMpIHtcbiAgICByZXR1cm4gS1FDYXJkLmlzVG9uZ0h1YVNodW4odG91Q2FyZHMpICYmIEtRQ2FyZC5pc1RvbmdIdWFTaHVuKHpob25nQ2FyZHMpXG4gICAgICAgICYmIEtRQ2FyZC5pc1RvbmdIdWFTaHVuKHdlaUNhcmRzKTtcbn07XG5cblxuLy8g5piv5ZCm5pivIOKAnOS4ieWIhuWkqeS4i+KAnVxuS1FDYXJkLmlzU2FuRmVuVGlhblhpYSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGxldCBsZW5ndGggPSAxMztcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgdGllWmhpTGVuZ3RoID0gNDtcbiAgICBsZXQgcG9pbnRIZWxwZXIgPSBuZXcgS1FDYXJkUG9pbnRzSGVscGVyKGNhcmRzKTtcbiAgICBsZXQgbnVtYmVyT2ZUaWVaaGkgPSAwO1xuICAgIGZvciAobGV0IHByb3AgaW4gcG9pbnRIZWxwZXIucG9pbnROdW1iZXJzKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHBvaW50SGVscGVyLnBvaW50TnVtYmVyc1twcm9wXTtcbiAgICAgICAgaWYgKHZhbHVlID09IHRpZVpoaUxlbmd0aCkge1xuICAgICAgICAgICAgbnVtYmVyT2ZUaWVaaGkgPSBudW1iZXJPZlRpZVpoaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bWJlck9mVGllWmhpID09PSAzO1xufTtcblxuXG4vLyDmmK/lkKbmmK8g4oCc5Zub5aWX5LiJ5p2h4oCdXG5LUUNhcmQuaXNTaVRhb1NhblRpYW8gPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMTM7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBzYW5UaWFvTGVuZ3RoID0gMztcbiAgICBsZXQgcG9pbnRIZWxwZXIgPSBuZXcgS1FDYXJkUG9pbnRzSGVscGVyKGNhcmRzKTtcbiAgICBsZXQgbnVtYmVyT2ZTYW5UaWFvID0gMDtcbiAgICBmb3IgKGxldCBwcm9wIGluIHBvaW50SGVscGVyLnBvaW50TnVtYmVycykge1xuICAgICAgICBsZXQgdmFsdWUgPSBwb2ludEhlbHBlci5wb2ludE51bWJlcnNbcHJvcF07XG4gICAgICAgIGlmICh2YWx1ZSA9PSBzYW5UaWFvTGVuZ3RoKSB7XG4gICAgICAgICAgICBudW1iZXJPZlNhblRpYW8gPSBudW1iZXJPZlNhblRpYW8gKyAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bWJlck9mU2FuVGlhbyA9PSA0O1xufTtcblxuXG4vLyDmmK/lkKbmmK8g4oCc5LiJ5qGD6Iqx4oCdXG4vLyDlpLTjgIHkuK3jgIHlsL7pgZPkuLrnm7jlkIzoirHoibLnmoTniYxcbktRQ2FyZC5pc1NhblRhb0h1YSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGxldCBsZW5ndGggPSAxMztcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGNhcmQyMCA9IEtRQ2FyZC5jb250YWluMjAoY2FyZHMpO1xuICAgIGlmKGNhcmQyMC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGNvbG9ySGVscGVyID0gbmV3IEtRQ2FyZENvbG9yc0hlbHBlcihjYXJkcyk7XG4gICAgdmFyIGNvbG9yTnVtYmVycyA9IFtdO1xuICAgIGZvciAobGV0IHByb3AgaW4gY29sb3JIZWxwZXIuY29sb3JOdW1iZXIpIHtcbiAgICAgICAgY29sb3JOdW1iZXJzLnB1c2goY29sb3JIZWxwZXIuY29sb3JOdW1iZXJbcHJvcF0pO1xuICAgIH1cblxuICAgIGNvbG9yTnVtYmVycy5zb3J0KGZ1bmN0aW9uIChuMSwgbjIpIHtcbiAgICAgICAgcmV0dXJuIG4xIC0gbjI7XG4gICAgfSk7XG5cbiAgICBpZiAoY29sb3JOdW1iZXJzLmxlbmd0aCAhPSAzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoY29sb3JOdW1iZXJzWzBdID09IDNcbiAgICAgICAgJiYgKGNvbG9yTnVtYmVyc1sxXSA9PSA1KVxuICAgICAgICAmJiAoY29sb3JOdW1iZXJzWzJdID09IDUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblxuLy8g5Yik5pat5piv5ZCm5YyF5ZCr6ZOB5pSvXG4vLyDlm5vlvKDlkIzmoLfngrnmlbDnmoTniYxcbktRQ2FyZC5jb250YWluVGllWmhpID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGxlbmd0aCA9IDQ7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vbGV0IGhlbHBlciA9IG5ldyBLUUNhcmRQb2ludHNIZWxwZXIoY2FyZHMpO1xuICAgIC8vaWYoaGVscGVyLm1heE51bWJlcigpID49IGxlbmd0aCl7XG4gICAgLy8gICAgcmV0dXJuIGhlbHBlci5tYXhOdW1iZXIoKSA+PSBsZW5ndGg7XG4gICAgLy99ZWxzZXtcbiAgICAvLyAgICByZXR1cm4gS1FDYXJkLmNvbnRhaW5HdWlQYWkoY2FyZHMsNCk7XG4gICAgLy99XG4gICAgaWYgKEtRQ2FyZC5maW5kVGllWmhpKGNhcmRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5cbi8vIOWIpOaWreaYr+WQpuaYr+mTgeaUr1xuS1FDYXJkLmlzVGllWmhpID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGxlbmd0aCA9IDQ7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBjYXJkcy5yZWR1Y2UoZnVuY3Rpb24gKHBvaW50LCBjYXJkKSB7XG4gICAgICAgIGlmIChwb2ludCA9PSBjYXJkLnBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0sIGNhcmRzWzBdLnBvaW50KTtcblxuICAgIHJldHVybiByZXN1bHQgIT0gLTE7XG59O1xuXG4vKiMjIyMj5piv5ZCm5YyF5ZCr5LqU5ZCMKi9cbi8v5LqU5byg5ZCM5qC354K55pWw55qE54mMXG5LUUNhcmQuY29udGFpbld1VG9uZyA9IGZ1bmN0aW9uKGNhcmRzKSB7XG4gICAgdmFyIGxlbmd0aCA9IDU7XG4gICAgaWYoY2FyZHMubGVuZ3RoIDwgbGVuZ3RoKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvL+S6lOW8oOeJjOebuOWQjOeahFxuICAgIC8vbGV0IGhlbHBlciA9IG5ldyBLUUNhcmRQb2NvbnRhaW4yMGludHNIZWxwZXIoY2FyZHMpO1xuICAgIC8vaWYoaGVscGVyLm1heE51bWJlcigpID49IGxlbmd0aCl7XG4gICAgLy8gICAgcmV0dXJuIGhlbHBlci5tYXhOdW1iZXIoKSA+PSBsZW5ndGg7XG4gICAgLy99ZWxzZXtcbiAgICAvLyAgICByZXR1cm4gS1FDYXJkLmNvbnRhaW5HdWlQYWkoY2FyZHMsNSk7XG4gICAgLy99XG4gICAgaWYgKEtRQ2FyZC5maW5kV3VUb25nKGNhcmRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKuWIpOaWreaYr+WQpuS6lOWQjCovXG5LUUNhcmQuaXNXdVRvbmcgPSBmdW5jdGlvbihjYXJkcykge1xuICAgIHZhciBsZW5ndGggPSA1O1xuICAgIGlmKGNhcmRzLmxlbmd0aCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBjYXJkcy5yZWR1Y2UoZnVuY3Rpb24gKHBvaW50LCBjYXJkKSB7XG4gICAgICAgIGlmIChwb2ludCA9PSBjYXJkLnBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0sIGNhcmRzWzBdLnBvaW50KTtcblxuICAgIHJldHVybiByZXN1bHQgIT0gLTE7XG59O1xuLyojIyMjIyovXG5cbi8vIOaYr+WQpuaYryDigJzokavoiqbigJ1cbi8vIOS4ieW8oOebuOWQjCArIOS4gOWvuVxuS1FDYXJkLmNvbnRhaW5IdUx1ID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgbGV0IGxlbmd0aCA9IDU7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChLUUNhcmQuZmluZEh1THUoY2FyZHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vbGV0IHBvaW50SGVscGVyID0gbmV3IEtRQ2FyZFBvaW50c0hlbHBlcihjYXJkcyk7XG4gICAgLy92YXIgcG9pbnROdW1iZXJzID0gW107XG4gICAgLy92YXIgaW5kZXggPSAwO1xuICAgIC8vZm9yIChsZXQgcHJvcCBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAvLyAgICBwb2ludE51bWJlcnNbaW5kZXhdID0gcG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW3Byb3BdO1xuICAgIC8vICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICAgIC8vfVxuICAgIC8vdmFyIGg9W107XG4gICAgLy92YXIgaDE9W107XG4gICAgLy9mb3IodmFyIGkgaW4gcG9pbnROdW1iZXJzKXtcbiAgICAvLyAgICB2YXIgcz1wb2ludE51bWJlcnNbaV07XG4gICAgLy8gICAgaWYocyA9PSAzKXtcbiAgICAvLyAgICAgICAgaC5wdXNoKHMpXG4gICAgLy8gICAgfVxuICAgIC8vICAgIGVsc2UgaWYocz09NCl7XG4gICAgLy8gICAgICAgIGgxLnB1c2gocylcbiAgICAvLyAgICB9XG4gICAgLy9cbiAgICAvL31cbiAgICAvL1xuICAgIC8vaWYgKChwb2ludE51bWJlcnMuaW5kZXhPZigzKSAhPSAtMSkgJiYgKHBvaW50TnVtYmVycy5pbmRleE9mKDIpICE9IC0xKVxuICAgIC8vIHx8IGgubGVuZ3RoID4gMSB8fCBoMS5sZW5ndGggPiAxIHx8KHBvaW50TnVtYmVycy5pbmRleE9mKDQpICE9IC0xKVxuICAgIC8vICYmIChwb2ludE51bWJlcnMuaW5kZXhPZigyKSAhPSAtMSkpIHtcbiAgICAvLyAgICByZXR1cm4gdHJ1ZTtcbiAgICAvL31cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIOWIpOaWreaYr+WQpuaYryDokavoiqZcbktRQ2FyZC5pc0h1THUgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBpZiAoY2FyZHMubGVuZ3RoICE9IDUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBwb2ludHMgPSBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgcmV0dXJuIGNhcmQucG9pbnQ7XG4gICAgfSkuc29ydChmdW5jdGlvbiAocDEsIHAyKSB7XG4gICAgICAgIHJldHVybiBwMSAtIHAyO1xuICAgIH0pO1xuXG4gICAgdmFyIHAxID0gcG9pbnRzWzBdO1xuICAgIHZhciBwMiA9IHAxO1xuICAgIHZhciBudW1iZXJQMSA9IDA7XG4gICAgdmFyIG51bWJlclAyID0gMDtcblxuICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICBpZiAocG9pbnQgIT0gcDEgJiYgcG9pbnQgIT0gcDIpIHtcbiAgICAgICAgICAgIHAyID0gcG9pbnQ7XG4gICAgICAgICAgICBudW1iZXJQMiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBudW1iZXJQMSA9IG51bWJlclAxICsgKChwb2ludCA9PSBwMSkgPyAxIDogMCk7XG4gICAgICAgIG51bWJlclAyID0gbnVtYmVyUDIgKyAoKHBvaW50ID09IHAyKSA/IDEgOiAwKTtcbiAgICB9KTtcblxuICAgIGxldCBtYXhOdW1iZXIgPSBNYXRoLm1heChudW1iZXJQMSk7XG4gICAgbGV0IG1pbk51bWJlciA9IE1hdGgubWluKG51bWJlclAyKTtcblxuICAgIHJldHVybiAobWluTnVtYmVyID09IDIpICYmIChtYXhOdW1iZXIgPT0gMyk7XG59O1xuXG4vLyDmmK/lkKbljIXlkKvmnIkg4oCc5LiJ5p2h4oCdXG5LUUNhcmQuY29udGFpblNhblRpYW8gPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBpZiAoY2FyZHMubGVuZ3RoIDwgMykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChLUUNhcmQuZmluZFNhblRpYW8oY2FyZHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgICAvL2xldCBwb2ludEhlbHBlciA9IG5ldyBLUUNhcmRQb2ludHNIZWxwZXIoY2FyZHMpO1xuICAgIC8vZm9yIChsZXQgcHJvcCBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAvLyAgICBpZiAocG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW3Byb3BdID49IDMpIHtcbiAgICAvLyAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgfVxuICAgIC8vfVxuICAgIC8vXG4gICAgLy9yZXR1cm4gS1FDYXJkLmNvbnRhaW5HdWlQYWkoY2FyZHMsMyk7XG59O1xuXG4vLyDmmK/lkKbmmK8g4oCc5LiJ5p2h4oCdXG5LUUNhcmQuaXNTYW5UaWFvID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCAhPSAzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gY2FyZHMucmVkdWNlKGZ1bmN0aW9uIChwb2ludCwgY2FyZCkge1xuICAgICAgICBpZiAoY2FyZC5wb2ludCA9PSBwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0sIGNhcmRzWzBdLnBvaW50KTtcblxuICAgIHJldHVybiByZXN1bHQgIT0gLTE7XG59O1xuXG4vLyDmmK/lkKbljIXlkKvmnIkg77ya5Lik5a+5XG5LUUNhcmQuY29udGFpbkxpYUR1aSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCA0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEtRQ2FyZC5maW5kTGlhRHVpKGNhcmRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvL3ZhciBudW1iZXJPZkR1aVppID0gMDtcbiAgICAvL2xldCBwb2ludEhlbHBlciA9IG5ldyBLUUNhcmRQb2ludHNIZWxwZXIoY2FyZHMpO1xuICAgIC8vZm9yIChsZXQgcHJvcCBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAvLyAgICBpZiAocG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW3Byb3BdID09IDIpIHtcbiAgICAvLyAgICAgICAgbnVtYmVyT2ZEdWlaaSA9IG51bWJlck9mRHVpWmkgKyAxO1xuICAgIC8vICAgICAgICBpZiAobnVtYmVyT2ZEdWlaaSA9PSAyKSB7XG4gICAgLy8gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgIH1cbiAgICAvL31cblxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIOaYr+WQpuaYryDkuKTlr7lcbktRQ2FyZC5pc0xpYUR1aSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGlmIChjYXJkcy5sZW5ndGggIT0gNCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHBvaW50SGVscGVyID0gbmV3IEtRQ2FyZFBvaW50c0hlbHBlcihjYXJkcyk7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAgICAgaWYgKHBvaW50SGVscGVyLnBvaW50TnVtYmVyc1twcm9wXSAhPSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyDmmK/kuI3mmK/lr7nlrZBcbktRQ2FyZC5pc0R1aVppID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgaWYgKGNhcmRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgY2FyZDEgPSBjYXJkc1swXTtcbiAgICBsZXQgY2FyZDIgPSBjYXJkc1sxXTtcblxuICAgIHJldHVybiBjYXJkMS5wb2ludCA9PSBjYXJkMi5wb2ludDtcbn07XG5cbi8vIOaYr+WQpuWMheWQq+WvueWtkFxuS1FDYXJkLmNvbnRhaW5EdWlaaSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEtRQ2FyZC5maW5kRHVpWmkoY2FyZHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgICAvL2xldCBwb2ludEhlbHBlciA9IG5ldyBLUUNhcmRQb2ludHNIZWxwZXIoY2FyZHMpO1xuICAgIC8vZm9yIChsZXQgcHJvcCBpbiBwb2ludEhlbHBlci5wb2ludE51bWJlcnMpIHtcbiAgICAvLyAgICBpZiAocG9pbnRIZWxwZXIucG9pbnROdW1iZXJzW3Byb3BdID09IDIpIHtcbiAgICAvLyAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgfVxuICAgIC8vfVxuICAgIC8vXG4gICAgLy9yZXR1cm4gS1FDYXJkLmNvbnRhaW5HdWlQYWkoY2FyZHMsMik7XG59O1xuXG5LUUNhcmQuY29udGFpbkd1aVBhaSA9IGZ1bmN0aW9uIChjYXJkcyAsIGxlbmd0aCkge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2FyZDIwID0gS1FDYXJkLmNvbnRhaW4yMChjYXJkcyk7XG4gICAgY2FyZHMgPSBjYXJkcy5rcV9leGNsdWRlcyhjYXJkMjApO1xuICAgIGxldCBoZWxwZXIgPSBuZXcgS1FDYXJkUG9pbnRzSGVscGVyKGNhcmRzKTtcbiAgICB2YXIgbWF4TnVtYmVyID0gKGhlbHBlci5tYXhOdW1iZXIoKSArIGNhcmQyMC5sZW5ndGgpO1xuICAgIHJldHVybiBtYXhOdW1iZXIgPj0gbGVuZ3RoO1xufTtcbi8qIyMjIyMqL1xuLy8g5piv5ZCm5piv54m55q6K54mMXG5LUUNhcmQuaXNUZVNodVBhaSA9IGZ1bmN0aW9uIChjYXJkcykge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPCAxMykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIEtRQ2FyZC5pc1FpbmdMb25nKGNhcmRzKVxuICAgICAgICB8fCBLUUNhcmQuaXNZaVRpYW9Mb25nKGNhcmRzKVxuICAgICAgICAvKnx8IEtRQ2FyZC5pc1NhblRvbmdIdWFTaHVuKGNhcmRzKVxuICAgICAgICB8fCBLUUNhcmQuaXNTYW5GZW5UaWFuWGlhKGNhcmRzKVxuICAgICAgICB8fCBLUUNhcmQuaXNTaVRhb1NhblRpYW8oY2FyZHMpXG4gICAgICAgIHx8IEtRQ2FyZC5pc0xpdUR1aUJhbihjYXJkcylcbiAgICAgICAgfHwgS1FDYXJkLmlzU2FuU2h1blppKGNhcmRzKVxuICAgICAgICB8fCBLUUNhcmQuaXNTYW5TaHVuWmkxKGNhcmRzKVxuICAgICAgICB8fCBLUUNhcmQuaXNTYW5Ub25nSHVhKGNhcmRzKVxuXG4gICAgfHwgS1FDYXJkLmlzV3VEdWlTYW5UaWFvKGNhcmRzKVxuICAgIHx8IEtRQ2FyZC5pc0NvdVlpU2UoY2FyZHMpKi87XG59O1xuXG4vLyDlsIbniYzkuK3nmoQgMSDlj5jljJbkuLogQe+8iDE0KVxuS1FDYXJkLl9jb252ZXJ0T25lVG9BID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgaWYgKGNhcmRzLmZpbmQoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXJkLnBvaW50ID09IDE7XG4gICAgICAgIH0pID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY2FyZHM7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcbiAgICAgICAgaWYgKGNhcmQucG9pbnQgPT0gMSkge1xuICAgICAgICAgICAgbGV0IG5ld0NhcmQgPSBuZXcgS1FDYXJkKDE0LCBjYXJkLmNvbG9yKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdDYXJkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbktRQ2FyZC5fY29udmVydE9uZVRvQTEgPSBmdW5jdGlvbiAoY2FyZHMpIHtcbiAgICBpZiAoY2FyZHMuZmluZChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhcmQucG9pbnQgPT0gMTtcbiAgICAgICAgfSkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjYXJkcztcbiAgICB9XG4gICAgdmFyIG51bSA9IDA7XG4gICAgbGV0IHJlc3VsdCA9IGNhcmRzLm1hcChmdW5jdGlvbiAoY2FyZCkge1xuICAgICAgICBpZiAoY2FyZC5wb2ludCA9PSAxICYmIG51bSA9PSAwKSB7XG4gICAgICAgICAgICBudW0rKztcbiAgICAgICAgICAgIGxldCBuZXdDYXJkID0gbmV3IEtRQ2FyZCgxNCwgY2FyZC5jb2xvcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3Q2FyZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FyZDtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBLUUNhcmQg55qE5o6S5bqP5pa55rOVXG5LUUNhcmQuc29ydEJ5UG9pbnQgPSBmdW5jdGlvbiAoY2FyZDEsIGNhcmQyKSB7XG4gICAgbGV0IHJlc3VsdCA9IE51bWJlcihjYXJkMS5wb2ludCkgLSBOdW1iZXIoY2FyZDIucG9pbnQpXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbktRQ2FyZC5zb3J0QnlDb2xvciA9IGZ1bmN0aW9uIChjYXJkMSwgY2FyZDIsIHBvaW50QXNjID0gdHJ1ZSkge1xuICAgIGlmIChjYXJkMi5jb2xvciA9PSBjYXJkMS5jb2xvcikge1xuICAgICAgICByZXR1cm4gKGNhcmQxLnBvaW50IC0gY2FyZDIucG9pbnQpICogKHBvaW50QXNjID8gMSA6IC0xKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcmQyLmNvbG9yIC0gY2FyZDEuY29sb3I7XG59XG5cbktRQ2FyZC5zb3J0ID0gZnVuY3Rpb24gKGNhcmQxLCBjYXJkMiwgYXNjID0gdHJ1ZSwgQWlzTWF4ID0gdHJ1ZSkge1xuICAgIGxldCByZXN1bHQgPSAxO1xuICAgIGlmIChjYXJkMS5wb2ludCA9PSBjYXJkMi5wb2ludCkge1xuICAgICAgICByZXN1bHQgPSBjYXJkMS5jb2xvciAtIGNhcmQyLmNvbG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBjYXJkMS5wb2ludDtcbiAgICAgICAgdmFyIHBvaW50MiA9IGNhcmQyLnBvaW50O1xuICAgICAgICBpZiAoQWlzTWF4ICYmIHBvaW50MSA9PSAxKSB7XG4gICAgICAgICAgICBwb2ludDEgPSAxNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBaXNNYXggJiYgcG9pbnQyID09IDEpIHtcbiAgICAgICAgICAgIHBvaW50MiA9IDE0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gcG9pbnQxIC0gcG9pbnQyO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQgKiAoYXNjID8gMSA6IC0xKTtcbn07XG5cbi8v6L2s5Li65a6i5oi356uv55qE54mMXG5LUUNhcmQuX2NvbnZlcnRDYXJkc1RvQ2FyZE5hbWVzID0gZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgLy8gW3tcInN1aXRcIjpcInNcIixcIm51bWJlclwiOjEwfV1cbiAgICBsZXQgc3VpdENvbG9yTWFwID1bJycsJ2QnLCdjJywnaCcsJ3MnXTtcbiAgICByZXR1cm4gY2FyZHMubWFwKGZ1bmN0aW9uIChjYXJkKSB7XG4gICAgICAgIHZhciBjYXJkTnVtYmVyID0gY2FyZC5wb2ludDtcbiAgICAgICAgbGV0IGNvbG9yID0gc3VpdENvbG9yTWFwW2NhcmQuY29sb3JdO1xuICAgICAgICBsZXQgbnVtYmVyID0gTWF0aC5tYXgoTWF0aC5taW4oY2FyZE51bWJlciwgMTMpLCAxKTtcbiAgICAgICAgcmV0dXJuIHtudW1iZXI6bnVtYmVyLHN1aXQ6Y29sb3J9O1xuICAgIH0pO1xufTsiLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcbmNvbnN0IEtRR2xvYmFsRXZlbnQgPSByZXF1aXJlKCdLUUdsb2JhbEV2ZW50Jyk7XG5jb25zdCBLUU5hdGl2ZUludm9rZSA9IHJlcXVpcmUoJ0tRTmF0aXZlSW52b2tlJyk7XG5cbmxldCBLUUdsYWJvbFNvY2tldEV2ZW50SGFuZGVyID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpZFN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlkU3RhcnQgPSB0cnVlO1xuXG4gICAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlJlY2VpdmVGb3JjZUV4aXQsIHRoaXMuX2ZvcmNlRXhpdEFwcCwgdGhpcyk7XG4gICAgfSxcblxuICAgIF9mb3JjZUV4aXRBcHA6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIEtRTmF0aXZlSW52b2tlLmZvcmNlRXhpdEFwcCgpO1xuICAgIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtRR2xhYm9sU29ja2V0RXZlbnRIYW5kZXI7IiwibGV0IEtRR2xvYmFsRXZlbnQgPSB7XG4gICAgX2hhbmRsZXM6IHt9LFxuICAgIC8v5Y+R6YCB5LqL5Lu2XG4gICAgZW1pdDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0YSA9IHsnZGF0YSc6IGRhdGF9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldHVybnMgPSBbXSAvL+i/lOWbnuWAvFxuICAgICAgICBkYXRhLmV2ZW50TmFtZSA9IGV2ZW50TmFtZS8v5L+d5a2Y5LiA5LiL5LqL5Lu25ZCN5a2XXG5cbiAgICAgICAgZm9yICggdmFyIGZpbmRFdmVuTmFtZSBpbiB0aGlzLl9oYW5kbGVzKXtcbiAgICAgICAgICAgIGlmIChmaW5kRXZlbk5hbWUgPT0gZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9oYW5kbGVzW2ZpbmRFdmVuTmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gdGhpcy5faGFuZGxlc1tmaW5kRXZlbk5hbWVdW2ldKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnMucHVzaChyZXR1cm5WYWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0dXJuc1xuICAgIH0sXG4gICAgLy/mt7vliqDmma7pgJrkuovku7ZcbiAgICBvbjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRhcmdldCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygn5pS25Yiw5LqL5Lu2JywgZXZlbnROYW1lKTtcbiAgICAgICAgdGhpcy5faGFuZGxlc1tldmVudE5hbWVdID0gdGhpcy5faGFuZGxlc1tldmVudE5hbWVdIHx8IFtdXG5cbiAgICAgICAgdGhpcy5faGFuZGxlc1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2suYmluZCh0YXJnZXQpKVxuICAgICAgICBjYWxsYmFjay5fY2FsbGVyID0gdGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvL+mAmui/h+S6i+S7tuWQjeenu+mZpOS4gOS4quebkeWQrOWZqFxuICAgIG9mZjogZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2hhbmRsZXNbZXZlbnROYW1lXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlc1tldmVudE5hbWVdW2ldID0gbnVsbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIOenu+WKqOS4gOS4qiB0YXJnZXQg5LiK5omA5pyJ55qE55uR5ZCsXG4gICAgb2ZmVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuX2hhbmRsZXMpIHtcbiAgICAgICAgdmFyIGV2ZW50SGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVzW25hbWVdO1xuICAgICAgICB2YXIgaW5kZXhzID0gZXZlbnRIYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLl9jYWxsZXIgPSB0YXJnZXQ7XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY2FsbGJhY2ssIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgaW5kZXhPZmZzZXQgPSAwO1xuICAgICAgICBpbmRleHMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXJzLnNwbGljZShpbmRleCArIGluZGV4T2Zmc2V0LCAxKTtcbiAgICAgICAgICBpbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0ICsgMTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS1FHbG9iYWxFdmVudDtcbiIsImxldCBLUU5hdGl2ZUludm9rZSA9IHtcbiAgSU9TQ2xhc3NOYW1lOiBcIkFwcENvbnRyb2xsZXJcIixcbiAgQU5EUklPRENsYXNzTmFtZTogXCJjb20vbGxpbmcvc3N6L0FwcEFjdGl2aXR5XCIsXG5cbiAgaXNOYXRpdmVJT1M6IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcGxhdGZvcm0gPSBjYy5zeXMucGxhdGZvcm07XG4gICAgaWYgKChwbGF0Zm9ybSA9PSBjYy5zeXMuSVBIT05FKSB8fCAocGxhdGZvcm0gPT0gY2Muc3lzLklQQUQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzTmF0aXZlQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgIGxldCBwbGF0Zm9ybSA9IGNjLnN5cy5wbGF0Zm9ybTtcbiAgICBpZiAocGxhdGZvcm0gPT0gY2Muc3lzLkFORFJPSUQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaXNOYXRpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2Muc3lzLmlzTmF0aXZlID09IHRydWU7XG4gIH1cbn07XG5cbi8vIE1BUks6IOWPr+iwg+eUqOeahOacrOWcsOaWueazlVxuLyoqXG4gKiDlvq7kv6HnmbvlvZVcbiAqL1xuS1FOYXRpdmVJbnZva2Uud3hMb2dpbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFLUU5hdGl2ZUludm9rZS5pc05hdGl2ZSgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSwgXCJ3eExvZ2luXCIpOyAvL0lPU1xuICB9IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7IC8vQW5kcm9pZFxuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eExvZ2luXCIsIFwiKClWXCIpO1xuICB9XG59O1xuXG5cbi8qKlxuICog5YiG5Lqr5aSn5Y6F5L+h5oGv5Yiw5b6u5L+h5aW95Y+LXG4gKiBcbiAqL1xuS1FOYXRpdmVJbnZva2Uuc2hhcmVIYWxsVG9XZUNoYXRGcmllbmQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghS1FOYXRpdmVJbnZva2UuaXNOYXRpdmUoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwid3hTaGFyZUhhbGxGcmllbmRcIiwgKTtcbiAgfSBlbHNlIHsgLy9BbmRyb2lkXG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInd4U2hhcmVIYWxsRnJpZW5kXCIsIFwiKClWXCIpO1xuICB9XG59O1xuXG5cbi8qKlxuICog5YiG5Lqr5aSn5Y6F5L+h5oGv5Yiw5pyL5Y+L5ZyIXG4gKiBcbiAqL1xuS1FOYXRpdmVJbnZva2Uuc2hhcmVIYWxsVG9XZUNoYXRUaW1lbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFLUU5hdGl2ZUludm9rZS5pc05hdGl2ZSgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSwgXCJ3eFNoYXJlSGFsbFRpbWVsaW5lXCIsICk7XG4gIH0gZWxzZSB7IC8vQW5kcm9pZFxuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eFNoYXJlSGFsbFRpbWVsaW5lXCIsIFwiKClWXCIpO1xuICB9XG59O1xuXG4vKipcbiAqIOW8uuWItumAgOWHuiBBUFBcbiAqIFxuICovXG5LUU5hdGl2ZUludm9rZS5mb3JjZUV4aXRBcHAgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghS1FOYXRpdmVJbnZva2UuaXNOYXRpdmUoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwiZXhpdEFwcFwiLCApO1xuICB9IGVsc2UgeyAvL0FuZHJvaWRcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwiZXhpdEFwcFwiLCBcIigpVlwiKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIOS4i+i9veaWsOeJiOacrFxuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gaW9zVXJsICAgICAgaU9TIOeJiOacrOWcsOWdgFxuICogQHBhcmFtIHtTdHJpbmd9IGFuZHJvaWRVcmwgIOWuieWNk+eJiOacrOWcsOWdgFxuICovXG5LUU5hdGl2ZUludm9rZS5kb3dubG9hZE5ld1ZlcnNpb24gPSBmdW5jdGlvbiAoaW9zVXJsLCBhbmRyb2lkVXJsKSB7XG4gIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwiZG93bmxvYWROZXdWZXJzaW9uOlwiLCBpb3NVcmwpO1xuICB9IGVsc2UgeyAvL0FuZHJvaWRcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwiZG93bmxvYWROZXdWZXJzaW9uXCIsIFwiKExqYXZhL2xhbmcvU3RyaW5nOylWXCIsIGFuZHJvaWRVcmwpO1xuICB9XG59O1xuXG5cbi8qKlxuICog5YiG5Lqr5oi/6Ze057uZ5b6u5L+h5aW95Y+LXG4gKiBcbiAqIEBwYXJhbSB7U3RyaW5nfSByb29tSWQgICAgICAgICDmiL/pl7QgaWQg5L+h5oGvXG4gKiBAcGFyYW0ge1N0cmluZ30gZGVzY3JpcHRpb24gICAg5paH5pys5o+P6L+wXG4gKi9cbktRTmF0aXZlSW52b2tlLnNoYXJlUm9vbVRvV2VDaGF0RnJpZW5kID0gZnVuY3Rpb24gKHJvb21JZCwgZGVzY3JpcHRpb24pIHtcbiAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSwgXCJ3eFNoYXJlRnJpZW5kOmRlc2NyaXB0aW9uOlwiLCBpZCwgZGVzY3JpcHRpb24pO1xuICB9IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7IC8vQW5kcm9pZFxuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eFNoYXJlRnJpZW5kXCIsIFwiKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWXCIsIGlkLCBkZXNjcmlwdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICog5YiG5Lqr5oi/6Ze05Yiw5b6u5L+h5pyL5Y+L5ZyIXG4gKiBcbiAqIEBwYXJhbSB7U3RyaW5nfSByb29tSWQgICAgICAgICDmiL/pl7QgaWQg5L+h5oGvXG4gKiBAcGFyYW0ge1N0cmluZ30gZGVzY3JpcHRpb24gICAg5paH5pys5o+P6L+wXG4gKi9cbktRTmF0aXZlSW52b2tlLnNoYXJlUm9vbVRvV2VDaGF0VGltZWxpbmUgPSBmdW5jdGlvbiAocm9vbUlkLCBkZXNjcmlwdGlvbikge1xuICBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLCBcInd4U2hhcmU6ZGVzY3JpcHRpb246XCIsIGlkLCBkZXNjcmlwdGlvbik7XG4gIH0gZWxzZSBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVBbmRyb2lkKCkpIHsgLy9BbmRyb2lkXG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInd4U2hhcmVcIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgaWQsIGRlc2NyaXB0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiDliIbkuqvlsY/luZXmiKrlm77liLDlvq7kv6Hlpb3lj4tcbiAqL1xuS1FOYXRpdmVJbnZva2Uuc2hhcmVTY3JlZW5Ub1dlQ2hhdEZyaWVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSwgXCJ3eFNjcmVlblNoYXJlRnJpZW5kXCIsICk7XG4gIH0gZWxzZSB7IC8vQW5kcm9pZFxuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eFNjcmVlblNoYXJlRnJpZW5kXCIsIFwiKClWXCIpO1xuICB9XG59O1xuXG4vKipcbiAqIOWIhuS6q+Wxj+W5leaIquWbvuWIsOW+ruS/oeaci+WPi+WciFxuICovXG5LUU5hdGl2ZUludm9rZS5zaGFyZVNjcmVlblRvV2VDaGF0VGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwid3hTY3JlZW5TaGFyZVwiLCApO1xuICB9IGVsc2UgeyAvL0FuZHJvaWRcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwid3hTY3JlZW5TaGFyZVwiLCBcIigpVlwiKTtcbiAgfVxufTtcblxuLyoqXG4gKiDlvIDlp4vlvZXpn7NcbiAqL1xuS1FOYXRpdmVJbnZva2Uuc3RhcnRSZWNvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghS1FOYXRpdmVJbnZva2UuaXNOYXRpdmUoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwicmVjb3JkXCIpO1xuICB9IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7XG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInJlY29yZFwiLCBcIigpVlwiKTtcbiAgfVxufTtcblxuLyoqXG4gKiDnu5PmnZ/lvZXpn7NcbiAqL1xuS1FOYXRpdmVJbnZva2UuZW5kUmVjb3JkID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIUtRTmF0aXZlSW52b2tlLmlzTmF0aXZlKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLCBcImVuZFJlY29yZFwiKTtcbiAgfSBlbHNlIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUFuZHJvaWQoKSkge1xuICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJlbmRSZWNvcmRcIiwgXCIoKVZcIik7XG4gIH1cbn07XG5cbktRTmF0aXZlSW52b2tlLnNjcmVlbnNob3RTaGFyZSA9IGZ1bmN0aW9uKHN0cmluZ3MgPSAnc2hhcmVJTUcnKSB7XG4gICAgICAgIGlmKHRoaXMuX2lzQ2FwdHVyaW5nKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0NhcHR1cmluZyA9IHRydWU7XG4gICAgICAgIHZhciBzaXplID0gY2MuZGlyZWN0b3IuZ2V0V2luU2l6ZSgpO1xuICAgICAgICB2YXIgZmlsZU5hbWUgPSBcInJlc3VsdF9zaGFyZS5qcGdcIjtcbiAgICAgICAgdmFyIGZ1bGxQYXRoID0ganNiLmZpbGVVdGlscy5nZXRXcml0YWJsZVBhdGgoKSArIGZpbGVOYW1lO1xuICAgICAgICBpZihqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KGZ1bGxQYXRoKSl7XG4gICAgICAgICAgICBqc2IuZmlsZVV0aWxzLnJlbW92ZUZpbGUoZnVsbFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ZXh0dXJlID0gbmV3IGNjLlJlbmRlclRleHR1cmUoTWF0aC5mbG9vcihzaXplLndpZHRoKSwgTWF0aC5mbG9vcihzaXplLmhlaWdodCksY2MuSU1BR0VfRk9STUFUX1BORyxnbC5ERVBUSDI0X1NURU5DSUw4X09FUyk7XG4gICAgICAgIHRleHR1cmUuc2V0UG9zaXRpb24oY2MucChzaXplLndpZHRoLzIsIHNpemUuaGVpZ2h0LzIpKTtcbiAgICAgICAgdGV4dHVyZS5iZWdpbigpO1xuICAgICAgICBjYy5kaXJlY3Rvci5nZXRSdW5uaW5nU2NlbmUoKS52aXNpdCgpO1xuICAgICAgICB0ZXh0dXJlLmVuZCgpO1xuICAgICAgICB0ZXh0dXJlLnNhdmVUb0ZpbGUoZmlsZU5hbWUsIGNjLklNQUdFX0ZPUk1BVF9QTkcpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHRyeVRpbWVzID0gMDtcbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKGpzYi5maWxlVXRpbHMuaXNGaWxlRXhpc3QoZnVsbFBhdGgpKXtcblxuICAgICAgICAgICAgICAgIGlmKGNjLnN5cy5vcyA9PSBjYy5zeXMuT1NfQU5EUk9JRCl7XG4gICAgICAgICAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2Qoc2VsZi5BTkRSSU9EQ2xhc3NOYW1lLCBzdHJpbmdzLCBcIihMamF2YS9sYW5nL1N0cmluZzspVlwiLGZ1bGxQYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5faXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdHJ5VGltZXMrKztcbiAgICAgICAgICAgICAgICBpZih0cnlUaW1lcyA+IDEwKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aW1lIG91dC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZuLDUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZuLDUwKTtcbn1cblxuXG4vKipcbiAqIOaSreaUvue9kee7nOivremfs1xuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gYXVkaW9Vcmwg6K+t6Z+z5Zyw5Z2AXG4gKi9cbktRTmF0aXZlSW52b2tlLnBsYXlBdWRpb1dpdGhVcmwgPSBmdW5jdGlvbiAoYXVkaW9VcmwpIHtcbiAgaWYgKCFLUU5hdGl2ZUludm9rZS5pc05hdGl2ZSgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSwgXCJwbGF5VXJsOlwiLCBhdWRpb1VybCk7XG4gIH0gZWxzZSBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVBbmRyb2lkKCkpIHsgLy9BbmRyb2lkXG4gICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInBsYXlVcmxcIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgYXVkaW9VcmwpO1xuICB9XG59O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBLUU5hdGl2ZUludm9rZTsiLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcbmNvbnN0IENoYXRNZXNzYWdlID0gcmVxdWlyZSgnQ2hhdE1lc3NhZ2UnKTtcbmNvbnN0IEF1ZGlvTWFuYWdlciA9IHJlcXVpcmUoJ0F1ZGlvTWFuYWdlcicpO1xuXG4vLyDnlKjmnaXlj5HpgIHmtojmga/nmoQgY29tcG9uZW50XG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBicU5vZGU6Y2MuTm9kZSxcbiAgICAgICAgYnFOb2RlMTpjYy5Ob2RlLFxuICAgICAgICBidG5MYW5ndWFnZU5vZGU6Y2MuTm9kZSxcbiAgICAgICAgYnRuTGFuZ3VhZ2VOb2RlMTpjYy5Ob2RlLFxuICAgICAgICBidG5DaGFydE5vZGU6Y2MuTm9kZSxcbiAgICAgICAgYnRuQ2hhcnROb2RlMTpjYy5Ob2RlLFxuICAgICAgICB0ZXh0U2Nyb2xsVmlldzpjYy5Ob2RlLFxuICAgICAgICBpbWFnZUNvbnRlbnROb2RlOmNjLk5vZGUsXG5cbiAgICAgICAgZWRpdEJveDogY2MuRWRpdEJveCxcblxuICAgICAgICB0ZXh0UmVjb3JkU2Nyb2xsVmlldzogY2MuU2Nyb2xsVmlldyxcbiAgICAgICAgdGV4dFJlY29yZExheW91dDogY2MuTGF5b3V0LFxuXG4gICAgICAgIHRleHRQcmVmYWI6Y2MuUHJlZmFiLFxuICAgICAgICBjaGF0VGV4dFJlY29yZFByZWZhYjogY2MuUHJlZmFiLFxuICAgICAgICAvLyBpbWFnZVByZWZhYjpjYy5QcmVmYWIsXG5cbiAgICAgICAgaW5wdXROb2RlOmNjLk5vZGUsXG5cbiAgICAgICAgX3VzZXJJZDogbnVsbCxcblxuICAgICAgICBfcGxheWVySW5mb3M6IG51bGwsICAgICAgICAvLyDorrDlvZXnlKjmiLfkv6Hmga9cbiAgICAgICAgX2NoYXRUZXh0TWVzc2FnZVJlY29yZHM6IG51bGwsIC8vIOiBiuWkqeaWh+acrOa2iOaBr+iusOW9lVxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdXNlcklkID0gU29ja2V0Lmluc3RhbmNlLnVzZXJJbmZvLmlkO1xuICAgICAgICB0aGlzLl9wbGF5ZXJJbmZvcyA9IFtdO1xuICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdGhpcy50ZXh0U2Nyb2xsVmlldy5nZXRDb21wb25lbnQoY2MuU2Nyb2xsVmlldykuY29udGVudDtcbiAgICAgICAgLy8gdGhpcy5pbWFnZUNvbnRlbnQgPSB0aGlzLmltYWdlU2Nyb2xsVmlldy5nZXRDb21wb25lbnQoY2MuU2Nyb2xsVmlldykuY29udGVudDtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRleHREYXRhID0gQXVkaW9NYW5hZ2VyLmluc3RhbmNlLmNoYXRUZXh0cygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGNjLmluc3RhbnRpYXRlKHRoaXMudGV4dFByZWZhYik7XG4gICAgICAgICAgICBpdGVtLmdldENvbXBvbmVudCgnY2VsbFRleHQnKS5zZXRUZXh0KHRleHREYXRhW2ldKTtcbiAgICAgICAgICAgIGl0ZW0uZ2V0Q29tcG9uZW50KCdjZWxsVGV4dCcpLm9uU2VsZWN0QWN0aW9uID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgICAgIHNlbGYub25UZXh0Q2xpY2tBY3Rpb24odGV4dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudC5oID0gMTAwMDtcbiAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQuYWRkQ2hpbGQoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25UZXh0Q2xpY2tBY3Rpb246ZnVuY3Rpb24odGV4dCA9IFwiXCIpIHtcbiAgICAgIHRoaXMuZWRpdEJveC5zdHJpbmcgPSBcIlwiO1xuICAgICAgdGhpcy5zZW5kVGV4dCh0ZXh0KTtcbiAgICB9LFxuXG4gICAgY2xpY2tFbW9qaTogZnVuY3Rpb24gKGV2ZW50LCBlbW9qaU5hbWUpIHtcbiAgICAgIGxldCBzdHJpbmcgPSB0aGlzLmVkaXRCb3guc3RyaW5nO1xuICAgICAgdGhpcy5lZGl0Qm94LnN0cmluZyA9IHN0cmluZyArIFwiPFwiICsgZW1vamlOYW1lICsgXCI+XCI7XG4gICAgfSxcblxuICAgIGNsaWNrU2VuZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN0cmluZyA9IHRoaXMuZWRpdEJveC5zdHJpbmcgfHwgXCJcIjtcbiAgICAgIGlmIChzdHJpbmcubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVkaXRCb3guc3RyaW5nID0gXCJcIjtcbiAgICAgIHRoaXMuc2VuZFRleHQoc3RyaW5nKTtcbiAgICB9LFxuXG4gICAgc2VuZFRleHQ6IGZ1bmN0aW9uICh0ZXh0ID0gXCJcIikge1xuICAgICAgaWYgKHRleHQubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBTb2NrZXQuc2VuZFRleHQodGhpcy5fdXNlcklkLCB0ZXh0KTtcbiAgICAgIHRoaXMuZGlzbWlzcygpO1xuICAgIH0sXG5cbiAgICBkaXNtaXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSxcblxuICAgIGJxQWN0aW9uOmZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmJxTm9kZTEuYWN0aXZlID0gdGhpcy5idG5MYW5ndWFnZU5vZGUuYWN0aXZlID0gdGhpcy5idG5DaGFydE5vZGUxLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuYnFOb2RlLmFjdGl2ZSA9IHRoaXMuYnRuTGFuZ3VhZ2VOb2RlMS5hY3RpdmUgPSB0aGlzLmJ0bkNoYXJ0Tm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXh0U2Nyb2xsVmlldy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbWFnZUNvbnRlbnROb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMudGV4dFJlY29yZFNjcm9sbFZpZXcubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgdGV4dEFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5icU5vZGUxLmFjdGl2ZSA9IHRoaXMuYnRuTGFuZ3VhZ2VOb2RlLmFjdGl2ZSA9IHRoaXMuYnRuQ2hhcnROb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJxTm9kZS5hY3RpdmUgPSB0aGlzLmJ0bkxhbmd1YWdlTm9kZTEuYWN0aXZlID0gdGhpcy5idG5DaGFydE5vZGUxLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMudGV4dFNjcm9sbFZpZXcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbWFnZUNvbnRlbnROb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRleHRSZWNvcmRTY3JvbGxWaWV3Lm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSxcblxuICAgIGNoYXJ0QWN0aW9uOmZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmJxTm9kZTEuYWN0aXZlID0gdGhpcy5idG5MYW5ndWFnZU5vZGUxLmFjdGl2ZSA9IHRoaXMuYnRuQ2hhcnROb2RlMS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5icU5vZGUuYWN0aXZlID0gdGhpcy5idG5MYW5ndWFnZU5vZGUuYWN0aXZlID0gdGhpcy5idG5DaGFydE5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50ZXh0U2Nyb2xsVmlldy5hY3RpdmUgPSB0aGlzLmltYWdlQ29udGVudE5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGV4dFJlY29yZFNjcm9sbFZpZXcubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBhZGRQbGF5ZXJJbmZvczogZnVuY3Rpb24gKHBsYXllckluZm9zKSB7XG4gICAgICB0aGlzLl9wbGF5ZXJJbmZvcyA9IHRoaXMuX3BsYXllckluZm9zIHx8IFtdO1xuXG4gICAgICBwbGF5ZXJJbmZvcy5mb3JFYWNoKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICBsZXQgaGF2ZVVzZXJJbmZvID0gdGhpcy5fcGxheWVySW5mb3MuZmluZChmdW5jdGlvbiAob3duVXNlckluZm8pIHtcbiAgICAgICAgICByZXR1cm4gb3duVXNlckluZm8uaWQgPT0gdXNlckluZm8uaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChoYXZlVXNlckluZm8gPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3BsYXllckluZm9zLnB1c2godXNlckluZm8pO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBhZGRDaGF0VGV4dE1lc3NhZ2U6IGZ1bmN0aW9uICh1c2VySWQsIHRleHQpIHtcbiAgICAgIHRoaXMuX3BsYXllckluZm9zID0gdGhpcy5fcGxheWVySW5mb3MgfHwgW107XG5cbiAgICAgIHZhciBuaWNrbmFtZSA9IFwiW0lEOlwiICsgdXNlcklkICsgXCLor7Rd77yaXCI7XG4gICAgICBsZXQgdXNlckluZm8gPSB0aGlzLl9wbGF5ZXJJbmZvcy5maW5kKGZ1bmN0aW9uICh1c2VySW5mbykge1xuICAgICAgICByZXR1cm4gdXNlckluZm8uaWQgPT0gdXNlcklkO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh1c2VySW5mbykge1xuICAgICAgICBuaWNrbmFtZSA9IFwiW1wiICsgdXNlckluZm8ubmlja25hbWUgKyBcIuivtF3vvJpcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0ciA9IG5pY2tuYW1lICsgdGV4dDtcbiAgICAgIHN0ciA9IENoYXRNZXNzYWdlLnBhcnNlU3RyaW5nKHN0cik7XG4gICAgICB0aGlzLl9hZGRDaGF0VGV4dFRvUmVjb3JkKHN0cik7XG4gICAgfSxcblxuICAgIF9hZGRDaGF0VGV4dFRvUmVjb3JkOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgdmFyIGl0ZW0gPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmNoYXRUZXh0UmVjb3JkUHJlZmFiKTtcbiAgICAgIGxldCBjaGF0VGV4dFJlY29yZCA9IGl0ZW0uZ2V0Q29tcG9uZW50KCdDaGF0VGV4dFJlY29yZCcpO1xuICAgICAgY2hhdFRleHRSZWNvcmQuc2V0U3RyaW5nKHRleHQpO1xuXG4gICAgICB0aGlzLnRleHRSZWNvcmRMYXlvdXQubm9kZS5hZGRDaGlsZChpdGVtKTtcbiAgICAgIHRoaXMudGV4dFJlY29yZFNjcm9sbFZpZXcuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICB9LFxufSk7XG4iLCJ2YXIgbWFuYWdlciA9IHJlcXVpcmUoJ21hbmFnZXInKTtcbmNvbnN0IEtRTmF0aXZlSW52b2tlID0gcmVxdWlyZSgnS1FOYXRpdmVJbnZva2UnKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgIGRlZmF1bHQ6IG51bGwsICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgdXJsOiBjYy5UZXh0dXJlMkQsICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICBzZXJpYWxpemFibGU6IHRydWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgdmlzaWJsZTogdHJ1ZSwgICAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIGRpc3BsYXlOYW1lOiAnRm9vJywgLy8gb3B0aW9uYWxcbiAgICAgICAgLy8gICAgcmVhZG9ubHk6IGZhbHNlLCAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyBmYWxzZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyAuLi5cbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuXG4gICAgZXhpdEFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgY2MuZGlyZWN0b3IuZW5kKCk7XG4gICAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLklPU0NsYXNzTmFtZSxcImV4aXRBcHBcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7Ly9BbmRyb2lkXG4gICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwiZXhpdEFwcFwiLCBcIigpVlwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBjYWxsZWQgZXZlcnkgZnJhbWUsIHVuY29tbWVudCB0aGlzIGZ1bmN0aW9uIHRvIGFjdGl2YXRlIHVwZGF0ZSBjYWxsYmFja1xuICAgIC8vIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG5cbiAgICAvLyB9LFxufSk7XG4iLCIvLyBudW1iZXIua3FfdGltZXMoZikgICDosIPnlKjlpJrmrKFcblxuXG5pZiAoIU51bWJlci5wcm90b3R5cGUua3FfdGltZXMpIHtcbiAgICBcbiAgICAvKipcbiAgICAgKiDosIPnlKjkuIDkuKrmlrnms5UgdGhpcyDmrKFcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZiDopoHosIPnlKjnmoTmlrnms5VcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgdGhpc0FyZyAgIOWPr+mAie+8myBmIOeahCB0aGlz5YC8XG4gICAgICovXG4gICAgTnVtYmVyLnByb3RvdHlwZS5rcV90aW1lcyA9IGZ1bmN0aW9uKGYsIHRoaXNBcmcpIHtcbiAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXM7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICBmLmFwcGx5KHRoaXNBcmcsIGkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbiIsImNvbnN0IFNvY2tldCA9IHJlcXVpcmUoJ3NvY2tldCcpO1xuXG4vLyDnlKjkuo7lm57mlL7nmoTnu4Tku7ZcbmNvbnN0IFBsYXliYWNrID0gY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIF9wbGF5YmFja0RhdGFzOiBudWxsLCAgIC8vIOeUqOS6juWbnuaUvueahOaVsOaNrlxuICAgICAgX2lzUGxheWJhY2tpbmc6IGZhbHNlLFxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBQbGF5YmFjay5pbnN0YW5jZSA9IHRoaXM7XG4gICAgICBjYy5nYW1lLmFkZFBlcnNpc3RSb290Tm9kZSh0aGlzLm5vZGUpO1xuICAgIH0sXG5cbiAgICAvLyDorr7nva7lm57mlL7mlbDmja5cbiAgICBzZXRQbGF5YmFja0RhdGFzOiBmdW5jdGlvbiAoZGF0YXMpIHtcbiAgICAgIHRoaXMuX3BsYXliYWNrRGF0YXMgPSBkYXRhcztcbiAgICB9LFxuXG4gICAgLy8g5riF56m65Zue5pS+5pWw5o2u44CC5ZCM5pe25Lya5riF56m65Zue5pS+XG4gICAgcmVtb3ZlUGxheWJhY2tEYXRhczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zZXRQbGF5YmFja0RhdGFzKG51bGwpO1xuICAgICAgdGhpcy5zdG9wUGxheWJhY2soKTtcbiAgICB9LFxuXG4gICAgLy8g5piv5ZCm5YyF5ZCr5Zue5pS+5pWw5o2uXG4gICAgaXNDb250YWluUGxheWJhY2tEYXRhczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BsYXliYWNrRGF0YXMgIT0gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8g5byA5aeL5Zue5pS+XG4gICAgc3RhcnRQbGF5YmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgLy8g5qih5oufIHNvY2tldCDmjqXmlLbliLDkuobkuovku7bljbPlj69cbiAgICAgIGNjLmxvZyhcIlBsYXliYWNrIOW8gOWni+WbnuaUvlwiKTtcblxuICAgICAgdGhpcy5faXNQbGF5YmFja2luZyA9IHRydWU7XG5cbiAgICAgIGlmICghdGhpcy5fcGxheWJhY2tEYXRhcykge1xuICAgICAgICBjYy5lcnJvcihcIuaDs+WbnuaUvu+8jOWNtOayoeacieWbnuaUvuaVsOaNrlwiKTtcbiAgICAgICAgdGhpcy5zdG9wUGxheWJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9leGVjdXRlUGxheWJhY2soKTtcbiAgICB9LFxuXG4gICAgLy8g5YGc5q2i5Zue5pS+XG4gICAgc3RvcFBsYXliYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9pc1BsYXliYWNraW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcbiAgICB9LFxuXG4gICAgLy8g5piv5ZCm5q2j5Zyo5Zue5pS+XG4gICAgaXNQbGF5YmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUGxheWJhY2tpbmc7XG4gICAgfSxcblxuICAgIC8vIOaJp+ihjOecn+ato+eahOWbnuaUvuaTjeS9nFxuICAgIF9leGVjdXRlUGxheWJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzdGFydFRpbWUgPSAxLjA7XG4gICAgICBsZXQgaW50ZXJ2YWwgPSAzLjA7XG4gICAgICBjYy5sb2codGhpcy5fcGxheWJhY2tEYXRhcyk7XG5cbiAgICAgIC8vIOWcqOafkOS6m+eJueauiuaDheWGteS4i1xuICAgICAgLy8g5Zue5pS+5pWw5o2u6YeM5Lya5YyF5ZCr5Lik5aWXIGdhbWVPdmVyIGFjdGlvblxuICAgICAgLy8g5omA5Lul6ZyA6KaB6L+H5ruk5o6J5YW25Lit5LiA5LiqXG4gICAgICB0aGlzLl9wbGF5YmFja0RhdGFzID0gdGhpcy5fcGxheWJhY2tEYXRhcy5maWx0ZXIoZnVuY3Rpb24oc3RyaW5nLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT0gdGhpcy5fcGxheWJhY2tEYXRhcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHN0cmluZy5pbmRleE9mKCdcImFjdGlvblwiOlwiZ2FtZU92ZXInKSA9PSAtMSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICB0aGlzLl9wbGF5YmFja0RhdGFzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7XG4gICAgICAgIHZhciBkZWxheSA9IHN0YXJ0VGltZSArIGluZGV4ICogaW50ZXJ2YWw7XG4gICAgICAgIGlmIChpbmRleCA9PSB0aGlzLl9wbGF5YmFja0RhdGFzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAvLyDlpoLmnpzmmK/mnIDlkI7kuIDkuKrvvIzliJnlupTor6Xlj6rpl7TpmpTkuIDnp5JcbiAgICAgICAgICBkZWxheSA9IHN0YXJ0VGltZSArIChpbmRleCAtIDEpICogaW50ZXJ2YWwgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNjLmxvZyhcIuWbnuaUvuW8gOWni+aooeaLnyBTb2NrZXQg5o6l5pS25Yiw5pyN5Yqh5Zmo5raI5oGvLCBcIiwgaW5kZXgpO1xuICAgICAgICAgIFNvY2tldC5pbnN0YW5jZS5fZGlzcGF0Y2hSZXNwb25zZShkYXRhKTtcbiAgICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgfSxcblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWJhY2s7XG4iLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcbmNvbnN0IEtRR2xvYmFsRXZlbnQgPSByZXF1aXJlKCdLUUdsb2JhbEV2ZW50Jyk7XG5jb25zdCBBcnJheUV4dGVuc2lvbiA9IHJlcXVpcmUoJ0FycmF5RXh0ZW5zaW9uJyk7XG5jb25zdCBVc2VyTW9kZWxIZWxwZXIgPSByZXF1aXJlKCdVc2VyTW9kZWxIZWxwZXInKTtcbmNvbnN0IFBsYXliYWNrID0gcmVxdWlyZSgnUGxheWJhY2snKTtcbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGZvbGRDYXJkTm9kZTogY2MuTm9kZSwgICAgICAvLyDniYznm5bnnYDml7bnmoTmoLflrZBcbiAgICAgICAgZm9sZENhcmROb2RlMTogY2MuTm9kZSwgICAgICAvLyDniYznm5bnnYDml7bnmoTmoLflrZBcbiAgICAgIGNhcmRzQmFja0xheW91dDogY2MuTGF5b3V0LCAvLyAxM+W8oOeJjOiDjOW9se+8jOWPr+eUqOadpeWxleekuuWPkeeJjOWKqOeUuyDlkKsgY2FyZHNCYWNrIENvbXBvbmVudFxuICAgICAgY29tcGFyZUNhcmRzTm9kZTogY2MuTm9kZSwgIC8vIGNvbXBhcmVDYXJkcyAgIOWQqyBDb21wYXJlQ2FyZHMgQ29tcG9uZW50XG4gICAgICB1c2VySW5mb05vZGU6IGNjLk5vZGUsICAgICAgICAgIC8vIOWMheWQq+eUqOaIt+S/oeaBryDlkKsgdXNlckluZm8gQ29tcG9uZW50XG4gICAgICBjaGF0TWVzc2FnZU5vZGU6IGNjLk5vZGUsICAgICAgIC8vIOiBiuWkqea2iOaBryDljIXlkKsgQ2hhdE1lc3NhZ2UgQ29tcG9uZW50XG4gICAgICB1c2VyQXZhdGFyTm9kZTogY2MuTm9kZSxcbiAgICAgIHVzZXJTYW1wbGVJbmZvTm9kZTogY2MuTm9kZSxcbiAgICAgIHVzZXJJZDogMCxcbiAgICAgIC8qIyMjIyMqL1xuICAgICAgdGVTaHVQYWlMYWJlbDpjYy5Ob2RlLFxuICAgICAgICBjYXJkVHlwZVByZWZhYjogY2MuUHJlZmFiLFxuICAgICAgLy8g55So5oi35L+h5oGvXG4gICAgICAvLyAx44CBIOWmguaenCDljIXlkKvvvJpjYXJkSW5mbzpbXe+8jOihqOaYjueUqOaIt+W3sue7j+WHuueJjFxuICAgICAgLy9cbiAgICAgIF91c2VySW5mbzogbnVsbCxcbiAgICAgIF9kZXNrSW5mbzogbnVsbCxcbiAgICAgICAgLyoqL1xuICAgICAgICBwbGF5ZWRDb21wYXJlQ2FyZHNJbmRleHM6IHtcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgICB9XG4gICAgICAgIC8qKi9cbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnVzZXJBdmF0YXJOb2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLl9zaG93VXNlckluZm8sIHRoaXMpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0sXG5cbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudXNlckF2YXRhck5vZGUub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLl9zaG93VXNlckluZm8sIHRoaXMpO1xuICAgIH0sXG5cbiAgICBfc2hvd1VzZXJJbmZvOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnVzZXJTYW1wbGVJbmZvTm9kZS5nZXRDb21wb25lbnQoJ1VzZXJTYW1wbGVJbmZvJykudXBkYXRlV2l0aFVzZXIodGhpcy5fdXNlckluZm8pO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvbGRDYXJkTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2xkQ2FyZE5vZGUxLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy50ZVNodVBhaUxhYmVsLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5jYXJkc0JhY2tMYXlvdXQuYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbXBhcmVDYXJkc05vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbXBhcmVDYXJkc05vZGUuZ2V0Q29tcG9uZW50KCdDb21wYXJlQ2FyZHMnKS5yZXNldCgpO1xuICAgIH0sXG5cbiAgICAvKiMjIyMqL1xuICAgIHJlc2V0MjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvbGRDYXJkTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2xkQ2FyZE5vZGUxLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy50ZVNodVBhaUxhYmVsLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5jYXJkc0JhY2tMYXlvdXQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAvL3RoaXMuY29tcGFyZUNhcmRzTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIC8vdGhpcy5jb21wYXJlQ2FyZHNOb2RlLmdldENvbXBvbmVudCgnQ29tcGFyZUNhcmRzJykucmVzZXQoKTtcbiAgICB9LFxuICAgIC8qIyMjIyMqL1xuXG4gICAgdXBkYXRlVXNlckluZm9XaXRoVXNlcnM6IGZ1bmN0aW9uICh1c2Vycykge1xuICAgICAgbGV0IHVzZXIgPSB1c2Vycy5maW5kKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJJZCA9PSBlLmlkO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgdGhpcy51cGRhdGVVc2VySW5mbyh1c2VyKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlVXNlckluZm86IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aGlzLl91c2VySW5mbyA9IHVzZXI7XG4gICAgICB0aGlzLm5vZGUuYWN0aXZlID0gKHVzZXIgIT0gbnVsbCk7XG4gICAgICB0aGlzLnVzZXJJbmZvTm9kZS5hY3RpdmUgPSB0aGlzLm5vZGUuYWN0aXZlO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHVzZXJJbmZvID0gdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpO1xuICAgICAgdXNlckluZm8udXBkYXRlQXZhdGFyKHVzZXIuYXZhdGFyVXJsKTtcbiAgICAgIHVzZXJJbmZvLnVwZGF0ZU5pY2tuYW1lKHVzZXIubmlja25hbWUpO1xuICAgICAgdXNlckluZm8uc2V0T2ZmbGluZVZpc2libGUoIXVzZXIub25saW5lU3RhdHVzKTtcblxuICAgICAgLy9pZiAodGhpcy5fZGVza0luZm8gJiYgdGhpcy5fZGVza0luZm8uY0luZGV4ID4gMCkge1xuICAgICAgLy8gIGlmIChVc2VyTW9kZWxIZWxwZXIuaXNQbGF5ZWRDYXJkcyh1c2VyKSkge1xuICAgICAgLy8gICAgdGhpcy5wbGF5Q2FyZCh1c2VyLmlkKTtcbiAgICAgIC8vICAgIHRoaXMuY29tcGFyZUNhcmRzTm9kZS5nZXRDb21wb25lbnQoJ0NvbXBhcmVDYXJkcycpLnNldENvbXBhcmVEYXRhKHVzZXIpO1xuICAgICAgLy8gIH1cbiAgICAgIC8vfVxuICAgICAgICAvKiovXG4gICAgICAgIGNvbnN0IGNJbmRleCA9IHRoaXMuX2Rlc2tJbmZvLmNJbmRleDtcbiAgICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvICYmIGNJbmRleCA+IDAgJiYgKHRoaXMucGxheWVkQ29tcGFyZUNhcmRzSW5kZXhzLmluZGV4T2YoY0luZGV4KSA9PSAtMSkpIHtcbiAgICAgICAgICAgIGlmIChVc2VyTW9kZWxIZWxwZXIuaXNQbGF5ZWRDYXJkcyh1c2VyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGxheUNhcmQodXNlci5pZCx1c2VyLmNhcmRJbmZvKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBhcmVDYXJkc05vZGUuZ2V0Q29tcG9uZW50KCdDb21wYXJlQ2FyZHMnKS5zZXRDb21wYXJlRGF0YSh1c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiovXG4gICAgfSxcblxuICAgIC8vIOabtOaWsOaIv+S4u+S/oeaBr1xuICAgIHVwZGF0ZUJhbmtlcjogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXNlckluZm9Db21wID0gdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpO1xuICAgICAgaWYgKCF0aGlzLl91c2VySW5mbykge1xuICAgICAgICB1c2VySW5mb0NvbXAuc2V0SXNCYW5rZXIoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBpc0JhbmtlciA9IHRoaXMuX3VzZXJJbmZvID8gdGhpcy5fdXNlckluZm8uaXNCYW5rZXIgOiBmYWxzZTtcbiAgICAgIHVzZXJJbmZvQ29tcC5zZXRJc0Jhbmtlcihpc0Jhbmtlcik7ICAgICAgXG4gICAgfSxcblxuICAgIHNob3dGYW5nWmh1U3RhdHVzOiBmdW5jdGlvbiAoY3JlYXRlSWQsIHZpc2libGUgPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy5ub2RlLmFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl91c2VySW5mby5pZCA9PSBjcmVhdGVJZCkge1xuICAgICAgICAgICAgdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpLnNldEZhbmdaaHVOb2RlVmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDmm7TmlrDliIbmlbAgXG4gICAgICogXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjb3JlIOeUqOaIt+WIhuaVsOOAgeWPr+mAiVxuICAgICAqL1xuICAgIHVwZGF0ZVNjb3JlOiBmdW5jdGlvbihzY29yZSkge1xuICAgICAgaWYgKCFzY29yZSAmJiB0aGlzLl91c2VySW5mbykge1xuICAgICAgICBzY29yZSA9IHRoaXMuX3VzZXJJbmZvLnRvdGFsU2NvcmU7XG4gICAgICB9XG5cbiAgICAgIGxldCB1c2VySW5mbyA9IHRoaXMudXNlckluZm9Ob2RlLmdldENvbXBvbmVudCgndXNlckluZm8nKTtcbiAgICAgIHVzZXJJbmZvLnVwZGF0ZVNjb3JlKHNjb3JlKTtcbiAgICB9LFxuXG4gICAgc2hvd1JlYWR5U3RhdHVzOiBmdW5jdGlvbiAodXNlcklkLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgICAgaWYgKCF0aGlzLm5vZGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3VzZXJJbmZvLmlkID09IHVzZXJJZCkge1xuICAgICAgICB0aGlzLnVzZXJJbmZvTm9kZS5nZXRDb21wb25lbnQoJ3VzZXJJbmZvJykuc2V0UmVhZHlOb2RlVmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLypzZXREZXNrSW5mbzogZnVuY3Rpb24gKGRlc2tJbmZvKSB7XG4gICAgIHRoaXMuX2Rlc2tJbmZvID0gZGVza0luZm87XG4gICAgIH0sKi9cbiAgICB1cGRhdGVEZXNrSW5mbzogZnVuY3Rpb24gKGRlc2tJbmZvKSB7XG4gICAgICAgIHRoaXMuX2Rlc2tJbmZvID0gZGVza0luZm87XG5cbiAgICAgICAgaWYgKGRlc2tJbmZvICYmICFkZXNrSW5mby5pc0NCZWdpbikge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKiovXG5cbiAgICBoaWRlUmVhZHlTdGF0dXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudXNlckluZm9Ob2RlLmdldENvbXBvbmVudCgndXNlckluZm8nKS5zZXRSZWFkeU5vZGVWaXNpYmxlKGZhbHNlKTtcbiAgICB9LFxuXG4gICAgcGxheUZhUGFpQW5pbWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYy5sb2coXCJwbGF5RmFQYWlBbmltYXRpb25cIik7XG4gICAgICBpZiAoIXRoaXMubm9kZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoVXNlck1vZGVsSGVscGVyLmlzUGxheWVkQ2FyZHModGhpcy5fdXNlckluZm8pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGNhcmRzQmFjayA9IHRoaXMuY2FyZHNCYWNrTGF5b3V0LmdldENvbXBvbmVudCgnY2FyZHNCYWNrJyk7XG4gICAgICBjYXJkc0JhY2suc2hvd1BsYXlDYXJkQmFja3MoKTtcbiAgICB9LFxuXG4gICAgc2hvdWxkU2hvd0ZhUGFpQW5pbWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gVXNlck1vZGVsSGVscGVyLmlzUGxheWVkQ2FyZHModGhpcy5fdXNlckluZm8pO1xuICAgIH0sXG5cbiAgICBzZXRVc2VyT25saW5lU3RhdHVzOiBmdW5jdGlvbiAodXNlcklkLCBzdGF0dXMgPSAxKSB7XG4gICAgICBpZiAodXNlcklkICE9IHRoaXMudXNlcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHVzZXJJbmZvID0gdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpO1xuICAgICAgdXNlckluZm8uc2V0T2ZmbGluZVZpc2libGUoc3RhdHVzICE9IDEpO1xuICAgIH0sXG5cbiAgICBzaG93Q2hhdFRleHQ6IGZ1bmN0aW9uICh1c2VySWQsIG1lc3NhZ2UpIHtcbiAgICAgIGlmICh1c2VySWQgIT0gdGhpcy51c2VySWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgY2hhdE1lc3NhZ2UgPSB0aGlzLmNoYXRNZXNzYWdlTm9kZS5nZXRDb21wb25lbnQoJ0NoYXRNZXNzYWdlJyk7XG4gICAgICBjaGF0TWVzc2FnZS5zZXRTdHJpbmcobWVzc2FnZSk7XG4gICAgfSxcblxuICAgIC8vIOeUqOaIt+W3sue7j+WHuueJjO+8jOWkhOS6juS4ieWghuebluedgOeJjOeahOeKtuaAgVxuICAgIHBsYXlDYXJkOiBmdW5jdGlvbiAodXNlcklkLGNhcmRJbmZvKSB7XG4gICAgICBpZiAodGhpcy51c2VySWQgIT0gdXNlcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYXJkc0JhY2tMYXlvdXQubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY29tcGFyZUNhcmRzTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMudGVTaHVQYWlMYWJlbC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIC8qIyMjIyPlpoLmnpzmmK/nibnmrorniYzlsLHmmL7npLrnibnmrorniYzlnovov5nlm5vkuKrlrZflnKjnm5bnnYDniYznmoTkuIrpnaIqL1xuICAgICAgdmFyIHBsYXkgPSBjYy5maW5kKFwiQ2FudmFzXCIpLmdldENvbXBvbmVudChcInBsYXlcIik7ICAvL3BsYXnnu4Tku7ZcbiAgICAgIC8v5aaC5p6c54K55Ye75LqG5oGt5Zac5L2g6aG16Z2i55qE56Gu5a6a5oyJ6ZKuXG4gICAgICAvL2lmKHRoaXMuY29tcGFyZUNhcmRzTm9kZS5nZXRDb21wb25lbnQoXCJDYXJkVHlwZUNvbWJpbmVcIikuQnRuQ2xpY2tHb25nWGlOaUNvbWZpcm0pe1xuICAgICAgICAgIGlmKGNjLm1vc2hpICE9IDEpe1xuICAgICAgICAgICAgICBpZihwbGF5LmdldElzVGVTaHVQYWkodGhpcy51c2VySWQpKXtcbiAgICAgICAgICAgICAgICAgIHRoaXMudGVTaHVQYWlMYWJlbC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIHRoaXMudGVTaHVQYWlMYWJlbC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgY2MubG9nKHRoaXMpXG4gICAgICAgIGNjLmxvZygnLS0tLS0tMjI5JylcbiAgICAgICAgaWYgKFBsYXliYWNrLmluc3RhbmNlLmlzUGxheWJhY2tpbmcoKSkgey8vXCLlm57mlL5cIjtcbiAgICAgICAgICAgIHRoaXMuZm9sZENhcmROb2RlMS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9sZENhcmROb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9sZENhcmROb2RlMS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBpZih0aGlzLmZvbGRDYXJkTm9kZS5uYW1lICE9IFwiZm9sZENhcmROb2RlU2VsZlwiKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgMztpKyspe1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmZvbGRDYXJkTm9kZS5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgbm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICAgICAgdmFyIGNhcmRNb2RlcyA9IFtdO1xuICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGNhcmRJbmZvW2ldLmNhcmRzLmxlbmd0aDtqKyspe1xuICAgICAgICAgICAgICAgIHZhciBzID0gY2FyZEluZm9baV0uY2FyZHNbal07XG4gICAgICAgICAgICAgICAgY2FyZE1vZGVzLnB1c2gocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXJkTW9kZXMgPSBjYXJkTW9kZXMubWFwKGZ1bmN0aW9uKHNlckNhcmQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJDYXJkLnN1aXQrJ18nK3NlckNhcmQubnVtYmVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYXJkTW9kZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FyZE5hbWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FyZFR5cGVTcHJpdGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmNhcmRUeXBlUHJlZmFiKTtcbiAgICAgICAgICAgICAgICBpZihjYy5tYVBhaSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJkTWFQYWkgPSAnM18nICsgY2MubWFQYWk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmROYW1lID09IGNhcmRNYVBhaSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS5jb2xvciA9IG5ldyBjYy5Db2xvcigyMjYsIDE0NSwgMTQ1KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihpID09IDApe1xuICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS55ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpID09IDEpe1xuICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS55ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpID09IDIpe1xuICAgICAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS55ID0gOTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FyZFR5cGVTcHJpdGUud2lkdGggPSA2NjtcbiAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS5oZWlnaHQgPSA5MjtcbiAgICAgICAgICAgICAgICBjYXJkVHlwZVNwcml0ZS5nZXRDb21wb25lbnQoJ0NhcmRUeXBlU3ByaXRlJykuc2V0Q2FyZChjYXJkTmFtZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5hZGRDaGlsZChjYXJkVHlwZVNwcml0ZSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgY2MubG9nKG5vZGUpXG4gICAgICAgICAgICBjYy5sb2codGhpcy5mb2xkQ2FyZE5vZGUpXG4gICAgICAgICAgICBjYy5sb2codGhpcy5mb2xkQ2FyZE5vZGUxKVxuICAgICAgICAgICAgY2MubG9nKCctLS0tLS0tMjM5JylcbiAgICAgICAgfVxuICAgICAgICAvL31cblxuICAgIH0sXG5cbiAgICAvLyDlh4blpIflpb3lvIDlp4vmr5TniYxcbiAgICByZWFkeVRvQ29tcGFyZUNhcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhcmRzQmFja0xheW91dC5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5jb21wYXJlQ2FyZHNOb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9sZENhcmROb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvbGRDYXJkTm9kZTEuYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLnRlU2h1UGFpTGFiZWwuYWN0aXZlID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIOaSreaUvuaJk+aequWKqOeUu1xuICAgIC8vIEBwYXJhbSB1c2VySWQgICDopoHkuLvliqjmiZPmnqrnmoTnlKjmiLdpZFxuICAgIC8vIEBwYXJhbSB0b1VzZXJJbmRleCAg5oyo5p6q55qE55So5oi355qEIGluZGV4XG4gICAgcGxheVNob290QW5pbWF0aW9uOiBmdW5jdGlvbiAodXNlcklkLCB0b1VzZXJJbmRleCkge1xuICAgICAgaWYgKHVzZXJJZCAhPSB0aGlzLnVzZXJJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCB1c2VySW5mbyA9IHRoaXMudXNlckluZm9Ob2RlLmdldENvbXBvbmVudCgndXNlckluZm8nKTtcbiAgICAgIHVzZXJJbmZvLnBsYXlTaG9vdEFuaW1hdGlvbih0b1VzZXJJbmRleCk7XG4gICAgfSxcblxuICAgIC8vIOaSreaUvuS4reaequWKqOeUu1xuICAgIHBsYXlCdWxsZXRIb2xlQW5pbWF0aW9uOiBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICBpZiAodXNlcklkICE9IHRoaXMudXNlcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHVzZXJJbmZvID0gdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpO1xuICAgICAgdXNlckluZm8ucGxheUJ1bGxldEhvbGVBbmltYXRpb24oKTtcbiAgICB9LFxuXG4gICAgLy8g5pKt5pS+5YWo5Z6S5omT5Yqo55S7XG4gICAgcGxheUhvbWVSdW5BaW1hdGlvbjogZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgICAgaWYgKHVzZXJJZCAhPSB0aGlzLnVzZXJJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCB1c2VySW5mbyA9IHRoaXMudXNlckluZm9Ob2RlLmdldENvbXBvbmVudCgndXNlckluZm8nKTtcbiAgICAgIHVzZXJJbmZvLnBsYXlIb21lUnVuQWltYXRpb24oKTtcbiAgICB9LFxuXG4gICAgcGxheVNwZWFrQW5pbWF0aW9uOiBmdW5jdGlvbiAodXNlcklkKSB7XG4gICAgICBpZiAodXNlcklkICE9IHRoaXMudXNlcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHVzZXJJbmZvID0gdGhpcy51c2VySW5mb05vZGUuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpO1xuICAgICAgdXNlckluZm8ucGxheVNwZWFrQW5pbWF0aW9uKCk7XG4gICAgfSxcblxuICAgIG5leHRDb21wYXJlU2NvcmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5ub2RlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgbGV0IHNjb3JlID0gdGhpcy5jb21wYXJlQ2FyZHNOb2RlLmdldENvbXBvbmVudCgnQ29tcGFyZUNhcmRzJykubmV4dENvbXBhcmVTY29yZSgpO1xuICAgICAgcmV0dXJuIHNjb3JlO1xuICAgIH0sXG5cbiAgICBzaG93TmV4dENvbXBhcmVDYXJkczogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubmV4dENvbXBhcmVTY29yZSgpIDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXBhcmVDYXJkc05vZGUuZ2V0Q29tcG9uZW50KCdDb21wYXJlQ2FyZHMnKS5zaG93TmV4dENhcmRzKCk7XG4gICAgfSxcbn0pO1xuIiwiY29uc3QgS1FDYXJkUmVzSGVscGVyID0gcmVxdWlyZSgnS1FDYXJkUmVzSGVscGVyJyk7XG5jb25zdCBTcHJpdGVIZWxwZXIgPSByZXF1aXJlKCdTcHJpdGVIZWxwZXInKTtcbmNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBhdmF0YXJTcHJpdGU6IGNjLlNwcml0ZSxcbiAgICAgICAgbGFiZWxOaWNrbmFtZTogY2MuTGFiZWwsXG4gICAgICAgIGxhYmVsUmVzdWx0TnVtYmVyOiBjYy5MYWJlbCxcbiAgICAgICAgbGF5b3V0VG91RGFvOiBjYy5MYXlvdXQsXG4gICAgICAgIGxheW91dFpob25nRGFvOiBjYy5MYXlvdXQsXG4gICAgICAgIGxheW91dFdlaURhbzogY2MuTGF5b3V0LFxuICAgICAgICBsYXlvdXRUZVNodTogY2MuTGF5b3V0LFxuXG4gICAgICAgIGxhYmVsVGVTaHVQYWlUaXRsZTogY2MuTGFiZWwsXG5cbiAgICAgICAgc2NvcmVVbml0Tm9kZTogY2MuTm9kZSwgICAgICAvLyDnp6/liIZcbiAgICAgICAgZGlhbW9uZFVuaXROb2RlOiBjYy5Ob2RlLCAgICAvLyDpkrvnn7NcbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIC8ve1wiaWRcIjoxMDAwNDksXCJuaWNrbmFtZVwiOlwiaW15YVwiLFwib3BlbklkXCI6XCJ4eFwiLFwiYXZhdGFyVXJsXCI6XCJ4eFwiLFwic2V4XCI6MSxcbiAgICAvLyBcImNhcmROdW1iZXJcIjozLFwib25saW5lU3RhdHVzXCI6MSxcImludml0ZUNvZGVcIjpcIlwiLFwiaXBBZGRyZXNzXCI6XCI6OmZmZmY6MjIyLjI0NC42NS4yMDFcIixcbiAgICAvLyBcImxhc3RMb2dpblRpbWVcIjpcIjIwMTctMDQtMTMgMjI6MDk6MDFcIixcImNyZWF0ZUF0XCI6XCIyMDE3LTA0LTExIDIyOjM5OjMwXCIsXG4gICAgLy8gXCJ1cGRhdGVBdFwiOlwiMjAxNy0wNC0xMyAyMjowOTowMVwiLFxuICAgIC8vIFwiY2FyZHNcIjpbXSxcInJvb21JZFwiOlwiNTk4ODgzXCIsXCJyZWFkeVN0YXR1c1wiOnRydWUsXCJ0b3RhbFNjb3JlXCI6MCxcbiAgICAvLyBcImNTY29yZVwiOjAsXCJpc0JhbmtlclwiOmZhbHNlfVxuICAgIHVwZGF0ZVdpdGhQbGF5ZXJJbmZvOiBmdW5jdGlvbiAocGxheWVySW5mbywgaXNSYW5kb21Sb29tID0gZmFsc2UpIHtcbiAgICAgIFNwcml0ZUhlbHBlci5zZXRJbWFnZVVybCh0aGlzLmF2YXRhclNwcml0ZSwgcGxheWVySW5mby5hdmF0YXJVcmwpO1xuICAgICAgdGhpcy5sYWJlbE5pY2tuYW1lLnN0cmluZyA9IHBsYXllckluZm8ubmlja25hbWU7XG4gICAgICAgIC8vY2MubG9nKHRoaXMubGFiZWxSZXN1bHROdW1iZXIuc3RyaW5nKVxuICAgICAgICAvL2NjLmxvZyhwbGF5ZXJJbmZvKVxuICAgICAgICAvL2NjLmxvZyhwbGF5ZXJJbmZvLmNTY29yZSlcbiAgICAgICAgLy9jYy5sb2coJy0tLTM2JylcbiAgICAgIHRoaXMubGFiZWxSZXN1bHROdW1iZXIuc3RyaW5nID0gcGxheWVySW5mby5jU2NvcmU7XG5cbiAgICAgIHRoaXMuc2NvcmVVbml0Tm9kZS5hY3RpdmUgPSAhaXNSYW5kb21Sb29tO1xuICAgICAgdGhpcy5kaWFtb25kVW5pdE5vZGUuYWN0aXZlID0gaXNSYW5kb21Sb29tO1xuICAgICAgdmFyIE51bWJlciA9IHBsYXllckluZm8uY1Njb3JlO1xuICAgICAgaWYgKGlzUmFuZG9tUm9vbSkge1xuICAgICAgICAvLyDlpoLmnpzmmK/pmo/mnLrlnLrnmoTor53vvIzliJnmmL7npLrpkrvnn7PmlbDph49cbiAgICAgICAgICBOdW1iZXIgPSBwbGF5ZXJJbmZvLmNTY29yZSAqIDU7XG4gICAgICB9XG4gICAgICAgIHRoaXMubGFiZWxSZXN1bHROdW1iZXIuc3RyaW5nID0gTnVtYmVyO1xuICAgIH0sXG5cbiAgICBzZXRDYXJkczogZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgICBjYy5hc3NlcnQoY2FyZHMubGVuZ3RoID09IDEzKTtcblxuICAgICAgLy8g5LiN5Lya5YaN5pyJ54m55q6K54mM5LqGXG4gICAgICAgLyppZiAoS1FDYXJkLmlzVGVTaHVQYWkoY2FyZHMpKSB7XG4gICAgICAgICB0aGlzLnNldFRlU2h1Q2FyZHMoY2FyZHMpO1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgKi9cblxuICAgICAgLy9sZXQgdG91Q2FyZHMgPSBjYXJkcy5zbGljZSgwLCAzKTtcbiAgICAgIC8vbGV0IHpob25nQ2FyZHMgPSBjYXJkcy5zbGljZSgzLCAzICsgNSk7XG4gICAgICAvL2xldCB3ZWlDYXJkcyA9IGNhcmRzLnNsaWNlKDgpO1xuICAgICAgLy90aGlzLnNldFRvdUNhcmRzKHRvdUNhcmRzKTtcbiAgICAgIC8vdGhpcy5zZXRaaG9uZ0NhcmRzKHpob25nQ2FyZHMpO1xuICAgICAgLy90aGlzLnNldFdlaUNhcmRzKHdlaUNhcmRzKTtcbiAgICB9LFxuXG4gICAgLypzZXRUb3VDYXJkczogZnVuY3Rpb24gKGNhcmRzKSB7XG4gICAgICB0aGlzLl9zZXRDYXJkc1RvTGF5b3V0KHRoaXMubGF5b3V0VG91RGFvLCBjYXJkcyk7XG4gICAgfSxcblxuICAgIHNldFpob25nQ2FyZHM6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgdGhpcy5fc2V0Q2FyZHNUb0xheW91dCh0aGlzLmxheW91dFpob25nRGFvLCBjYXJkcyk7XG4gICAgfSxcblxuXG4gICAgc2V0V2VpQ2FyZHM6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgdGhpcy5fc2V0Q2FyZHNUb0xheW91dCh0aGlzLmxheW91dFdlaURhbywgY2FyZHMpO1xuICAgIH0sKi9cblxuICAgIC8v57uT566XICDlsIbnibnmrorniYzmlL7lhaVMYXlvdXRcbiAgICAvKnNldFRlU2h1Q2FyZHM6IGZ1bmN0aW9uIChjYXJkcykge1xuICAgICAgdGhpcy5sYXlvdXRUZVNodS5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLmxheW91dFRvdURhby5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5sYXlvdXRaaG9uZ0Rhby5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5sYXlvdXRXZWlEYW8ubm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3NldENhcmRzVG9MYXlvdXQodGhpcy5sYXlvdXRUZVNodSwgY2FyZHMpO1xuXG4gICAgICBsZXQgdHlwZU5hbWUgPSBLUUNhcmQuY2FyZHNUeXBlTmFtZShjYXJkcyk7XG4gICAgICB0aGlzLmxhYmVsVGVTaHVQYWlUaXRsZS5zdHJpbmcgPSB0eXBlTmFtZTtcbiAgICB9LCovXG5cbiAgIC8v57uT566X5bCG54mM5pS+5YiwTGF5b3V06YeM6Z2iXG4gICAgLypfc2V0Q2FyZHNUb0xheW91dDogZnVuY3Rpb24gKGxheW91dCwgY2FyZHMpIHtcbiAgICAgIGxldCBub2RlID0gbGF5b3V0Lm5vZGU7XG4gICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHNwcml0ZU5vZGUsIGluZGV4KSB7XG4gICAgICAgIGxldCBzcHJpdGUgPSBzcHJpdGVOb2RlLmdldENvbXBvbmVudCgnY2MuU3ByaXRlJyk7XG4gICAgICAgIGxldCBjYXJkID0gY2FyZHNbaW5kZXhdO1xuICAgICAgICBpZiAoIWNhcmQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBLUUNhcmRSZXNIZWxwZXIuc2V0Q2FyZFNwcml0ZUZyYW1lKHNwcml0ZSwgY2FyZC5jYXJkTmFtZSgpKTtcbiAgICAgIH0pO1xuICAgIH0sKi9cbn0pO1xuIiwiY29uc3QgTWFuYWdlciA9IHJlcXVpcmUoJ21hbmFnZXInKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIG11c2ljU2xpZGVyOmNjLk5vZGUsXG4gICAgICBlZmZlY3RTbGlkZXI6Y2MuTm9kZSxcbiAgICAgIGJ0blN3aXRjaEFjY291bnQ6IGNjLkJ1dHRvbixcblxuICAgICAgX2F1ZGlvTWFuYWdlcjogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9hdWRpb01hbmFnZXIgPSBjYy5maW5kKCdBdWRpb01hbmFnZXInKSB8fCB7fTtcbiAgICAgIHRoaXMuX2F1ZGlvTWFuYWdlciA9IHRoaXMuX2F1ZGlvTWFuYWdlci5nZXRDb21wb25lbnQoJ0F1ZGlvTWFuYWdlcicpO1xuXG4gICAgICB0aGlzLl9pbml0U2xpZGVycygpO1xuICAgIH0sXG5cbiAgICBfaW5pdFNsaWRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2luaXRTbGlkZXJFdmVudHMoKTtcblxuICAgICAgbGV0IG11c2ljVmFsID0gTWFuYWdlci5nZXRNdXNpY1ZhbHVlKCk7XG4gICAgICBsZXQgZWZmZWN0VmFsID0gTWFuYWdlci5nZXRNdXNpY0VmZmVjdFZhbHVlKCk7XG5cbiAgICAgIHRoaXMuX2F1ZGlvTWFuYWdlci5zZXRCZ011c2ljVm9sdW1uKG11c2ljVmFsKTtcbiAgICAgIHRoaXMuX2F1ZGlvTWFuYWdlci5zZXRFZmZlY3RNdXNpY1ZvbHVtKGVmZmVjdFZhbCk7XG5cbiAgICAgIHRoaXMubXVzaWNTbGlkZXIuZ2V0Q29tcG9uZW50KCdzbGlkZXInKS5zZXRWYWx1ZShtdXNpY1ZhbCk7XG4gICAgICB0aGlzLmVmZmVjdFNsaWRlci5nZXRDb21wb25lbnQoJ3NsaWRlcicpLnNldFZhbHVlKGVmZmVjdFZhbCk7XG4gICAgfSxcblxuICAgIF9pbml0U2xpZGVyRXZlbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLm11c2ljU2xpZGVyLmdldENvbXBvbmVudCgnc2xpZGVyJykub25WYWx1ZUNoYW5nZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIE1hbmFnZXIuc2V0TXVzaWNWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHNlbGYuX2F1ZGlvTWFuYWdlci5zZXRCZ011c2ljVm9sdW1uKHZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZWZmZWN0U2xpZGVyLmdldENvbXBvbmVudCgnc2xpZGVyJykub25WYWx1ZUNoYW5nZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIE1hbmFnZXIuc2V0TXVzaWNFZmZlY3RWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHNlbGYuX2F1ZGlvTWFuYWdlci5zZXRFZmZlY3RNdXNpY1ZvbHVtKHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGNsaWNrU3dpdGNoOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuXG4gICAgaGlkZVN3aXRjaDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5idG5Td2l0Y2hBY2NvdW50KSB7XG4gICAgICAgIHRoaXMuYnRuU3dpdGNoQWNjb3VudC5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG59KTtcbiIsImxldCBTcHJpdGVIZWxwZXIgPSB7XG4gIHNldEltYWdlVXJsOiBmdW5jdGlvbiAoc3ByaXRlLCB1cmwpIHtcbiAgICBpZiAodXJsLmVuZHNXaXRoKFwicG5nXCIpIHx8IHVybC5lbmRzV2l0aChcImpwZ1wiKSB8fCB1cmwuZW5kc1dpdGgoXCJnaWZcIikpIHtcblxuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgPSB1cmwgKyBcIi5wbmdcIjtcbiAgICB9XG5cbiAgICBjYy5sb2FkZXIubG9hZCh1cmwsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnJhbWUgPSBuZXcgY2MuU3ByaXRlRnJhbWUoZGF0YSk7XG4gICAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBmcmFtZTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3ByaXRlSGVscGVyO1xuIiwiLy8g57uZIFN0cmluZyDmt7vliqDlip/og71cblxuLy8gc3RyLnN0YXJ0c1dpdGgoXCJcIik7XG4vLyBzdHIuZW5kc1dpdGgoXCJcIik7XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gIChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7IC8vIG5lZWRlZCB0byBzdXBwb3J0IGBhcHBseWAvYGNhbGxgIHdpdGggYHVuZGVmaW5lZGAvYG51bGxgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gSUUgOCBvbmx5IHN1cHBvcnRzIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG9uIERPTSBlbGVtZW50c1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICB2YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgICAgICB2YXIgcmVzdWx0ID0gJGRlZmluZVByb3BlcnR5KG9iamVjdCwgb2JqZWN0LCBvYmplY3QpICYmICRkZWZpbmVQcm9wZXJ0eTtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHt9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0oKSk7XG4gICAgdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG4gICAgdmFyIHN0YXJ0c1dpdGggPSBmdW5jdGlvbihzZWFyY2gpIHtcbiAgICAgIGlmICh0aGlzID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICB9XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlYXJjaCAmJiB0b1N0cmluZy5jYWxsKHNlYXJjaCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICB9XG4gICAgICB2YXIgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSBTdHJpbmcoc2VhcmNoKTtcbiAgICAgIHZhciBzZWFyY2hMZW5ndGggPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICAgICAgdmFyIHBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgICAvLyBgVG9JbnRlZ2VyYFxuICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uID8gTnVtYmVyKHBvc2l0aW9uKSA6IDA7XG4gICAgICBpZiAocG9zICE9IHBvcykgeyAvLyBiZXR0ZXIgYGlzTmFOYFxuICAgICAgICBwb3MgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHN0YXJ0ID0gTWF0aC5taW4oTWF0aC5tYXgocG9zLCAwKSwgc3RyaW5nTGVuZ3RoKTtcbiAgICAgIC8vIEF2b2lkIHRoZSBgaW5kZXhPZmAgY2FsbCBpZiBubyBtYXRjaCBpcyBwb3NzaWJsZVxuICAgICAgaWYgKHNlYXJjaExlbmd0aCArIHN0YXJ0ID4gc3RyaW5nTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzZWFyY2hMZW5ndGgpIHtcbiAgICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KHN0YXJ0ICsgaW5kZXgpICE9IHNlYXJjaFN0cmluZy5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBpZiAoZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJywge1xuICAgICAgICAndmFsdWUnOiBzdGFydHNXaXRoLFxuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgfVxuICB9KCkpO1xufVxuXG4vLyBzdHIuZW5kc1dpdGgoXCJcIik7XG5pZiAoIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcblx0KGZ1bmN0aW9uKCkge1xuXHRcdCd1c2Ugc3RyaWN0JzsgLy8gbmVlZGVkIHRvIHN1cHBvcnQgYGFwcGx5YC9gY2FsbGAgd2l0aCBgdW5kZWZpbmVkYC9gbnVsbGBcblx0XHR2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBJRSA4IG9ubHkgc3VwcG9ydHMgYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgb24gRE9NIGVsZW1lbnRzXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHRcdHZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFx0XHRcdHZhciByZXN1bHQgPSAkZGVmaW5lUHJvcGVydHkob2JqZWN0LCBvYmplY3QsIG9iamVjdCkgJiYgJGRlZmluZVByb3BlcnR5O1xuXHRcdFx0fSBjYXRjaChlcnJvcikge31cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSgpKTtcblx0XHR2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblx0XHR2YXIgZW5kc1dpdGggPSBmdW5jdGlvbihzZWFyY2gpIHtcblx0XHRcdGlmICh0aGlzID09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgVHlwZUVycm9yKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuXHRcdFx0aWYgKHNlYXJjaCAmJiB0b1N0cmluZy5jYWxsKHNlYXJjaCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcblx0XHRcdFx0dGhyb3cgVHlwZUVycm9yKCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHRcdHZhciBzZWFyY2hTdHJpbmcgPSBTdHJpbmcoc2VhcmNoKTtcblx0XHRcdHZhciBzZWFyY2hMZW5ndGggPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuXHRcdFx0dmFyIHBvcyA9IHN0cmluZ0xlbmd0aDtcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG5cdFx0XHRcdGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Ly8gYFRvSW50ZWdlcmBcblx0XHRcdFx0XHRwb3MgPSBwb3NpdGlvbiA/IE51bWJlcihwb3NpdGlvbikgOiAwO1xuXHRcdFx0XHRcdGlmIChwb3MgIT0gcG9zKSB7IC8vIGJldHRlciBgaXNOYU5gXG5cdFx0XHRcdFx0XHRwb3MgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKE1hdGgubWF4KHBvcywgMCksIHN0cmluZ0xlbmd0aCk7XG5cdFx0XHR2YXIgc3RhcnQgPSBlbmQgLSBzZWFyY2hMZW5ndGg7XG5cdFx0XHRpZiAoc3RhcnQgPCAwKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdFx0d2hpbGUgKCsraW5kZXggPCBzZWFyY2hMZW5ndGgpIHtcblx0XHRcdFx0aWYgKHN0cmluZy5jaGFyQ29kZUF0KHN0YXJ0ICsgaW5kZXgpICE9IHNlYXJjaFN0cmluZy5jaGFyQ29kZUF0KGluZGV4KSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fTtcblx0XHRpZiAoZGVmaW5lUHJvcGVydHkpIHtcblx0XHRcdGRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcsIHtcblx0XHRcdFx0J3ZhbHVlJzogZW5kc1dpdGgsXG5cdFx0XHRcdCdjb25maWd1cmFibGUnOiB0cnVlLFxuXHRcdFx0XHQnd3JpdGFibGUnOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0U3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuXHRcdH1cblx0fSgpKTtcbn1cbiIsImNvbnN0IFNwcml0ZUhlbHBlciA9IHJlcXVpcmUoJ1Nwcml0ZUhlbHBlcicpO1xuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXZhdGFyU3ByaXRlOiBjYy5TcHJpdGUsXG4gICAgICAgIGxhYmVsVXNlcklkOiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxTY29yZTogY2MuTGFiZWwsXG4gICAgICAgIGxhYmVsTmlja25hbWU6IGNjLkxhYmVsLFxuXG4gICAgICAgIF9kZXNrSW5mbzogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuXG4gICAgc2V0VXNlckluZm86IGZ1bmN0aW9uICh1c2VyLCBkZXNrSW5mbykge1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdGFsU2NvcmUgPSB1c2VyLnRvdGFsU2NvcmU7XG4gICAgICBpZiAoZGVza0luZm8gJiYgKChkZXNrSW5mby5zZXR0aW5nMSA9PSAwKSB8fCAoZGVza0luZm8uc2V0dGluZzEgPT0gMSkpKSB7XG4gICAgICAgIGxldCBiYXNlU2NvcmUgPSAoZGVza0luZm8uc2V0dGluZzEgPT0gMCkgPyAxMDAgOiAyMDA7XG4gICAgICAgIHRvdGFsU2NvcmUgPSB0b3RhbFNjb3JlIC0gYmFzZVNjb3JlO1xuICAgICAgfVxuXG4gICAgICBTcHJpdGVIZWxwZXIuc2V0SW1hZ2VVcmwodGhpcy5hdmF0YXJTcHJpdGUsIHVzZXIuYXZhdGFyVXJsKTtcbiAgICAgIHRoaXMubGFiZWxVc2VySWQuc3RyaW5nID0gXCJcIiArIHVzZXIuaWQ7XG4gICAgICB0aGlzLmxhYmVsU2NvcmUuc3RyaW5nID0gKHRvdGFsU2NvcmUgPiAwKSA/IChcIisgXCIgKyB0b3RhbFNjb3JlKSA6IChcIi0gXCIgKyB0b3RhbFNjb3JlICogLTEpO1xuICAgICAgaWYgKHRvdGFsU2NvcmUgPT0gMCkge1xuICAgICAgICB0aGlzLmxhYmVsU2NvcmUuc3RyaW5nID0gXCIwXCI7XG4gICAgICB9XG4gICAgICB0aGlzLmxhYmVsTmlja25hbWUuc3RyaW5nID0gdXNlci5uaWNrbmFtZTtcbiAgICB9LFxufSk7XG4iLCJjb25zdCBLUU5hdGl2ZUludm9rZSA9IHJlcXVpcmUoJ0tRTmF0aXZlSW52b2tlJyk7XG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBpdGVtTGF5b3V0OiBjYy5MYXlvdXQsXG4gICAgICAgIGl0ZW1QcmVmYWI6IGNjLlByZWZhYixcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIHNldFBsYXllckluZm9zOiBmdW5jdGlvbiAocGxheWVySW5mb3MsIGRlc2tJbmZvKSB7XG4gICAgICAgIHRoaXMuaXRlbUxheW91dC5ub2RlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICBwbGF5ZXJJbmZvcy5mb3JFYWNoKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIGxldCBpdGVtID0gY2MuaW5zdGFudGlhdGUodGhpcy5pdGVtUHJlZmFiKTtcbiAgICAgICAgaXRlbS5nZXRDb21wb25lbnQoJ1RvdGFsR2FtZVJlc3VsdEl0ZW0nKS5zZXRVc2VySW5mbyh1c2VyLCBkZXNrSW5mbyk7XG4gICAgICAgICAgaWYoZGVza0luZm8uY3JlYXRlSWQgPT0gdXNlci5pZCl7XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW5bNl0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbls2XS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbUxheW91dC5ub2RlLmFkZENoaWxkKGl0ZW0pO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgY2xpY2tTaGFyZVdlaUNoYXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJ3eFNjcmVlblNoYXJlRnJpZW5kXCIsKTtcbiAgICAgIH1cbiAgICAgIGVsc2Ugey8vQW5kcm9pZFxuICAgICAgICAgIEtRTmF0aXZlSW52b2tlLnNjcmVlbnNob3RTaGFyZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbGlja1NoYXJlUGVuZ1lvdVF1YW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJ3eFNjcmVlblNoYXJlXCIsKTtcbiAgICAgIH1cbiAgICAgIGVsc2Ugey8vQW5kcm9pZFxuICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eFNjcmVlblNoYXJlXCIsIFwiKClWXCIpO1xuICAgICAgfVxuICAgIH0sXG59KTtcbiIsImNvbnN0IFVzZXJNb2RlbEhlbHBlciA9IHtcbiAgLy8g55So5oi35piv5ZCm5bey5Ye654mMXG4gIGlzUGxheWVkQ2FyZHM6IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgY2MuYXNzZXJ0KHVzZXIpO1xuXG4gICAgaWYgKHVzZXIgJiYgdXNlci5jYXJkSW5mbyAmJiB1c2VyLmNhcmRJbmZvLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvLyDnlKjmiLfmmK/lkKblt7Llh4blpIdcbiAgaXNVc2VyUmVhZHk6IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIHVzZXIucmVhZHlTdGF0dXMgPT0gdHJ1ZTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlck1vZGVsSGVscGVyO1xuIiwiY29uc3QgU3ByaXRlSGVscGVyID0gcmVxdWlyZSgnU3ByaXRlSGVscGVyJyk7XG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGxhYmVsVXNlcklkOiBjYy5MYWJlbCxcbiAgICAgICAgbGFiZWxVc2VySVA6IGNjLkxhYmVsLFxuICAgICAgICBsYWJlbE5pY2tuYW1lOiBjYy5MYWJlbCxcbiAgICAgICAgYXZhdGFyU3ByaXRlOiBjYy5TcHJpdGUsXG4gICAgICAgIG1hblNwcml0ZTogY2MuU3ByaXRlLFxuICAgICAgICB3b21lblNwcml0ZTogY2MuU3ByaXRlLFxuXG4gICAgICAgIF9kaWRTaG93VXNlckluZm86IG51bGwsXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIHVwZGF0ZVdpdGhVc2VyOiBmdW5jdGlvbiAodXNlcikge1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2RpZFNob3dVc2VySW5mbyA9PSB1c2VyKSB7XG4gICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xuICAgICAgICB0aGlzLl9kaXNhcHBlYXJVc2VySW5mbygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RpZFNob3dVc2VySW5mbyA9IHVzZXI7XG4gICAgICBpZiAoIXRoaXMubm9kZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5ub2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5hbGVydCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcbiAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGlzYXBwZWFyVXNlckluZm8oKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgNSk7XG5cbiAgICAgIHRoaXMubGFiZWxVc2VySWQuc3RyaW5nID1cIlVJRDpcXG5cIit1c2VyLmlkO1xuICAgICAgdGhpcy5sYWJlbFVzZXJJUC5zdHJpbmcgPVwi55So5oi3SVA6XFxuXCIrdXNlci5pcEFkZHJlc3MucmVwbGFjZShcIjo6ZmZmZjpcIiwgXCJcIik7XG4gICAgICB0aGlzLmxhYmVsTmlja25hbWUuc3RyaW5nID0gdXNlci5uaWNrbmFtZTtcbiAgICAgIHRoaXMuYXZhdGFyU3ByaXRlLnNwcml0ZUZyYW1lID0gbnVsbDtcbiAgICAgIFNwcml0ZUhlbHBlci5zZXRJbWFnZVVybCh0aGlzLmF2YXRhclNwcml0ZSwgdXNlci5hdmF0YXJVcmwpO1xuXG4gICAgICBsZXQgc2V4ID0gdXNlci5zZXg7ICAvLyBzZXg6IDEg55S3ICAyIOWls1xuICAgICAgdGhpcy5tYW5TcHJpdGUubm9kZS5hY3RpdmUgPSAoc2V4ID09IDEpO1xuICAgICAgdGhpcy53b21lblNwcml0ZS5ub2RlLmFjdGl2ZSA9IChzZXggIT0gMSk7XG4gICAgfSxcblxuICAgIF9kaXNhcHBlYXJVc2VySW5mbzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fZGlkU2hvd1VzZXJJbmZvID0gbnVsbDtcbiAgICB9LFxufSk7XG4iLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcclxuY29uc3QgS1FHbG9iYWxFdmVudCA9IHJlcXVpcmUoJ0tRR2xvYmFsRXZlbnQnKTtcclxuY29uc3QgS1FHbGFib2xTb2NrZXRFdmVudEhhbmRlciA9IHJlcXVpcmUoJ0tRR2xhYm9sU29ja2V0RXZlbnRIYW5kZXInKTtcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAvLyBmb286IHtcclxuICAgICAgICAvLyAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XHJcbiAgICAgICAgLy8gICAgc2VyaWFsaXphYmxlOiB0cnVlLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgdmlzaWJsZTogdHJ1ZSwgICAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxyXG4gICAgICAgIC8vICAgIHJlYWRvbmx5OiBmYWxzZSwgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgZmFsc2VcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIC8vIC4uLlxyXG4gICAgICAgIGFncmVlbWVudDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiBjYy5MYWJlbFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxyXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZUhhbGxJbmZvLCB0aGlzLl9zb2NrZXRSZWNlaXZlSGFsbEluZm8sIHRoaXMpO1xyXG4gICAgICAgIGNjLmxvZygnLS0tLTYxJylcclxuICAgICAgICAgY2MubG9nKHRoaXMuYWdyZWVtZW50KVxyXG4gICAgfSxcclxuICAgIF9zb2NrZXRSZWNlaXZlSGFsbEluZm86IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UucmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHMgPSBjYy5maW5kKCdDYW52YXMvYWdyZWVtZW50Jyk7XHJcbiAgICAgICAgbGV0IGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIC8vdGhpcy5faW5mbzEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIGNjLmxvZyh0aGlzLmFncmVlbWVudClcclxuICAgICAgICBjYy5sb2cocylcclxuICAgICAgICBjYy5sb2coJy0tLS02MScpXHJcbiAgICAgICAgdGhpcy5hZ3JlZW1lbnQuc3RyaW5nID0gZGF0YS5pbmZvMSB8fCBcIlwiO1xyXG4gICAgfSxcclxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXHJcbiAgICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xyXG5cclxuICAgIC8vIH0sXHJcbn0pO1xyXG4iLCJ2YXIgQXVkaW9NYW5hZ2VyID0gcmVxdWlyZSgnQXVkaW9NYW5hZ2VyJyk7XG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICB2aXNpYmxlOiB0cnVlLCAgICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIC4uLlxuICAgICAgICBwb3BOb2RlOmNjLk5vZGUsXG4gICAgICAgIGxhYmVsOmNjLkxhYmVsLFxuXG4gICAgICAgIF9hbGVydENhbGxiYWNrOiBudWxsLFxuICAgICAgICBfd2lsbERpc21pc3NDYWxsYmFjazogbnVsbCxcbiAgICAgICAgX2Rpc21pc3NDYWxsYmFjazogbnVsbCxcbiAgICAgICAgX2NvbmZpcm1DYWxsYmFjazogbnVsbCwgICAvLyDngrnlh7vnoa7lrprlkI7nmoTlm57osINcbiAgICAgICAgX3Rpc2hpOm51bGwsXG4gICAgICAgIF9jYXJkX251bTpudWxsLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFxuICAgIH0sXG5cbiAgICBhbGVydDpmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBhbmltID0gdGhpcy5wb3BOb2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pO1xuICAgICAgICBhbmltLnBsYXkoJ3BvcCcpO1xuXG4gICAgICAgIGlmICh0aGlzLl9hbGVydENhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5fYWxlcnRDYWxsYmFjayh0aGlzLm5vZGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKiMjIyMj5by55Ye657uT5p6cKi9cbiAgICBhbGVydFJlc3VsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgY2MuZmluZChcIkNhbnZhcy9zaG93X3Jlc3VsdFwiKS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFuaW0gPSB0aGlzLnBvcE5vZGUuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIGFuaW0ucGxheSgncG9wJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2FsZXJ0Q2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLl9hbGVydENhbGxiYWNrKHRoaXMubm9kZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyojIyMjI+eCueWHu+ehruWumiovXG4gICAgcGxheUJ0bkNsaWNrU0ZYOmZ1bmN0aW9uKCkge1xuICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGxheUJ0bkNsaWNrU0ZYKCk7XG4gICAgfSxcblxuICAgIC8qIyMjIyPngrnlh7vlj5bmtogqL1xuICAgIHBhbHlCdG5DYW5jZWxDbGlja1NGWDpmdW5jdGlvbigpe1xuICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGFseUJ0bkNhbmNlbENsaWNrU0ZYKCk7XG4gICAgfSxcblxuICAgIC8qIyMjIyPngrnlh7vlhbPpl63miJbogIXmjInplK7kuYvnsbvnmoTmjInpkq7vvIzmkq3mlL7pn7PmlYgqL1xuICAgIHBhbHlCdG5QdWJsaWNTRlg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBhbHlCdG5QdWJsaWNTRlgoKTtcbiAgICB9LFxuXG4gICAgLyojIyMjI+eCueWHu+WIm+W7uuaIv+mXtO+8jOaSreaUvumfs+aViCovXG4gICAgcGFseUJ0bkNyZWF0ZVJvb21TRlg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBhbHlCdG5DcmVhdGVSb29tU0ZYKCk7XG4gICAgfSxcbiAgICAvKiMjIyMj54K55Ye75Yib5bu65oi/6Ze077yM5pKt5pS+6Z+z5pWIKi9cbiAgICBwYWx5V2luZG93U0ZYOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wYWx5V2luZG93U0ZYKCk7XG4gICAgfSxcblxuICAgIHBhbHlXZWlYaW5Mb2dpblNGWDpmdW5jdGlvbigpIHtcbiAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBhbHlXZWlYaW5Mb2dpblNGWCgpO1xuICAgIH0sXG4gICAgcGFseUZhbmdQYWlTRlg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBhbHlGYW5nUGFpU0ZYKCk7XG4gICAgfSxcblxuICAgIGRpc21pc3NBY3Rpb246ZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgd2lsbERpc21pc3NDYWxsYmFjayA9IHRoaXMuX3dpbGxEaXNtaXNzQ2FsbGJhY2s7XG4gICAgICBpZiAod2lsbERpc21pc3NDYWxsYmFjaykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gd2lsbERpc21pc3NDYWxsYmFjaygpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5kaXNtaXNzQ29tcGxldGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgICB2YXIgYW5pbSA9IHRoaXMucG9wTm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcbiAgICAgICAgdmFyIGRpc21pc3NBbmltID0gYW5pbS5nZXRBbmltYXRpb25TdGF0ZSgncG9wX2Rpc21pc3MnKTtcbiAgICAgICAgZGlzbWlzc0FuaW0ub24oJ2ZpbmlzaGVkJyx0aGlzLmRpc21pc3NDb21wbGV0ZSx0aGlzKTtcbiAgICAgICAgYW5pbS5wbGF5KCdwb3BfZGlzbWlzcycpO1xuICAgIH0sXG5cbiAgICAvKiMjIyMj6ZqQ6JeP57uT5p6c6aG16Z2iKi9cbiAgICBkaXNtaXNzQWN0aW9uUmVzdWx0OmZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHdpbGxEaXNtaXNzQ2FsbGJhY2sgPSB0aGlzLl93aWxsRGlzbWlzc0NhbGxiYWNrO1xuICAgICAgaWYgKHdpbGxEaXNtaXNzQ2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHdpbGxEaXNtaXNzQ2FsbGJhY2soKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHRoaXMuZGlzbWlzc0NvbXBsZXRlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICAgdmFyIGFuaW0gPSB0aGlzLnBvcE5vZGUuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIHZhciBkaXNtaXNzQW5pbSA9IGFuaW0uZ2V0QW5pbWF0aW9uU3RhdGUoJ3BvcF9kaXNtaXNzJyk7XG4gICAgICAgIGRpc21pc3NBbmltLm9uKCdmaW5pc2hlZCcsdGhpcy5kaXNtaXNzQ29tcGxldGUsdGhpcyk7XG4gICAgICAgIGFuaW0ucGxheSgncG9wX2Rpc21pc3MnKTtcbiAgICAgICAgY2MuZmluZChcIkNhbnZhcy9zaG93X3Jlc3VsdFwiKS5hY3RpdmUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBkaXNtaXNzQ29tcGxldGU6ZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vbkRpc21pc3NDb21wbGV0ZSkge1xuICAgICAgICAgIHRoaXMub25EaXNtaXNzQ29tcGxldGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9kaXNtaXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLl9kaXNtaXNzQ2FsbGJhY2sodGhpcy5ub2RlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGlzbWlzc1BsYXk6ZnVuY3Rpb24oKSB7XG4gICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoXCJoYWxsXCIpOyAgXG4gICAgfSxcblxuICAgIG9uRGlzbWlzc0NvbXBsZXRlOmZ1bmN0aW9uKCkge1xuICAgICAgY2MubG9nKFwib25EaXNtaXNzQ29tcGxldGVcIik7XG4gICAgfSxcblxuICAgIGRvbmVBY3Rpb246ZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgICB0aGlzLm9uRG9uZUFjdGlvbigpO1xuXG4gICAgICAgIGxldCBjb25maXJtQ2FsbGJhY2sgPSB0aGlzLl9jb25maXJtQ2FsbGJhY2s7XG4gICAgICAgIGlmIChjb25maXJtQ2FsbGJhY2spIHtcbiAgICAgICAgICBjb25maXJtQ2FsbGJhY2sodGhpcy5ub2RlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkRvbmVBY3Rpb246ZnVuY3Rpb24oKSB7XG5cbiAgICB9LFxuXG4gICAgc2V0TWVzc2FnZTpmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgdGhpcy5sYWJlbC5zdHJpbmcgPSBtc2c7XG4gICAgfSxcblxuICAgIGdldE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsLnN0cmluZztcbiAgICB9LFxuXG4gICAgc2V0QWxlcnRDYWxsYmNrOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX2FsZXJ0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9LFxuXG4gICAgc2V0V2lsbERpc21pc3NDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl93aWxsRGlzbWlzc0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfSxcblxuICAgIHNldERpc21pc3NDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9kaXNtaXNzQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9LFxuXG4gICAgc2V0Q29uZmlybUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX2NvbmZpcm1DYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH0sXG5cbiAgICAvKnNldE1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB0aGlzLmxhYmVsLmdldENvbXBvbmVudCgnY2MuTGFiZWwnKS5zdHJpbmcgPSBtZXNzYWdlO1xuICAgIH0sKi9cblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcbiIsIi8vIOeJjOiDjOW9seWIl+ihqCBjb21wb25lbnRcbi8vIOWPr+S7peaYvuekuuOAgemakOiXj+eJjOiDjOW9seWIl+ihqFxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgY2FyZHNCYWNrTGF5b3V0OiBjYy5MYXlvdXQsXG4gICAgICAgIGNhcmRzQmFja0xpc3Q6IFtjYy5TcHJpdGVdLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgIH0sXG5cbiAgICAvLyDku6XliqjnlLvnmoTmlrnlvI/mmL7npLrniYzog4zlvbFcbiAgICBzaG93UGxheUNhcmRCYWNrczogZnVuY3Rpb24gKCkge1xuICAgICAgY2MubG9nKFwi5pi+56S654mM6IOM5b2xXCIpO1xuICAgICAgdGhpcy5oaWRlQ2FyZEJhY2tzKCk7XG4gICAgICB0aGlzLmNhcmRzQmFja0xheW91dC5ub2RlLmFjdGl2ZSA9IHRydWU7XG5cbiAgICAgIGxldCBpbnRlcnZhbCA9IDAuMDU7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gMDtcbiAgICAgIHRoaXMuY2FyZHNCYWNrTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGNhcmRCYWNrKXtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FyZEJhY2subm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9LCBzdGFydFRpbWUpO1xuICAgICAgICBzdGFydFRpbWUgPSBzdGFydFRpbWUgKyBpbnRlcnZhbDtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIC8vIOmakOiXj+aYvuekuueJjOiDjOW9sVxuICAgIGhpZGVDYXJkQmFja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FyZHNCYWNrTGF5b3V0Lm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmNhcmRzQmFja0xpc3QuZm9yRWFjaChmdW5jdGlvbihjYXJkQmFjayl7XG4gICAgICAgIGNhcmRCYWNrLm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LFxufSk7XG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICB2aXNpYmxlOiB0cnVlLCAgICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIC4uLlxuICAgICAgICAvKueJjOiKseiJsiovXG4gICAgICAgIHNwYWRlc0ltYWdlczpbY2MuU3ByaXRlRnJhbWVdLFxuICAgICAgICBoZWFydHNJbWFnZXM6W2NjLlNwcml0ZUZyYW1lXSxcbiAgICAgICAgY2x1YkltYWdlczpbY2MuU3ByaXRlRnJhbWVdLFxuICAgICAgICBkaWFtb25kSW1hZ2VzOltjYy5TcHJpdGVGcmFtZV0sXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgIHVybDogY2MuVGV4dHVyZTJELCAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgc2VyaWFsaXphYmxlOiB0cnVlLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIHZpc2libGU6IHRydWUsICAgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICBkaXNwbGF5TmFtZTogJ0ZvbycsIC8vIG9wdGlvbmFsXG4gICAgICAgIC8vICAgIHJlYWRvbmx5OiBmYWxzZSwgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gLi4uXG4gICAgICAgIGxhYmVsTXNnOmNjLkxhYmVsLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgIH0sXG5cbiAgICBzZXRUZXh0OmZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgdGhpcy5sYWJlbE1zZy5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IHRleHQ7XG4gICAgfSxcblxuICAgIGNsaWNrQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmxhYmVsTXNnLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nO1xuICAgICAgICB0aGlzLm9uU2VsZWN0QWN0aW9uKHRleHQpO1xuICAgIH0sXG5cbiAgICBvblNlbGVjdEFjdGlvbjpmdW5jdGlvbihtc2cpIHtcblxuICAgIH0sXG5cbiAgICAvLyBjYWxsZWQgZXZlcnkgZnJhbWUsIHVuY29tbWVudCB0aGlzIGZ1bmN0aW9uIHRvIGFjdGl2YXRlIHVwZGF0ZSBjYWxsYmFja1xuICAgIC8vIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG5cbiAgICAvLyB9LFxufSk7XG4iLCJjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXggOiAwLFxyXG4gICAgICAgIHNlbGVjdGVkTm9kZSA6IGNjLk5vZGUgIFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cclxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBjbGlja0FjdGlvbjpmdW5jdGlvbihlLGRhdGEpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGUuYWN0aXZlID0gdGhpcy5zZWxlY3RlZDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLnNlbGVjdGVkPzA6bnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYWxsZWQgZXZlcnkgZnJhbWUsIHVuY29tbWVudCB0aGlzIGZ1bmN0aW9uIHRvIGFjdGl2YXRlIHVwZGF0ZSBjYWxsYmFja1xyXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcclxuXHJcbiAgICAvLyB9LFxyXG59KTtcclxuIiwidmFyIHNvY2tldCA9IHJlcXVpcmUoXCJzb2NrZXRcIik7XHJcbmNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgb3B0aW9uOntcclxuICAgICAgICAgICAgZGVmYXVsdDpbXSxcclxuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXHJcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjbGlja0J0bmNob3VqaWFuZzpmdW5jdGlvbigpIHtcclxuICAgICAgICBmb3IodmFyIGk9MDtpPHRoaXMub3B0aW9uLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbltpXS5vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuX3Rpc2hpID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiY2hvdWppYW5nX2JnXCIpLmdldENoaWxkQnlOYW1lKFwidGlzaGlcIik7XHJcbiAgICAgICAgdGhpcy5fY2FyZF9udW0gPSBjYy5maW5kKFwiQ2FudmFzL3VzZXIvc2hvcF9iZy9jYXJkX251bVwiKTtcclxuICAgICAgICB2YXIgY29tcCA9IHRoaXMuX2NhcmRfbnVtLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBpZihpbmRleCA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbltpbmRleF0ub3BhY2l0eSA9IDEyODtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvblt0aGlzLm9wdGlvbi5sZW5ndGgtMV0ub3BhY2l0eSA9IDI1NTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGluZGV4ID09IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2luZGV4XS5vcGFjaXR5ID0gMTI4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2luZGV4IC0gMV0ub3BhY2l0eSA9IDI1NTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2luZGV4XS5vcGFjaXR5ID0gMTI4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2luZGV4LTFdLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbmRleCArKztcclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09IHRoaXMub3B0aW9uLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGlmKGNvbXAuc3RyaW5nIDwgMjApIHtcclxuICAgICAgICAgICAgdGhpcy5fdGlzaGkuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgLy9jaG91amlhbmdcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLmNhbGxiYWNrLDAuMDUpO1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGUodGhpcy5jYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPHRoaXMub3B0aW9uLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2ldLm9wYWNpdHkgPSAyNTU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uW2ldLm9wYWNpdHkgPSAxMjg7XHJcbiAgICAgICAgICAgIH0sMywwLDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8vKioqXHJcbiAgICBjbGlja0J0bkNvbWZpcm06ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fdGlzaGkuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgLy90aGlzLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgLy8qKioqXHJcblxyXG4gICAgLy8gY2FsbGVkIGV2ZXJ5IGZyYW1lLCB1bmNvbW1lbnQgdGhpcyBmdW5jdGlvbiB0byBhY3RpdmF0ZSB1cGRhdGUgY2FsbGJhY2tcclxuICAgIC8vIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XHJcblxyXG4gICAgLy8gfSxcclxufSk7XHJcbiIsIihmdW5jdGlvbiAobWFpbikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFBhcnNlIG9yIGZvcm1hdCBkYXRlc1xuICAgKiBAY2xhc3MgZmVjaGFcbiAgICovXG4gIHZhciBmZWNoYSA9IHt9O1xuICB2YXIgdG9rZW4gPSAvZHsxLDR9fE17MSw0fXxZWSg/OllZKT98U3sxLDN9fERvfFpafChbSGhNc0RtXSlcXDE/fFthQV18XCJbXlwiXSpcInwnW14nXSonL2c7XG4gIHZhciB0d29EaWdpdHMgPSAvXFxkXFxkPy87XG4gIHZhciB0aHJlZURpZ2l0cyA9IC9cXGR7M30vO1xuICB2YXIgZm91ckRpZ2l0cyA9IC9cXGR7NH0vO1xuICB2YXIgd29yZCA9IC9bMC05XSpbJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0rfFtcXHUwNjAwLVxcdTA2RkZcXC9dKyhcXHMqP1tcXHUwNjAwLVxcdTA2RkZdKyl7MSwyfS9pO1xuICB2YXIgbGl0ZXJhbCA9IC9cXFsoW15dKj8pXFxdL2dtO1xuICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgfTtcblxuICBmdW5jdGlvbiBzaG9ydGVuKGFyciwgc0xlbikge1xuICAgIHZhciBuZXdBcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBuZXdBcnIucHVzaChhcnJbaV0uc3Vic3RyKDAsIHNMZW4pKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vbnRoVXBkYXRlKGFyck5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIHYsIGkxOG4pIHtcbiAgICAgIHZhciBpbmRleCA9IGkxOG5bYXJyTmFtZV0uaW5kZXhPZih2LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdi5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAofmluZGV4KSB7XG4gICAgICAgIGQubW9udGggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFkKHZhbCwgbGVuKSB7XG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XG4gICAgbGVuID0gbGVuIHx8IDI7XG4gICAgd2hpbGUgKHZhbC5sZW5ndGggPCBsZW4pIHtcbiAgICAgIHZhbCA9ICcwJyArIHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIHZhciBkYXlOYW1lcyA9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXTtcbiAgdmFyIG1vbnRoTmFtZXMgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTtcbiAgdmFyIG1vbnRoTmFtZXNTaG9ydCA9IHNob3J0ZW4obW9udGhOYW1lcywgMyk7XG4gIHZhciBkYXlOYW1lc1Nob3J0ID0gc2hvcnRlbihkYXlOYW1lcywgMyk7XG4gIGZlY2hhLmkxOG4gPSB7XG4gICAgZGF5TmFtZXNTaG9ydDogZGF5TmFtZXNTaG9ydCxcbiAgICBkYXlOYW1lczogZGF5TmFtZXMsXG4gICAgbW9udGhOYW1lc1Nob3J0OiBtb250aE5hbWVzU2hvcnQsXG4gICAgbW9udGhOYW1lczogbW9udGhOYW1lcyxcbiAgICBhbVBtOiBbJ2FtJywgJ3BtJ10sXG4gICAgRG9GbjogZnVuY3Rpb24gRG9GbihEKSB7XG4gICAgICByZXR1cm4gRCArIFsndGgnLCAnc3QnLCAnbmQnLCAncmQnXVtEICUgMTAgPiAzID8gMCA6IChEIC0gRCAlIDEwICE9PSAxMCkgKiBEICUgMTBdO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZm9ybWF0RmxhZ3MgPSB7XG4gICAgRDogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0RGF0ZSgpO1xuICAgIH0sXG4gICAgREQ6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBwYWQoZGF0ZU9iai5nZXREYXRlKCkpO1xuICAgIH0sXG4gICAgRG86IGZ1bmN0aW9uKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgIHJldHVybiBpMThuLkRvRm4oZGF0ZU9iai5nZXREYXRlKCkpO1xuICAgIH0sXG4gICAgZDogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0RGF5KCk7XG4gICAgfSxcbiAgICBkZDogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldERheSgpKTtcbiAgICB9LFxuICAgIGRkZDogZnVuY3Rpb24oZGF0ZU9iaiwgaTE4bikge1xuICAgICAgcmV0dXJuIGkxOG4uZGF5TmFtZXNTaG9ydFtkYXRlT2JqLmdldERheSgpXTtcbiAgICB9LFxuICAgIGRkZGQ6IGZ1bmN0aW9uKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgIHJldHVybiBpMThuLmRheU5hbWVzW2RhdGVPYmouZ2V0RGF5KCldO1xuICAgIH0sXG4gICAgTTogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIGRhdGVPYmouZ2V0TW9udGgoKSArIDE7XG4gICAgfSxcbiAgICBNTTogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldE1vbnRoKCkgKyAxKTtcbiAgICB9LFxuICAgIE1NTTogZnVuY3Rpb24oZGF0ZU9iaiwgaTE4bikge1xuICAgICAgcmV0dXJuIGkxOG4ubW9udGhOYW1lc1Nob3J0W2RhdGVPYmouZ2V0TW9udGgoKV07XG4gICAgfSxcbiAgICBNTU1NOiBmdW5jdGlvbihkYXRlT2JqLCBpMThuKSB7XG4gICAgICByZXR1cm4gaTE4bi5tb250aE5hbWVzW2RhdGVPYmouZ2V0TW9udGgoKV07XG4gICAgfSxcbiAgICBZWTogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIFN0cmluZyhkYXRlT2JqLmdldEZ1bGxZZWFyKCkpLnN1YnN0cigyKTtcbiAgICB9LFxuICAgIFlZWVk6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG4gICAgfSxcbiAgICBoOiBmdW5jdGlvbihkYXRlT2JqKSB7XG4gICAgICByZXR1cm4gZGF0ZU9iai5nZXRIb3VycygpICUgMTIgfHwgMTI7XG4gICAgfSxcbiAgICBoaDogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldEhvdXJzKCkgJSAxMiB8fCAxMik7XG4gICAgfSxcbiAgICBIOiBmdW5jdGlvbihkYXRlT2JqKSB7XG4gICAgICByZXR1cm4gZGF0ZU9iai5nZXRIb3VycygpO1xuICAgIH0sXG4gICAgSEg6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBwYWQoZGF0ZU9iai5nZXRIb3VycygpKTtcbiAgICB9LFxuICAgIG06IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBkYXRlT2JqLmdldE1pbnV0ZXMoKTtcbiAgICB9LFxuICAgIG1tOiBmdW5jdGlvbihkYXRlT2JqKSB7XG4gICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0TWludXRlcygpKTtcbiAgICB9LFxuICAgIHM6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBkYXRlT2JqLmdldFNlY29uZHMoKTtcbiAgICB9LFxuICAgIHNzOiBmdW5jdGlvbihkYXRlT2JqKSB7XG4gICAgICByZXR1cm4gcGFkKGRhdGVPYmouZ2V0U2Vjb25kcygpKTtcbiAgICB9LFxuICAgIFM6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGRhdGVPYmouZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDApO1xuICAgIH0sXG4gICAgU1M6IGZ1bmN0aW9uKGRhdGVPYmopIHtcbiAgICAgIHJldHVybiBwYWQoTWF0aC5yb3VuZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpIC8gMTApLCAyKTtcbiAgICB9LFxuICAgIFNTUzogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgcmV0dXJuIHBhZChkYXRlT2JqLmdldE1pbGxpc2Vjb25kcygpLCAzKTtcbiAgICB9LFxuICAgIGE6IGZ1bmN0aW9uKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgIHJldHVybiBkYXRlT2JqLmdldEhvdXJzKCkgPCAxMiA/IGkxOG4uYW1QbVswXSA6IGkxOG4uYW1QbVsxXTtcbiAgICB9LFxuICAgIEE6IGZ1bmN0aW9uKGRhdGVPYmosIGkxOG4pIHtcbiAgICAgIHJldHVybiBkYXRlT2JqLmdldEhvdXJzKCkgPCAxMiA/IGkxOG4uYW1QbVswXS50b1VwcGVyQ2FzZSgpIDogaTE4bi5hbVBtWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBaWjogZnVuY3Rpb24oZGF0ZU9iaikge1xuICAgICAgdmFyIG8gPSBkYXRlT2JqLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICByZXR1cm4gKG8gPiAwID8gJy0nIDogJysnKSArIHBhZChNYXRoLmZsb29yKE1hdGguYWJzKG8pIC8gNjApICogMTAwICsgTWF0aC5hYnMobykgJSA2MCwgNCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXJzZUZsYWdzID0ge1xuICAgIEQ6IFt0d29EaWdpdHMsIGZ1bmN0aW9uIChkLCB2KSB7XG4gICAgICBkLmRheSA9IHY7XG4gICAgfV0sXG4gICAgRG86IFtuZXcgUmVnRXhwKHR3b0RpZ2l0cy5zb3VyY2UgKyB3b3JkLnNvdXJjZSksIGZ1bmN0aW9uIChkLCB2KSB7XG4gICAgICBkLmRheSA9IHBhcnNlSW50KHYsIDEwKTtcbiAgICB9XSxcbiAgICBNOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikge1xuICAgICAgZC5tb250aCA9IHYgLSAxO1xuICAgIH1dLFxuICAgIFlZOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikge1xuICAgICAgdmFyIGRhID0gbmV3IERhdGUoKSwgY2VudCA9ICsoJycgKyBkYS5nZXRGdWxsWWVhcigpKS5zdWJzdHIoMCwgMik7XG4gICAgICBkLnllYXIgPSAnJyArICh2ID4gNjggPyBjZW50IC0gMSA6IGNlbnQpICsgdjtcbiAgICB9XSxcbiAgICBoOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikge1xuICAgICAgZC5ob3VyID0gdjtcbiAgICB9XSxcbiAgICBtOiBbdHdvRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikge1xuICAgICAgZC5taW51dGUgPSB2O1xuICAgIH1dLFxuICAgIHM6IFt0d29EaWdpdHMsIGZ1bmN0aW9uIChkLCB2KSB7XG4gICAgICBkLnNlY29uZCA9IHY7XG4gICAgfV0sXG4gICAgWVlZWTogW2ZvdXJEaWdpdHMsIGZ1bmN0aW9uIChkLCB2KSB7XG4gICAgICBkLnllYXIgPSB2O1xuICAgIH1dLFxuICAgIFM6IFsvXFxkLywgZnVuY3Rpb24gKGQsIHYpIHtcbiAgICAgIGQubWlsbGlzZWNvbmQgPSB2ICogMTAwO1xuICAgIH1dLFxuICAgIFNTOiBbL1xcZHsyfS8sIGZ1bmN0aW9uIChkLCB2KSB7XG4gICAgICBkLm1pbGxpc2Vjb25kID0gdiAqIDEwO1xuICAgIH1dLFxuICAgIFNTUzogW3RocmVlRGlnaXRzLCBmdW5jdGlvbiAoZCwgdikge1xuICAgICAgZC5taWxsaXNlY29uZCA9IHY7XG4gICAgfV0sXG4gICAgZDogW3R3b0RpZ2l0cywgbm9vcF0sXG4gICAgZGRkOiBbd29yZCwgbm9vcF0sXG4gICAgTU1NOiBbd29yZCwgbW9udGhVcGRhdGUoJ21vbnRoTmFtZXNTaG9ydCcpXSxcbiAgICBNTU1NOiBbd29yZCwgbW9udGhVcGRhdGUoJ21vbnRoTmFtZXMnKV0sXG4gICAgYTogW3dvcmQsIGZ1bmN0aW9uIChkLCB2LCBpMThuKSB7XG4gICAgICB2YXIgdmFsID0gdi50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHZhbCA9PT0gaTE4bi5hbVBtWzBdKSB7XG4gICAgICAgIGQuaXNQbSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICh2YWwgPT09IGkxOG4uYW1QbVsxXSkge1xuICAgICAgICBkLmlzUG0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1dLFxuICAgIFpaOiBbLyhbXFwrXFwtXVxcZFxcZDo/XFxkXFxkfFopLywgZnVuY3Rpb24gKGQsIHYpIHtcbiAgICAgIGlmICh2ID09PSAnWicpIHYgPSAnKzAwOjAwJztcbiAgICAgIHZhciBwYXJ0cyA9ICh2ICsgJycpLm1hdGNoKC8oW1xcK1xcLV18XFxkXFxkKS9naSksIG1pbnV0ZXM7XG5cbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7XG4gICAgICAgIGQudGltZXpvbmVPZmZzZXQgPSBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgICAgfVxuICAgIH1dXG4gIH07XG4gIHBhcnNlRmxhZ3MuZGQgPSBwYXJzZUZsYWdzLmQ7XG4gIHBhcnNlRmxhZ3MuZGRkZCA9IHBhcnNlRmxhZ3MuZGRkO1xuICBwYXJzZUZsYWdzLkREID0gcGFyc2VGbGFncy5EO1xuICBwYXJzZUZsYWdzLm1tID0gcGFyc2VGbGFncy5tO1xuICBwYXJzZUZsYWdzLmhoID0gcGFyc2VGbGFncy5IID0gcGFyc2VGbGFncy5ISCA9IHBhcnNlRmxhZ3MuaDtcbiAgcGFyc2VGbGFncy5NTSA9IHBhcnNlRmxhZ3MuTTtcbiAgcGFyc2VGbGFncy5zcyA9IHBhcnNlRmxhZ3MucztcbiAgcGFyc2VGbGFncy5BID0gcGFyc2VGbGFncy5hO1xuXG5cbiAgLy8gU29tZSBjb21tb24gZm9ybWF0IHN0cmluZ3NcbiAgZmVjaGEubWFza3MgPSB7XG4gICAgZGVmYXVsdDogJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcycsXG4gICAgc2hvcnREYXRlOiAnTS9EL1lZJyxcbiAgICBtZWRpdW1EYXRlOiAnTU1NIEQsIFlZWVknLFxuICAgIGxvbmdEYXRlOiAnTU1NTSBELCBZWVlZJyxcbiAgICBmdWxsRGF0ZTogJ2RkZGQsIE1NTU0gRCwgWVlZWScsXG4gICAgc2hvcnRUaW1lOiAnSEg6bW0nLFxuICAgIG1lZGl1bVRpbWU6ICdISDptbTpzcycsXG4gICAgbG9uZ1RpbWU6ICdISDptbTpzcy5TU1MnXG4gIH07XG5cbiAgLyoqKlxuICAgKiBGb3JtYXQgYSBkYXRlXG4gICAqIEBtZXRob2QgZm9ybWF0XG4gICAqIEBwYXJhbSB7RGF0ZXxudW1iZXJ9IGRhdGVPYmpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hc2sgRm9ybWF0IG9mIHRoZSBkYXRlLCBpLmUuICdtbS1kZC15eScgb3IgJ3Nob3J0RGF0ZSdcbiAgICovXG4gIGZlY2hhLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlT2JqLCBtYXNrLCBpMThuU2V0dGluZ3MpIHtcbiAgICB2YXIgaTE4biA9IGkxOG5TZXR0aW5ncyB8fCBmZWNoYS5pMThuO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRlT2JqID09PSAnbnVtYmVyJykge1xuICAgICAgZGF0ZU9iaiA9IG5ldyBEYXRlKGRhdGVPYmopO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZU9iaikgIT09ICdbb2JqZWN0IERhdGVdJyB8fCBpc05hTihkYXRlT2JqLmdldFRpbWUoKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBEYXRlIGluIGZlY2hhLmZvcm1hdCcpO1xuICAgIH1cblxuICAgIG1hc2sgPSBmZWNoYS5tYXNrc1ttYXNrXSB8fCBtYXNrIHx8IGZlY2hhLm1hc2tzWydkZWZhdWx0J107XG5cbiAgICB2YXIgbGl0ZXJhbHMgPSBbXTtcblxuICAgIC8vIE1ha2UgbGl0ZXJhbHMgaW5hY3RpdmUgYnkgcmVwbGFjaW5nIHRoZW0gd2l0aCA/P1xuICAgIG1hc2sgPSBtYXNrLnJlcGxhY2UobGl0ZXJhbCwgZnVuY3Rpb24oJDAsICQxKSB7XG4gICAgICBsaXRlcmFscy5wdXNoKCQxKTtcbiAgICAgIHJldHVybiAnPz8nO1xuICAgIH0pO1xuICAgIC8vIEFwcGx5IGZvcm1hdHRpbmcgcnVsZXNcbiAgICBtYXNrID0gbWFzay5yZXBsYWNlKHRva2VuLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgIHJldHVybiAkMCBpbiBmb3JtYXRGbGFncyA/IGZvcm1hdEZsYWdzWyQwXShkYXRlT2JqLCBpMThuKSA6ICQwLnNsaWNlKDEsICQwLmxlbmd0aCAtIDEpO1xuICAgIH0pO1xuICAgIC8vIElubGluZSBsaXRlcmFsIHZhbHVlcyBiYWNrIGludG8gdGhlIGZvcm1hdHRlZCB2YWx1ZVxuICAgIHJldHVybiBtYXNrLnJlcGxhY2UoL1xcP1xcPy9nLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaXRlcmFscy5zaGlmdCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZSBhIGRhdGUgc3RyaW5nIGludG8gYW4gb2JqZWN0LCBjaGFuZ2VzIC0gaW50byAvXG4gICAqIEBtZXRob2QgcGFyc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVTdHIgRGF0ZSBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCBEYXRlIHBhcnNlIGZvcm1hdFxuICAgKiBAcmV0dXJucyB7RGF0ZXxib29sZWFufVxuICAgKi9cbiAgZmVjaGEucGFyc2UgPSBmdW5jdGlvbiAoZGF0ZVN0ciwgZm9ybWF0LCBpMThuU2V0dGluZ3MpIHtcbiAgICB2YXIgaTE4biA9IGkxOG5TZXR0aW5ncyB8fCBmZWNoYS5pMThuO1xuXG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZm9ybWF0IGluIGZlY2hhLnBhcnNlJyk7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZmVjaGEubWFza3NbZm9ybWF0XSB8fCBmb3JtYXQ7XG5cbiAgICAvLyBBdm9pZCByZWd1bGFyIGV4cHJlc3Npb24gZGVuaWFsIG9mIHNlcnZpY2UsIGZhaWwgZWFybHkgZm9yIHJlYWxseSBsb25nIHN0cmluZ3NcbiAgICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1JlZ3VsYXJfZXhwcmVzc2lvbl9EZW5pYWxfb2ZfU2VydmljZV8tX1JlRG9TXG4gICAgaWYgKGRhdGVTdHIubGVuZ3RoID4gMTAwMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpc1ZhbGlkID0gdHJ1ZTtcbiAgICB2YXIgZGF0ZUluZm8gPSB7fTtcbiAgICBmb3JtYXQucmVwbGFjZSh0b2tlbiwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICBpZiAocGFyc2VGbGFnc1skMF0pIHtcbiAgICAgICAgdmFyIGluZm8gPSBwYXJzZUZsYWdzWyQwXTtcbiAgICAgICAgdmFyIGluZGV4ID0gZGF0ZVN0ci5zZWFyY2goaW5mb1swXSk7XG4gICAgICAgIGlmICghfmluZGV4KSB7XG4gICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGVTdHIucmVwbGFjZShpbmZvWzBdLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpbmZvWzFdKGRhdGVJbmZvLCByZXN1bHQsIGkxOG4pO1xuICAgICAgICAgICAgZGF0ZVN0ciA9IGRhdGVTdHIuc3Vic3RyKGluZGV4ICsgcmVzdWx0Lmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZUZsYWdzWyQwXSA/ICcnIDogJDAuc2xpY2UoMSwgJDAubGVuZ3RoIC0gMSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIGlmIChkYXRlSW5mby5pc1BtID09PSB0cnVlICYmIGRhdGVJbmZvLmhvdXIgIT0gbnVsbCAmJiArZGF0ZUluZm8uaG91ciAhPT0gMTIpIHtcbiAgICAgIGRhdGVJbmZvLmhvdXIgPSArZGF0ZUluZm8uaG91ciArIDEyO1xuICAgIH0gZWxzZSBpZiAoZGF0ZUluZm8uaXNQbSA9PT0gZmFsc2UgJiYgK2RhdGVJbmZvLmhvdXIgPT09IDEyKSB7XG4gICAgICBkYXRlSW5mby5ob3VyID0gMDtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZTtcbiAgICBpZiAoZGF0ZUluZm8udGltZXpvbmVPZmZzZXQgIT0gbnVsbCkge1xuICAgICAgZGF0ZUluZm8ubWludXRlID0gKyhkYXRlSW5mby5taW51dGUgfHwgMCkgLSArZGF0ZUluZm8udGltZXpvbmVPZmZzZXQ7XG4gICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZUluZm8ueWVhciB8fCB0b2RheS5nZXRGdWxsWWVhcigpLCBkYXRlSW5mby5tb250aCB8fCAwLCBkYXRlSW5mby5kYXkgfHwgMSxcbiAgICAgICAgZGF0ZUluZm8uaG91ciB8fCAwLCBkYXRlSW5mby5taW51dGUgfHwgMCwgZGF0ZUluZm8uc2Vjb25kIHx8IDAsIGRhdGVJbmZvLm1pbGxpc2Vjb25kIHx8IDApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGVJbmZvLnllYXIgfHwgdG9kYXkuZ2V0RnVsbFllYXIoKSwgZGF0ZUluZm8ubW9udGggfHwgMCwgZGF0ZUluZm8uZGF5IHx8IDEsXG4gICAgICAgIGRhdGVJbmZvLmhvdXIgfHwgMCwgZGF0ZUluZm8ubWludXRlIHx8IDAsIGRhdGVJbmZvLnNlY29uZCB8fCAwLCBkYXRlSW5mby5taWxsaXNlY29uZCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmZWNoYTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZlY2hhO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1haW4uZmVjaGEgPSBmZWNoYTtcbiAgfVxufSkodGhpcyk7XG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICB2aXNpYmxlOiB0cnVlLCAgICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIC4uLlxuICAgICAgICBtZXNzYWdlTm9kZTpjYy5Ob2RlLFxuICAgICAgICBwbGF5Tm9kZTpjYy5Ob2RlLFxuXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIHNob3dNZXNzYWdlQWxlcnQ6ZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZU5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLm1lc3NhZ2VOb2RlLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pO1xuICAgICAgICBjb21wLnBsYXkoJ3BvcCcpO1xuICAgIH0sXG5cbiAgICBkaXNtaXNzTWVzc2FnZUFsZXJ0OmZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLm1lc3NhZ2VOb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9LDAuMyk7XG4gICAgfSxcblxuXG4gICAgLy8gY2FsbGVkIGV2ZXJ5IGZyYW1lLCB1bmNvbW1lbnQgdGhpcyBmdW5jdGlvbiB0byBhY3RpdmF0ZSB1cGRhdGUgY2FsbGJhY2tcbiAgICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xuXG4gICAgLy8gfSxcbn0pO1xuIiwidmFyIG1hbmFnZXIgPSByZXF1aXJlKCdtYW5hZ2VyJyk7XG5jb25zdCBTb2NrZXQgPSByZXF1aXJlKCdzb2NrZXQnKTtcbmNvbnN0IEtRR2xvYmFsRXZlbnQgPSByZXF1aXJlKCdLUUdsb2JhbEV2ZW50Jyk7XG5jb25zdCBBdWRpb01hbmFnZXIgPSByZXF1aXJlKCdBdWRpb01hbmFnZXInKTtcbmNvbnN0IEtRTmF0aXZlSW52b2tlID0gcmVxdWlyZSgnS1FOYXRpdmVJbnZva2UnKTtcbmNvbnN0IFBsYXliYWNrID0gcmVxdWlyZSgnUGxheWJhY2snKTtcblxubGV0IGhhbGwgPSBjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAgIHByb2R1Y3ROb2RlczpbY2MuTm9kZV0sXG4gICAgICAgIHNob3BBbGVydE5vZGU6Y2MuTm9kZSxcbiAgICAgICAgY3JlYXRlTm9kZTpjYy5Ob2RlLFxuICAgICAgICBqb2luTm9kZTpjYy5Ob2RlLFxuICAgICAgICBpbnZpdE5vZGU6Y2MuTm9kZSxcbiAgICAgICAgaGFzQ29kZTpjYy5Ob2RlLFxuICAgICAgICBnZW5neGluOmNjLk5vZGUsXG4gICAgICAgIGFsZXJ0UHJlZmFiOmNjLlByZWZhYixcbiAgICAgICAgdHNTaW5nbGVTZWxlY3Q6W2NjLk5vZGVdLC8v5Yib5bu65oi/6Ze05L+h5oGv77yM5Y2V6YCJXG4gICAgICAgIHRzQ2hlY2tTZWNsZWN0OltjYy5Ob2RlXSwvL+WIm+W7uuaIv+mXtOS/oeaBr++8jOWkjemAiVxuICAgICAgICBzZWxlY3RNb1NoaTpjYy5Ob2RlLCAgICAgLy/liJvlu7rmiL/pl7Tkv6Hmga/vvIzmqKHlvI/vvIjluoTlrrbmqKHlvI/lkozml6DnibnmrorniYzvvIlcbiAgICAgICAgc2VsZWN0R3VpUGFpOmNjLk5vZGUsICAgICAvL+WIm+W7uuaIv+mXtOS/oeaBr++8jOaooeW8j++8iOW6hOWutuaooeW8j+WSjOaXoOeJueauiueJjO+8iVxuICAgICAgICBsYWJlbE5vdGljZTogY2MuTGFiZWwsIC8vwqDlhazlkYpcbiAgICAgICAgbGFiZWxCYW5uZXI6IGNjLkxhYmVsLCAvLyBiYW5uZXIgbGFiZWxcbiAgICAgICAgc2hhcmVBbGVydE5vZGU6IGNjLk5vZGUsXG4gICAgICAgIHNoYXJlQWxlcnROb2RlMTogY2MuTm9kZSxcbiAgICAgICAgc2hhcmVBbGVydE5vZGVCZzogY2MuTm9kZSxcbiAgICAgICAgc2hhcmVBbGVydEJ1dHRvbjogY2MuQnV0dG9uLFxuICAgICAgICByZWNvcmROb2RlOmNjLk5vZGUsXG4gICAgICAgIHdhaXRpbmdQcmVmYWI6Y2MuUHJlZmFiLFxuICAgICAgICAvL+eUqOaIt+S/oeaBr1xuICAgICAgICBhdmF0YXJOb2RlOmNjLk5vZGUsXG4gICAgICAgIG5pY2tOYW1lTGFiZWw6Y2MuTGFiZWwsXG4gICAgICAgIGNhcmROdW1iZXJMYWJlbDpjYy5MYWJlbCxcbiAgICAgICAgdXNlcklkTGFiZWw6Y2MuTGFiZWwsXG4gICAgICAgIGNvZGVMYWJlbDpjYy5MYWJlbCxcbiAgICAgICAgLy8gdXNlckluZm9Nc2dOb2RlOmNjLk5vZGUsXG4gICAgICAgIC8v6YCA5Ye6XG4gICAgICAgIGV4aXROb2RlOmNjLk5vZGUsXG4gICAgICAgIGxvZ291dE5vZGU6IGNjLk5vZGUsXG4gICAgICAgIC8v5oiY57upXG4gICAgICAgIHJlY29yZE1zZ05vZGU6Y2MuTm9kZSxcbiAgICAgICAgZmVlZGJhY2tFZGl0Qm94OmNjLkVkaXRCb3gsLy/lj43ppohcbiAgICAgICAgZmVlZGJhY2tOb2RlOmNjLk5vZGUsXG5cbiAgICAgICAgX3VzZXJJZDowLFxuICAgICAgICBfb3BlbklkOm51bGwsXG4gICAgICAgIF9oZWxwOm51bGwsXG4gICAgICAgIF9jbG9zZTpudWxsLFxuICAgICAgICBpb3NVcmw6bnVsbCxcbiAgICAgICAgYVVybDpudWxsLFxuXG4gICAgfSxcblxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgbGFzdEhhbGxJbmZvOiBudWxsLCAgIC8vIOS4iuS4gOasoeaUtuWIsOeahOWkp+WOheS/oeaBr1xuICAgICAgICBjYWNoZUltYWdlSW5mbzogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmZyb20gPSB7fTtcbiAgICAgICAgY2MuZnJvbS5pc1VzZU1hID0gdHJ1ZTtcbiAgICAgICAgY2MuZnJvbS5tYSA9IDA7XG4gICAgICAgIGNjLmlzUm9vbVZpZXdTaG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2J0biA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJ0blwiKTtcbiAgICAgICAgdGhpcy5fYnV0dG9ucyA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJ1dHRvbnNcIik7XG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5TXVzaWMoKTtcbiAgICAgICAgUGxheWJhY2suaW5zdGFuY2UucmVtb3ZlUGxheWJhY2tEYXRhcygpO1xuXG4gICAgICAgIGhhbGwuY2FjaGVJbWFnZUluZm8gPSBoYWxsLmNhY2hlSW1hZ2VJbmZvIHx8IHt9O1xuXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyU29ja2V0RXZlbnQoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRCYW5uZXJBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5faW5pdEpvaW5Sb29tKCk7XG4gICAgICAgIHRoaXMuX2luaXRJbnZpdCgpO1xuXG4gICAgICAgIHRoaXMuX3VzZXJJZCA9IFNvY2tldC5pbnN0YW5jZS51c2VySW5mby5pZDtcbiAgICAgICAgdGhpcy5fb3BlbklkID0gU29ja2V0Lmluc3RhbmNlLnVzZXJJbmZvLm9wZW5JZDtcbiAgICAgICAgdGhpcy5faW52aXRlQ29kZSA9IFNvY2tldC5pbnN0YW5jZS51c2VySW5mby5pbnZpdGVDb2RlOyAgLy/pgoDor7fnoIFcbiAgICAgICAgLy9jYy5sb2codGhpcy5faW52aXRlQ29kZSxcIumCgOivt+eggS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcbiAgICAgICAgaWYodGhpcy5faW52aXRlQ29kZSl7ICAvL+mCgOivt+eggeWkhOeQhlxuICAgICAgICAgICAgdGhpcy5jb2RlTGFiZWwuc3RyaW5nID0gXCJDT0RF77yaXCIrIHRoaXMuX2ludml0ZUNvZGU7XG4gICAgICAgICAgICB0aGlzLmhhc0NvZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaW52aXROb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuaGFzQ29kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaW52aXROb2RlLmFjdGl2ZSA9IHRydWU7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmNvZGVMYWJlbC5zdHJpbmcgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvZHVjdE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29tcCA9IHRoaXMucHJvZHVjdE5vZGVzW2ldLmdldENvbXBvbmVudCgncHJvZHVjdCcpO1xuICAgICAgICAgICAgY29tcC5vbkNsaWNrQWN0aW9uID0gZnVuY3Rpb24ocHJvZHVjdElkKSB7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ja2V0ID0gY2MuZmluZCgnR2FtZVNvY2tldCcpLmdldENvbXBvbmVudCgnc29ja2V0Jyk7XG4gICAgICAgIHRoaXMuc29ja2V0LnJlY2V2aWNlTWVzc2FnZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3Rpb25TdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmhpZGRlbk5ldHdvcmtNZXNzYWdlKCk7XG4gICAgICAgICAgICBzZWxmLmhpZGRlbkNoZWNrTWVzc2FnZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0aW9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5zaG93TmV0d29ya01lc3NhZ2UoJ+e9kee7nOmTvuaOpeaWreW8gO+8jOmHjeaWsOi/nuaOpeS4rS4uLicpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5jaGVja05ldHdvcmtOb3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuc2hvd0NoZWNrTWVzc2FnZSgn5qOA5p+l572R57uc5LitLi4uJyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0LmNoZWNrTmV0d29ya0VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5oaWRkZW5DaGVja01lc3NhZ2UoKTtcbiAgICAgICAgICAgIHNlbGYuaGlkZGVuTmV0d29ya01lc3NhZ2UoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyAgLyrorr7nva7nlKjmiLfkv6Hmga8qL1xuICAgICAgICB0aGlzLnVwZGF0ZVVzZXJJbmZvKCk7XG4gICAgICAgIC8q5Yi35paw55So5oi35L+h5oGvKi9cbiAgICAgICAgU29ja2V0LnNlbmRHZXRVc2VySW5mbyh0aGlzLl91c2VySWQsdGhpcy5fb3BlbklkKTtcbiAgICAgICAgLyrlrprml7bliLfmlrDnlKjmiLfkv6Hmga8qL1xuICAgICAgICB0aGlzLnNjaGVkdWxlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBTb2NrZXQuc2VuZEdldFVzZXJJbmZvKHRoaXMuX3VzZXJJZCx0aGlzLl9vcGVuSWQpO1xuICAgICAgICB9LmJpbmQodGhpcyksMTApOy8vMTBz5LiA5qyhXG5cbiAgICAgICAgU29ja2V0LnNlbmRHZXRIYWxsSW5mbyh0aGlzLnNvY2tldC51c2VySW5mby5pZCk7XG4gICAgICAgIC8vaGFsbC5sYXN0SGFsbEluZm8gPSBjYy5fbG9naW5JbmZvO1xuICAgICAgICBpZiAoaGFsbC5sYXN0SGFsbEluZm8pIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmFubmVyKGhhbGwubGFzdEhhbGxJbmZvLmluZm8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVOb3RpY2UoaGFsbC5sYXN0SGFsbEluZm8uYnJvYWRjYXN0KTtcbiAgICAgICAgICAgIC8vdGhpcy5sYWJlbEJhbm5lci5zdHJpbmcgPSBoYWxsLmxhc3RIYWxsSW5mby5pbmZvO1xuICAgICAgICAgICAgLy90aGlzLmxhYmVsTm90aWNlLnN0cmluZyA9IGhhbGwubGFzdEhhbGxJbmZvLmJyb2FkY2FzdDtcbiAgICAgICAgfVxuICAgICAgICBjYy5vblNoYXJlV1hSZXNwID0gdGhpcy5fc2hhcmVSZXN1bHQuYmluZCh0aGlzKTtcblxuICAgIH0sXG5cbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQucmVjZXZpY2VNZXNzYWdlID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdGlvblN1Y2Nlc3MgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0aW9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge307XG4gICAgICAgIHRoaXMuc29ja2V0LmNoZWNrTmV0d29ya05vdyA9IGZ1bmN0aW9uKCl7fTtcbiAgICAgICAgdGhpcy5zb2NrZXQuY2hlY2tOZXR3b3JrRW5kID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgXG4gICAgICBLUUdsb2JhbEV2ZW50Lm9mZlRhcmdldCh0aGlzKTtcbiAgICB9LFxuXG4gICAgX3JlZ2lzdGVyU29ja2V0RXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuSm9pbkRlc2ssIHRoaXMuX2ppaW5Sb29tU29ja2V0Q2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlRGVza0luZm8sIHRoaXMuX2ppaW5Sb29tU29ja2V0Q2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlQ3JlYXRlRGVzaywgdGhpcy5fY3JlYXRlUm9vbVNvY2tldENhbGxiYWNrLCB0aGlzKTtcbiAgICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZUhhbGxJbmZvLCB0aGlzLl9zb2NrZXRSZWNlaXZlSGFsbEluZm8sIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlR2V0VXNlckluZm8sIHRoaXMuX3NvY2tldFJlY2VpdmVVc2VySW5mbywgdGhpcyk7XG4gICAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlNvY2tldERpc2Nvbm5lY3QsIHRoaXMuX3NvY2tldERpc2Nvbm5lY3QsIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlSW52aXRlQ29kZSwgdGhpcy5fc29ja2V0UmVjZWl2ZUludml0ZUNvZGUsIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5Tb2NrZXRDb25uZWN0U3VjY2Vzc2VkLCB0aGlzLl9zb2NrZXRDb25uZWN0ZWQsIHRoaXMpO1xuICAgICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlU2hhcmVQbmcsIHRoaXMuX3NvY2tldFNoYXJlUG5nLCB0aGlzKTtcbiAgICB9LFxuICAgICAgIC8v5o6l5Y+X6YKA6K+356CB5pWw5o2uXG4gICAgX3NvY2tldFJlY2VpdmVJbnZpdGVDb2RlOmZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgbGV0IGludml0ZUNvZGUgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAvL2NjLmxvZyhpbnZpdGVDb2RlLFwiLS0tLS0tLS0tLS0tIOmCgOivt+eggSAtLS0tLS0tLS0tLS1cIik7XG4gICAgICAgIGlmKGludml0ZUNvZGUpeyAgLy/pgoDor7fnoIHlpITnkIZcbiAgICAgICAgICAgIHRoaXMuX2ludml0ZUNvZGUgPSBpbnZpdGVDb2RlO1xuICAgICAgICAgICAgdGhpcy5jb2RlTGFiZWwuc3RyaW5nID0gXCJDT0RF77yaXCIrIGludml0ZUNvZGU7XG4gICAgICAgICAgICB0aGlzLmhhc0NvZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaW52aXROb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRNZXNzYWdlKFwi6L6T5YWl55qE6YKA6K+356CB5LiN5a2Y5ZyoXCIpO1xuICAgICAgICAgICAgdGhpcy5oYXNDb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pbnZpdE5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY29kZUxhYmVsLnN0cmluZyA9ICcnO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zdGFydEJhbm5lckFuaW1hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYW5pbSA9IHRoaXMubGFiZWxCYW5uZXIuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgIGFuaW0ucGxheSgnYmFubmVyJyk7XG4gICAgfSxcblxuXG4gICAgX2luaXRKb2luUm9vbTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBqb2luUm9vbSA9IHRoaXMuam9pbk5vZGUuZ2V0Q29tcG9uZW50KCdqb2luUm9vbScpO1xuXG4gICAgICAgIGpvaW5Sb29tLmNhbGxiYWNrSm9pblJvb20gPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBzZWxmLmpvaW5Ob2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XG4gICAgICAgICAgICBzZWxmLnNob3dXYWl0aW5nTWVzc2FnZSgn5Yqg5YWl5LitLi4uJyk7XG4gICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmhpZGRlbldhaXRpbmdNZXNzYWdlKCk7XG4gICAgICAgICAgICB9LCAyLjApO1xuXG4gICAgICAgICAgICAvKuWKoOWFpeaIv+mXtOivt+axgiovXG4gICAgICAgICAgICBsZXQgdXNlcklkID0gU29ja2V0Lmluc3RhbmNlLnVzZXJJbmZvLmlkO1xuICAgICAgICAgICAgU29ja2V0LnNlbmRKb2luRGVzayhudW1iZXIsIHVzZXJJZCk7XG4gICAgICAgIH07XG4gICAgfSxcblxuXG4gICAgX2luaXRJbnZpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3ZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy9sZXQgSW52aXQgPSB0aGlzLmludml0Tm9kZS5nZXRDb21wb25lbnQoJ0ludml0Jyk7XG5cbiAgICAgICAgLy8gSW52aXQuY2FsbGJhY2tKb2luUm9vbSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgLy8gICAgIHNlbGYuaW52aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XG4gICAgICAgIC8vICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgICAgICBzZWxmLmhpZGRlbldhaXRpbmdNZXNzYWdlKCk7XG4gICAgICAgIC8vICAgICB9LCAyLjApO1xuICAgICAgICAvLyAgICAgY2MubG9nKG51bWJlcilcbiAgICAgICAgLy8gICAgIGNjLmxvZygnLS0tLS0tMTkxJylcbiAgICAgICAgLy8gICAgIGxldCB1c2VySWQgPSBTb2NrZXQuaW5zdGFuY2UudXNlckluZm8uaWQ7XG4gICAgICAgIC8vIH07XG4gICAgfSxcblxuICAgIF9qaWluUm9vbVNvY2tldENhbGxiYWNrOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYoY2MuaXNSb29tVmlld1Nob3cpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGlkZGVuV2FpdGluZ01lc3NhZ2UoKTtcblxuICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0KSB7XG4gICAgICAgICAgICBpZihjYy5mcm9tID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjYy5mcm9tID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgam9pblJvb20gPSB0aGlzLmpvaW5Ob2RlLmdldENvbXBvbmVudCgnam9pblJvb20nKTtcblxuICAgICAgICAgICAgdGhpcy5qb2luTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jykuc2V0QWxlcnRDYWxsYmNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBqb2luUm9vbS5jbGlja0NsZWFyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNjLmZyb20ubWEgPSByZXNwb25zZS5kYXRhLm1hUGFpO1xuICAgICAgICAgICAgY2MuZGlyZWN0b3IubG9hZFNjZW5lKCdwbGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcmVhc29uSW5mbyA9IHRoaXMuX2pvaW5SZWFzb25NYXAocmVzcG9uc2UuZGF0YS5yZWFzb24pO1xuICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2UocmVhc29uSW5mbyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NvY2tldFJlY2VpdmVIYWxsSW5mbzogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmKGNjLmlzUm9vbVZpZXdTaG93KXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgaGFsbC5sYXN0SGFsbEluZm8gPSBkYXRhO1xuXG4gICAgICAgIGxldCBpc0lPUyA9IGRhdGEuaXNJT1M7XG4gICAgICAgIGxldCBpc0FuZHJvaWQgPSBkYXRhLmlzQTtcbiAgICAgICAgbGV0IHZJT1MgPSBkYXRhLnZJT1M7XG4gICAgICAgIGxldCB2QSA9IGRhdGEudkE7XG4gICAgICAgIHRoaXMuaW9zVXJsID0gZGF0YS5pb3NVcmw7XG4gICAgICAgIHRoaXMuYVVybCA9IGRhdGEuYVVybDtcblxuICAgICAgICBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgICAgICAgICAgaWYoaXNJT1M9PTEpe1xuICAgICAgICAgICAgICAgIGlmKHZJT1MgIT0gJzEuMC4xJyApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmd4aW4uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7Ly9BbmRyb2lkXG4gICAgICAgICAgICBpZihpc0FuZHJvaWQ9PTEpe1xuICAgICAgICAgICAgICAgIGlmKHZBICE9ICcxLjAuMScgKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5neGluLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm90aWNlID0gZGF0YS5icm9hZGNhc3Q7XG4gICAgICAgIGxldCBiYW5uZXIgPSBkYXRhLmluZm87XG4gICAgICAgIHRoaXMudXBkYXRlTm90aWNlKG5vdGljZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQmFubmVyKGJhbm5lcik7XG4gICAgfSxcbiAgICBkb3dubG9hZE5ld1ZlcnNpb246ZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgICAgICAgICAgY2Muc3lzLm9wZW5VUkwodGhpcy5pb3NVcmwpO1xuICAgICAgICAgICAgLy8ganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsIFwiZG93bmxvYWROZXdWZXJzaW9uOlwiLCB0aGlzLmlvc1VybCk7XG4gICAgICAgIH0gZWxzZSB7IC8vQW5kcm9pZFxuICAgICAgICAgICAgY2Muc3lzLm9wZW5VUkwodGhpcy5hVXJsKTtcbiAgICAgICAgICAgIC8vIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJkb3dubG9hZE5ld1ZlcnNpb25cIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgdGhpcy5hVXJsKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX2NyZWF0ZVJvb21Tb2NrZXRDYWxsYmFjazogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmKGNjLmlzUm9vbVZpZXdTaG93KXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhpZGRlbldhaXRpbmdNZXNzYWdlKCk7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICAgICAgY2MuZGlyZWN0b3IubG9hZFNjZW5lKCdwbGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLyrlpoLmnpzpkrvnn7PkuI3otrPvvIzliJnmj5DnpLoqL1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxlcnRNZXNzYWdlKFwi5oKo55qE6ZK755+z5LiN6LazXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9qb2luUmVhc29uTWFwOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBsZXQgcmVhc29uSW5mbyA9IHtcbiAgICAgICAgbm90RXhpc3Q6IFwi5oi/6Ze05LiN5a2Y5ZyoIVwiLFxuICAgICAgICBjYXJkTnVtYmVyOiBcIuaCqOaIv+WNoeS4jei2syFcIixcbiAgICAgIH07XG5cbiAgICAgIGxldCBpbmZvID0gcmVhc29uSW5mb1tyZWFzb25dIHx8IFwi5oi/6Ze05bey5ruhIVwiO1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfSxcblxuICAgIC8qc2hvcCovXG4gICAgc2hvcEFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLnNob3BBbGVydE5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xuICAgICAgICBjb21wLmFsZXJ0KCk7XG4gICAgfSxcbiAgICAvKuaPkOekuiovXG4gICAgYWxlcnRNZXNzYWdlOmZ1bmN0aW9uKG1zZykge1xuICAgICAgICB2YXIgbm9kZSA9IGNjLmluc3RhbnRpYXRlKHRoaXMuYWxlcnRQcmVmYWIpO1xuICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQobm9kZSk7XG4gICAgICAgIHZhciBjb21wID0gbm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIGNvbXAuc2V0TWVzc2FnZShtc2cpO1xuICAgICAgICBjb21wLmFsZXJ0KCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZU5vdGljZTogZnVuY3Rpb24gKG5vdGljZSkge1xuICAgICAgICBpZih0aGlzLmxhYmVsTm90aWNlID09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB0aGlzLmxhYmVsTm90aWNlLnN0cmluZyA9IG5vdGljZSB8fCBcIlwiO1xuICAgIH0sXG5cbiAgICB1cGRhdGVCYW5uZXI6IGZ1bmN0aW9uIChiYW5uZXIgPSBcIlwiKSB7XG4gICAgICAgIGlmKHRoaXMubGFiZWxCYW5uZXIgPT0gbnVsbCl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIHRoaXMubGFiZWxCYW5uZXIuc3RyaW5nID0gYmFubmVyO1xuICAgIH0sXG5cbiAgICAvKlxuICAgIGNyZWF0ZURvbmVBY3Rpb246ZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbmZvID0ge307XG4gICAgICAgIHZhciBrZXkgPSBbJ3NldHRpbmcxJywnc2V0dGluZzInLCdzZXR0aW5nMycsJ3NldHRpbmc0J107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50c1NpbmdsZVNlbGVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRzSW5kZXggPSAgdGhpcy50c1NpbmdsZVNlbGVjdFtpXS5nZXRDb21wb25lbnQoJ3NpbmdsZVNlbGVjdCcpLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICBpbmZvW2tleVtpXV0gPSB0c0luZGV4O1xuICAgICAgICB9XG4gICAgICAgIGluZm9bJ3VzZXJJZCddID0gdGhpcy5zb2NrZXQudXNlckluZm8uaWQ7XG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmRNZXNzYWdlKCdjcmVhdGVEZXNrJyxpbmZvKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZU5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpLmRpc21pc3NBY3Rpb24oKTtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2hvd1dhaXRpbmdNZXNzYWdlKCfliJvlu7rkuK0uLi4nKTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmhpZGRlbldhaXRpbmdNZXNzYWdlKCk7XG4gICAgICAgIH0sIDIuMCk7XG4gICAgfSxcbiAgICAqL1xuICAgIC8qIyMjIyNcbiAgICAqIHNldHRpbmcxIOWxgOaVsCAgKDAgfCAxIHwgMilcbiAgICAqIHNldHRpbmcyIOS6uuaVsCAgKDAgfCAxIHwgMiB8MylcbiAgICAqIHNldHRpbmczIOeOqeazlSAgKDAgfCAxKVxuICAgICogc2V0dGluZzQgQUHliLbmlLblj5bmiL/otLkgIChudWxsIHwgMClcbiAgICAqIHNldHRpbmc1IOmprOeJjCAgIO+8iG51bGwgfCAwIHwgMSB8IDLvvIlcbiAgICAqIHNldHRpbmc2IOaJk+aequiuoeWIhiAoMCB8IDEpXG4gICAgKiBzZXR0aW5nNyDlpJrkuIDoibIgIChudWxsIHwgMClcbiAgICAqICovXG4gICAgY3JlYXRlRG9uZUFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluZm8gPSB7fTtcbiAgICAgICAgLy/ljZXpgIlcbiAgICAgICAgdmFyIGtleSA9IFsnc2V0dGluZzEnLCdzZXR0aW5nMicsJ3NldHRpbmc2J107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50c1NpbmdsZVNlbGVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRzSW5kZXggPSAgdGhpcy50c1NpbmdsZVNlbGVjdFtpXS5nZXRDb21wb25lbnQoJ3NpbmdsZVNlbGVjdCcpLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICBpbmZvW2tleVtpXV0gPSB0c0luZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8v5Y+v6YCJ5Y+v5LiN6YCJXG4gICAgICAgIHZhciBrZXkxID0gWydzZXR0aW5nNCcsJ3NldHRpbmc3J107XG4gICAgICAgIGZvcih2YXIgaSA9IDA7aSA8IHRoaXMudHNDaGVja1NlY2xlY3QubGVuZ3RoLTE7IGkrKyl7XG4gICAgICAgICAgICB2YXIgdHNDaGVja0luZGV4ID0gdGhpcy50c0NoZWNrU2VjbGVjdFtpXS5nZXRDb21wb25lbnQoJ2NoZWNrU2VsZWN0Jykuc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgICAgIGluZm9ba2V5MVtpXV0gPSB0c0NoZWNrSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYoY2MuZnJvbS5pc1VzZU1hICYmIGNjLmZyb20ubWEgPT0gbnVsbCl7XG4gICAgICAgICAgICBjYy5mcm9tLm1hID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZihjYy5mcm9tLmlzVXNlTWEpIHtcbiAgICAgICAgICAgIGluZm9bJ3NldHRpbmc1J10gPSBjYy5mcm9tLm1hO1xuICAgICAgICB9XG4gICAgICAgIC8vc2V0dGluZzMgc2VsZWN0TW9TaGlJbmRleOS4uiDvvJpudWxsIHx8IDAgfHwgMVxuICAgICAgICB2YXIgc2VsZWN0TW9TaGlJbmRleCA9IHRoaXMuc2VsZWN0TW9TaGkuZ2V0Q29tcG9uZW50KCdzZWxlY3RNb1NoaScpLnNlbGVjdEluZGV4O1xuICAgICAgICBpbmZvWydzZXR0aW5nMyddID0gc2VsZWN0TW9TaGlJbmRleDtcblxuICAgICAgICB2YXIgc2VsZWN0TW9TaGlJbmRleCA9IHRoaXMuc2VsZWN0R3VpUGFpLmdldENvbXBvbmVudCgnc2VsZWN0TW9TaGknKS5zZWxlY3RJbmRleDtcbiAgICAgICAgLy9pbmZvWydzZXR0aW5nOCddID0gc2VsZWN0TW9TaGlJbmRleDtcbiAgICAgICAgaW5mb1snc2V0dGluZzgnXSA9IG51bGw7XG4gICAgICAgIC8v55So5oi3SWRcbiAgICAgICAgaW5mb1sndXNlcklkJ10gPSB0aGlzLnNvY2tldC51c2VySW5mby5pZDtcblxuICAgICAgICBpZihpbmZvWydzZXR0aW5nNiddID09IDApe1xuICAgICAgICAgICAgaW5mb1snc2V0dGluZzYnXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGluZm9bJ3NldHRpbmc2J10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmKGluZm9bJ3NldHRpbmcyJ10gPT0gMyl7Ly/kupTkurrlnLrlv4XpobvlpJrkuIDoibJcbiAgICAgICAgICAgIGluZm9bJ3NldHRpbmc3J10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGluZm9bJ3NldHRpbmc3J10gPSBudWxsO1xuICAgICAgICBjb25zb2xlLmxvZyhcIuaJk+WNsOWHuuWIm+W7uuaIv+mXtOS/oeaBr1wiKTtcbiAgICAgICAgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIC8vcmV0dXJuO1xuICAgICAgICB0aGlzLnNvY2tldC5zZW5kTWVzc2FnZSgnY3JlYXRlRGVzaycsaW5mbyk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVOb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XG5cbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLnNob3dXYWl0aW5nTWVzc2FnZSgn5Yib5bu65LitLi4uJyk7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5oaWRkZW5XYWl0aW5nTWVzc2FnZSgpO1xuICAgICAgICB9LCAyLjApO1xuICAgIH0sXG5cbiAgICAvLyDpmo/mnLrlnLpcbiAgICAvKmNsaWNrUmFuZFJvb206IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgncmFuZFJvb20nKTtcbiAgICB9LCovXG5cbiAgICBjbGlja1NoYXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNoYXJlQWxlcnROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5hbGVydCgpO1xuICAgIH0sXG5cbiAgICBjbGlja1NoYXJlMTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNoYXJlQWxlcnROb2RlMS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuYWxlcnQoKTtcbiAgICB9LFxuXG4gICAgY2xpY2tSZWNvcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLnJlY29yZE5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xuICAgICAgICBjb21wLmFsZXJ0KCk7XG4gICAgICAgIFNvY2tldC5zZW5kR2V0UmVjcm9kKFNvY2tldC5pbnN0YW5jZS51c2VySW5mby5pZCk7XG5cbiAgICB9LFxuXG4gICAgY2xpY2tQbGF5UnVsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAvL2NjLmRpcmVjdG9yLmxvYWRTY2VuZSgncnVsZScpO1xuICAgICAgICB0aGlzLmhlbHAgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJoZWxwXCIpO1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuaGVscC5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIGNvbXAuYWxlcnQoKTtcbiAgICB9LFxuXG4gICAgLypzaGFyZSovXG4gICAgc2hhcmVUb0ZyaWVuZDpmdW5jdGlvbigpIHtcbiAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XG4gICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJ3eFNoYXJlSGFsbEZyaWVuZFwiLCk7XG4gICAgICB9XG4gICAgICBlbHNlIHsvL0FuZHJvaWRcbiAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwid3hTaGFyZUhhbGxGcmllbmRcIiwgXCIoKVZcIik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNoYXJlVG9UaW1lbGluZTpmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zaGFyZUFsZXJ0Tm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgICBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJ3eFNoYXJlSGFsbFRpbWVsaW5lXCIsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsvL0FuZHJvaWRcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJ3eFNoYXJlSGFsbFRpbWVsaW5lXCIsIFwiKClWXCIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvL+eCueWHu+WIhuS6q1xuICAgIHNoYXJlVG9UaW1lbGluZVBuZzpmdW5jdGlvbigpIHtcblxuICAgICAgICB0aGlzLnNoYXJlQWxlcnROb2RlQmcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLFwid3hTY3JlZW5TaGFyZVwiLCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7Ly9BbmRyb2lkXG4gICAgICAgICAgICBLUU5hdGl2ZUludm9rZS5zY3JlZW5zaG90U2hhcmUoXCJzaGFyZUlNR1RpbWVsaW5lXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLnNoYXJlQWxlcnROb2RlQmcuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0uYmluZCh0aGlzKSwwLjAxKTsvLzEwc+S4gOasoVxuXG4gICAgfSxcbiAgICAvL+eCueWHu+WIhuS6q+i/lOWbnuWAvCAx77ya5oiQ5YqfICAw77ya5bey57uP6aKG5Y+WXG4gICAgX3NvY2tldFNoYXJlUG5nOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLnNoYXJlQWxlcnROb2RlQmcuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN0aW5nO1xuICAgICAgICBpZihkYXRhLmRhdGEgPT0gMSl7XG4gICAgICAgICAgICBTb2NrZXQuc2VuZEdldFVzZXJJbmZvKHRoaXMuX3VzZXJJZCx0aGlzLl9vcGVuSWQpO1xuICAgICAgICAgICAgc3RpbmcgPSAn5YiG5Lqr5oiQ5Yqf77yBJztcbiAgICAgICAgICAgIC8vdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxmLnNob3dDaGVja01lc3NhZ2Uoc3RpbmcpO1xuICAgICAgICAgICAgLy99LmJpbmQodGhpcyksMC41KTsvLzEwc+S4gOasoVxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxmLmhpZGRlbkNoZWNrTWVzc2FnZSgpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLDIpOy8vMTBz5LiA5qyhXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgc3RpbmcgPSAn5LuK5aSp5bey57uP5YiG5Lqr5LqG77yBJztcbiAgICAgICAgICAgIHNlbGYuc2hvd0NoZWNrTWVzc2FnZShzdGluZyk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHNlbGYuaGlkZGVuQ2hlY2tNZXNzYWdlKCk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcyksMS41KTsvLzEwc+S4gOasoVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgX3NoYXJlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKHRoaXMuc2hhcmVBbGVydE5vZGUxLmFjdGl2ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgU29ja2V0LnNlbmRTaGFyZVBuZyh0aGlzLl91c2VySWQpO1xuICAgIH0sXG5cbiAgICBjbGlja0V4aXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKTtcbiAgICAgICAgY29tcC5hbGVydCgpO1xuICAgIH0sXG4gICAgLyrliIfmjaLotKblj7cqL1xuICAgIGNsaWNrQ2FuY2VsTGF0aW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dvdXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5hbGVydCgpO1xuICAgIH0sXG5cbiAgICBsb2dvdXRBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICBtYW5hZ2VyLnNldFVzZXJJbmZvKCcnKTtcbiAgICAgICAgY2MuZGlyZWN0b3IubG9hZFNjZW5lKCdsb2dpbicpO1xuXG4gICAgICAgIGhhbGwuY2FjaGVJbWFnZUluZm8gPSBudWxsO1xuICAgIH0sXG5cbiAgICBleGl0QWN0aW9uOmZ1bmN0aW9uKCkge1xuICAgICAgbWFuYWdlci5zZXRVc2VySW5mbygnJyk7XG4gICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ2xvZ2luJyk7XG4gICAgICAgIGhhbGwuY2FjaGVJbWFnZUluZm8gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLFwiZXhpdEFwcFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUFuZHJvaWQoKSkgey8vQW5kcm9pZCBjb20ubGxpbmcucWlhbmppYW5nbHpnXG4gICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwiZXhpdEFwcFwiLCBcIigpVlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYy5kaXJlY3Rvci5lbmQoKTtcblxuICAgIH0sXG5cbiAgICAvL+aOpeaUtuWkhOeQhueUqOaIt+aVsOaNrlxuICAgIF9zb2NrZXRSZWNlaXZlVXNlckluZm86ZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYoY2MuaXNSb29tVmlld1Nob3cpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICBpZiAoIXRoaXMuc29ja2V0LnVzZXJJbmZvKSB7XG4gICAgICAgIGNjLmVycm9yKFwidGhpcy5zb2NrZXQudXNlckluZm8g5Li656m6ISEhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm5pY2tOYW1lTGFiZWwuc3RyaW5nID0gcmVzcG9uc2UuZGF0YS5uaWNrbmFtZTtcbiAgICAgIHRoaXMudXNlcklkTGFiZWwuc3RyaW5nID0gJ0lEOiAnICsgcmVzcG9uc2UuZGF0YS5pZDtcbiAgICAgIHRoaXMuY2FyZE51bWJlckxhYmVsLnN0cmluZyA9IHJlc3BvbnNlLmRhdGEuY2FyZE51bWJlcjtcbiAgICAgIHZhciBzcHJpdGUgPSB0aGlzLmF2YXRhck5vZGUuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICBjYy5sb2FkZXIubG9hZChyZXNwb25zZS5kYXRhLmF2YXRhclVybCtcIi5qcGdcIiwgZnVuY3Rpb24gKGVyciwgdGV4KSB7XG4gICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgdmFyIGZyYW1lID0gbmV3IGNjLlNwcml0ZUZyYW1lKHRleCk7XG4gICAgICAgICAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZT1mcmFtZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgX3NvY2tldERpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNob3dOZXR3b3JrTWVzc2FnZShcIue9kee7nOmTvuaOpeaWreW8gO+8jOmHjeaWsOi/nuaOpeS4rS4uLlwiKTtcbiAgICB9LFxuXG4gICAgX3NvY2tldENvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuTmV0d29ya01lc3NhZ2UoKTtcbiAgICB9LFxuXG4gICAgLy/mm7TmlrDnlKjmiLfkv6Hmga9cbiAgICB1cGRhdGVVc2VySW5mbzpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluZm8gPSB0aGlzLnNvY2tldC51c2VySW5mbztcbiAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgY2MuZXJyb3IoXCJ0aGlzLnNvY2tldC51c2VySW5mbyDkuLrnqbohISFcIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5uaWNrTmFtZUxhYmVsLnN0cmluZyA9IGluZm8ubmlja25hbWU7XG4gICAgICAgIHRoaXMudXNlcklkTGFiZWwuc3RyaW5nID0gJ0lEOiAnICsgaW5mby5pZDtcbiAgICAgICAgdGhpcy5jYXJkTnVtYmVyTGFiZWwuc3RyaW5nID0gaW5mby5jYXJkTnVtYmVyO1xuXG4gICAgICAgIGxldCBhdmF0YXJVcmwgPSBpbmZvLmF2YXRhclVybCArIFwiLmpwZ1wiO1xuICAgICAgICB2YXIgc3ByaXRlID0gdGhpcy5hdmF0YXJOb2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICB2YXIgdGV4dHVyZSA9IGhhbGwuY2FjaGVJbWFnZUluZm9bYXZhdGFyVXJsXTtcbiAgICAgICAgaWYgKHRleHR1cmUpIHtcbiAgICAgICAgICAgIGxldCBmcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0ZXh0dXJlKTtcbiAgICAgICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgICAgICAgIGNjLmxvZyhcIuS7jue8k+WtmOS4reWKoOi9veWktOWDj1wiKTtcbiAgICAgICAgICAgICAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBmcmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYy5sb2FkZXIubG9hZChpbmZvLmF2YXRhclVybCtcIi5qcGdcIiwgZnVuY3Rpb24gKGVyciwgdGV4KSB7XG4gICAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0ZXgpO1xuICAgICAgICAgICAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZT1mcmFtZTtcblxuICAgICAgICAgICAgICAgIGhhbGwuY2FjaGVJbWFnZUluZm9bYXZhdGFyVXJsXSA9IHRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8q5o+Q5Lqk5oSP6KeBKi9cbiAgICBmZWVkYmFja0FjaW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB1c2VySWQgPSB0aGlzLnNvY2tldC51c2VySW5mby5pZDtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5mZWVkYmFja0VkaXRCb3guc3RyaW5nO1xuICAgICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmZlZWRiYWNrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgICBTb2NrZXQuc2VuZEZlZWRiYWNrKHVzZXJJZCx0ZXh0KTtcbiAgICAgICAgdGhpcy5mZWVkYmFja0VkaXRCb3guc3RyaW5nID0gJyc7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob3dXYWl0aW5nTWVzc2FnZTpmdW5jdGlvbihtc2cpIHtcbiAgICAgIGlmICh0aGlzLndhaXRpbmdOb2RlICE9IG51bGwgJiYgY2Muc3lzLmlzTmF0aXZlICYmIGNjLnN5cy5pc09iamVjdFZhbGlkKHRoaXMud2FpdGluZ05vZGUpKSB7XG4gICAgICAgICAgdGhpcy53YWl0aW5nTm9kZS5kZXN0b3J5KCk7XG4gICAgICAgICAgdGhpcy53YWl0aW5nTm9kZSA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLndhaXRpbmdOb2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy53YWl0aW5nUHJlZmFiKTtcbiAgICAgIHRoaXMubm9kZS5hZGRDaGlsZCh0aGlzLndhaXRpbmdOb2RlKTtcbiAgICAgIHZhciBjb21wID0gdGhpcy53YWl0aW5nTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICBjb21wLnNldE1lc3NhZ2UobXNnKTtcbiAgICAgIGNvbXAuYWxlcnQoKTtcbiAgICB9LFxuXG4gICAgaGlkZGVuV2FpdGluZ01lc3NhZ2U6ZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy53YWl0aW5nTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy53YWl0aW5nTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvL25ldHdvcmtcbiAgICBzaG93TmV0d29ya01lc3NhZ2U6ZnVuY3Rpb24obXNnKSB7XG4gICAgICAgIGlmICh0aGlzLm5ldHdvcmtOb2RlICYmIHRoaXMubmV0d29ya05vZGUuYWN0aXZlKSB7XG4gICAgICAgICAgICBsZXQgYWxlcnQgPSB0aGlzLm5ldHdvcmtOb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKTtcbiAgICAgICAgICAgIGlmIChhbGVydC5nZXRNZXNzYWdlKCkgPT0gbXNnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubmV0d29ya05vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHJlbW92ZVNlbGZBY3Rpb24gPSBjYy5yZW1vdmVTZWxmKCk7XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtOb2RlLnJ1bkFjdGlvbihyZW1vdmVTZWxmQWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMubmV0d29ya05vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmV0d29ya05vZGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLndhaXRpbmdQcmVmYWIpO1xuICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQodGhpcy5uZXR3b3JrTm9kZSk7XG4gICAgICAgIHZhciBjb21wID0gdGhpcy5uZXR3b3JrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgY29tcC5vbkRpc21pc3NDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5uZXR3b3JrTm9kZSA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIGNvbXAuc2V0TWVzc2FnZShtc2cpO1xuICAgICAgICBjb21wLmFsZXJ0KCk7XG4gICAgfSxcblxuICAgIGhpZGRlbk5ldHdvcmtNZXNzYWdlOmZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5uZXR3b3JrTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtOb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy9jaGVja05vZGVcbiAgICBzaG93Q2hlY2tNZXNzYWdlOmZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAoISh0aGlzLmNoZWNrTm9kZSAmJiB0aGlzLmNoZWNrTm9kZS5hY3RpdmUpKSB7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYWxlcnQgPSB0aGlzLmNoZWNrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgICAgICBpZiAoYWxlcnQuZ2V0TWVzc2FnZSgpID09IG1zZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciByZW1vdmVTZWxmQWN0aW9uID0gY2MucmVtb3ZlU2VsZigpO1xuICAgICAgICAgICAgdGhpcy5jaGVja05vZGUucnVuQWN0aW9uKHJlbW92ZVNlbGZBY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5jaGVja05vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hlY2tOb2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy53YWl0aW5nUHJlZmFiKTtcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMuY2hlY2tOb2RlKTtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmNoZWNrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgY29tcC5vbkRpc21pc3NDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5jaGVja05vZGUgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBjb21wLnNldE1lc3NhZ2UobXNnKTtcbiAgICAgICAgY29tcC5hbGVydCgpO1xuICAgIH0sXG5cbiAgICBoaWRkZW5DaGVja01lc3NhZ2U6ZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBvbkJ0bkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5fYnV0dG9ucy5hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbnMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9ucy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYWxsO1xuIiwiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIC8qc3ByaXRlczoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVBdGxhc1xyXG4gICAgICAgIH0sKi9cclxuICAgICAgICBwbGF5X21ldGhvZF9iZWZvcmU6Y2MuTm9kZSwgIC8v546p5rOV5LuL57uNXHJcbiAgICAgICAgcGxheV9tZXRob2RfY29udGVudF9sYWJlbDpjYy5Ob2RlLCAgLy/njqnms5Xku4vnu43lhoXlrrlcclxuICAgICAgICBpbnRyb2R1Y2VfcGFpX2JlZm9yZTpjYy5Ob2RlLC8v54mM5Z6L5LuL57uNXHJcbiAgICAgICAgZGV0YWlsczpjYy5Ob2RlLCAgIC8v54mM5Z6L5LuL57uN5YaF5a65XHJcbiAgICAgICAgY2FvenVvX2JlZm9yZTpjYy5Ob2RlLCAgICAgLy/mk43kvZzku4vnu41cclxuICAgICAgICBjYW96dW9fY29udGVudDpjYy5Ob2RlLCAgLy/mk43kvZzku4vnu43lhoXlrrlcclxuICAgICAgICBfYnRuOm51bGwsXHJcbiAgICAgICAgX2NvbnRlbnQ6bnVsbCxcclxuICAgICAgICBfYnV0dG9uQ29tOm51bGwsXHJcbiAgICAgICAgX3BsYXlfbWV0aG9kX2J1dHRvbjpudWxsLFxyXG4gICAgICAgIF9pbnRyb2R1Y2VfcGFpX2J1dHRvbjpudWxsLFxyXG4gICAgICAgIF9jYW96dW9fYnV0dG9uOm51bGxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXHJcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9wbGF5X21ldGhvZF9idXR0b24gPSB0aGlzLnBsYXlfbWV0aG9kX2JlZm9yZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgICAgICB0aGlzLl9pbnRyb2R1Y2VfcGFpX2J1dHRvbiA9IHRoaXMuaW50cm9kdWNlX3BhaV9iZWZvcmUuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy5fY2FvenVvX2J1dHRvbiA9IHRoaXMuY2FvenVvX2JlZm9yZS5nZXRDb21wb25lbnQoY2MuQnV0dG9uKTtcclxuICAgICAgICB0aGlzLl9idG4gPSBbdGhpcy5wbGF5X21ldGhvZF9iZWZvcmUsdGhpcy5pbnRyb2R1Y2VfcGFpX2JlZm9yZSx0aGlzLmNhb3p1b19iZWZvcmVdO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBbdGhpcy5wbGF5X21ldGhvZF9jb250ZW50X2xhYmVsLHRoaXMuZGV0YWlscyx0aGlzLmNhb3p1b19jb250ZW50XTtcclxuICAgICAgICB0aGlzLl9idXR0b25Db20gPSBbdGhpcy5fcGxheV9tZXRob2RfYnV0dG9uLHRoaXMuX2ludHJvZHVjZV9wYWlfYnV0dG9uLHRoaXMuX2Nhb3p1b19idXR0b25dO1xyXG4gICAgICAgIC8v5Yia5byA5aeL54mM5Z6L5LuL57uN55qE5oyJ6ZKu5LiN5Y+v55SoXHJcbiAgICAgICAgdGhpcy5fYnV0dG9uQ29tWzFdLmludGVyYWN0YWJsZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIC8vIOeCueWHu+eOqeazleS7i+e7jVxyXG4gICAgb25CdG5QbGF5TWV0aG9kQ2xpY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8MztpKyspe1xyXG4gICAgICAgICAgICAvL+aJgOacieaMiemSruiuvue9ruS4uuWPr+eUqFxyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25Db21baV0uaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy/miYDmnInnmoTlhoXlrrnpg73pmpDol4/mjolcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudFtpXS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTorr7nva7kuLrkuI3lj6/nlKhcclxuICAgICAgICB0aGlzLl9idXR0b25Db21bMF0uaW50ZXJhY3RhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTlr7nlupTnmoTlhoXlrrnlj6/op4FcclxuICAgICAgICB0aGlzLl9jb250ZW50WzBdLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgLy/ngrnlh7vniYzlnovku4vnu41cclxuICAgIG9uQnRuSW50cm9kdWNlUGFpQ2xpY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8MztpKyspe1xyXG4gICAgICAgICAgICAvL+aJgOacieaMiemSruiuvue9ruS4uuWPr+eUqFxyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25Db21baV0uaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy/miYDmnInnmoTlhoXlrrnpg73pmpDol4/mjolcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudFtpXS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTorr7nva7kuLrkuI3lj6/nlKhcclxuICAgICAgICB0aGlzLl9idXR0b25Db21bMV0uaW50ZXJhY3RhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTlr7nlupTnmoTlhoXlrrnlj6/op4FcclxuICAgICAgICB0aGlzLl9jb250ZW50WzFdLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgLy/ngrnlh7vmk43kvZzku4vnu41cclxuICAgIG9uQnRuQ2FvenVvQ2xpY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8MztpKyspe1xyXG4gICAgICAgICAgICAvL+aJgOacieaMiemSruiuvue9ruS4uuWPr+eUqFxyXG4gICAgICAgICAgICB0aGlzLl9idXR0b25Db21baV0uaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy/miYDmnInnmoTlhoXlrrnpg73pmpDol4/mjolcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudFtpXS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTorr7nva7kuLrkuI3lj6/nlKhcclxuICAgICAgICB0aGlzLl9idXR0b25Db21bMl0uaW50ZXJhY3RhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgLy/lvZPliY3ngrnlh7vnmoTlr7nlupTnmoTlhoXlrrnlj6/op4FcclxuICAgICAgICB0aGlzLl9jb250ZW50WzJdLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvLyBjYWxsZWQgZXZlcnkgZnJhbWUsIHVuY29tbWVudCB0aGlzIGZ1bmN0aW9uIHRvIGFjdGl2YXRlIHVwZGF0ZSBjYWxsYmFja1xyXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcclxuXHJcbiAgICAvLyB9LFxyXG59KTtcclxuIiwiLyoqXHJcbiAqIOmCgOivt+eggVxyXG4gKiBAYXV0aG9ycyDpu4TmiJAoeW91QGV4YW1wbGUub3JnKVxyXG4gKiBAZGF0ZSAgICAyMDE3LTA2LTE2IDA5OjQ0OjEwXHJcbiAqIEB2ZXJzaW9uICRJZCRcclxuICovXHJcbmNvbnN0IFNvY2tldCA9IHJlcXVpcmUoJ3NvY2tldCcpO1xyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGxhYmVsTnVtYmVyczogW2NjLkxhYmVsXSxcclxuICAgICAgICBjYWxsYmFja0ludml0ZUNvZGU6ICcnLFxyXG4gICAgfSxcclxuXHJcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5jbGlja0NsZWFyKCk7IC8v5riF6Zmk5pWw5a2XXHJcbiAgICB9LFxyXG5cclxuICAgIGNsaWNrQ2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5sYWJlbE51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcclxuICAgICAgICBsYWJlbC5zdHJpbmcgPSBcIlwiO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgY2xpY2tOdW1iZXI6IGZ1bmN0aW9uIChldmVudCwgbnVtYmVyKSB7XHJcbiAgICAgIHZhciBsYWJlbCA9IHRoaXMuX2xhc3RFbXB0eUxhYmVsKCk7XHJcbiAgICAgIGlmIChsYWJlbCkge1xyXG4gICAgICAgIGxhYmVsLnN0cmluZyA9IG51bWJlcjtcclxuICAgICAgIFx0Y2MubG9nKGxhYmVsLnN0cmluZyAsXCItLS0tLS0tLS0tLS0tLS0tXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaXNDb21wbGV0ZSA9ICh0aGlzLl9sYXN0RW1wdHlMYWJlbCgpID09IG51bGwpO1xyXG4gICAgICBjYy5sb2coXCJpc0NvbXBsZXRlLS0tLS0tLS0tLS0tLVwiLCB0aGlzLmNhbGxiYWNrSW52aXRlQ29kZSk7XHJcbiAgICAgIGxldCBpbnZpdGVOdW1iZXIgPSB0aGlzLl9pbnZpdGVOdW1iZXIoKTtcclxuXHJcbiAgICAgIGlmICggaW52aXRlTnVtYmVyLmxlbmd0aCA9PSA2ICl7XHJcbiAgICAgICAgY2MubG9nKGludml0ZU51bWJlcixcIi0tLS0tLS0tLS0tLS0tLS0tLS0tMzhcIik7IC8v6YKA6K+356CBXHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IFNvY2tldC5pbnN0YW5jZS51c2VySW5mby5pZDtcclxuICAgICAgICAvL1NvY2tldC5zZW5kSW52aXRlQ29kZShpbnZpdGVOdW1iZXIsIHVzZXJJZCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0ludml0ZUNvZGUgPSBpbnZpdGVOdW1iZXI7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZW5kQ29kZSA6ZnVuY3Rpb24oKXsgIC8v5Y+R6YCB6YKA6K+356CBXHJcbiAgICAgIGxldCB1c2VySWQgPSBTb2NrZXQuaW5zdGFuY2UudXNlckluZm8uaWQ7XHJcbiAgICAgIGxldCBpbnZpdGVOdW1iZXIgPSB0aGlzLmNhbGxiYWNrSW52aXRlQ29kZTtcclxuICAgICAgLy9jYy5sb2coaW52aXRlTnVtYmVyLFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0zOFwiKVxyXG4gICAgICBpZiggaW52aXRlTnVtYmVyICYmIGludml0ZU51bWJlci5sZW5ndGg9PTYpeyAgXHJcbiAgICAgICAgU29ja2V0LnNlbmRJbnZpdGVDb2RlKGludml0ZU51bWJlciwgdXNlcklkKTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrSW52aXRlQ29kZSA9ICcnOyAgIC8v5riF56m66YKA6K+356CBXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjbGlja0RlbGV0ZU9uZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgbGFiZWwgPSB0aGlzLl9sYXN0TnVtYmVyTGFiZWwoKTtcclxuICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgbGFiZWwuc3RyaW5nID0gXCJcIjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfbGFzdEVtcHR5TGFiZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaW5kZXggaW4gdGhpcy5sYWJlbE51bWJlcnMpIHtcclxuICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmxhYmVsTnVtYmVyc1tpbmRleF07XHJcbiAgICAgICAgaWYgKGxhYmVsLnN0cmluZyA9PSBudWxsXHJcbiAgICAgICAgfHwgbGFiZWwuc3RyaW5nLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBfbGFzdE51bWJlckxhYmVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvciAodmFyIGluZGV4ID0gdGhpcy5sYWJlbE51bWJlcnMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IHRoaXMubGFiZWxOdW1iZXJzW2luZGV4XTtcclxuICAgICAgICBpZiAobGFiZWwuc3RyaW5nICYmIGxhYmVsLnN0cmluZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgX2ludml0ZU51bWJlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5sYWJlbE51bWJlcnMucmVkdWNlKGZ1bmN0aW9uIChpbnZpdGVOdW1iZXIsIGxhYmVsKSB7XHJcbiAgICAgICAgLy9jYy5sb2coaW52aXRlTnVtYmVyLFwiLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgcmV0dXJuIGludml0ZU51bWJlciArIChsYWJlbC5zdHJpbmcgfHwgXCJcIik7XHJcbiAgICAgIH0sIFwiXCIpO1xyXG4gICAgfSxcclxufSkiLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBsYWJlbE51bWJlcnM6IFtjYy5MYWJlbF0sXG4gICAgICAgIGNhbGxiYWNrSm9pblJvb206IG51bGwsXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jbGlja0NsZWFyKCk7XG4gICAgfSxcblxuICAgIGNsaWNrTnVtYmVyOiBmdW5jdGlvbiAoZXZlbnQsIG51bWJlcikge1xuICAgICAgdmFyIGxhYmVsID0gdGhpcy5fbGFzdEVtcHR5TGFiZWwoKTtcbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICBsYWJlbC5zdHJpbmcgPSBudW1iZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBpc0NvbXBsZXRlID0gKHRoaXMuX2xhc3RFbXB0eUxhYmVsKCkgPT0gbnVsbCk7XG4gICAgICBpZiAoaXNDb21wbGV0ZSAmJiB0aGlzLmNhbGxiYWNrSm9pblJvb20pIHtcbiAgICAgICAgbGV0IHJvb21OdW1iZXIgPSB0aGlzLl9yb29tTnVtYmVyKCk7XG4gICAgICAgIC8vIGNjLmxvZyhcIuimgeWKoOWFpeeahOaIv+mXtOWPt+aYr++8mlwiLCByb29tTnVtYmVyKTtcbiAgICAgICAgdGhpcy5jYWxsYmFja0pvaW5Sb29tKHJvb21OdW1iZXIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbGlja0NsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmxhYmVsTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICBsYWJlbC5zdHJpbmcgPSBcIlwiO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGNsaWNrRGVsZXRlT25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbGFiZWwgPSB0aGlzLl9sYXN0TnVtYmVyTGFiZWwoKTtcbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICBsYWJlbC5zdHJpbmcgPSBcIlwiO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfbGFzdEVtcHR5TGFiZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGluZGV4IGluIHRoaXMubGFiZWxOdW1iZXJzKSB7XG4gICAgICAgIHZhciBsYWJlbCA9IHRoaXMubGFiZWxOdW1iZXJzW2luZGV4XTtcbiAgICAgICAgaWYgKGxhYmVsLnN0cmluZyA9PSBudWxsXG4gICAgICAgIHx8IGxhYmVsLnN0cmluZy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIF9sYXN0TnVtYmVyTGFiZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gdGhpcy5sYWJlbE51bWJlcnMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBsZXQgbGFiZWwgPSB0aGlzLmxhYmVsTnVtYmVyc1tpbmRleF07XG4gICAgICAgIGlmIChsYWJlbC5zdHJpbmcgJiYgbGFiZWwuc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIF9yb29tTnVtYmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYWJlbE51bWJlcnMucmVkdWNlKGZ1bmN0aW9uIChyb29tTnVtYmVyLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gcm9vbU51bWJlciArIChsYWJlbC5zdHJpbmcgfHwgXCJcIik7XG4gICAgICB9LCBcIlwiKTtcbiAgICB9LFxufSk7XG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICB2aXNpYmxlOiB0cnVlLCAgICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIC4uLlxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnbG9naW4nKTtcbiAgICAgICAgfSwgMC41KTtcbiAgICB9LFxuXG4gICAgLy8gY2FsbGVkIGV2ZXJ5IGZyYW1lLCB1bmNvbW1lbnQgdGhpcyBmdW5jdGlvbiB0byBhY3RpdmF0ZSB1cGRhdGUgY2FsbGJhY2tcbiAgICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xuXG4gICAgLy8gfSxcbn0pO1xuIiwidmFyIG1hbmFnZXIgPSByZXF1aXJlKCdtYW5hZ2VyJyk7XG5jb25zdCBLUUNhcmQgPSByZXF1aXJlKCdLUUNhcmQnKTtcbmNvbnN0IFNvY2tldCA9IHJlcXVpcmUoJ3NvY2tldCcpO1xuY29uc3QgS1FDYXJkRmluZFR5cGVFeHRlbnNpb24gPSByZXF1aXJlKCdLUUNhcmRGaW5kVHlwZUV4dGVuc2lvbicpO1xuY29uc3QgS1FHbG9iYWxFdmVudCA9IHJlcXVpcmUoJ0tRR2xvYmFsRXZlbnQnKTtcbmNvbnN0IEF1ZGlvTWFuYWdlciA9IHJlcXVpcmUoJ0F1ZGlvTWFuYWdlcicpO1xuY29uc3QgS1FOYXRpdmVJbnZva2UgPSByZXF1aXJlKCdLUU5hdGl2ZUludm9rZScpO1xuY29uc3QgS1FHbGFib2xTb2NrZXRFdmVudEhhbmRlciA9IHJlcXVpcmUoJ0tRR2xhYm9sU29ja2V0RXZlbnRIYW5kZXInKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgc2VsZWN0Tm9kZTpjYy5Ob2RlLFxuICAgICAgICBhbGVydFByZWZhYjpjYy5QcmVmYWIsXG4gICAgICAgIGNhbnZhc05vZGU6Y2MuTm9kZSxcbiAgICAgICAgLy9hZ3JlZW1lbnQ6IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgLy8gICAgdHlwZTogY2MuTGFiZWxcbiAgICAgICAgLy99LFxuICAgICAgICB2TGFiZWw6Y2MuTGFiZWwsXG4gICAgICAgIHNjcm9sbF9WaWV3OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTpjYy5TY3JvbGxWaWV3XG4gICAgICAgIH0sXG4gICAgICAgIGFncmVlbWVudExhYmVsOmNjLkxhYmVsLFxuICAgICAgICBhZ3JlZW1lbnROb2RlOmNjLk5vZGUsXG4gICAgICAgIHdhaXRpbmdQcmVmYWI6Y2MuUHJlZmFiLFxuICAgIH0sXG5cbiAgICBnb1VwZGF0ZUFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoXCJBcHBDb250cm9sbGVyXCIsXCJkb3dubG9hZE5ld1ZlcnNpb246XCIsdGhpcy5pb3NVcmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Ugey8vQW5kcm9pZFxuICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChcImNvbS9sbGluZy9zc3ovQXBwQWN0aXZpdHlcIiwgXCJkb3dubG9hZE5ld1ZlcnNpb25cIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgdGhpcy5hbmRyb2lkVXJsKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGVja1ZlcnNpb246ZnVuY3Rpb24odkRhdGEpIHtcbiAgICAgICAgLy92YXIgdmVyc2lvbiA9IHZEYXRhLnZlcnNpb247XG4gICAgICAgIGNjLmluZm8xID0gdkRhdGEudmVyc2lvbjtcbiAgICAgICAgdGhpcy5pb3NVcmwgPSB2RGF0YS5pb3NVcmw7XG4gICAgICAgIHRoaXMuYW5kcm9pZFVybCA9IHZEYXRhLmFuZHJvaWRVcmw7XG4gICAgICAgIC8vaWYgKG1hbmFnZXIudmVyc2lvbiAhPSB2ZXJzaW9uKSB7Ly/mm7TmlrDniYjmnKxcbiAgICAgICAgLy8gICAgdGhpcy52ZXJzaW9uRW5hYmxlID0gZmFsc2U7XG4gICAgICAgIC8vICAgIHRoaXMuZ29VcGRhdGVBY3Rpb24oKTtcbiAgICAgICAgLy8gICAgLy90aGlzLnZlcnNpb25MYWJlbC5zdHJpbmcgPSAn6K+35Yiw5pyN5Yqh5Zmo5pu05paw5Yiw5pyA5paw54mI5pysJztcbiAgICAgICAgLy99XG4gICAgICAgIC8vZWxzZSB7XG4gICAgICAgICAgICAvL3RoaXMudmVyc2lvbkxhYmVsLnN0cmluZyA9ICflvZPliY3niYjmnKwgJyArIG1hbmFnZXIudmVyc2lvbjtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbkVuYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IG1hbmFnZXIuZ2V0VXNlckluZm8oKTtcbiAgICAgICAgICAgIGlmIChpbmZvLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbkVuYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmIChpbmZvLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dpbkVuYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9naW5BY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LDAuNSk7XG4gICAgICAgIC8vfVxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxfVmlldy5zY3JvbGxUb1RvcCgpO1xuICAgICAgICBLUUdsYWJvbFNvY2tldEV2ZW50SGFuZGVyLnN0YXJ0KCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICB0aGlzLmxvZ2luRW5hYmxlID0gZmFsc2U7XG4gICAgICAgdGhpcy5zb2NrZXQgPSBjYy5maW5kKCdHYW1lU29ja2V0JykuZ2V0Q29tcG9uZW50KCdzb2NrZXQnKTtcbiAgICAgICB0aGlzLnNvY2tldC5yZWNldmljZU1lc3NhZ2UgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICAgICAgICAgICBpZiAoZGF0YS5hY3Rpb24gPT0gJ2NoZWNrVmVyc2lvbicpIHtcbiAgICAgICAgICAgICAgIHNlbGYuY2hlY2tWZXJzaW9uKGRhdGEuZGF0YSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgZWxzZSBpZiAoZGF0YS5hY3Rpb24gPT0gJ2xvZ2luJykge1xuICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0KSB7Ly/miJDlip9cbiAgICAgICAgICAgICAgICAgICBzZWxmLnNvY2tldC51c2VySW5mbyA9IGRhdGEuZGF0YTsvL+i/kOihjOaXtuaAgeS/oeaBr1xuICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAvL2NjLmxvZyhkYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKGRhdGEuZGF0YS5yb29tSWQpO1xuICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKGRhdGEuZGF0YS5yb29tSWQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAvL2NjLmxvZygnLS0tLTc2Jyk7XG4gICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5yb29tSWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2MuZGlyZWN0b3IucHJlbG9hZFNjZW5lKCdoYWxsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfSwxKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5wcmVsb2FkU2NlbmUoJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICB9LDEpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIHNlbGYuYWxlcnRNZXNzYWdlKCfnmbvlvZXlpLHotKUhJyk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICB9O1xuXG4gICAgICAgLy/ku47mnKzlnLDosINcbiAgICAgICB0aGlzLnNvY2tldC5nZXRXeEluZm8gPSBmdW5jdGlvbihpbmZvKSB7XG4gICAgICAgICAgIG1hbmFnZXIuc2V0VXNlckluZm8oaW5mbyk7Ly/kv53lrZjmnKzlnLBcbiAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGluZm8pOy8vc3RyIC0+IGpzb24ob2JqKVxuICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbigpey8v5bu26L+f5omn6KGMIDFzXG4gICAgICAgICAgICAgICBzZWxmLnNlbmRMb2dpblJlcXVlc3QoZGF0YSk7Ly/nmbvlvZXor7fmsYJcbiAgICAgICAgICAgfSwxKTtcbiAgICAgICB9O1xuICAgICAgIC8vZGVidWdcbiAgICAgICB2YXIgdGVzdERhdGEgPSAne1wib3BlbmlkXCI6XCJvSjc1MnRfMC1EN2llTWNRUFIxbTdraEVsZ3VRMDAxMVwiLFwibmlja25hbWVcIjpcImlteWFcIixcInNleFwiOjEsXCJsYW5ndWFnZVwiOlwiemhfQ05cIixcImNpdHlcIjpcIkNoYW5nc2hhXCIsXCJwcm92aW5jZVwiOlwiSHVuYW5cIixcImNvdW50cnlcIjpcIkNOXCIsXCJoZWFkaW1ndXJsXCI6XCJodHRwOlxcL1xcL3d4LnFsb2dvLmNuXFwvbW1vcGVuXFwvQlZ5ejRSOHE2cHVKaWJFdjFocnNhVG1JS1Foa2FUUzlGeXZjZXZ2QzVobHhGbmZPdXNwRGppY0cwR3R6eUpYT2hOVDdnMVdaRGVDRFFoblJkRU9nejNRTW5QMEY5aWJvUUd5XFwvMFwiLFwicHJpdmlsZWdlXCI6W119JztcbiAgICAgICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICBsZXQgc2VhcmNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgcXVlcnkgPSBzZWFyY2guc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgbGV0IG9iaiA9IEpTT04ucGFyc2UodGVzdERhdGEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICAgICAgICAgICAgdmFyIGxvYyA9IHVybC5zdWJzdHJpbmcodXJsLmxhc3RJbmRleE9mKCc9JykrMSwgdXJsLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYobG9jID09IDEpe1xuICAgICAgICAgICAgICAgICAgICBvYmoub3BlbmlkID0gJ0p6SXdNVGN2Tmk4eE5pRGt1SXJsallnNU9qTTRPakV6Snc9PSc7XG4gICAgICAgICAgICAgICAgICAgIG9iai5uaWNrbmFtZSA9IGxvYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihsb2MgPT0gMil7XG4gICAgICAgICAgICAgICAgICAgIG9iai5vcGVuaWQgPSAnSnpJd01UY3ZOaTh4TmlEa3VJcmxqWWc1T2pNNE9qTXpKdz09JztcbiAgICAgICAgICAgICAgICAgICAgb2JqLm5pY2tuYW1lID0gbG9jO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxvYyA9PSAzKXtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW5pZCA9ICdKekl3TVRjdE5pMHhOaUF3T1RvME5UbzFPU2M9JztcbiAgICAgICAgICAgICAgICAgICAgb2JqLm5pY2tuYW1lID0gbG9jO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxvYyA9PSA0KXtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW5pZCA9ICdKekl3TVRjdk5pOHhOaURrdUlybGpZZzVPalEyT2pBd0p3PT0nO1xuICAgICAgICAgICAgICAgICAgICBvYmoubmlja25hbWUgPSBsb2M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYobG9jID09IDUpe1xuICAgICAgICAgICAgICAgICAgICBvYmoub3BlbmlkID0gJ0p6SXdNVGN2Tmk4eE5pRGt1SXJsallneE1Eb3dNem93T0NjPSc7XG4gICAgICAgICAgICAgICAgICAgIG9iai5uaWNrbmFtZSA9IGxvYztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXlWYWx1ZUFyciA9IGF0dHIuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IGtleVZhbHVlQXJyWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBrZXlWYWx1ZUFyclsxXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRlc3REYXRhID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgIG1hbmFnZXIuc2V0VXNlckluZm8odGVzdERhdGEpO1xuICAgICAgIH1cbiAgICAgICAgLy9pZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVJT1MoKSkge1xuICAgICAgICAvLyAgICB0aGlzLnZMYWJlbC5zdHJpbmcgPSBjYy5fbG9naW5JbmZvLnZJT1MgfHwgXCJcIjtcbiAgICAgICAgLy99IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7Ly9BbmRyb2lkXG4gICAgICAgIC8vICAgIHRoaXMudkxhYmVsLnN0cmluZyA9IGNjLl9sb2dpbkluZm8udkEgfHwgXCJcIjtcbiAgICAgICAgLy99XG4gICAgICAgIC8vY2MubG9nKGNjLl9sb2dpbkluZm8pXG4gICAgICAgIC8vY2MubG9nKCctLS0xMzknKVxuICAgIH0sXG5cblxuXG4gICAgYWdyZWVtZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFncmVlbWVudE5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgLy90aGlzLmFncmVlbWVudExhYmVsLnN0cmluZyA9IGNjLmluZm8xO1xuICAgICAgICB0aGlzLmFncmVlbWVudExhYmVsLm5vZGUueSA9IDA7XG4gICAgfSxcblxuICAgIG9uRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zb2NrZXQucmVjZXZpY2VNZXNzYWdlID0gZnVuY3Rpb24gKCkge307XG4gICAgfSxcblxuICAgIHNlbmRMb2dpblJlcXVlc3Q6ZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB0aGlzLnNob3dXYWl0aW5nTWVzc2FnZSgn55m75b2V5LitLi4uJyk7XG4gICAgICAgIHRoaXMuc29ja2V0LnNlbmRNZXNzYWdlKCdsb2dpbicsZGF0YSk7XG4gICAgfSxcblxuICAgIGxvZ2luQWN0aW9uOmZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuc2VsZWN0Tm9kZS5nZXRDb21wb25lbnQoJ3NlbGVjdCcpO1xuICAgICAgICBpZiAoIWNvbXAuc2VsZWN0ZWQpIHtcbiAgICAgICAgICB0aGlzLnNob3dNc2cgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmFsZXJ0UHJlZmFiKTtcbiAgICAgICAgICB0aGlzLmNhbnZhc05vZGUuYWRkQ2hpbGQodGhpcy5zaG93TXNnKTtcbiAgICAgICAgICBsZXQgY29tcCA9IHRoaXMuc2hvd01zZy5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgICAgY29tcC5zZXRNZXNzYWdlKCfor7flkIzmhI/nlKjmiLfljY/orq4nKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5mbyA9IG1hbmFnZXIuZ2V0VXNlckluZm8oKTtcbiAgICAgICAgaWYgKGluZm8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShpbmZvKTtcbiAgICAgICAgICB0aGlzLnNlbmRMb2dpblJlcXVlc3QoZGF0YSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLFwid3hMb2dpblwiKTsvL0lPU1xuICAgICAgICB9IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7Ly9BbmRyb2lkXG4gICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInd4TG9naW5cIiwgXCIoKVZcIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbG9naW5Za0FjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLnNlbGVjdE5vZGUuZ2V0Q29tcG9uZW50KCdzZWxlY3QnKTtcbiAgICAgICAgaWYgKCFjb21wLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNc2cgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmFsZXJ0UHJlZmFiKTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzTm9kZS5hZGRDaGlsZCh0aGlzLnNob3dNc2cpO1xuICAgICAgICAgICAgbGV0IGNvbXAgPSB0aGlzLnNob3dNc2cuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xuICAgICAgICAgICAgY29tcC5zZXRNZXNzYWdlKCfor7flkIzmhI/nlKjmiLfljY/orq4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGVzdERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgdGltZSA9IFwiJ1wiK3Rlc3REYXRlLnRvTG9jYWxlU3RyaW5nKCkrXCInXCI7XG4gICAgICAgIHZhciBvcGVuaWQgPSBuZXcgQnVmZmVyKHRpbWUpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgdmFyIHRlc3REYXRhID0gJ3tcIm9wZW5pZFwiOlwiJytvcGVuaWQrJ1wiLFwibmlja25hbWVcIjpcIua4uOWuolwiLFwic2V4XCI6MSxcImxhbmd1YWdlXCI6XCJ6aF9DTlwiLFwiY2l0eVwiOlwiQ2hhbmdzaGFcIixcInByb3ZpbmNlXCI6XCJIdW5hblwiLFwiY291bnRyeVwiOlwiQ05cIixcImhlYWRpbWd1cmxcIjpcImh0dHA6XFwvXFwvd3gucWxvZ28uY25cXC9tbW9wZW5cXC9CVnl6NFI4cTZwdUppYkV2MWhyc2FUbUlLUWhrYVRTOUZ5dmNldnZDNWhseEZuZk91c3BEamljRzBHdHp5SlhPaE5UN2cxV1pEZUNEUWhuUmRFT2d6M1FNblAwRjlpYm9RR3lcXC8wXCIsXCJwcml2aWxlZ2VcIjpbXX0nO1xuICAgICAgICAvL2lmICghY2Muc3lzLmlzTmF0aXZlICYmIHdpbmRvdy5sb2NhdGlvbikge1xuICAgICAgICAgICAgbGV0IHNlYXJjaCA9ICcgICc7XG4gICAgICAgICAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gc2VhcmNoLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSBxdWVyeS5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgIGxldCBvYmogPSBKU09OLnBhcnNlKHRlc3REYXRhKTtcbiAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXlWYWx1ZUFyciA9IGF0dHIuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IGtleVZhbHVlQXJyWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBrZXlWYWx1ZUFyclsxXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0ZXN0RGF0YSA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIC8vfVxuXG4gICAgICAgIC8vdmFyIGluZm8gPSBtYW5hZ2VyLmdldFVzZXJJbmZvKCk7XG4gICAgICAgIC8vaWYgKGluZm8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHRlc3REYXRhKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZExvZ2luUmVxdWVzdChkYXRhKTtcbiAgICAgICAgLy8gICAgcmV0dXJuO1xuICAgICAgICAvL31lbHNle1xuICAgICAgICAgICAgbWFuYWdlci5zZXRVc2VySW5mbyh0ZXN0RGF0YSk7XG4gICAgICAgIC8vfVxuXG4gICAgfSxcblxuICAgIHNob3dXYWl0aW5nTWVzc2FnZTpmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgaWYgKHRoaXMud2FpdGluZ05vZGUgIT0gbnVsbCAmJiBjYy5zeXMuaXNOYXRpdmUgJiYgY2MuaXNWYWxpZCh0aGlzLndhaXRpbmdOb2RlKSkge1xuICAgICAgICAgIGlmIChtc2cgPT0gdGhpcy53YWl0aW5nTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZ2V0TWVzc2FnZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLndhaXRpbmdOb2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcbiAgICAgICAgICAgIHRoaXMud2FpdGluZ05vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2FpdGluZ05vZGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLndhaXRpbmdQcmVmYWIpO1xuICAgICAgICB0aGlzLmNhbnZhc05vZGUuYWRkQ2hpbGQodGhpcy53YWl0aW5nTm9kZSk7XG4gICAgICAgIHZhciBjb21wID0gdGhpcy53YWl0aW5nTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIGNvbXAuc2V0TWVzc2FnZShtc2cpO1xuICAgICAgICBjb21wLmFsZXJ0KCk7XG4gICAgfSxcblxuICAgIGhpZGRlbldhaXRpbmdNZXNzYWdlOmZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy53YWl0aW5nTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLndhaXRpbmdOb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJvdG9jb2xBY3Rpb246ZnVuY3Rpb24oKSB7XG4gICAgICAgIGNjLmxvZygncHJvdG9jb2wgYWN0aW9uJyk7XG4gICAgfSxcbn0pO1xuIiwiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBtYVBhaVNwcml0ZTpbY2MuU3ByaXRlRnJhbWVdLFxyXG4gICAgICAgIHNwcml0ZU5vZGU6Y2MuU3ByaXRlLFxyXG4gICAgICAgIGxhYmVsTm9kZTpjYy5Ob2RlXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxyXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgXHJcbiAgICB9LFxyXG5cclxuICAgIFxyXG59KTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdmVyc2lvbjondjEuMC4wJyxcblxuICAgIHNldFVzZXJJbmZvOmZ1bmN0aW9uKHN0cikge1xuICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJpbmZvJywgc3RyKTtcbiAgICB9LFxuXG4gICAgZ2V0VXNlckluZm86ZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGNjLnN5cy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcmluZm8nKTtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBzZXRNdXNpY1ZhbHVlOmZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNjLnN5cy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbXVzaWNWb2x1bW4nLHZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0TXVzaWNWYWx1ZTpmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY2Muc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtdXNpY1ZvbHVtbicpO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIHNldE11c2ljRWZmZWN0VmFsdWU6ZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2Muc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtdXNpY0VmZmVjdFZvbHVtbicsdmFsdWUpO1xuICAgIH0sXG5cbiAgICBnZXRNdXNpY0VmZmVjdFZhbHVlOmZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBjYy5zeXMubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ211c2ljRWZmZWN0Vm9sdW1uJyk7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxufTtcbiIsImNvbnN0IFNvY2tldCA9IHJlcXVpcmUoJ3NvY2tldCcpO1xyXG5jb25zdCBLUUdsb2JhbEV2ZW50ID0gcmVxdWlyZSgnS1FHbG9iYWxFdmVudCcpO1xyXG5jb25zdCBBcnJheUV4dGVuc2lvbiA9IHJlcXVpcmUoJ0FycmF5RXh0ZW5zaW9uJyk7XHJcbmNvbnN0IE1hbmFnZXIgPSByZXF1aXJlKCdtYW5hZ2VyJyk7XHJcbmNvbnN0IEF1ZGlvTWFuYWdlciA9IHJlcXVpcmUoJ0F1ZGlvTWFuYWdlcicpO1xyXG5jb25zdCBLUU5hdGl2ZUludm9rZSA9IHJlcXVpcmUoJ0tRTmF0aXZlSW52b2tlJyk7XHJcbmNvbnN0IFVzZXJNb2RlbEhlbHBlciA9IHJlcXVpcmUoJ1VzZXJNb2RlbEhlbHBlcicpO1xyXG5jb25zdCBQbGF5YmFjayA9IHJlcXVpcmUoJ1BsYXliYWNrJyk7XHJcbmNvbnN0IGZlY2hhID0gcmVxdWlyZSgnZmVjaGEnKTtcclxuLyojIyMjIyovXHJcbmNvbnN0IEtRQ2FyZCA9IHJlcXVpcmUoJ0tRQ2FyZCcpO1xyXG4vKiovXHJcbmNvbnN0IFBsYXllciA9IHJlcXVpcmUoJ1BsYXllcicpO1xyXG4vKiovXHJcbi8vY29uc3QgaXNUZVNodVBhaSA9IHJlcXVpcmUoJ2lzVGVTaHVQYWknKTtcclxuLy/nibnmrorniYznsbvlnotcclxudmFyIFRFU0hVUEFJVFlQRSA9IHtcclxuICAgIGlzVGVTaHVQYWk6ZmFsc2UsXHJcbiAgICBpc0xpdUR1aUJhbjpmYWxzZSxcclxuICAgIGlzU2FuU2h1blppOmZhbHNlLFxyXG4gICAgaXNTYW5UYW9IdWE6ZmFsc2UsXHJcblxyXG4gICAgaXNRaW5nTG9uZzpmYWxzZSxcclxuICAgIGlzWWlUaWFvTG9uZzpmYWxzZSxcclxuICAgIGlzU2FuVG9uZ0h1YVNodW46ZmFsc2UsXHJcbiAgICBpc1NhbkZlblRpYW5YaWE6ZmFsc2UsXHJcbiAgICBpc0NvdVlpU2U6ZmFsc2UsXHJcbiAgICBpc1NpVGFvU2FuVGlhbzpmYWxzZSxcclxuICAgIGlzV3VEdWlTYW5UaWFvOmZhbHNlXHJcbn07XHJcblxyXG5sZXQgR0FNRVNUQVRVUyA9IHtcclxuICBXQUlUX1BFT1BMRTogMCwgICAgLy8g562J5Lq6XHJcbiAgV0FJVF9SRUFEWTogMSwgICAgIC8vIOetieW+heS7luS6uuWHhuWkh1xyXG4gIFBMQVlJTkc6IDIsICAgICAgICAvLyDmraPlnKjnjqnmuLjmiI9cclxufTtcclxuXHJcblxyXG4vLyDluIPlsYBcclxuLy8gICAgICAgICAgMlxyXG4vLyAgIDMgICAgICAgICAgICAxXHJcbi8vICAgICBzZWxmIDBcclxubGV0IFBsYXkgPSBjYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHBsYXllck5vZGVzOiBbY2MuTm9kZV0sXHJcbiAgICAgICAgY2hhdE5vZGU6IGNjLk5vZGUsXHJcbiAgICAgICAgY2FyZFR5cGVDb21iaW5lTm9kZTogY2MuTm9kZSxcclxuICAgICAgICAvKiMjIyMjKi9cclxuICAgICAgICB0eXBlQnV0dG9uc05vZGU6IGNjLk5vZGUsXHJcbiAgICAgICAgLyojIyMjIyovXHJcblxyXG4gICAgICAgIGxhYmVsUm9vbU51bWJlcjogY2MuTGFiZWwsXHJcbiAgICAgICAgbGFiZWxPdmVydmlldzogY2MuTGFiZWwsXHJcbiAgICAgICAgbGFiZWxSZW1haW5UaW1lOiBjYy5MYWJlbCxcclxuICAgICAgICBidG5TaGFyZTogY2MuQnV0dG9uLFxyXG4gICAgICAgIGJ0blJlYWR5OiBjYy5CdXR0b24sICAgICAgLy8g5YeG5aSH5byA5aeL5oyJ6ZKuXHJcbiAgICAgICAgZmFwYWlOb2RlOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0bkNoYXRWb2ljZTogY2MuQnV0dG9uLFxyXG4gICAgICAgIGJ0bkNoYXRUZXh0OiBjYy5CdXR0b24sXHJcbiAgICAgICAgc3RhcnRDb21wYXJlQ2FyZHNOb2RlOiBjYy5Ob2RlLFxyXG4gICAgICAgIHZvaWNlUmVjb3JkQW5pbWF0aW9uTm9kZTogY2MuTm9kZSxcclxuICAgICAgICBzZXR0aW5nTm9kZTogY2MuTm9kZSxcclxuICAgICAgICBwbGF5YmFja05vZGU6IGNjLk5vZGUsXHJcblxyXG4gICAgICAgIG9uZUdhbWVSZXN1bHQ6IGNjLk5vZGUsICAgLy8g5LiA5bGA57uT5p6cXHJcbiAgICAgICAgdG90YWxHYW1lUmVzdWx0OiBjYy5Ob2RlLFxyXG5cclxuICAgICAgICBhbGVydFJlcXVlc3RFeGl0Tm9kZTogY2MuTm9kZSwgIC8vIOeUs+ivt+mAgOWHuiBOb2RlXHJcbiAgICAgICAgYWxlcnRSZXF1ZXN0RXhpdENvdW50ZG93bk5vZGU6IGNjLk5vZGUsICAvLyDnlLPor7fpgIDlh7rlgJLorqHml7YgTm9kZVxyXG4gICAgICAgIGJ0bkFsZXJ0UmVxdWVzdEV4aXRDb25maXJtQnV0dG9uOiBjYy5CdXR0b24sXHJcbiAgICAgICAgYnRuQWxlcnRSZXF1ZXN0RXhpdENhbmNlbEJ1dHRvbjogY2MuQnV0dG9uLFxyXG4gICAgICAgIGJ0bkJ1dHRvbk5vZGU6IGNjLk5vZGUsXHJcbiAgICAgICAgYnRuQnV0dG9uczogY2MuTm9kZSxcclxuXHJcbiAgICAgICAgYWxlcnRBbnNvd2VyRXhpdE5vZGU6IGNjLk5vZGUsIC8vIOWbnuetlOeUs+ivt+mAgOWHuiAgTm9kZVxyXG4gICAgICAgIGFsZXJ0QW5zb3dlckV4aXRDb3VudGRvd25Ob2RlOiBjYy5Ob2RlLCAgLy8g5Zue562U5Lul5LiK6K+36YCA5Ye655qE5YCS6K6h5pe2XHJcblxyXG4gICAgICAgIGFsZXJ0OiBjYy5Ob2RlLFxyXG5cclxuICAgICAgICBhbGVydEZvcmNlRXhpdE5vZGU6IGNjLk5vZGUsICAvLyDlvLrliLbpgIDlh7ogTm9kZVxyXG5cclxuICAgICAgICB3YWl0aW5nUHJlZmFiOiBjYy5QcmVmYWIsXHJcbiAgICAgICAgLyoqL1xyXG4gICAgICAgIHBsYXllckNvbXBzOiBbUGxheWVyXSxcclxuICAgICAgICAvKiovXHJcbiAgICAgICAgLyojIyMjIyovXHJcbiAgICAgICAgdGVzaHVwYWlfbWluOltjYy5Ob2RlXSxcclxuICAgICAgICB0ZXNodXBhaV9tYXg6W2NjLk5vZGVdLFxyXG4gICAgICAgIGdvbmdYaU5pOmNjLk5vZGUsXHJcbiAgICAgICAgdGVTaHVQYWk6Y2MuTm9kZSxcclxuICAgICAgICBfbGl1RHVpQmFuOmZhbHNlLFxyXG4gICAgICAgIF9zYW5TaHVuWmk6ZmFsc2UsXHJcbiAgICAgICAgX3NhblRvbmdIdWE6ZmFsc2UsXHJcbiAgICAgICAgX3lpVGlhb0xvbmc6ZmFsc2UsXHJcblxyXG4gICAgICAgIF9RaW5nTG9uZzpmYWxzZSxcclxuICAgICAgICBfU2FuVG9uZ0h1YVNodW46ZmFsc2UsXHJcbiAgICAgICAgX1NhbkZlblRpYW5YaWE6ZmFsc2UsXHJcbiAgICAgICAgX0NvdVlpU2U6ZmFsc2UsXHJcbiAgICAgICAgX1NpVGFvU2FuVGlhbzpmYWxzZSxcclxuICAgICAgICBfV3VEdWlTYW5UaWFvOmZhbHNlLFxyXG5cclxuICAgICAgICB3dVRvbmdfaW1nOmNjLlNwcml0ZUZyYW1lLFxyXG4gICAgICAgIHRvbmdIdWFTaHVuX2ltZzpjYy5TcHJpdGVGcmFtZSxcclxuICAgICAgICAvKiMjIyMjKi9cclxuXHJcbiAgICAgICAgX3BsYXllckNvbXBvbmVudHM6IG51bGwsXHJcbiAgICAgICAgX21zZ0NvbnRyb2w6IG51bGwsXHJcblxyXG4gICAgICAgIF9zb2NrZXQ6IG51bGwsXHJcbiAgICAgICAgX3VzZXJJZDogMCxcclxuICAgICAgICBfcGxheWVySW5mb3M6IG51bGwsXHJcbiAgICAgICAgX2Rlc2tJbmZvOiBudWxsLCAgIC8vIGNyZWF0ZVRpbWUg5Yib5bu65pe26Ze0ICBpc0Rpc3NvbHZpbmcg6KGo56S65piv5ZCm5q2j5Zyo6Kej5pWjIGRpc3NvbHZlTGVmdFRpbWUg56a76Kej5pWj5Ymp5L2Z5aSa6ZW/5pe26Ze0IGRpc3NvbHZlQW5zd2VySW5mbyBb5aSE55CG6L+H55qE5Lq655qE5L+h5oGvXVxyXG4gICAgICAgIF9nYW1lU3RhdHVzOiBHQU1FU1RBVFVTLldBSVRfUEVPUExFLFxyXG4gICAgICAgIF9lbnRlclRpbWU6IG51bGwsXHJcbiAgICAgICAgX3BsYXllcnM6bnVsbCxcclxuICAgICAgICAvKiovXHJcbiAgICAgICAgX2lzQ29tcGFyaW5nQ2FyZHNOb3c6IGZhbHNlLCAvLyDmmK/lkKbmraPlnKjmr5TniYxcclxuICAgICAgICBfcGxheWVkQ29tcGFyZUNhcmRzSW5kZXhzOiBbXSwgLy8g5bey57uP5pKt5pS+6L+H5q+U54mM55qE5bGA5pWwXHJcbiAgICAgICAgLyoqL1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cclxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuQnRuQ2xpY2tHb25nWGlOaUNvbWZpcm0gPSB0aGlzLmNhcmRUeXBlQ29tYmluZU5vZGUuZ2V0Q29tcG9uZW50KFwiQ2FyZFR5cGVDb21iaW5lXCIpLkJ0bkNsaWNrR29uZ1hpTmlDb21maXJtO1xyXG4gICAgICAgIHRoaXMuX2VudGVyVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgLyoqL1xyXG4gICAgICAgIHRoaXMucGxheWVyQ29tcHMuZm9yRWFjaChwbGF5ZXJDb21wID0+IHtcclxuICAgICAgICAgICAgcGxheWVyQ29tcC5wbGF5ZWRDb21wYXJlQ2FyZHNJbmRleHMgPSB0aGlzLl9wbGF5ZWRDb21wYXJlQ2FyZHNJbmRleHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqL1xyXG4gICAgICAgIC8qQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBsYXlEZXNrTXVzaWMoKTsqL1xyXG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5zdG9wSGFsbE11c2ljKCk7XHJcbiAgICAgICAgdGhpcy5faW5pdFBsYXllckNvbXBvbmVudHMoKTtcclxuICAgICAgICB0aGlzLl9pbml0U2VsZWN0Q2FyZE5vZGUoKTtcclxuICAgICAgICB0aGlzLl9pbml0T25lR2FtZVJlc3VsdCgpO1xyXG4gICAgICAgIHRoaXMuX3JlbWFpblRpbWVTdGFydFVwZGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl91c2VySWQgPSBTb2NrZXQuaW5zdGFuY2UudXNlckluZm8uaWQ7XHJcbiAgICAgICAgdGhpcy5fbXNnQ29udHJvbCA9IHRoaXMuY2hhdE5vZGUuZ2V0Q29tcG9uZW50KCdNc2dDb250cm9sJyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dGluZ05vZGUuZ2V0Q29tcG9uZW50KFwiU2V0dGluZ1wiKS5oaWRlU3dpdGNoKCk7XHJcbiAgICAgICAgdGhpcy5sYWJlbFJvb21OdW1iZXIuc3RyaW5nID0gXCJcIjtcclxuICAgICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLl9yZWdpc3RlclZvaWNlTm9kZUV2ZW50cygpO1xyXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyU29ja2V0RXZlbnQoKTtcclxuXHJcbiAgICAgICAgLyojIyMjIyovXHJcbiAgICAgICAgdGhpcy5faW5pdE1hUGFpKCk7XHJcbiAgICAgICAgUGxheS5pbnN0YW5jZXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2dvbmdYaU5pU2hvdyhmYWxzZSk7XHJcbiAgICAgICAgLyojIyMjIyovXHJcbiAgICAgICAgaWYgKFBsYXliYWNrLmluc3RhbmNlLmlzQ29udGFpblBsYXliYWNrRGF0YXMoKSkge1xyXG4gICAgICAgICAgUGxheWJhY2suaW5zdGFuY2Uuc3RhcnRQbGF5YmFjaygpO1xyXG4gICAgICAgICAgdGhpcy5wbGF5YmFja05vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMuYnRuQ2hhdFZvaWNlLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAvL3RoaXMuY2FyZHNGcm9tQXJyYXkubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5fbG9hZERlc2tJbmZvKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fc29ja2V0ID0gU29ja2V0Lmluc3RhbmNlO1xyXG5cclxuICAgICAgICAvLyB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gICAvLyB0aGlzLl9zaG93T25lR2FtZVJlc3VsdCgpO1xyXG4gICAgICAgIC8vICAgLy8gdGhpcy5fc3RhcnRDb21wYXJlQ2FyZHMoKTtcclxuICAgICAgICAvLyB9LmJpbmQodGhpcyksIDIpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyojIyMjIyovXHJcbiAgICAvKuaYvuekuumprOeJjCovXHJcbiAgICBfaW5pdE1hUGFpOmZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL1wibWFwYWlcIuiEmuacrOS4iuaMguedgOmprOeJjOeyvueBtVxyXG4gICAgICAgIHZhciBtYVBhaUNvbSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoXCJtYVBhaVwiKTtcclxuICAgICAgICB2YXIgc3ByaXRlTm9kZSA9IG1hUGFpQ29tLnNwcml0ZU5vZGU7IC8v6ams54mM57K+54G16IqC54K5XHJcbiAgICAgICAgdmFyIGxhYmVsTm9kZSA9IG1hUGFpQ29tLmxhYmVsTm9kZTsgICAvL+mprOeJjOaWh+Wtl+iKgueCuVxyXG4gICAgICAgIGlmKHRoaXMubWFQYWkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsYWJlbE5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5tYVBhaSA9PSAxKXtcclxuICAgICAgICAgICAgc3ByaXRlTm9kZS5zcHJpdGVGcmFtZSA9IG1hUGFpQ29tLm1hUGFpU3ByaXRlWzBdO1xyXG4gICAgICAgIH1lbHNlIGlmKHRoaXMubWFQYWkgPT0gNSl7XHJcbiAgICAgICAgICAgIHNwcml0ZU5vZGUuc3ByaXRlRnJhbWUgPSBtYVBhaUNvbS5tYVBhaVNwcml0ZVsxXTtcclxuICAgICAgICB9ZWxzZSBpZih0aGlzLm1hUGFpID09IDEwKXtcclxuICAgICAgICAgICAgc3ByaXRlTm9kZS5zcHJpdGVGcmFtZSA9IG1hUGFpQ29tLm1hUGFpU3ByaXRlWzJdO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzcHJpdGVOb2RlLnNwcml0ZUZyYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgbGFiZWxOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX2luaXRQbGF5ZXJDb21wb25lbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cyA9IHRoaXMucGxheWVyTm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmdldENvbXBvbmVudCgnUGxheWVyJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbml0U2VsZWN0Q2FyZE5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICBsZXQgY2FyZFR5cGVDb21iaW5lQ29tcCA9IHRoaXMuY2FyZFR5cGVDb21iaW5lTm9kZS5nZXRDb21wb25lbnQoJ0NhcmRUeXBlQ29tYmluZScpO1xyXG4gICAgICBjYXJkVHlwZUNvbWJpbmVDb21wLnNldEZpbmlzaFNlbGVjdENhcmRzQ2FsbGJhY2soZnVuY3Rpb24gKHNlcnZlckNhcmRzSW5mbykge1xyXG4gICAgICAgIGNhcmRUeXBlQ29tYmluZUNvbXAucmVzZXQoKTtcclxuICAgICAgICBTb2NrZXQuc2VuZFBsYXlDYXJkKHNlbGYuX3VzZXJJZCwgc2VydmVyQ2FyZHNJbmZvKTtcclxuICAgICAgICBzZWxmLmNhcmRUeXBlQ29tYmluZU5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8qKi9cclxuICAgIF9pbml0T25lR2FtZVJlc3VsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub25lR2FtZVJlc3VsdC5zZXRDbG9zZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5faXNSYW5kb21Sb29tKCkpIHtcclxuICAgICAgICAgICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICAvKiovXHJcbiAgICAvL19pbml0T25lR2FtZVJlc3VsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gIHRoaXMub25lR2FtZVJlc3VsdC5zZXRDbG9zZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gICAgaWYgKHNlbGYuX2lzUmFuZG9tUm9vbSgpKSB7XHJcbiAgICAvLyAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgLy8gICAgfVxyXG4gICAgLy8gIH07XHJcbiAgICAvL30sXHJcblxyXG4gICAgb25EZXN0cm95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub2ZmVGFyZ2V0KHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjbGlja0V4aXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoUGxheWJhY2suaW5zdGFuY2UuaXNQbGF5YmFja2luZygpKSB7XHJcbiAgICAgICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKi9cclxuICAgICAgICBpZiAodGhpcy5fZGVza0luZm8gJiYgdGhpcy5fZGVza0luZm8uaXNEZXNrT3Zlcikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzQ29tcGFyaW5nQ2FyZHNOb3cpIHtcclxuICAgICAgICAgICAgICAgIC8vIOWmguaenOaIv+mXtOW3sue7k+adn++8jOW5tuS4lOS4jeaYr+ato+WcqOaSreaUvuaJk+eJjOWKqOeUuywg5YiZ55u05o6l56a75byA5oi/6Ze0XHJcbiAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ2hhbGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKi9cclxuICAgICAgICAvL2lmICh0aGlzLl9pc1JhbmRvbVJvb20oKSkge1xyXG4gICAgICAgIC8vICAgIHRoaXMuYWxlcnRGb3JjZUV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5hbGVydCgpO1xyXG4gICAgICAgIC8vICAgIHJldHVybjtcclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvLmNJbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZXNrSW5mby5jcmVhdGVJZCA9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICAgICAgICAgIFNvY2tldC5zZW5kRGlzc29sdmVEZXNrKHRoaXMuX3VzZXJJZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBTb2NrZXQuc2VuZExlYXZlRGVzayh0aGlzLl91c2VySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYnRuQWxlcnRSZXF1ZXN0RXhpdENhbmNlbEJ1dHRvbi5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5idG5BbGVydFJlcXVlc3RFeGl0Q29uZmlybUJ1dHRvbi5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCBhbGVydCA9IHRoaXMuYWxlcnRSZXF1ZXN0RXhpdE5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xyXG4gICAgICAgIGFsZXJ0LnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcclxuICAgICAgICBhbGVydC5zZXRNZXNzYWdlKFwi5oKo5Zyo55Sz6K+35Y2P5ZWG6YCA5Ye677yM5aaC5p6c5omA5pyJ546p5a625ZCM5oSP77yM5oKo5bCG6YCA5Ye65ri45oiP44CCXCIpO1xyXG4gICAgICAgIGFsZXJ0LmFsZXJ0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuYWxlcnRSZXF1ZXN0RXhpdENvdW50ZG93bk5vZGUuZ2V0Q29tcG9uZW50KCdDb3VudGRvd24nKS5zdG9wKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8v54K55Ye75YiG5Lqr5oyJ6ZKuXHJcbiAgICBjbGlja1NoYXJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxldCByb29tSWQgPSBTdHJpbmcodGhpcy5fZGVza0luZm8ucm9vbUlkKTtcclxuICAgICAgdmFyIGRlc2NyaXB0aW9uID0gXCLph5Hpup/ljYHkuInpgZMg546p5rOVOlwiXHJcbiAgICAgICAgICAvLysgdGhpcy5fZGVza0luZm9HYW1lV2F5KCk7XHJcbiAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24gKyBcIiBcIiArIHRoaXMuX2Rlc2tJbmZvTnVtYmVyT2ZQZW9wbGUoKTtcclxuICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiArIFwiLFwiICsgdGhpcy5fZGVza0luZm9QYXlJbmZvKCk7XHJcbiAgICAgICAgLy9kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uICsgXCIsXCIgKyB0aGlzLl9kZXNrSW5mb0ppYVlpU2VJbmZvKCk7XHJcbiAgICAgICAgLy9kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uICsgXCIsXCIgKyB0aGlzLl9kZXNrSW5mb0d1aVBhaUluZm8oKTtcclxuICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiArIFwiIFwiICsgdGhpcy5fZGVza0luZm9OdW1iZXJPZkdhbWUoKTtcclxuXHJcbiAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XHJcbiAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJ3eFNoYXJlRnJpZW5kOmRlc2NyaXB0aW9uOlwiLHJvb21JZCwgZGVzY3JpcHRpb24pO1xyXG4gICAgICB9IGVsc2UgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7Ly9BbmRyb2lkXHJcbiAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcInd4U2hhcmVGcmllbmRcIiwgXCIoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KVZcIiwgcm9vbUlkLCBkZXNjcmlwdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy/ngrnlh7vlh4blpIfmjInpkq5cclxuICAgIGNsaWNrUmVhZHk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmJ0blNoYXJlLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIC8qIyMjIyPngrnlh7vlh4blpIfnmoTml7blgJnvvIzkuIrkuIDlsYDmr5TniYznmoTmlbDmja7mtojlpLEqL1xyXG4gICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllckNvbXApIHtcclxuICAgICAgICAgIC8vcGxheWVyQ29tcC5yZXNldCgpO1xyXG4gICAgICAgICAgcGxheWVyQ29tcC5yZXNldCgpOyAgLy8jIyMjI1xyXG4gICAgICB9KTtcclxuICAgICAgY2MuZmluZChcIkNhbnZhcy9zaG93X3Jlc3VsdFwiKS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgU29ja2V0LnNlbmRSZWFkeSh0aGlzLl91c2VySWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVSb29tTnVtYmVyOiBmdW5jdGlvbiAocm9vbU51bWJlcikge1xyXG4gICAgICAgIGxldCBnYW1lTnVtYmVyU3RyaW5nID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5fZGVza0luZm8uc2V0dGluZzEgIT0gMCAmJiB0aGlzLl9kZXNrSW5mby5zZXR0aW5nMSAhPSAxKSB7XHJcbiAgICAgICAgICAgIGdhbWVOdW1iZXJTdHJpbmcgPSBcIuWxgOaVsCA6IFwiICsgXCJcIiArIHRoaXMuX2Rlc2tJbmZvLmNJbmRleCArIFwiL1wiICsgdGhpcy5fZGVza0luZm8ubU1heDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2Rlc2tJbmZvLnNldHRpbmcxID09IDApIHtcclxuICAgICAgICAgICAgZ2FtZU51bWJlclN0cmluZyA9IFwi5bGA5pWwIDogMTDlsYBcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2Rlc2tJbmZvLnNldHRpbmcxID09IDEpIHtcclxuICAgICAgICAgICAgZ2FtZU51bWJlclN0cmluZyA9IFwi5bGA5pWwIDogMjDlsYBcIjtcclxuICAgICAgICB9XHJcbiAgICAgIHRoaXMubGFiZWxSb29tTnVtYmVyLnN0cmluZyA9IFwi5oi/5Y+3IDogXCIgKyBcIlwiICsgcm9vbU51bWJlciArIFwiXFxuXCIgKyBnYW1lTnVtYmVyU3RyaW5nO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVHYW1lU3RhdHVzOiBmdW5jdGlvbiAoc3RhdHVzID0gR0FNRVNUQVRVUy5XQUlUX1BFT1BMRSkge1xyXG4gICAgICB0aGlzLl9nYW1lU3RhdHVzID0gc3RhdHVzO1xyXG5cclxuICAgICAgdGhpcy5idG5TaGFyZS5ub2RlLmFjdGl2ZSA9IChzdGF0dXMgPT0gR0FNRVNUQVRVUy5XQUlUX1BFT1BMRSk7XHJcbiAgICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSAoc3RhdHVzID09IEdBTUVTVEFUVVMuV0FJVF9SRUFEWSk7XHJcbiAgICAgICAgdGhpcy5pc1JlYWR5U3RhdHVzKCk7XHJcbiAgICAgICAgLy9pZiAoc3RhdHVzID09IEdBTUVTVEFUVVMuUExBWUlORykge1xyXG4gICAgICAvLyAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHBsYXllckNvbXApe1xyXG4gICAgICAvLyAgICAvL3BsYXllckNvbXAuaGlkZVJlYWR5U3RhdHVzKCk7XHJcbiAgICAgIC8vICB9KTtcclxuICAgICAgLy99XHJcbiAgICB9LFxyXG5cclxuICAgIGdhbWVTdGF0dXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTdGF0dXM7XHJcbiAgICB9LFxyXG4gICAgaXNSZWFkeVN0YXR1czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5fcGxheWVySW5mb3MpXHJcbiAgICAgICAgaWYodGhpcy5fcGxheWVySW5mb3MgJiYgdGhpcy5fcGxheWVySW5mb3MubGVuZ3RoPjApIHtcclxuICAgICAgICAgICAgdGhpcy5fcGxheWVySW5mb3MuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXJJbmZvKXtcclxuICAgICAgICAgICAgICAgIHZhciB1c2VySW5mb1NlbGY9Y2MuZmluZCgnQ2FudmFzL3BsYXlTZWxmL3VzZXJJbmZvU2VsZicpO1xyXG4gICAgICAgICAgICAgICAgaWYocGxheWVySW5mby5pZCA9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighcGxheWVySW5mby5yZWFkeVN0YXR1cyAmJiAhdGhpcy5faXNDb21wYXJpbmdDYXJkc05vdyAmJiAhUGxheWJhY2suaW5zdGFuY2UuaXNQbGF5YmFja2luZygpICYmICFQbGF5YmFjay5pbnN0YW5jZS5pc0NvbnRhaW5QbGF5YmFja0RhdGFzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckluZm9TZWxmLmdldENvbXBvbmVudCgndXNlckluZm8nKS5zZXRSZWFkeU5vZGVWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvLmNJbmRleCA9PSAwKSB7Ly/kuIDlsYDov5jmsqHlvIDlp4tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYodGhpcy5fZGVza0luZm8uY3JlYXRlSWQgIT0gdGhpcy5fdXNlcklkKXsvLy8v5piv5ZCm5piv5oi/5Li7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvLnBsYXllcnMubGVuZ3RoIDwgdGhpcy5fZGVza0luZm8ubWF4TnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnRuU2hhcmUubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ0blNoYXJlLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvbmVHYW1lUmVzdWx0ID0gdGhpcy5vbmVHYW1lUmVzdWx0LmdldENvbXBvbmVudCgnR2FtZVJlc3VsdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lR2FtZVJlc3VsdC51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVHYW1lUmVzdWx0LnNob3dSZXN1bHRzKHRoaXMuX2Rlc2tJbmZvLCB0aGlzLl91c2VySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idG5TaGFyZS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5pyq5pu+5YeG5aSHXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ0blNoYXJlLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLmZpbmQoXCJDYW52YXMvc2hvd19yZXN1bHRcIikuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLl9pc0NvbXBhcmluZ0NhcmRzTm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySW5mb1NlbGYuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpLnNldFJlYWR5Tm9kZVZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91c2VySW5mb1NlbGYuZ2V0Q29tcG9uZW50KCd1c2VySW5mbycpLnNldFJlYWR5Tm9kZVZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHBsYXllckNvbXApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckNvbXAuaGlkZVJlYWR5U3RhdHVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuW3suWHhuWkh1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vLyDmuLjmiI/liqjnlLtcclxuICAgIF9zdGFydEdhbWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXR1cygpID09IEdBTUVTVEFUVVMuUExBWUlORykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2lzQ29tcGFyaW5nQ2FyZHNOb3cgPSB0cnVlO1xyXG4gICAgICB0aGlzLnVwZGF0ZUdhbWVTdGF0dXMoR0FNRVNUQVRVUy5QTEFZSU5HKTtcclxuICAgICAgdGhpcy5fcGxheUZhUGFpQW5pbWF0aW9uKCk7XHJcblxyXG4gICAgICBpZiAoIVVzZXJNb2RlbEhlbHBlci5pc1BsYXllZENhcmRzKHRoaXMuX2ZpbmRQbGF5ZXJJbmZvQnlVc2VySWQodGhpcy5fdXNlcklkKSkpIHtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGlzLl9zaG93Q2FyZFR5cGVDb21iaW5lKCk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCAxLjApO1xyXG5cclxuICAgICAgICAvL2xldCBzZWxmID0gdGhpcztcclxuICAgICAgICAvLyAgLy90aGlzLmZhcGFpTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuYWxlcnQoKTtcclxuICAgICAgICAvLyAgc2VsZi5mYXBhaU5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAvLyAgdmFyIGFuaW0gPSB0aGlzLmZhcGFpTm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcclxuICAgICAgICAvLyAgYW5pbS5wbGF5KCdmYXBhaScpO1xyXG4gICAgICAgIC8vdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vICBzZWxmLmZhcGFpTm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAvL30sIDIuMCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9LFxyXG5cclxuICAgIF9wbGF5RmFQYWlBbmltYXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpe1xyXG4gICAgICAgIHBsYXllci5wbGF5RmFQYWlBbmltYXRpb24oKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGxheUZhUGFpKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qIyMjIyMqL1xyXG4gICAgLy/mmK/lkKbnibnmrorniYxcclxuICAgIGlzVGVTaHVQYWk6IGZ1bmN0aW9uKGNhcmRzKXtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gS1FDYXJkLmlzVGVTaHVQYWkoY2FyZHMpO1xyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1RlU2h1UGFpID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzVGVTaHVQYWkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0sXHJcbiAgICAvL+aYr+WQpuS4gOadoem+mVxyXG4gICAgaXNZaVRpYW9Mb25nOiBmdW5jdGlvbihjYXJkcykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBLUUNhcmQuaXNZaVRpYW9Mb25nKGNhcmRzKTtcclxuICAgICAgICBpZihyZXN1bHQpe1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNZaVRpYW9Mb25nID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzWWlUaWFvTG9uZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIC8v5piv5ZCm5YWt5a+55Y2KXHJcbiAgICBpc0xpdUR1aUJhbjogZnVuY3Rpb24oY2FyZHMpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gS1FDYXJkLmlzTGl1RHVpQmFuKGNhcmRzKTtcclxuICAgICAgICBpZihyZXN1bHQpe1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNMaXVEdWlCYW4gPSB0cnVlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNMaXVEdWlCYW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy/mmK/lkKbkuInpobrlrZBcclxuICAgIGlzU2FuU2h1blppOiBmdW5jdGlvbihjYXJkcyl7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEtRQ2FyZC5pc1NhblNodW5aaShjYXJkcyk7XHJcbiAgICAgICAgaWYocmVzdWx0KXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzU2FuU2h1blppID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzU2FuU2h1blppID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v5piv5ZCm5LiJ5ZCM6IqxXHJcbiAgICBpc1NhblRvbmdIdWE6IGZ1bmN0aW9uKGNhcmRzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEtRQ2FyZC5pc1NhblRvbmdIdWEoY2FyZHMpO1xyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1NhblRhb0h1YSA9IHRydWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1NhblRhb0h1YSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvL+aYr+WQpuS4ieWQjOiKsemhulxyXG4gICAgaXNTYW5Ub25nSHVhU2h1bjogZnVuY3Rpb24oY2FyZHMpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gS1FDYXJkLmlzU2FuVG9uZ0h1YVNodW4oY2FyZHMpO1xyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1NhblRvbmdIdWFTaHVuID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzU2FuVG9uZ0h1YVNodW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy/mmK/lkKbmmK/muIXpvplcclxuICAgIGlzUWluZ0xvbmc6IGZ1bmN0aW9uKGNhcmRzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEtRQ2FyZC5pc1FpbmdMb25nKGNhcmRzKTtcclxuICAgICAgICBpZihyZXN1bHQpe1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNRaW5nTG9uZyA9IHRydWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1FpbmdMb25nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v5piv5ZCm5pivIOKAnOS4ieWIhuWkqeS4i+KAnVxyXG4gICAgaXNTYW5GZW5UaWFuWGlhOiBmdW5jdGlvbihjYXJkcykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBLUUNhcmQuaXNTYW5GZW5UaWFuWGlhKGNhcmRzKTtcclxuICAgICAgICBpZihyZXN1bHQpe1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNTYW5GZW5UaWFuWGlhID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzU2FuRmVuVGlhblhpYSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvL+aYr+WQpuaYryDigJzlm5vlpZfkuInmnaHigJ1cclxuICAgIGlzU2lUYW9TYW5UaWFvOiBmdW5jdGlvbihjYXJkcykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBLUUNhcmQuaXNTaVRhb1NhblRpYW8oY2FyZHMpO1xyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1NpVGFvU2FuVGlhbyA9IHRydWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc1NpVGFvU2FuVGlhbyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvL+aYr+WQpuaYr+S6lOWvueS4ieadoVxyXG4gICAgaXNXdUR1aVNhblRpYW86IGZ1bmN0aW9uKGNhcmRzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEtRQ2FyZC5pc1d1RHVpU2FuVGlhbyhjYXJkcyk7XHJcbiAgICAgICAgaWYocmVzdWx0KXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzV3VEdWlTYW5UaWFvID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgVEVTSFVQQUlUWVBFLmlzV3VEdWlTYW5UaWFvID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8v5piv5ZCm5piv5YeR5LiA6ImyXHJcbiAgICBpc0NvdVlpU2U6IGZ1bmN0aW9uKGNhcmRzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEtRQ2FyZC5pc0NvdVlpU2UoY2FyZHMpO1xyXG4gICAgICAgIGlmKHJlc3VsdCl7XHJcbiAgICAgICAgICAgIFRFU0hVUEFJVFlQRS5pc0NvdVlpU2UgPSB0cnVlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBURVNIVVBBSVRZUEUuaXNDb3VZaVNlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qIyMjIyMqL1xyXG5cclxuICAgIC8q5pi+56S66YWN54mM6aG16Z2iKi9cclxuICAgIF9zaG93Q2FyZFR5cGVDb21iaW5lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKFBsYXliYWNrLmluc3RhbmNlLmlzUGxheWJhY2tpbmcoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYXJkVHlwZUNvbWJpbmVOb2RlLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY2FyZFR5cGVDb21iaW5lID0gdGhpcy5jYXJkVHlwZUNvbWJpbmVOb2RlLmdldENvbXBvbmVudCgnQ2FyZFR5cGVDb21iaW5lJyk7XHJcbiAgICAgICAgY2FyZFR5cGVDb21iaW5lLnJlbG9hZENhcmRzKFtdKTtcclxuICAgICAgICBjYXJkVHlwZUNvbWJpbmUubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGNhcmRUeXBlQ29tYmluZS50aW1lU3RhcnQoMTIwKTsvL3NkXHJcblxyXG4gICAgICAgIGxldCBjYXJkcyA9IHRoaXMuX2ZpbmRDYXJkc0J5VXNlcklkKHRoaXMuX3VzZXJJZCk7XHJcbiAgICAgICAgLy9jYXJkcyA9IFt7c3VpdDogXCJjXCIsIG51bWJlcjoyMH0se3N1aXQ6IFwiZFwiLCBudW1iZXI6MTJ9LCB7c3VpdDogXCJzXCIsIG51bWJlcjoxMn0sLy/pnZLpvplcclxuICAgICAgICAvLyAgICB7c3VpdDogXCJjXCIsIG51bWJlcjoxMn0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjEwfSxcclxuICAgICAgICAvLyAgICB7c3VpdDogXCJkXCIsIG51bWJlcjoxMH0sIHtzdWl0OiBcImhcIiwgbnVtYmVyOjh9LCB7c3VpdDogXCJoXCIsIG51bWJlcjo2fSxcclxuICAgICAgICAvLyAgICB7c3VpdDogXCJkXCIsIG51bWJlcjo2fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6NX0sXHJcbiAgICAgICAgLy8gICAge3N1aXQ6IFwic1wiLCBudW1iZXI6Mn0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjJ9LCB7c3VpdDogXCJoXCIsIG51bWJlcjoyfSxdO1xyXG4gICAgICAgIC8qaWYodGhpcy5fdXNlcklkID09IDEpe1xyXG4gICAgICAgICAgICBjYXJkcyA9IFt7c3VpdDogXCJzXCIsIG51bWJlcjozfSx7c3VpdDogXCJzXCIsIG51bWJlcjo2fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6N30sLy/pnZLpvplcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcInNcIiwgbnVtYmVyOjl9LCB7c3VpdDogXCJzXCIsIG51bWJlcjoxM30sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJoXCIsIG51bWJlcjoxMH0sIHtzdWl0OiBcImhcIiwgbnVtYmVyOjEyfSwge3N1aXQ6IFwiaFwiLCBudW1iZXI6MTN9LFxyXG4gICAgICAgICAgICAgICAge3N1aXQ6IFwiZFwiLCBudW1iZXI6Mn0sIHtzdWl0OiBcImRcIiwgbnVtYmVyOjV9LFxyXG4gICAgICAgICAgICAgICAge3N1aXQ6IFwiZFwiLCBudW1iZXI6M30sIHtzdWl0OiBcImRcIiwgbnVtYmVyOjd9LCB7c3VpdDogXCJkXCIsIG51bWJlcjo4fSxdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuX3VzZXJJZCA9PSAyKXtcclxuICAgICAgICAgICAgY2FyZHMgPSBbe3N1aXQ6IFwic1wiLCBudW1iZXI6MX0se3N1aXQ6IFwic1wiLCBudW1iZXI6Mn0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjJ9LC8v6Z2S6b6ZXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJoXCIsIG51bWJlcjo0fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6NH0sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJkXCIsIG51bWJlcjo2fSwge3N1aXQ6IFwiaFwiLCBudW1iZXI6Nn0sIHtzdWl0OiBcImhcIiwgbnVtYmVyOjl9LFxyXG4gICAgICAgICAgICAgICAge3N1aXQ6IFwiY1wiLCBudW1iZXI6OX0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjEwfSxcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcImNcIiwgbnVtYmVyOjEwfSwge3N1aXQ6IFwiY1wiLCBudW1iZXI6MTJ9LCB7c3VpdDogXCJkXCIsIG51bWJlcjoxMn0sXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl91c2VySWQgPT0gMyl7XHJcbiAgICAgICAgICAgIGNhcmRzID0gW3tzdWl0OiBcImNcIiwgbnVtYmVyOjF9LHtzdWl0OiBcImhcIiwgbnVtYmVyOjN9LCB7c3VpdDogXCJzXCIsIG51bWJlcjoxMn0sLy/pnZLpvplcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcImhcIiwgbnVtYmVyOjJ9LCB7c3VpdDogXCJjXCIsIG51bWJlcjozfSxcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcImRcIiwgbnVtYmVyOjR9LCB7c3VpdDogXCJoXCIsIG51bWJlcjo1fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6Nn0sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJoXCIsIG51bWJlcjo4fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6OH0sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJzXCIsIG51bWJlcjoxMX0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjExfSwge3N1aXQ6IFwiaFwiLCBudW1iZXI6MTF9LF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5fdXNlcklkID09IDQpe1xyXG4gICAgICAgICAgICBjYXJkcyA9IFt7c3VpdDogXCJjXCIsIG51bWJlcjoxMX0se3N1aXQ6IFwiZFwiLCBudW1iZXI6MTN9LCB7c3VpdDogXCJkXCIsIG51bWJlcjoxMX0sLy/pnZLpvplcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcImRcIiwgbnVtYmVyOjF9LCB7c3VpdDogXCJoXCIsIG51bWJlcjoxfSxcclxuICAgICAgICAgICAgICAgIHtzdWl0OiBcImNcIiwgbnVtYmVyOjJ9LCB7c3VpdDogXCJzXCIsIG51bWJlcjo0fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6OX0sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJjXCIsIG51bWJlcjo3fSwge3N1aXQ6IFwiaFwiLCBudW1iZXI6N30sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJzXCIsIG51bWJlcjo1fSwge3N1aXQ6IFwic1wiLCBudW1iZXI6NX0sIHtzdWl0OiBcImNcIiwgbnVtYmVyOjV9LF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5fdXNlcklkID09IDUpe1xyXG4gICAgICAgICAgICBjYXJkcyA9IFt7c3VpdDogXCJkXCIsIG51bWJlcjo0fSx7c3VpdDogXCJkXCIsIG51bWJlcjoxM30sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjEzfSwvL+mdkum+mVxyXG4gICAgICAgICAgICAgICAge3N1aXQ6IFwiZFwiLCBudW1iZXI6Nn0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjd9LFxyXG4gICAgICAgICAgICAgICAge3N1aXQ6IFwiZFwiLCBudW1iZXI6OH0sIHtzdWl0OiBcImNcIiwgbnVtYmVyOjl9LCB7c3VpdDogXCJjXCIsIG51bWJlcjoxMH0sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJzXCIsIG51bWJlcjoxfSwge3N1aXQ6IFwic1wiLCBudW1iZXI6M30sXHJcbiAgICAgICAgICAgICAgICB7c3VpdDogXCJzXCIsIG51bWJlcjoxMH0sIHtzdWl0OiBcInNcIiwgbnVtYmVyOjh9LCB7c3VpdDogXCJzXCIsIG51bWJlcjoxMn0sXTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgbGV0IGNhcmROYW1lcyA9IHRoaXMuX2NvbnZlcnRDYXJkc1RvQ2FyZE5hbWVzKGNhcmRzKTtcclxuICAgICAgICBjYXJkVHlwZUNvbWJpbmUucmVsb2FkQ2FyZHMoY2FyZE5hbWVzKTtcclxuICAgICAgICBjYXJkVHlwZUNvbWJpbmUuYWRkQ2FyZE1vZGVzKGNhcmROYW1lcyk7XHJcblxyXG4gICAgICAgIC8qIyMjIyPlj5HniYzlrozmiafooYwqL1xyXG5cclxuICAgICAgICAvL2NhcmRzOlt7J251bWJlcic6MX4xMywnc3VpdCc6J3MnIHwgJ2gnIHwgJ2MnIHwgJ2QnfV1cclxuICAgICAgICAvL2NjLmZyb20ubW9zaGkgPT0gMOmAieaLqeS6huW6hOWutuaooeW8j1xyXG4gICAgICAgIGlmKGNjLm1vc2hpICE9IDEpe1xyXG4gICAgICAgICAgICB0aGlzLmlzVGVTaHVQYWkoY2FyZHMpO1xyXG4gICAgICAgICAgICB0aGlzLmlzWWlUaWFvTG9uZyhjYXJkcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNRaW5nTG9uZyhjYXJkcyk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5pc0xpdUR1aUJhbihjYXJkcyk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5pc1NhblNodW5aaShjYXJkcyk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5pc1NhblRvbmdIdWEoY2FyZHMpO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvL3RoaXMuaXNTYW5Ub25nSHVhU2h1bihjYXJkcyk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5pc1NhbkZlblRpYW5YaWEoY2FyZHMpO1xyXG4gICAgICAgICAgICAvL3RoaXMuaXNTaVRhb1NhblRpYW8oY2FyZHMpO1xyXG4gICAgICAgICAgICAvL3RoaXMuaXNXdUR1aVNhblRpYW8oY2FyZHMpO1xyXG4gICAgICAgICAgICAvL3RoaXMuaXNDb3VZaVNlKGNhcmRzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Nob3dHb25nWGlOaUFuZEJ0blRlU2h1UGFpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNjLnRlU2h1UGFpQ2FyZHMgPSAnJztcclxuICAgICAgICBpZihURVNIVVBBSVRZUEUuaXNUZVNodVBhaSl7XHJcbiAgICAgICAgICAgIC8v5aaC5p6c5piv54m55q6K54mM5bCG54mM5a2Y6LW35p2lXHJcbiAgICAgICAgICAgIGNjLnRlU2h1UGFpQ2FyZHMgPSBjYXJkcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAvKiMjIyMjKi9cclxuICAgIH0sXHJcblxyXG4gICAgZ2V0SXNUZVNodVBhaTogZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICAgIHZhciBjYXJkcyA9IHRoaXMuX2ZpbmRDYXJkc0J5VXNlcklkKHVzZXJJZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNUZVNodVBhaShjYXJkcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qIyMjIyPmo4DmtYvnibnmrorniYznsbvlnovvvIzmmL7npLrnm7jlr7nlupTnmoTmga3llpzkvaDpobXpnaLlkoznibnmrorniYznsr7ngbUqL1xyXG4gICAgX3Nob3dHb25nWGlOaUFuZEJ0blRlU2h1UGFpOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyrlpoLmnpzmnInnibnmrorniYwqL1xyXG4gICAgICAgIGlmKFRFU0hVUEFJVFlQRS5pc1RlU2h1UGFpKXtcclxuICAgICAgICAgICAgaWYoVEVTSFVQQUlUWVBFLmlzWWlUaWFvTG9uZyl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nb25nWGlOaVNob3codHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl95aVRpYW9Mb25nID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKFRFU0hVUEFJVFlQRS5pc1FpbmdMb25nKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dvbmdYaU5pU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NhblRvbmdIdWEgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihURVNIVVBBSVRZUEUuaXNMaXVEdWlCYW4pe1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9nb25nWGlOaVNob3codHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMuX2xpdUR1aUJhbiA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAvL2Vsc2UgaWYoVEVTSFVQQUlUWVBFLmlzU2FuU2h1blppKXtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5fZ29uZ1hpTmlTaG93KHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9zYW5TaHVuWmkgPSB0cnVlO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgLy9lbHNlIGlmKFRFU0hVUEFJVFlQRS5pc1NhblRhb0h1YSl7XHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMuX2dvbmdYaU5pU2hvdyh0cnVlKTtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5fc2FuVG9uZ0h1YSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAvL2Vsc2UgaWYoVEVTSFVQQUlUWVBFLmlzU2FuVG9uZ0h1YVNodW4pe1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9nb25nWGlOaVNob3codHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMuX1NhblRvbmdIdWFTaHVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihURVNIVVBBSVRZUEUuaXNTYW5GZW5UaWFuWGlhKXtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5fZ29uZ1hpTmlTaG93KHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9TYW5GZW5UaWFuWGlhID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihURVNIVVBBSVRZUEUuaXNDb3VZaVNlKXtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5fZ29uZ1hpTmlTaG93KHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9Db3VZaVNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihURVNIVVBBSVRZUEUuaXNTaVRhb1NhblRpYW8pe1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9nb25nWGlOaVNob3codHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMuX1NpVGFvU2FuVGlhbyA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAvL2Vsc2UgaWYoVEVTSFVQQUlUWVBFLmlzV3VEdWlTYW5UaWFvKXtcclxuICAgICAgICAgICAgLy8gICAgdGhpcy5fZ29uZ1hpTmlTaG93KHRydWUpO1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9XdUR1aVNhblRpYW8gPSB0cnVlO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dvbmdYaU5pU2hvdyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faW5pdFRlU2h1UGFpU3ByaXRlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qIyMjIyPmjqfliLbnibnmrorniYznsr7ngbXnmoTmmL7npLoqL1xyXG4gICAgX2luaXRUZVNodVBhaVNwcml0ZTpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyrmiormiYDmnInnmoTnibnmrorniYznsr7ngbXpg73pmpDol4/mjokqL1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8dGhpcy50ZXNodXBhaV9taW4ubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIHRoaXMudGVzaHVwYWlfbWluW2ldLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFtpXS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyrlpoLmnpzmmK/kuIDmnaHpvpnvvIzlsLHmmL7npLrkuIDmnaHpvpnnmoTnsr7ngbUqL1xyXG4gICAgICAgIGlmKHRoaXMuX3lpVGlhb0xvbmcpe1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21pblszXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFszXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKuWmguaenOaYr+WFreWvueWNiuWwseaYvuekuuWFreWvueWNiueahOeyvueBtSovXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9saXVEdWlCYW4pe1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21pblswXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFswXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKuWmguaenOaYr+S4iemhuuWtkOWwseaYvuekuuS4iemhuuWtkOeahOeyvueBtSovXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9zYW5TaHVuWmkpe1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21pblsxXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFsxXS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKuWmguaenOaYr+S4ieWQjOiKse+8jOWwseaYvuekuuS4ieWQjOiKseeahOeyvueBtSovXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9zYW5Ub25nSHVhKXtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9taW5bMl0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9tYXhbMl0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyrlpoLmnpzmmK/kuInlkIzoirHvvIzlsLHmmL7npLrkuInlkIzoirHnmoTnsr7ngbUqL1xyXG4gICAgICAgIGVsc2UgaWYodGhpcy5fUWluZ0xvbmcpe1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21pbls0XS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFs0XS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKuWmguaenOaYr+S4ieWQjOiKse+8jOWwseaYvuekuuS4ieWQjOiKseeahOeyvueBtSovXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9TYW5Ub25nSHVhU2h1bil7XHJcbiAgICAgICAgICAgIHRoaXMudGVzaHVwYWlfbWluWzVdLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudGVzaHVwYWlfbWF4WzVdLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8q5aaC5p6c5piv5LiJ5ZCM6Iqx77yM5bCx5pi+56S65LiJ5ZCM6Iqx55qE57K+54G1Ki9cclxuICAgICAgICBlbHNlIGlmKHRoaXMuX1NhbkZlblRpYW5YaWEpe1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21pbls2XS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRlc2h1cGFpX21heFs2XS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKuWmguaenOaYr+S4ieWQjOiKse+8jOWwseaYvuekuuS4ieWQjOiKseeahOeyvueBtSovXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9Db3VZaVNlKXtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9taW5bN10uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9tYXhbN10uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyrlpoLmnpzmmK/kuInlkIzoirHvvIzlsLHmmL7npLrkuInlkIzoirHnmoTnsr7ngbUqL1xyXG4gICAgICAgIGVsc2UgaWYodGhpcy5fU2lUYW9TYW5UaWFvKXtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9taW5bOF0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9tYXhbOF0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyrlpoLmnpzmmK/kuInlkIzoirHvvIzlsLHmmL7npLrkuInlkIzoirHnmoTnsr7ngbUqL1xyXG4gICAgICAgIGVsc2UgaWYodGhpcy5fV3VEdWlTYW5UaWFvKXtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9taW5bOV0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50ZXNodXBhaV9tYXhbOV0uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qIyMjIyMqL1xyXG4gICAgLy/mmL7npLpnb25nWGlOaSDpobXpnaLlkox0ZVNodVBhaVxyXG4gICAgX2dvbmdYaU5pU2hvdzpmdW5jdGlvbiAoc3RhdHVlcykge1xyXG4gICAgICAgIHZhciBhbHRlckNvbSA9IHRoaXMuZ29uZ1hpTmkuZ2V0Q29tcG9uZW50KFwiYWxlcnRcIik7XHJcbiAgICAgICAgaWYoc3RhdHVlcyl7XHJcbiAgICAgICAgICAgIGFsdGVyQ29tLmFsZXJ0KCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGFsdGVyQ29tLmRpc21pc3NBY3Rpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGVTaHVQYWkuYWN0aXZlID0gc3RhdHVlcztcclxuICAgIH0sXHJcbiAgICAvKiMjIyMjKi9cclxuXHJcbiAgICAvLyAg57uT5p6c55u45YWzXHJcbiAgICAvLyDmmL7npLrkuIDlsYDnu5PmnpxcclxuICAgIF9zaG93T25lR2FtZVJlc3VsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qKi9cclxuICAgICAgICB0aGlzLl9pc0NvbXBhcmluZ0NhcmRzTm93ID0gZmFsc2U7XHJcbiAgICAgICAgLyoqL1xyXG4gICAgICB0aGlzLnVwZGF0ZUdhbWVTdGF0dXMoR0FNRVNUQVRVUy5XQUlUX1BFT1BMRSk7XHJcbiAgICAgIGxldCBvbmVHYW1lUmVzdWx0ID0gdGhpcy5vbmVHYW1lUmVzdWx0LmdldENvbXBvbmVudCgnR2FtZVJlc3VsdCcpO1xyXG4gICAgICBvbmVHYW1lUmVzdWx0LnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcclxuICAgICAgb25lR2FtZVJlc3VsdC5zaG93UmVzdWx0cyh0aGlzLl9kZXNrSW5mbywgdGhpcy5fdXNlcklkKTtcclxuICAgICAgdGhpcy5fdXBkYXRlVXNlclNjb3JlcygpO1xyXG4gICAgICB0aGlzLl91cGRhdGVCYW5rZXIoKTtcclxuXHJcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXJDb21wKSB7XHJcbiAgICAgICAgICAvL3BsYXllckNvbXAucmVzZXQoKTtcclxuICAgICAgICAgIC8vcGxheWVyQ29tcC5yZXNldDIoKTsgIC8vIyMjIyNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxmLl9pc1JhbmRvbVJvb20oKSkge1xyXG4gICAgICAgICAgICAvL2lmIChzZWxmLl9kZXNrSW5mby5jSW5kZXggPT0gMCkgey8v5LiA5bGA6L+Y5rKh5byA5aeLXHJcbiAgICAgICAgICAgIC8vICAgIHNlbGYuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgIGlmIChzZWxmLl9pc1RvdGFsR2FtZU92ZXIoKSkge1xyXG4gICAgICAgICAgICBzZWxmLl9zaG93VG90YWxHYW1lUmVzdWx0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAwLjUpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX2lzUmFuZG9tUm9vbSgpIHx8IFBsYXliYWNrLmluc3RhbmNlLmlzUGxheWJhY2tpbmcoKSkge1xyXG4gICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIG9uZUdhbWVSZXN1bHQuZ2V0Q29tcG9uZW50KCdhbGVydCcpLmRpc21pc3NBY3Rpb24oKTtcclxuICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ2hhbGwnKTtcclxuICAgICAgICAgIH0sIDIpO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8g5pi+56S65oC757uT5p6cXHJcbiAgICBfc2hvd1RvdGFsR2FtZVJlc3VsdDogZnVuY3Rpb24gKHNob3dEZWxheSA9IDIpIHtcclxuICAgICAgICBjYy5maW5kKFwiQ2FudmFzL3Nob3dfcmVzdWx0XCIpLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmJ0blJlYWR5Lm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuYnRuU2hhcmUubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5hbGVydEFuc293ZXJFeGl0Tm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5hbGVydFJlcXVlc3RFeGl0Tm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAgIGxldCB0b3RhbEdhbWVSZXN1bHRDb21wID0gdGhpcy50b3RhbEdhbWVSZXN1bHQuZ2V0Q29tcG9uZW50KCdUb3RhbEdhbWVSZXN1bHQnKTtcclxuICAgICAgdG90YWxHYW1lUmVzdWx0Q29tcC5zZXRQbGF5ZXJJbmZvcyh0aGlzLl9kZXNrSW5mby5wbGF5ZXJzLCB0aGlzLl9kZXNrSW5mbyk7XHJcblxyXG4gICAgICBsZXQgYWxlcnQgPSB0aGlzLnRvdGFsR2FtZVJlc3VsdC5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XHJcbiAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm9uZUdhbWVSZXN1bHQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgLy9hbGVydC5hbGVydCgpO1xyXG4gICAgICAgICAgLyoqL1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnRvdGFsR2FtZVJlc3VsdC5hY3RpdmUpIHtcclxuICAgICAgICAgICAgICBhbGVydC5hbGVydCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLyoqL1xyXG4gICAgICB9LmJpbmQodGhpcyksIHNob3dEZWxheSk7XHJcblxyXG4gICAgICBhbGVydC5zZXREaXNtaXNzQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gTUFSSzogU29ja2V0IOebuOWFs1xyXG4gICAgX2xvYWREZXNrSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICBTb2NrZXQuc2VuZEdldERlc2NrSW5mbyh0aGlzLl91c2VySWQpO1xyXG4gICAgfSxcclxuICAgIF9yZWdpc3RlclNvY2tldEV2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlJlY2VpdmVEZXNrSW5mbywgdGhpcy5fc29ja2V0UmVjZWl2ZURlc2tJbmZvLCB0aGlzKTtcclxuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZU9ubGluZVN0YXR1cywgdGhpcy5fc29ja2V0UmVjaXZlT25saW5lU3RhdHVzLCB0aGlzKTtcclxuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZUNoYXRUZXh0LCB0aGlzLl9zb2NrZXRSZWNpdmVDaGF0VGV4dE1lc3NhZ2UsIHRoaXMpO1xyXG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlUmVxdWVzdERpc3NvbHZlLCB0aGlzLl9zb2NrZXRSZWNlaXZlUmVxdWVzdEV4aXRNZXNzYWdlLCB0aGlzKTtcclxuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZVJlcXVlc3REaXNzb2x2ZVJlc3VsdCwgdGhpcy5fc29ja2V0UmVjZWl2ZVJlcXVlc3RFeGl0UmVzdWx0TWVzc2FnZSwgdGhpcyk7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlJlY2VpdmVBdWRpb01lc3NhZ2UsIHRoaXMuX3NvY2tldFJlY2VpdmVBdWRpb01lc3NhZ2UsIHRoaXMpO1xyXG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlUGxheUNhcmQsIHRoaXMuX3NvY2tldFJlY2VpdmVQbGF5Q2FyZCwgdGhpcyk7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlJlY2VpdmVHYW1lT3ZlciwgdGhpcy5fc29ja2V0UmVjZWl2ZUdhbWVPdmVyLCB0aGlzKTtcclxuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZUZhUGFpLCB0aGlzLl9zb2NrZXRSZWNpdmVGYVBhaSwgdGhpcyk7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlJlY2VpdmVSZWFkeSwgdGhpcy5fc29ja2V0UmVjaXZlUmVhZHksIHRoaXMpO1xyXG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlRGlzc29sdmVEZXNrLCB0aGlzLl9zb2NrZXRSZWNlaXZlRGlzc29sdmVEZXNrLCB0aGlzKTtcclxuICAgICAgICAvKiovXHJcbiAgICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZUxlYXZlRGVzaywgdGhpcy5fc29ja2V0TGVhdmVEZXNrLCB0aGlzKTtcclxuICAgICAgICAvKiovXHJcbiAgICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuU29ja2V0RGlzY29ubmVjdCwgdGhpcy5fcmVjZWl2ZVNvY2tldENvbm5lY3RFcnJvciwgdGhpcyk7XHJcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlNvY2tldENvbm5lY3RTdWNjZXNzZWQsIHRoaXMuX3JlY2VpdmVTb2NrZXRDb25uZWN0U3VjY2Vzc2VkLCB0aGlzKTtcclxuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuUmVjZWl2ZVBhdXNlLCB0aGlzLl9zb2NrZXRSZWNlaXZlUGF1c2UsIHRoaXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc29ja2V0UmVjZWl2ZURlc2tJbmZvOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgaWYgKCFyZXNwb25zZS5yZXN1bHQpIHtcclxuICAgICAgICBjYy5lcnJvcihcIumUmeivr++8mlwiLCByZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgLyojIyMjI+a3u+WKoOS6lOWQjOaMiemSriovXHJcbiAgICAgICAgY2MubW9zaGkgPSByZXNwb25zZS5kYXRhLnNldHRpbmczO1xyXG4gICAgICAgIGlmKGRhdGEuc2V0dGluZzggIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGNjLm1vc2hpID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2MubWFQYWkgPSByZXNwb25zZS5kYXRhLm1hUGFpO1xyXG4gICAgICBjYy5kdW9ZaVNlID0gcmVzcG9uc2UuZGF0YS5zZXR0aW5nNzsgICAvL3NldHRpbmc35Li6ICAwIHx8IG51bGwgIDDlsLHmmK/pgInmi6nkuoblpJrkuIDoibJcclxuICAgICAgLyppZihjYy5kdW9ZaVNlID09IDApe1xyXG4gICAgICAgICAgdGhpcy5idG5XdVRvbmcgPSBuZXcgY2MuTm9kZSgpOyAvL+WIm+W7uuS4gOS4quiKgueCueWvueixoVxyXG4gICAgICAgICAgdGhpcy5idG5XdVRvbmcuYWRkQ29tcG9uZW50KGNjLlNwcml0ZSk7IC8v5re75Yqg57K+54G157uE5Lu2XHJcbiAgICAgICAgICB0aGlzLmJ0bld1VG9uZy5hZGRDb21wb25lbnQoY2MuQnV0dG9uKTsgLy/mt7vliqBCdXR0b27nu4Tku7ZcclxuICAgICAgICAgIHZhciBidG5TcHJpdGUgPSB0aGlzLmJ0bld1VG9uZy5nZXRDb21wb25lbnQoY2MuU3ByaXRlKTtcclxuICAgICAgICAgIGJ0blNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMud3VUb25nX2ltZztcclxuICAgICAgICAgIHRoaXMuYnRuV3VUb25nLm5hbWUgPSBcImJ0bld1VG9uZ1wiO1xyXG4gICAgICAgICAgaWYoIXRoaXMudHlwZUJ1dHRvbnNOb2RlLmdldENoaWxkQnlOYW1lKFwiYnRuV3VUb25nXCIpKXtcclxuICAgICAgICAgICAgICB0aGlzLnR5cGVCdXR0b25zTm9kZS5hZGRDaGlsZCh0aGlzLmJ0bld1VG9uZyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5idG5XdVRvbmcuaW50ZXJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciB0b25nSHVhU2h1blNwcml0ZUNvbSA9IHRoaXMudHlwZUJ1dHRvbnNOb2RlLmdldENoaWxkQnlOYW1lKFwiYnRuVG9uZ0h1YVNodW5cIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XHJcbiAgICAgICAgICB0b25nSHVhU2h1blNwcml0ZUNvbS5zcHJpdGVGcmFtZSA9IHRoaXMudG9uZ0h1YVNodW5faW1nOyAgLy/mlLnlj5jlkIzoirHpobrnmoTnsr7ngbVcclxuXHJcbiAgICAgICAgICAvL+e7meS6lOWQjOaMiemSrua3u+WKoOS6i+S7tu+8mlxyXG4gICAgICAgICAgdmFyIGNsaWNrRXZlbnRXdVRvbmcgPSBuZXcgY2MuQ29tcG9uZW50LkV2ZW50SGFuZGxlcigpO1xyXG4gICAgICAgICAgY2xpY2tFdmVudFd1VG9uZy50YXJnZXQgPSB0aGlzLmNhcmRUeXBlQ29tYmluZU5vZGU7XHJcbiAgICAgICAgICBjbGlja0V2ZW50V3VUb25nLmNvbXBvbmVudCA9IFwiQ2FyZFR5cGVDb21iaW5lXCI7IC8v6ISa5pys5ZCNXHJcbiAgICAgICAgICBjbGlja0V2ZW50V3VUb25nLmhhbmRsZXIgPSBcImNsaWNrV3VUb25nXCI7ICAvL+aJp+ihjOeahOWHveaVsFxyXG5cclxuICAgICAgICAgIHZhciBCdXR0b25zQ2xpY2tFdmVudHMgPSB0aGlzLmJ0bld1VG9uZy5nZXRDb21wb25lbnQoY2MuQnV0dG9uKS5jbGlja0V2ZW50cztcclxuICAgICAgICAgIEJ1dHRvbnNDbGlja0V2ZW50cy5wdXNoKGNsaWNrRXZlbnRXdVRvbmcpO1xyXG4gICAgICB9Ki9cclxuICAgICAgLyojIyMjIyovXHJcbiAgICAgIHRoaXMubWFQYWkgPSBkYXRhLm1hUGFpO1xyXG4gICAgICAvKiMjIyMjKi9cclxuICAgICAgdGhpcy5faW5pdE1hUGFpKCk7XHJcbiAgICAgIC8qIyMjIyMqL1xyXG4gICAgICB0aGlzLl9kZXNrSW5mbyA9IGRhdGE7XHJcbiAgICAgIHRoaXMuX3VwZGF0R2FtZU92ZXJ2aWV3KHRoaXMuX2Rlc2tJbmZvKTtcclxuICAgICAgdGhpcy51cGRhdGVSb29tTnVtYmVyKGRhdGEucm9vbUlkKTtcclxuXHJcbiAgICAgIGxldCBwbGF5ZXJJbmRleHMgPSBkYXRhLnBsYXllcnNJbmRleDsgLy8gWzEwMDA0OV1cclxuICAgICAgdGhpcy5faW5qZWN0VXNlcklkVG9QbGF5ZXJDb21wb25lbnRzKHBsYXllckluZGV4cyk7XHJcblxyXG4gICAgICBsZXQgcGxheWVycyA9IGRhdGEucGxheWVycztcclxuICAgICAgdGhpcy5fcGxheWVySW5mb3MgPSBwbGF5ZXJzO1xyXG4gICAgICB0aGlzLl91cGRhdGVVc2VySW5mb3MocGxheWVycyk7XHJcbiAgICAgIHRoaXMuX3VwZGF0ZVVzZXJTY29yZXMoKTtcclxuICAgICAgdGhpcy5fdXBkYXRlQmFua2VyKCk7XHJcbiAgICAgIHRoaXMuX21zZ0NvbnRyb2wuYWRkUGxheWVySW5mb3ModGhpcy5fcGxheWVySW5mb3MpO1xyXG5cclxuICAgICAgbGV0IGN1cnJlbnRVc2VySW5mbyA9IHBsYXllcnMuZmluZChmdW5jdGlvbiAocGxheWVySW5mbykge1xyXG4gICAgICAgIHJldHVybiBwbGF5ZXJJbmZvLmlkID09IHRoaXMuX3VzZXJJZDtcclxuICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xyXG4gICAgICAgICAgICBpZihkYXRhLmNyZWF0ZUlkID09IHBsYXllci51c2VySWQpey8v5pi+56S65oi/5Li7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd0ZhbmdaaHVTdGF0dXMoZGF0YS5jcmVhdGVJZCx0cnVlKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd0ZhbmdaaHVTdGF0dXMocGxheWVyLnVzZXJJZCxmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgLy9pZiAodGhpcy5fZGVza0luZm8uY0luZGV4ID09IDApIHtcclxuICAgICAgLy8gIHJldHVybjtcclxuICAgICAgLy99XHJcbiAgICAgICAgLyoqL1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2Rlc2tJbmZvLmlzQ0JlZ2luKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVTdGF0dXMgPSBHQU1FU1RBVFVTLldBSVRfUkVBRFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8v5rKh5pyJ5Y+R54mM77yM5LiN5piv6ZqP5py65Zy6LOS4jeaYr+WbnuaUvu+8jOaYvuekuuWHhuWkh+aMiemSrlxyXG4gICAgICAgIC8vaWYgKCF0aGlzLl9kZXNrSW5mby5pc0NCZWdpblxyXG4gICAgICAgIC8vICAgICYmICF0aGlzLl9pc1JhbmRvbVJvb20oKVxyXG4gICAgICAgIC8vICAgICYmICFQbGF5YmFjay5pbnN0YW5jZS5pc1BsYXliYWNraW5nKClcclxuICAgICAgICAvLyAgICAmJiAhdGhpcy5fZ2V0U2VsZlJlYWR5U3RhdHVzKClcclxuICAgICAgICAvLykge1xyXG4gICAgICAgIC8vICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgIGlmKHRoaXMuX2Rlc2tJbmZvLmNJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgLy8gICAgICAgIHRoaXMuYnRuUmVhZHkubm9kZS54ID0gMDtcclxuICAgICAgICAvLyAgICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLnkgPSAwO1xyXG4gICAgICAgIC8vICAgIH1cclxuICAgICAgICAvLyAgICBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgdGhpcy5idG5SZWFkeS5ub2RlLnggPSAtMTUwO1xyXG4gICAgICAgIC8vICAgICAgICB0aGlzLmJ0blJlYWR5Lm5vZGUueSA9IC0yNDtcclxuICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgLy99XHJcbiAgICAgICAgZm9yKHZhciBpPTA7aTxwbGF5ZXJzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICB2YXIgcz1wbGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICB2YXIgaXM9cy5yZWFkeVN0YXR1czsvL3RydWUvZmFsc2VcclxuICAgICAgICAgICAgdmFyIHVzZXJJZCA9IHMuaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYXllckNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd1JlYWR5U3RhdHVzKHVzZXJJZCxpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgaWYgKGN1cnJlbnRVc2VySW5mbyAmJiBjdXJyZW50VXNlckluZm8uY2FyZHMubGVuZ3RoID4gMCAmJiB0aGlzLl9kZXNrSW5mby5pc0NCZWdpbikge1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0R2FtZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKFVzZXJNb2RlbEhlbHBlci5pc1BsYXllZENhcmRzKGN1cnJlbnRVc2VySW5mbykgJiYgIXRoaXMuX2Rlc2tJbmZvLmlzQ0JlZ2luKSB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0UmVjZWl2ZUdhbWVPdmVyKHJlc3BvbnNlKTtcclxuICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNSZWFkeVN0YXR1cygpO1xyXG4gICAgICAvL2lmICghdGhpcy5fZGVza0luZm8uaXNDQmVnaW4gJiYgIXRoaXMuX2lzUmFuZG9tUm9vbSgpKSB7XHJcbiAgICAgIC8vICB0aGlzLmJ0blJlYWR1eS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIC8vfVxyXG4gICAgICAgIC8qKi9cclxuICAgICAgICAvL2lmICghdGhpcy5fZGVza0luZm8uaXNDQmVnaW4gJiYgIXRoaXMuX2lzUmFuZG9tUm9vbSgpICYmICF0aGlzLl9kZXNrSW5mby5pc0Rlc2tPdmVyKSB7XHJcbiAgICAgICAgLy8gICAgLy90aGlzLmJ0blJlYWR5Lm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICBjYy5sb2codGhpcy5fZGVza0luZm8pXHJcbiAgICAgICAgLy8gICAgY2MubG9nKCfpgqPlsLHmmK/kvaDkuoYtLS0tLS0nKVxyXG4gICAgICAgIC8vICAgIGlmICh0aGlzLl9pc0NvbXBhcmluZ0NhcmRzTm93KSB7XHJcbiAgICAgICAgLy8gICAgICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgLy99IGVsc2Uge1xyXG4gICAgICAgIC8vICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAvL31cclxuICAgICAgICAvKiovXHJcbiAgICAgIHRoaXMuX2hhbmRsZVVwZGF0ZURlc2tJbmZvQWJvdXRFeGl0Um9vbSh0aGlzLl9kZXNrSW5mbyk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zb2NrZXRSZWNpdmVGYVBhaTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgdGhpcy5fc29ja2V0UmVjZWl2ZURlc2tJbmZvKHJlc3BvbnNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3NvY2tldFJlY2l2ZU9ubGluZVN0YXR1czogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIC8ve1wiYWN0aW9uXCI6XCJzZW5kT25saW5lU3RhdHVzXCIsXCJyZXN1bHRcIjp0cnVlLFwiZGF0YVwiOntcInVzZXJJZFwiOjEwMDA0OSxcInN0YXR1c1wiOjF9fVxyXG4gICAgICBpZiAoIXJlc3BvbnNlLnJlc3VsdCkge1xyXG4gICAgICAgIGNjLmVycm9yKFwi6ZSZ6K+v77yaXCIsIHJlc3BvbnNlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgbGV0IHVzZXJJZCA9IGRhdGEudXNlcklkO1xyXG4gICAgICBsZXQgc3RhdHVzID0gZGF0YS5zdGF0dXM7XHJcblxyXG4gICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xyXG4gICAgICAgIHBsYXllci5zZXRVc2VyT25saW5lU3RhdHVzKHVzZXJJZCwgc3RhdHVzKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zb2NrZXRSZWNpdmVDaGF0VGV4dE1lc3NhZ2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICBsZXQgdXNlcklkID0gcmVzcG9uc2UuZGF0YS51c2VySWQ7XHJcbiAgICAgIGxldCBtZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5tc2c7XHJcblxyXG4gICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xyXG4gICAgICAgIHBsYXllci5zaG93Q2hhdFRleHQodXNlcklkLCBtZXNzYWdlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLl9tc2dDb250cm9sLmFkZENoYXRUZXh0TWVzc2FnZSh1c2VySWQsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgbGV0IHNleCA9IHRoaXMuX3BsYXllckluZm9zLmZpbmQoZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICByZXR1cm4gdXNlci5pZCA9PSB1c2VySWQ7XHJcbiAgICAgIH0pLnNleDtcclxuICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnBsYXlDaGF0QXVkaW8oc2V4LCBtZXNzYWdlKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3NvY2tldFJlY2VpdmVSZXF1ZXN0RXhpdE1lc3NhZ2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS51c2VySWQgPT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgYWxlcnRDb21wID0gdGhpcy5hbGVydEFuc293ZXJFeGl0Tm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XHJcbiAgICAgIGFsZXJ0Q29tcC5hbGVydCgpO1xyXG4gICAgICBhbGVydENvbXAudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xyXG5cclxuICAgICAgbGV0IGNvdW50ZG93biA9IHRoaXMuYWxlcnRBbnNvd2VyRXhpdENvdW50ZG93bk5vZGUuZ2V0Q29tcG9uZW50KCdDb3VudGRvd24nKTtcclxuICAgICAgY291bnRkb3duLnN0YXJ0Q291bnRkb3duKDEyMCwgZnVuY3Rpb24oaXNUaW1lb3V0KSB7XHJcbiAgICAgICAgaWYgKGlzVGltZW91dCkge1xyXG4gICAgICAgICAgdGhpcy5jbGlja0FncmVlT3RoZXJQbGF5ZXJFeGl0KCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc29ja2V0UmVjZWl2ZVJlcXVlc3RFeGl0UmVzdWx0TWVzc2FnZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIHRoaXMuX2hpZGVSZXFlc3RFeGl0Tm9kZSgpO1xyXG4gICAgICBpZiAodGhpcy5hbGVydEFuc293ZXJFeGl0Tm9kZS5hY3RpdmUpIHtcclxuICAgICAgICB0aGlzLmFsZXJ0QW5zb3dlckV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5hbGVydEFuc293ZXJFeGl0Q291bnRkb3duTm9kZS5nZXRDb21wb25lbnQoJ0NvdW50ZG93bicpLnN0b3AoKTtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3VsdCkge1xyXG4gICAgICAgIC8vIOino+aVo+aIkOWKn1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCB1c2VySWQgPSByZXNwb25zZS5kYXRhLnVzZXJJZDtcclxuICAgICAgICBsZXQgbmlja25hbWUgPSB0aGlzLl9maW5kUGxheWVySW5mb0J5VXNlcklkKHVzZXJJZCkubmlja25hbWU7XHJcbiAgICAgICAgdGhpcy5zaG93QWxlcnRNZXNzYWdlKCfop6PmlaPlpLHotKXvvIzlm6DkuLonICsgbmlja25hbWUgKyAn5LiN5ZCM5oSP6YCA5Ye6Jyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3NvY2tldFJlY2VpdmVBdWRpb01lc3NhZ2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICBsZXQgdXNlcklkID0gcmVzcG9uc2UuZGF0YS51c2VySWQ7XHJcbiAgICAgIHRoaXMucGxheVNwZWFrQW5pbWF0aW9uKHVzZXJJZCk7XHJcblxyXG4gICAgICBpZiAodXNlcklkID09IHRoaXMuX3VzZXJJZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHVybCA9IHJlc3BvbnNlLmRhdGEudXJsO1xyXG4gICAgICB0aGlzLnBsYXlBdWRpb1VybCh1cmwpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc29ja2V0UmVjZWl2ZVBsYXlDYXJkOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgLy8g5pyJ55So5oi35bey57uP5YeG5aSH5aW95LqG54mMXHJcbiAgICAgICAgY2MubG9nKHJlc3BvbnNlKVxyXG4gICAgICAgIGNjLmxvZygnLS0tLS0tLS05NzInKVxyXG4gICAgICAgIHZhciB1c2VySWQgPSByZXNwb25zZS5kYXRhWzBdLnVzZXJJZDtcclxuICAgICAgICB2YXIgY2FyZEluZm8gPSByZXNwb25zZS5kYXRhWzFdLmNhcmQ7XHJcbiAgICAgIHRoaXMuX3BsYXllckNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyKSB7XHJcbiAgICAgICAgcGxheWVyLnBsYXlDYXJkKHVzZXJJZCxjYXJkSW5mbyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHVzZXJJZCA9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICB0aGlzLmNhcmRUeXBlQ29tYmluZU5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfZ2V0U2VsZlJlYWR5U3RhdHVzOmZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcy5fZmluZFBsYXllckluZm9CeVVzZXJJZCh0aGlzLl91c2VySWQpO1xyXG4gICAgICAgIHJldHVybiBzZWxmLnJlYWR5U3RhdHVzO1xyXG4gICAgfSxcclxuICAgIF9zb2NrZXRSZWNpdmVSZWFkeTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIGxldCB1c2VySWQgPSByZXNwb25zZS5kYXRhLnVzZXJJZDtcclxuICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICBwbGF5ZXIuc2hvd1JlYWR5U3RhdHVzKHVzZXJJZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvL+aUtuWIsOa4uOaIj+e7k+adn1xyXG4gICAgX3NvY2tldFJlY2VpdmVHYW1lT3ZlcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIHRoaXMuX2hpZGVSZXFlc3RFeGl0Tm9kZSgpO1xyXG5cclxuICAgICAgLy8g5LiA5bGA5ri45oiP57uT5p2fXHJcbiAgICAgIGlmICghcmVzcG9uc2UucmVzdWx0KSB7XHJcbiAgICAgICAgY2MuZXJyb3IoXCLplJnor6/vvJpcIiwgcmVzcG9uc2UpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAgIC8qKi9cclxuICAgICAgICBjb25zdCBkZXNrSW5mbyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmFjdGlvbiA9PSAnZ2FtZU92ZXInICYmIGRlc2tJbmZvLmlzRGVza092ZXIpIHtcclxuICAgICAgICAgICAgU29ja2V0LnNlbmREaWRSZWNlaXZlR2FtZU92ZXJBY3Rpb24odGhpcy5fdXNlcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqL1xyXG4gICAgICB0aGlzLl9kZXNrSW5mbyA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG4gICAgICAvLyDlpoLmnpzmmK/lvLrliLbop6PmlaPmiL/pl7TvvIzliJnnm7TmjqXmmL7npLrmgLvmiJDnu6lcclxuICAgICAgaWYgKHRoaXMuX2lzRGlzc3ZsZWRSb29tKCkgJiYgIVBsYXliYWNrLmluc3RhbmNlLmlzUGxheWJhY2tpbmcoKSkge1xyXG4gICAgICAgIHRoaXMuX3Nob3dUb3RhbEdhbWVSZXN1bHQoMC4xKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMuX2VudGVyVGltZSA8IDEwMDAgKiA0KSB7XHJcbiAgICAgICAgLy8g5Yia6L+b5p2l55qE6K+d77yM5LiN5bGV56S65q+U54mM5Yqo55S7XHJcbiAgICAgICAgICBsZXQgb25lR2FtZVJlc3VsdCA9IHRoaXMub25lR2FtZVJlc3VsdC5nZXRDb21wb25lbnQoJ0dhbWVSZXN1bHQnKTtcclxuICAgICAgICAgIG9uZUdhbWVSZXN1bHQudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xyXG4gICAgICAgICAgb25lR2FtZVJlc3VsdC5zaG93UmVzdWx0cyh0aGlzLl9kZXNrSW5mbywgdGhpcy5fdXNlcklkKTtcclxuICAgICAgICAgIHRoaXMuYnRuU2hhcmUubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuYnRuUmVhZHkubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllckNvbXApIHtcclxuICAgICAgICAgIHBsYXllckNvbXAucmVzZXQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAgIC8qKi9cclxuICAgICAgICAgIHRoaXMuX3BsYXllZENvbXBhcmVDYXJkc0luZGV4cy5wdXNoKHRoaXMuX2Rlc2tJbmZvLmNJbmRleCk7XHJcbiAgICAgICAgICAvKiovXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgIHRoaXMuX2Rlc2tJbmZvID0gZGF0YTtcclxuICAgICAgdGhpcy5fdXBkYXRHYW1lT3ZlcnZpZXcodGhpcy5fZGVza0luZm8pO1xyXG5cclxuICAgICAgbGV0IHBsYXllckluZGV4cyA9IGRhdGEucGxheWVyc0luZGV4OyAvLyBbMTAwMDQ5XVxyXG5cclxuICAgICAgbGV0IHBsYXllcnMgPSBkYXRhLnBsYXllcnM7XHJcbiAgICAgIHRoaXMuX3BsYXllckluZm9zID0gcGxheWVycztcclxuICAgICAgdGhpcy5fdXBkYXRlVXNlckluZm9zKHBsYXllcnMpO1xyXG5cclxuICAgICAgaWYgKFVzZXJNb2RlbEhlbHBlci5pc1VzZXJSZWFkeSh0aGlzLl9maW5kQ3VycmVudFVzZXJJbmZvKCkpKSB7XHJcbiAgICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXJDb21wKSB7XHJcbiAgICAgICAgICBwbGF5ZXJDb21wLnJlc2V0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRDb21wYXJlQ2FyZHMocmVzcG9uc2UpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICBfc29ja2V0UmVjZWl2ZURpc3NvbHZlRGVzazogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgdGhpcy5jYXJkVHlwZUNvbWJpbmVOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgbGV0IG1lc3NhZ2UgPSBcIuaIv+S4u+W3suino+aVo+aIv+mXtFwiO1xyXG4gICAgICBpZiAodGhpcy5faXNSYW5kb21Sb29tKCkpIHtcclxuICAgICAgICBtZXNzYWdlID0gXCLmnInnjqnlrrblt7LlvLrliLbpgIDlh7rmiL/pl7TvvIzmuLjmiI/nu5PmnZ/jgILmnKzlsYDmuLjmiI/kuI3kvJrmiaPpmaTmgqjnmoTpkrvnn7PjgIJcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zaG93QWxlcnRNZXNzYWdlKG1lc3NhZ2UsIGZhbHNlKTtcclxuICAgICAgdGhpcy5hbGVydC5nZXRDb21wb25lbnQoJ2FsZXJ0Jykuc2V0V2lsbERpc21pc3NDYWxsYmFjayhmdW5jdGlvbigpe1xyXG4gICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9LFxyXG4gICAgLyoqL1xyXG4gICAgX3NvY2tldExlYXZlRGVzazogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5yZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvLmlzRGVza092ZXIpIHtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5oi/6Ze05bey57uT5p2f77yM5Lmf5LiN55So5YaN6Ieq5Yqo6YCA5Zue5Yiw5aSn5Y6F5LqGXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgfSxcclxuICAgIC8qKi9cclxuICAgIC8vIHNvY2tldCDmlLbliLDmnInkurrmiYvmnLrov5vlhaXlkI7lj7Dmtojmga9cclxuICAgIF9zb2NrZXRSZWNlaXZlUGF1c2U6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIGlmICghcmVzcG9uc2UucmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgdXNlcklkID0gcmVzcG9uc2UuZGF0YS51c2VySWQ7XHJcbiAgICAgIHRoaXMuX3BsYXllckNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgICBpZiAocGxheWVyLnVzZXJJZCA9PSB1c2VySWQpIHtcclxuICAgICAgICAgIHBsYXllci5zZXRVc2VyT25saW5lU3RhdHVzKHVzZXJJZCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlY2VpdmVTb2NrZXRDb25uZWN0RXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHRoaXMuc2hvd05ldHdvcmtNZXNzYWdlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9yZWNlaXZlU29ja2V0Q29ubmVjdFN1Y2Nlc3NlZDogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgdGhpcy5oaWRkZW5OZXR3b3JrTWVzc2FnZSgpO1xyXG5cclxuICAgICAgaWYgKCFQbGF5YmFjay5pbnN0YW5jZS5pc1BsYXliYWNraW5nKCkpIHtcclxuICAgICAgICB0aGlzLl9sb2FkRGVza0luZm8oKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKi9cclxuICAgIC8vIE1BUks6IOabtOaWsOaIv+mXtOS/oeaBr1xyXG4gICAgdXBkYXRlRGVza0luZm86IGZ1bmN0aW9uIChkZXNrSW5mbykge1xyXG4gICAgICAgIHRoaXMuX2Rlc2tJbmZvID0gZGVza0luZm87XHJcbiAgICAgICAgdGhpcy5fdXBkYXRHYW1lT3ZlcnZpZXcodGhpcy5fZGVza0luZm8pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUm9vbU51bWJlcihkZXNrSW5mby5yb29tSWQpO1xyXG5cclxuICAgICAgICBsZXQgcGxheWVySW5kZXhzID0gZGVza0luZm8ucGxheWVyc0luZGV4OyAvLyBbMTAwMDQ5XVxyXG4gICAgICAgIHRoaXMuX2luamVjdFVzZXJJZFRvUGxheWVyQ29tcG9uZW50cyhwbGF5ZXJJbmRleHMpO1xyXG5cclxuICAgICAgICBsZXQgcGxheWVycyA9IGRlc2tJbmZvLnBsYXllcnM7XHJcbiAgICAgICAgdGhpcy5fcGxheWVySW5mb3MgPSBwbGF5ZXJzO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVVzZXJJbmZvcyhwbGF5ZXJzKTtcclxuICAgICAgICB0aGlzLl9tc2dDb250cm9sLmFkZFBsYXllckluZm9zKHRoaXMuX3BsYXllckluZm9zKTtcclxuICAgICAgICBpZiAoZGVza0luZm8uY0luZGV4ID09IDAgJiYgdGhpcy5fZGVza0luZm8ucGxheWVycy5sZW5ndGggPCB0aGlzLl9kZXNrSW5mby5tYXhOdW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaGFyZS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKi9cclxuICAgIF9pbmplY3RVc2VySWRUb1BsYXllckNvbXBvbmVudHM6IGZ1bmN0aW9uIChwbGF5ZXJJbmRleHMpIHtcclxuICAgICAgbGV0IGN1cnJlbnRVc2VySWRJbmRleCA9IHBsYXllckluZGV4cy5maW5kSW5kZXgoZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICAgIHJldHVybiB1c2VySWQgPT0gdGhpcy5fdXNlcklkO1xyXG4gICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgbGV0IGZpeGVkUGxheWVySW5kZXhzID0gcGxheWVySW5kZXhzLnRyYW5zbGF0aW9uV2l0aFN0YXJ0SW5kZXgoY3VycmVudFVzZXJJZEluZGV4KTtcclxuICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXJDb21wb25lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgbGV0IHVzZXJJZCA9IGZpeGVkUGxheWVySW5kZXhzLmxlbmd0aCA+IGluZGV4ID8gZml4ZWRQbGF5ZXJJbmRleHNbaW5kZXhdIDogbnVsbDtcclxuICAgICAgICBwbGF5ZXJDb21wb25lbnQudXNlcklkID0gdXNlcklkO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZVVzZXJJbmZvczogZnVuY3Rpb24gKHVzZXJJbmZvcykge1xyXG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgIHRoaXMuX3BsYXllckNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGxheWVyQ29tcG9uZW50LCBpbmRleCkge1xyXG4gICAgICAgIC8vcGxheWVyQ29tcG9uZW50LnNldERlc2tJbmZvKHNlbGYuX2Rlc2tJbmZvKTtcclxuICAgICAgICAgIC8qKi9cclxuICAgICAgICAgIHBsYXllckNvbXBvbmVudC51cGRhdGVEZXNrSW5mbyhzZWxmLl9kZXNrSW5mbyk7XHJcbiAgICAgICAgICAvKiovXHJcbiAgICAgICAgcGxheWVyQ29tcG9uZW50LnVwZGF0ZVVzZXJJbmZvV2l0aFVzZXJzKHVzZXJJbmZvcyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5faGFuZGxlVGhlU2FtZU9mSVBBZHJlc3ModXNlckluZm9zKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZVVzZXJTY29yZXM6IGZ1bmN0aW9uKHVzZXJJbmZvcykge1xyXG4gICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24ocGxheWVyKSB7XHJcbiAgICAgICAgcGxheWVyLnVwZGF0ZVNjb3JlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgX3VwZGF0ZUJhbmtlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3BsYXllckNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcclxuICAgICAgICBwbGF5ZXIudXBkYXRlQmFua2VyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDnp4HmnInmlrnms5VcclxuICAgIF9maW5kQ2FyZHNCeVVzZXJJZDogZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICBsZXQgcGxheWVyID0gdGhpcy5fZmluZFBsYXllckluZm9CeVVzZXJJZCh1c2VySWQpO1xyXG5cclxuICAgICAgcmV0dXJuIChwbGF5ZXIgIT0gbnVsbCkgPyBwbGF5ZXIuY2FyZHMgOiBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICBfZmluZFBsYXllckluZm9CeVVzZXJJZDogZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICBsZXQgcGxheWVyID0gKHRoaXMuX3BsYXllckluZm9zIHx8IFtdKS5maW5kKGZ1bmN0aW9uIChwbGF5ZXJJbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJJZCA9PSBwbGF5ZXJJbmZvLmlkO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBwbGF5ZXI7XHJcbiAgICB9LFxyXG5cclxuICAgIF9maW5kUGxheWVySW5kZXhCeVVzZXJJZDogZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICBsZXQgaW5kZXggPSB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZpbmRJbmRleChmdW5jdGlvbiAocGxheWVyQ29tcCkge1xyXG4gICAgICAgIHJldHVybiBwbGF5ZXJDb21wLnVzZXJJZCA9PSB1c2VySWQ7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZmluZEN1cnJlbnRVc2VySW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fZmluZFBsYXllckluZm9CeVVzZXJJZCh0aGlzLl91c2VySWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfY29udmVydENhcmRzVG9DYXJkTmFtZXM6IGZ1bmN0aW9uIChjYXJkcykge1xyXG4gICAgICAvLyBbe1wic3VpdFwiOlwic1wiLFwibnVtYmVyXCI6MTB9XVxyXG4gICAgICBsZXQgc3VpdENvbG9yTWFwID0ge1xyXG4gICAgICAgIHM6IDQsXHJcbiAgICAgICAgaDogMyxcclxuICAgICAgICBjOiAyLFxyXG4gICAgICAgIGQ6IDEsXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBjYXJkcy5tYXAoZnVuY3Rpb24gKGNhcmQpIHtcclxuICAgICAgICB2YXIgY2FyZE51bWJlciA9IGNhcmQubnVtYmVyO1xyXG5cclxuICAgICAgICAvLyDmnI3liqHlmajkuK3nmoQgMTQg5pivIEFcclxuICAgICAgICBpZiAoY2FyZC5udW1iZXIgPT0gMTQpIHtcclxuICAgICAgICAgIGNhcmROdW1iZXIgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29sb3IgPSBzdWl0Q29sb3JNYXBbY2FyZC5zdWl0XTtcclxuICAgICAgICBsZXQgbnVtYmVyID0gTWF0aC5tYXgoTWF0aC5taW4oY2FyZE51bWJlciwgMjEpLCAxKTtcclxuICAgICAgICByZXR1cm4gY29sb3IgKyBcIl9cIiArIG51bWJlcjtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOabtOaWsOa4uOaIj+aAu+iniOS/oeaBr1xyXG4gICAgX3VwZGF0R2FtZU92ZXJ2aWV3OiBmdW5jdGlvbiAoZGVza0luZm8pIHtcclxuICAgICAgaWYgKFBsYXliYWNrLmluc3RhbmNlLmlzUGxheWJhY2tpbmcoKSkge1xyXG4gICAgICAgIHRoaXMubGFiZWxPdmVydmlldy5zdHJpbmcgPSBcIuWbnuaUvlwiO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2lzUmFuZG9tUm9vbSgpKSB7XHJcbiAgICAgICAgdGhpcy5sYWJlbE92ZXJ2aWV3LnN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL2xldCBnYW1lTnVtYmVyU3RyaW5nID0gXCJcIjtcclxuICAgICAgLy9pZiAoZGVza0luZm8uc2V0dGluZzEgIT0gMCAmJiBkZXNrSW5mby5zZXR0aW5nMSAhPSAxKSB7XHJcbiAgICAgIC8vICBnYW1lTnVtYmVyU3RyaW5nID0gXCLlsYDmlbAgOiBcIiArIFwiXCIgKyBkZXNrSW5mby5jSW5kZXggKyBcIi9cIiArIGRlc2tJbmZvLm1NYXg7XHJcbiAgICAgIC8vfSBlbHNlIGlmIChkZXNrSW5mby5zZXR0aW5nMSA9PSAwKSB7XHJcbiAgICAgIC8vICBnYW1lTnVtYmVyU3RyaW5nID0gXCLlsYDmlbAgOiAxMOWxgFwiO1xyXG4gICAgICAvL30gZWxzZSBpZiAoZGVza0luZm8uc2V0dGluZzEgPT0gMSkge1xyXG4gICAgICAvLyAgZ2FtZU51bWJlclN0cmluZyA9IFwi5bGA5pWwIDogMjDlsYBcIjtcclxuICAgICAgLy99XHJcblxyXG4gICAgICAvL2xldCBnYW1lV2F5TmFtZSA9IHRoaXMuX2Rlc2tJbmZvR2FtZVdheSgpO1xyXG4gICAgICAgIHRoaXMubGFiZWxPdmVydmlldy5zdHJpbmcgPSAvKisgZ2FtZVdheU5hbWUgXCIgXCIgKyBnYW1lTnVtYmVyU3RyaW5nICtcIlxcblwiKyovXHJcbiAgICAgICAgXCLmqKHlvI8gOiBcIiArIFwiXCIgKyBkZXNrSW5mby5tYXhOdW1iZXIgKyBcIuS6ulwiIC8qKyBcIlxcbiBcIiArIHRoaXMuX2Rlc2tJbmZvSmlhWWlTZUluZm8oKVxyXG4gICAgICAgICsgXCLvvIxcIiAgKyB0aGlzLl9kZXNrSW5mb0d1aVBhaUluZm8oKSovO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDmmK/lkKbmmK/pmo/mnLrmiL9cclxuICAgIF9pc1JhbmRvbVJvb206IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuX2Rlc2tJbmZvLmlzUmFuZG9tRGVzaztcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5piv5ZCm5omA5pyJ5bGA5pWw6YO955So5a6M5LqGXHJcbiAgICBfaXNUb3RhbEdhbWVPdmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICh0aGlzLl9kZXNrSW5mbyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5fZGVza0luZm8uaXNEZXNrT3Zlcikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fZGVza0luZm8ubU1heCA8PSB0aGlzLl9kZXNrSW5mby5jSW5kZXg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOaYr+WQpuW3suino+aVo+aIv+mXtFxyXG4gICAgX2lzRGlzc3ZsZWRSb29tOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICh0aGlzLl9kZXNrSW5mbykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNrSW5mby5kaXNzb2x2ZVN0YXR1cztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLy8vIOavlOeJjOmAu+i+kVxyXG4gICAgLy8g5byA5aeL5q+U54mMXHJcbiAgICBfc3RhcnRDb21wYXJlQ2FyZHM6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLmiZPljbBkYXRh5L+h5oGvXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgIC8qKi9cclxuICAgICAgICB0aGlzLl9pc0NvbXBhcmluZ0NhcmRzTm93ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9nb25nWGlOaVNob3coZmFsc2UpO1xyXG4gICAgICAgIC8qKi9cclxuICAgICAgICB0aGlzLl9wbGF5ZXJzID0gZGF0YS5kYXRhLnBsYXllcnM7XHJcbiAgICAgIGxldCB1c2VyID0gdGhpcy5fZmluZFBsYXllckluZm9CeVVzZXJJZCh0aGlzLl91c2VySWQpO1xyXG4gICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGxheVN0YXJ0Q29tcGFyZSh1c2VyLnNleCk7XHJcblxyXG4gICAgICB0aGlzLnN0YXJ0Q29tcGFyZUNhcmRzTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuYWxlcnQoKTtcclxuICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRDb21wYXJlQ2FyZHNOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3Nob3dDb21wYXJlQ2FyZERldGFpbHMoZGF0YSk7XHJcbiAgICAgIH0uYmluZCh0aGlzKSwgMi4wKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3Nob3dDb21wYXJlQ2FyZERldGFpbHM6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgLy92YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXJDb21wKSB7XHJcbiAgICAgICAgLy8gICAgcGxheWVyQ29tcC5yZWFkeVRvQ29tcGFyZUNhcmRzKCk7XHJcbiAgICAgICAgLy99KTtcclxuICAgICAgICAvL2xldCBjb21wYXJlUGxheWVycyA9IHRoaXMuX3BsYXllckNvbXBvbmVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICAvLyAgICBpZihwbGF5ZXIudXNlcklkID09IG51bGwpIHtcclxuICAgICAgICAvLyAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8vICAgIH1cclxuICAgICAgICAvLyAgICBmb3IodmFyIGkgaW4gX3RoaXMuX3BsYXllcnMpIHtcclxuICAgICAgICAvLyAgICAgICAgaWYoX3RoaXMuX3BsYXllcnNbaV0uaWQgPT0gcGxheWVyLnVzZXJJZCkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgaWYoX3RoaXMuX3BsYXllcnNbaV0uY2FyZEluZm8ubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAvL+WwhuaYr+eJueauiueJjOeahOeOqeWutuWtmOi1t+adpVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgIGlmKF90aGlzLl9wbGF5ZXJzW2ldLmNhcmRJbmZvLmxlbmd0aCA9PSAxKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgX3RoaXMudGVTaHVQbGF5SWQgPSBfdGhpcy5fcGxheWVyc1tpXS5pZDtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgICAgZWxzZSBpZihfdGhpcy5fcGxheWVyc1tpXS5jYXJkSW5mby5sZW5ndGggPT0gMykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfSk7XHJcbiAgICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXJDb21wKSB7XHJcbiAgICAgICAgICAgIHBsYXllckNvbXAucmVhZHlUb0NvbXBhcmVDYXJkcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgY29tcGFyZVBsYXllcnMgPSB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxheWVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwbGF5ZXIubm9kZS5hY3RpdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuX3Nob3dDb21wYXJlQ2FyZFN0ZXAoMCwgY29tcGFyZVBsYXllcnMpO1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5fc2hvd0NvbXBhcmVDYXJkU3RlcCgwLCBjb21wYXJlUGxheWVycyk7XHJcbiAgICAgICAgfSwgZHVyYXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuX3Nob3dDb21wYXJlQ2FyZFN0ZXAoMCwgY29tcGFyZVBsYXllcnMpO1xyXG4gICAgICAgIH0sIGR1cmF0aW9uICogMik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWmguaenOacieeJueauiueJjOeahOivneWwseaUueWPmOaXtumXtCBkdXJhdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBwbGF5ZXJzPWRhdGEuZGF0YS5wbGF5ZXJzO1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2kgPCBwbGF5ZXJzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICB2YXIgcz1wbGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICBpZihzLmNhcmRJbmZvLmxlbmd0aCA9PSAxKXtcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uICs9IDEuNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbiAqIDMgKyAwLjU7XHJcbiAgICAgICAgbGV0IHNob290RHVyYXRpb24gPSAxLjU7XHJcblxyXG4gICAgICAgIGxldCBzaG9vdERhdGFzID0gdGhpcy5fc2hvb3REYXRhcygpIHx8IFtdO1xyXG5cclxuICAgICAgICBsZXQgc2hvdERhdGEgPSB0aGlzLl9zaG90RGF0YSgpIHx8IFtdO1xyXG5cclxuICAgICAgICBsZXQgaG9tZVJ1blVzZXJJZCA9IHRoaXMuX2hvbWVSdW5Vc2VySWQoKTtcclxuXHJcbiAgICAgICAgdmFyIHNob3REYXRhVGltZXMgPSAwO1xyXG4gICAgICAgIHNob3REYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucGxheVNob290KGRhdGEuZnJvbVVzZXJJZCwgZGF0YS50b1VzZXJJZCk7XHJcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uICsgaW5kZXggKiBzaG9vdER1cmF0aW9uKTtcclxuICAgICAgICAgICAgc2hvdERhdGFUaW1lcys9MTtcclxuICAgICAgICAgICAgZHVyYXRpb24rPTE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYoaG9tZVJ1blVzZXJJZC5sZW5ndGggPj0gMSl7XHJcbiAgICAgICAgICAgIHNob290RGF0YXMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnBsYXlTaG9vdChkYXRhLmZyb21Vc2VySWQsIGRhdGEudG9Vc2VySWQpO1xyXG4gICAgICAgICAgICAgICAgfSwgZHVyYXRpb24gKyAoaW5kZXggKyBzaG90RGF0YVRpbWVzKSAqIHNob290RHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24rPTE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbiArIHNob290RGF0YXMubGVuZ3RoICogc2hvb3REdXJhdGlvbiArIHNob3REYXRhLmxlbmd0aCAqIHNob290RHVyYXRpb247XHJcblxyXG4gICAgICAgIGlmIChob21lUnVuVXNlcklkID4gMCkge1xyXG4gICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnBsYXlIb21lUnVuKGhvbWVSdW5Vc2VySWQpO1xyXG4gICAgICAgICAgICB9LCBkdXJhdGlvbik7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gKyAxLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaG9tZVJ1blVzZXJJZCkge1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICsgMTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvL+aYvuekuue7k+aenFxyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5fc2hvd0NvbXBhcmVDYXJkRmluaXNoZWQoKTtcclxuICAgICAgICB9LCBkdXJhdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zaG93Q29tcGFyZUNhcmRTdGVwOiBmdW5jdGlvbiAoc3RhcnRUaW1lID0gMCwgY29tcGFyZVBsYXllcnMgPSBbXSkge1xyXG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHN0YXJ0VGltZTtcclxuICAgICAgICBsZXQgaW50ZXJ2YWwgPSAxO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgY29tcGFyZVBsYXllcnMgPSBjb21wYXJlUGxheWVycy5zb3J0KGZ1bmN0aW9uIChwbGF5ZXIxLCBwbGF5ZXIyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwbGF5ZXIxLm5leHRDb21wYXJlU2NvcmUoKSAtIHBsYXllcjIubmV4dENvbXBhcmVTY29yZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOW5suaOieeJueauiueJjOeahOaXtumXtFxyXG4gICAgICAgIHZhciBjbz1jb21wYXJlUGxheWVycztcclxuICAgICAgICBmb3IodmFyIGk9MDtpIDwgY28ubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIHZhciBzPWNvW2ldLl91c2VySW5mbztcclxuICAgICAgICAgICAgaWYocy5pc0NvbnRhaW5FeHRyYSl7XHJcbiAgICAgICAgICAgICAgICBjby5zcGxpY2UoaSwxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xyXG4gICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd05leHRDb21wYXJlQ2FyZHMoKTtcclxuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICsgaW50ZXJ2YWw7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBkdXJhdGlvbjtcclxuICAgIH0sXHJcblxyXG4gICAgX2lzR2FtZU92ZXI6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOavlOeJjOWujOaIkOWQjuS8muiwg+eUqOeahOaWueazlVxyXG4gICAgX3Nob3dDb21wYXJlQ2FyZEZpbmlzaGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dPbmVHYW1lUmVzdWx0KCk7XHJcbiAgICAgICAgLyoqL1xyXG4gICAgICAgIHRoaXMuX3BsYXllZENvbXBhcmVDYXJkc0luZGV4cy5wdXNoKHRoaXMuX2Rlc2tJbmZvLmNJbmRleCk7XHJcbiAgICAgICAgLyoqL1xyXG4gICAgfSxcclxuXHJcbiAgICAvL25ldHdvcmtcclxuICAgIHNob3dOZXR3b3JrTWVzc2FnZTpmdW5jdGlvbihtc2cgPSBcIue9kee7nOmTvuaOpeaWreW8gO+8jOmHjeaWsOi/nuaOpeS4rS4uLlwiKSB7XHJcbiAgICAgIGlmICh0aGlzLm5ldHdvcmtOb2RlICYmIHRoaXMubmV0d29ya05vZGUuYWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm5ldHdvcmtOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHJlbW92ZVNlbGZBY3Rpb24gPSBjYy5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIHRoaXMubmV0d29ya05vZGUucnVuQWN0aW9uKHJlbW92ZVNlbGZBY3Rpb24pO1xyXG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uZXR3b3JrTm9kZSA9IGNjLmluc3RhbnRpYXRlKHRoaXMud2FpdGluZ1ByZWZhYik7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMubmV0d29ya05vZGUpO1xyXG4gICAgICAgIHZhciBjb21wID0gdGhpcy5uZXR3b3JrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbXAub25EaXNtaXNzQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5uZXR3b3JrTm9kZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb21wLnNldE1lc3NhZ2UobXNnKTtcclxuICAgICAgICBjb21wLmFsZXJ0KCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGhpZGRlbk5ldHdvcmtNZXNzYWdlOmZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5ldHdvcmtOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXR3b3JrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2hvd0FsZXJ0TWVzc2FnZTogZnVuY3Rpb24obXNnLCBhdXRvRGlzbWlzcykge1xyXG4gICAgICBsZXQgYWxlcnRDb21wID0gdGhpcy5hbGVydC5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XHJcbiAgICAgIGlmICghdGhpcy5hbGVydC5hY3RpdmUpIHtcclxuICAgICAgICBhbGVydENvbXAuYWxlcnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYWxlcnRDb21wLnNldE1lc3NhZ2UobXNnKTtcclxuICAgICAgYWxlcnRDb21wLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcclxuICAgICAgaWYgKGF1dG9EaXNtaXNzKSB7XHJcbiAgICAgICAgYWxlcnRDb21wLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBhbGVydENvbXAuZGlzbWlzc0FjdGlvbigpO1xyXG4gICAgICAgIH0sIDUpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vY2hlY2tOb2RlXHJcbiAgICBzaG93Q2hlY2tNZXNzYWdlOmZ1bmN0aW9uKG1zZyA9ICfmo4Dmn6XnvZHnu5zkuK0uLi4nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHJlbW92ZVNlbGZBY3Rpb24gPSBjYy5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tOb2RlLnJ1bkFjdGlvbihyZW1vdmVTZWxmQWN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja05vZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoZWNrTm9kZSA9IGNjLmluc3RhbnRpYXRlKHRoaXMud2FpdGluZ1ByZWZhYik7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMuY2hlY2tOb2RlKTtcclxuICAgICAgICB2YXIgY29tcCA9IHRoaXMuY2hlY2tOb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29tcC5vbkRpc21pc3NDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLmNoZWNrTm9kZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb21wLnNldE1lc3NhZ2UobXNnKTtcclxuICAgICAgICBjb21wLmFsZXJ0KCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGhpZGRlbkNoZWNrTWVzc2FnZTpmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja05vZGUgIT0gbnVsbCAmJiB0aGlzLmNoZWNrTm9kZS5hY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja05vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpLmRpc21pc3NBY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vLy8vICDogYrlpKnor63pn7PpgLvovpFcclxuICAgIF9yZWdpc3RlclZvaWNlTm9kZUV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgIGxldCBjaGF0Vm9pY2VOb2RlID0gdGhpcy5idG5DaGF0Vm9pY2Uubm9kZTtcclxuICAgICAgdGhpcy5lbmRSZWNvcmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgY2hhdFZvaWNlTm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCxmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHNlbGYuZW5kUmVjb3JkVGltZSA+PSAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm5hdGl2ZVJlY29yZEFjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi52b2ljZVJlY29yZEFuaW1hdGlvbk5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gY2Muc2NhbGVUbygwLjEyLCAxLjIpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5idG5DaGF0Vm9pY2Uubm9kZS5ydW5BY3Rpb24oYWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLl9pc1JlY29yZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNoYXRWb2ljZU5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHNlbGYuX2lzUmVjb3JkaW5nKSB7XHJcbiAgICAgICAgICBzZWxmLmVuZFJlY29yZFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLl9pc1JlY29yZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5uYXRpdmVFbmRSZWNvcmRBY3Rpb24oKTtcclxuICAgICAgICAgICAgc2VsZi52b2ljZVJlY29yZEFuaW1hdGlvbk5vZGUuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gY2Muc2NhbGVUbygwLjEyLCAxKTtcclxuICAgICAgICAgICAgc2VsZi5idG5DaGF0Vm9pY2Uubm9kZS5ydW5BY3Rpb24oYWN0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNoYXRWb2ljZU5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfQ0FOQ0VMLGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHNlbGYuX2lzUmVjb3JkaW5nKSB7XHJcbiAgICAgICAgICBzZWxmLmVuZFJlY29yZFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLl9pc1JlY29yZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5uYXRpdmVFbmRSZWNvcmRBY3Rpb24oKTtcclxuICAgICAgICAgICAgc2VsZi52b2ljZVJlY29yZEFuaW1hdGlvbk5vZGUuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gY2Muc2NhbGVUbygwLjEyLCAxKTtcclxuICAgICAgICAgICAgc2VsZi5idG5DaGF0Vm9pY2Uubm9kZS5ydW5BY3Rpb24oYWN0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFNvY2tldC5pbnN0YW5jZS51cGxvYWRGaW5pc2ggPSBmdW5jdGlvbih1cmwpIHtcclxuICAgICAgICAgICAgbGV0IHVzZXJJZCA9IHNlbGYuX3VzZXJJZDtcclxuICAgICAgICAgICAgU29ja2V0LnNlbmRBdWRpb01lc3NhZ2UodXNlcklkLCB1cmwpO1xyXG4gICAgICAgICAgc2VsZi5wbGF5U3BlYWtBbmltYXRpb24oc2VsZi5fdXNlcklkKTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgbmF0aXZlUmVjb3JkQWN0aW9uOmZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XHJcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLFwicmVjb3JkXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVBbmRyb2lkKCkpIHsvL0FuZHJvaWQgY29tLmxsaW5nLnFpYW5qaWFuZ2x6Z1xyXG4gICAgICAgICAgICBqc2IucmVmbGVjdGlvbi5jYWxsU3RhdGljTWV0aG9kKEtRTmF0aXZlSW52b2tlLkFORFJJT0RDbGFzc05hbWUsIFwicmVjb3JkXCIsIFwiKClWXCIpO1xyXG4gICAgICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGF1c2VNdXNpYygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgbmF0aXZlRW5kUmVjb3JkQWN0aW9uOmZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChLUU5hdGl2ZUludm9rZS5pc05hdGl2ZUlPUygpKSB7XHJcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuSU9TQ2xhc3NOYW1lLFwiZW5kUmVjb3JkXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoS1FOYXRpdmVJbnZva2UuaXNOYXRpdmVBbmRyb2lkKCkpIHsvL0FuZHJvaWRcclxuICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5BTkRSSU9EQ2xhc3NOYW1lLCBcImVuZFJlY29yZFwiLCBcIigpVlwiKTtcclxuICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLmluc3RhbmNlLnJlc3VtZU11c2ljKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwbGF5QXVkaW9Vcmw6ZnVuY3Rpb24odXJsKSB7XHJcbiAgICAgICAgaWYgKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlSU9TKCkpIHtcclxuICAgICAgICAgICAganNiLnJlZmxlY3Rpb24uY2FsbFN0YXRpY01ldGhvZChLUU5hdGl2ZUludm9rZS5JT1NDbGFzc05hbWUsXCJwbGF5VXJsOlwiLHVybCk7XHJcbiAgICAgICAgfSBlbHNlIGlmKEtRTmF0aXZlSW52b2tlLmlzTmF0aXZlQW5kcm9pZCgpKSB7Ly9BbmRyb2lkXHJcbiAgICAgICAgICAgIGpzYi5yZWZsZWN0aW9uLmNhbGxTdGF0aWNNZXRob2QoS1FOYXRpdmVJbnZva2UuQU5EUklPRENsYXNzTmFtZSwgXCJwbGF5VXJsXCIsIFwiKExqYXZhL2xhbmcvU3RyaW5nOylWXCIsIHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBNQVJLOiAg6YCA5Ye65ri45oiP6YC76L6RXHJcbiAgICBfaGFuZGxlVXBkYXRlRGVza0luZm9BYm91dEV4aXRSb29tOiBmdW5jdGlvbihkZXNrSW5mbykge1xyXG4gICAgICBpZiAoIWRlc2tJbmZvLmlzRGlzc29sdmluZykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGRpc3NvbHZlTGVmdFRpbWUgPSBkZXNrSW5mby5kaXNzb2x2ZUxlZnRUaW1lIHx8IDEyMDtcclxuICAgICAgbGV0IGRpc3NvbHZlVXNlcklkID0gZGVza0luZm8uZGlzc29sdmVVc2VySWQ7XHJcbiAgICAgIGlmIChkaXNzb2x2ZVVzZXJJZCA9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICB0aGlzLmFsZXJ0UmVxdWVzdEV4aXROb2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5idG5BbGVydFJlcXVlc3RFeGl0Q2FuY2VsQnV0dG9uLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5idG5BbGVydFJlcXVlc3RFeGl0Q29uZmlybUJ1dHRvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBhbGVydCA9IHRoaXMuYWxlcnRSZXF1ZXN0RXhpdE5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xyXG4gICAgICAgIGFsZXJ0LnNldE1lc3NhZ2UoXCLmgqjmraPlnKjnlLPor7fljY/llYbpgIDlh7rvvIznrYnlvoXlhbbku5bnjqnlrrblkIzmhI9cIik7XHJcbiAgICAgICAgdGhpcy5hbGVydFJlcXVlc3RFeGl0Q291bnRkb3duTm9kZS5nZXRDb21wb25lbnQoJ0NvdW50ZG93bicpLnN0YXJ0Q291bnRkb3duKGRpc3NvbHZlTGVmdFRpbWUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGRpc3NvbHZlQW5zd2VySW5mb3MgPSBkZXNrSW5mby5kaXNzb2x2ZUFuc3dlckluZm87XHJcbiAgICAgIGxldCBjdXJyZW50VXNlcklkSW5kZXggPSBkZXNrSW5mby5wbGF5ZXJzSW5kZXguZmluZEluZGV4KGZ1bmN0aW9uKHVzZXJJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySWQgPT0gdXNlcklkO1xyXG4gICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgbGV0IGFuc3dlclJlc3VsdCA9IGRpc3NvbHZlQW5zd2VySW5mb3NbY3VycmVudFVzZXJJZEluZGV4XTtcclxuICAgICAgaWYgKGFuc3dlclJlc3VsdCA9PSAtMSkge1xyXG4gICAgICAgIC8vIC0xIOihqOekuuacquWkhOeQhiAgMCDooajnpLrmi5Lnu50gIDHooajnpLrlkIzmhI9cclxuICAgICAgICB0aGlzLmFsZXJ0QW5zb3dlckV4aXROb2RlLmFjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCBjb3VudGRvd24gPSB0aGlzLmFsZXJ0QW5zb3dlckV4aXRDb3VudGRvd25Ob2RlLmdldENvbXBvbmVudCgnQ291bnRkb3duJyk7XHJcbiAgICAgICAgY291bnRkb3duLnN0YXJ0Q291bnRkb3duKGRpc3NvbHZlTGVmdFRpbWUsIGZ1bmN0aW9uKGlzVGltZW91dCkge1xyXG4gICAgICAgICAgaWYgKGlzVGltZW91dCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsaWNrQWdyZWVPdGhlclBsYXllckV4aXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyDnoa7lrpropoHlvLrliLbpgIDlh7rmuLjmiI9cclxuICAgIGNsaWNrQnV0dG9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYW5pbSA9IHRoaXMuYnRuQnV0dG9uTm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcclxuICAgICAgICBpZih0aGlzLmJ0bkJ1dHRvbnMucm90YXRpb24gPT0gMjcwKXtcclxuICAgICAgICAgICAgYW5pbS5wbGF5KCd0b3BSaWdodEJ1dHRvbnNMYXlvdXQnKTtcclxuICAgICAgICAgICAgdGhpcy5idG5CdXR0b25zLnJvdGF0aW9uID0gOTA7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIC8vYW5pbS5zdG9wKCd0b3BSaWdodEJ1dHRvbnNMYXlvdXQnKTtcclxuICAgICAgICAgICAgdGhpcy5idG5CdXR0b25Ob2RlLnggPSA4OTE7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuQnV0dG9ucy5yb3RhdGlvbiA9IDI3MDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOehruWumuimgeW8uuWItumAgOWHuua4uOaIj1xyXG4gICAgY2xpY2tDb25maXJtRm9yY2VFeGl0OiBmdW5jdGlvbigpIHtcclxuICAgICAgU29ja2V0LnNlbmRGb3JjZUV4aXRSb29tKHRoaXMuX3VzZXJJZCk7XHJcbiAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDnoa7orqTor7fmsYLpgIDlh7rmuLjmiI9cclxuICAgIGNsaWNrQ29uZmlybVJlcXVlc3RFeGl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuYnRuQWxlcnRSZXF1ZXN0RXhpdENhbmNlbEJ1dHRvbi5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmJ0bkFsZXJ0UmVxdWVzdEV4aXRDb25maXJtQnV0dG9uLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICBsZXQgYWxlcnQgPSB0aGlzLmFsZXJ0UmVxdWVzdEV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKTtcclxuICAgICAgYWxlcnQuc2V0TWVzc2FnZShcIuaCqOato+WcqOeUs+ivt+WNj+WVhumAgOWHuu+8jOetieW+heWFtuS7lueOqeWutuWQjOaEj1wiKTtcclxuICAgICAgdGhpcy5hbGVydFJlcXVlc3RFeGl0Q291bnRkb3duTm9kZS5nZXRDb21wb25lbnQoJ0NvdW50ZG93bicpLnN0YXJ0Q291bnRkb3duKDEyMCk7XHJcblxyXG4gICAgICBTb2NrZXQuc2VuZExlYXZlRGVzayh0aGlzLl91c2VySWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDlkIzmhI/ku5bkurrpgIDlh7pcclxuICAgIGNsaWNrQWdyZWVPdGhlclBsYXllckV4aXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5hbGVydEFuc293ZXJFeGl0Tm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xyXG4gICAgICB0aGlzLmFsZXJ0QW5zb3dlckV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XHJcbiAgICAgIHRoaXMuYWxlcnRBbnNvd2VyRXhpdENvdW50ZG93bk5vZGUuZ2V0Q29tcG9uZW50KCdDb3VudGRvd24nKS5zdG9wKCk7XHJcblxyXG4gICAgICBTb2NrZXQuc2VuZEFuc3dlckRpc3NvbHZlKHRoaXMuX3VzZXJJZCwgMSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOS4jeWQjOaEj+S7luS6uumAgOWHulxyXG4gICAgY2xpY2tEaXNhZ3JlZU90aGVyUGxheWVyRXhpdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmFsZXJ0QW5zb3dlckV4aXROb2RlLmdldENvbXBvbmVudCgnYWxlcnQnKS5kaXNtaXNzQWN0aW9uKCk7XHJcbiAgICAgIHRoaXMuYWxlcnRBbnNvd2VyRXhpdE5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcclxuICAgICAgdGhpcy5hbGVydEFuc293ZXJFeGl0Q291bnRkb3duTm9kZS5nZXRDb21wb25lbnQoJ0NvdW50ZG93bicpLnN0b3AoKTtcclxuICAgICAgU29ja2V0LnNlbmRBbnN3ZXJEaXNzb2x2ZSh0aGlzLl91c2VySWQsIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyDpmpDol4/or7fmsYLpgIDlh7ogTm9kZVxyXG4gICAgX2hpZGVSZXFlc3RFeGl0Tm9kZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoIXRoaXMuYWxlcnRSZXF1ZXN0RXhpdE5vZGUuYWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmFsZXJ0UmVxdWVzdEV4aXROb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmFsZXJ0UmVxdWVzdEV4aXRDb3VudGRvd25Ob2RlLmdldENvbXBvbmVudCgnQ291bnRkb3duJykuc3RvcCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLy8vIOaJk+aeqlxyXG4gICAgcGxheVNob290OiBmdW5jdGlvbiAoZnJvbVVzZXJJZCwgdG9Vc2VySWQpIHtcclxuICAgICAgbGV0IHVzZXIgPSB0aGlzLl9maW5kUGxheWVySW5mb0J5VXNlcklkKGZyb21Vc2VySWQpO1xyXG4gICAgICBpZiAodXNlcikge1xyXG4gICAgICAgIEF1ZGlvTWFuYWdlci5pbnN0YW5jZS5wbGF5SHVtYW5EYVFpYW5nKHVzZXIuc2V4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHRvVXNlckluZGV4ID0gdGhpcy5fZmluZFBsYXllckluZGV4QnlVc2VySWQodG9Vc2VySWQpO1xyXG5cclxuICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICBwbGF5ZXIucGxheVNob290QW5pbWF0aW9uKGZyb21Vc2VySWQsIHRvVXNlckluZGV4KTtcclxuICAgICAgICBwbGF5ZXIucGxheUJ1bGxldEhvbGVBbmltYXRpb24odG9Vc2VySWQpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5pKt5pS+5YWo5Z6S5omT5Yqo5pWIXHJcbiAgICBwbGF5SG9tZVJ1bjogZnVuY3Rpb24gKHVzZXJJZCkge1xyXG4gICAgICBsZXQgdXNlciA9IHRoaXMuX2ZpbmRQbGF5ZXJJbmZvQnlVc2VySWQodXNlcklkKTtcclxuICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGxheUhvbWVSdW4odXNlci5zZXgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9wbGF5ZXJDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllcikge1xyXG4gICAgICAgIHBsYXllci5wbGF5SG9tZVJ1bkFpbWF0aW9uKHVzZXJJZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBwbGF5U3BlYWtBbmltYXRpb246IGZ1bmN0aW9uICh1c2VySWQpIHtcclxuICAgICAgdGhpcy5fcGxheWVyQ29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHtcclxuICAgICAgICBwbGF5ZXIucGxheVNwZWFrQW5pbWF0aW9uKHVzZXJJZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc2hvb3REYXRhczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBob21lUnVuVXNlcklkID0gdGhpcy5faG9tZVJ1blVzZXJJZCgpOyAvLyDlhajlnpLmiZNcclxuICAgICAgICBsZXQgc2hvb3REYXRhcyA9IHRoaXMuX2Rlc2tJbmZvLnNob3REYXRhLmZpbHRlcihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5mcm9tVXNlcklkID09IGhvbWVSdW5Vc2VySWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNob290RGF0YXM7XHJcbiAgICB9LFxyXG5cclxuICAgIF9zaG90RGF0YTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBob21lUnVuVXNlcklkID0gdGhpcy5faG9tZVJ1blVzZXJJZCgpOyAvLyDmiZPmnqpcclxuICAgICAgICBsZXQgc2hvdERhdGEgPSB0aGlzLl9kZXNrSW5mby5zaG90RGF0YS5maWx0ZXIoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZnJvbVVzZXJJZCAhPSBob21lUnVuVXNlcklkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzaG90RGF0YTtcclxuICAgIH0sXHJcblxyXG4gICAgX2hvbWVSdW5Vc2VySWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2Rlc2tJbmZvLmFsbFNob3REYXRhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBNQVJLOiDmiL/pl7Tkv6Hmga/pg6jliIZcclxuXHJcbiAgICAvLyDojrflj5bmiL/pl7TnmoTnjqnms5VcclxuICAgIF9kZXNrSW5mb0dhbWVXYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBsZXQgc2V0dGluZyA9IHRoaXMuX2Rlc2tJbmZvLnNldHRpbmczO1xyXG4gICAgICBpZihzZXR0aW5nID09IG51bGwpe1xyXG4gICAgICAgICAgc2V0dGluZyA9IDI7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IG5hbWVzID0gW1wi5bqE5a625qih5byPXCIsIFwi5peg54m55q6K54mMXCIsXCLmma7pgJrmqKHlvI9cIl07XHJcbiAgICAgIHJldHVybiBuYW1lc1tzZXR0aW5nXTtcclxuICAgIH0sXHJcblxyXG4gICAgX2Rlc2tJbmZvTnVtYmVyT2ZHYW1lOiBmdW5jdGlvbigpIHtcclxuICAgICAgbGV0IHNldHRpbmcgPSB0aGlzLl9kZXNrSW5mby5zZXR0aW5nMTtcclxuICAgICAgbGV0IGluZm9zID0gWycxMOWxgCcsICcyMOWxgCcsICc0MOWxgCcsICc15bGAJ107XHJcbiAgICAgIC8qaWYgKHNldHRpbmcgPD0gMSkge1xyXG4gICAgICAgIHJldHVybiAn5p2h5pWw77yaJyArIGluZm9zW3NldHRpbmddO1xyXG4gICAgICB9Ki9cclxuICAgICAgaWYoc2V0dGluZyA9PSAyKXtcclxuICAgICAgICAgIHNldHRpbmcgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoc2V0dGluZyA9PSAzKXtcclxuICAgICAgICAgIHNldHRpbmcgPSAxO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoc2V0dGluZyA9PSA0KXtcclxuICAgICAgICAgIHNldHRpbmcgPSAyO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoc2V0dGluZyA9PSA1KXtcclxuICAgICAgICAgIHNldHRpbmcgPSAzO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAn5bGA5pWw77yaJyArIGluZm9zW3NldHRpbmddO1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVza0luZm9OdW1iZXJPZlBlb3BsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGxldCBzZXR0aW5nID0gdGhpcy5fZGVza0luZm8uc2V0dGluZzI7XHJcbiAgICAgIGxldCBpbmZvcyA9IFsnMuS6uicsICcz5Lq6JywgJzTkuronLCAnNeS6uiddO1xyXG4gICAgICByZXR1cm4gaW5mb3Nbc2V0dGluZ107XHJcbiAgICB9LFxyXG5cclxuICAgIF9kZXNrSW5mb1BheUluZm86IGZ1bmN0aW9uKCkge1xyXG4gICAgICBsZXQgc2V0dGluZyA9IHRoaXMuX2Rlc2tJbmZvLnNldHRpbmc0O1xyXG4gICAgICBpZihzZXR0aW5nID09IG51bGwpe1xyXG4gICAgICAgICAgc2V0dGluZyA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgaWYoc2V0dGluZyA9PSAwKXtcclxuICAgICAgICAgIHNldHRpbmcgPSAxO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBpbmZvcyA9IFsn5oi/5Li76Zy45Li75bqEJywgJ+aIv+i0uUFBJ107XHJcbiAgICAgIHJldHVybiBpbmZvc1tzZXR0aW5nXTtcclxuICAgIH0sXHJcblxyXG4gICAgX2Rlc2tJbmZvSmlhWWlTZUluZm86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBzZXR0aW5nID0gdGhpcy5fZGVza0luZm8uc2V0dGluZzcgPT0gMCA/IDEgOiAwO1xyXG4gICAgICAgIGxldCBpbmZvcyA9IFsn5peg5aSa5LiA6ImyJywgJ+WkmuS4gOiJsiddO1xyXG4gICAgICAgIHJldHVybiBpbmZvc1tzZXR0aW5nXTtcclxuICAgIH0sXHJcblxyXG4gICAgX2Rlc2tJbmZvR3VpUGFpSW5mbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IHNldHRpbmc7XHJcbiAgICAgICAgaWYodGhpcy5fZGVza0luZm8uc2V0dGluZzggPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHNldHRpbmcgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuX2Rlc2tJbmZvLnNldHRpbmc4ID09IDApe1xyXG4gICAgICAgICAgICBzZXR0aW5nID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLl9kZXNrSW5mby5zZXR0aW5nOCA9PSAxKXtcclxuICAgICAgICAgICAgc2V0dGluZyA9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbmZvcyA9IFsn5peg546L54mMJywgJ+S4pOW8oOeOi+eJjCcsICflm5vlvKDnjovniYwnXTtcclxuICAgICAgICByZXR1cm4gaW5mb3Nbc2V0dGluZ107XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1BUks6IOWJqeS9meaXtumXtFxyXG4gICAgX3JlbWFpblRpbWVTdGFydFVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8vdGhpcy5zY2hlZHVsZSh0aGlzLl9yZW1haW5UaW1lVXBkYXRlLCAxLjAsIGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlbWFpblRpbWVVcGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5faXNSYW5kb21Sb29tKCkgfHwgUGxheWJhY2suaW5zdGFuY2UuaXNQbGF5YmFja2luZygpKSB7XHJcbiAgICAgICAgdGhpcy5sYWJlbFJlbWFpblRpbWUuc3RyaW5nID0gXCJcIjtcclxuICAgICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2Rlc2tJbmZvID09IG51bGwpIHtcclxuICAgICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5zdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMubGFiZWxSZW1haW5UaW1lLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaXNUYW9TaHUgPSAodGhpcy5fZGVza0luZm8uc2V0dGluZzEgPT0gMCkgfHwgKHRoaXMuX2Rlc2tJbmZvLnNldHRpbmcxID09IDEpO1xyXG4gICAgICBpZiAoaXNUYW9TaHUpIHtcclxuICAgICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLl9kZXNrSW5mby5jcmVhdGVUaW1lKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIGxldCBjcmVhdGVUaW1lID0gZmVjaGEucGFyc2UodGhpcy5fZGVza0luZm8uY3JlYXRlVGltZSwgJ1lZWVktTU0tREQgSEg6bW06c3MnKS5nZXRUaW1lKCk7XHJcbiAgICAgIGxldCBvbmVIb3VyID0gNjAgKiA2MDtcclxuICAgICAgbGV0IHJlbWFpbiA9IChEYXRlLm5vdygpIC0gY3JlYXRlVGltZSkgLyAxMDAwO1xyXG4gICAgICByZW1haW4gPSBNYXRoLm1heChvbmVIb3VyIC0gcmVtYWluLCAwKTtcclxuXHJcbiAgICAgIGxldCBtaW5zID0gTWF0aC5mbG9vcihyZW1haW4gLyA2MCk7XHJcbiAgICAgIGxldCBzZWNzID0gTWF0aC5mbG9vcihyZW1haW4gJSA2MCk7XHJcbiAgICAgIGlmIChtaW5zID09IDAgJiYgc2VjcyA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5sYWJlbFJlbWFpblRpbWUuc3RyaW5nID0gXCJcIjtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtaW5zU3RyaW5nID0gXCJcIiArIG1pbnM7XHJcbiAgICAgIGlmIChtaW5zU3RyaW5nLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICBtaW5zU3RyaW5nID0gXCIwXCIgKyBtaW5zU3RyaW5nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc2Vjc1N0cmluZyA9IFwiXCIgKyBzZWNzO1xyXG4gICAgICBpZiAoc2Vjc1N0cmluZy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgc2Vjc1N0cmluZyA9IFwiMFwiICsgc2Vjc1N0cmluZztcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHN0cmluZyA9IFwi5Ymp5L2Z5pe26Ze077yaMDA6XCIgKyBtaW5zU3RyaW5nICsgXCI6XCIgKyBzZWNzU3RyaW5nO1xyXG4gICAgICB0aGlzLmxhYmVsUmVtYWluVGltZS5zdHJpbmcgPSBzdHJpbmc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1BUks6IOWkhOeQhuWQjCBJUCDnmoTnlKjmiLdcclxuICAgIF9oYW5kbGVUaGVTYW1lT2ZJUEFkcmVzczogZnVuY3Rpb24odXNlckluZm9zKSB7XHJcbiAgICAgIGlmICghdXNlckluZm9zIHx8IHVzZXJJbmZvcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGlwVXNlckluZm9zID0gdXNlckluZm9zLnJlZHVjZShmdW5jdGlvbihpcHMsIHVzZXJJbmZvKSB7XHJcbiAgICAgICAgbGV0IHVzZXJzID0gaXBzW3VzZXJJbmZvLmlwQWRkcmVzc10gfHwgW107XHJcbiAgICAgICAgdXNlcnMucHVzaCh1c2VySW5mbyk7XHJcblxyXG4gICAgICAgIGlwc1t1c2VySW5mby5pcEFkZHJlc3NdID0gdXNlcnM7XHJcbiAgICAgICAgcmV0dXJuIGlwcztcclxuICAgICAgfSwge30pO1xyXG5cclxuICAgICAgbGV0IHNhbWVJcFVzZXJzID0gbnVsbDtcclxuICAgICAgZm9yIChsZXQgaXAgaW4gaXBVc2VySW5mb3MpIHtcclxuICAgICAgICBsZXQgdXNlcnMgPSBpcFVzZXJJbmZvc1tpcF07XHJcbiAgICAgICAgaWYgKHVzZXJzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHNhbWVJcFVzZXJzID0gdXNlcnM7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzYW1lSXBVc2VycyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9hbGVydFNhbWVJcFVzZXJJbmZvcyhzYW1lSXBVc2Vycyk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9hbGVydFNhbWVJcFVzZXJJbmZvczogZnVuY3Rpb24odXNlcnMpIHtcclxuICAgICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgICBsZXQgdXNlcklkcyA9IFwiXCI7XHJcbiAgICAgIHVzZXJzLmZvckVhY2goZnVuY3Rpb24odXNlciwgaW5kZXgpIHtcclxuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSArIChpbmRleCA+IDAgPyAnIOWSjCAnIDogJycpICsgdXNlci5uaWNrbmFtZTtcclxuICAgICAgICB1c2VySWRzID0gdXNlcklkcyArIHVzZXIuaWQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICBtZXNzYWdlID0gbWVzc2FnZSArICcg5Zyo5ZCM5LiAIElQIOS4i++8gSc7XHJcblxyXG4gICAgICB0aGlzLl9kaWRBbGVydFNhbWVJcE1lc3NhZ2UgPSB0aGlzLl9kaWRBbGVydFNhbWVJcE1lc3NhZ2UgfHwge307XHJcbiAgICAgIGlmICh0aGlzLl9kaWRBbGVydFNhbWVJcE1lc3NhZ2VbdXNlcklkc10pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2hvd0FsZXJ0TWVzc2FnZShtZXNzYWdlLCB0cnVlKTtcclxuICAgICAgdGhpcy5fZGlkQWxlcnRTYW1lSXBNZXNzYWdlW3VzZXJJZHNdID0gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG59KTtcclxuUGxheS5nb25nWGlOaVNob3cgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgdGhpcy5pbnN0YW5jZXMuX2dvbmdYaU5pU2hvdyh0eXBlKTtcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSBQbGF5O1xyXG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICB1cmw6IGNjLlRleHR1cmUyRCwgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICB2aXNpYmxlOiB0cnVlLCAgICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gICAgZGlzcGxheU5hbWU6ICdGb28nLCAvLyBvcHRpb25hbFxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIC4uLlxuICAgICAgICBwcm9kdWN0SWQ6JycsXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcbiAgICBcbiAgICBjbGlja0FjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vbkNsaWNrQWN0aW9uKHRoaXMucHJvZHVjdElkKTsgICAgICAgIFxuICAgIH0sXG4gICAgXG4gICAgb25DbGlja0FjdGlvbjpmdW5jdGlvbihwcm9kdWN0SWQpIHtcbiAgICAgICAgXG4gICAgfSxcblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcbiIsImNvbnN0IFNvY2tldCA9IHJlcXVpcmUoJ3NvY2tldCcpO1xuY29uc3QgS1FHbG9iYWxFdmVudCA9IHJlcXVpcmUoJ0tRR2xvYmFsRXZlbnQnKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgbWF0Y2hpbmdMYWJlbDpjYy5MYWJlbCxcbiAgICAgICAgdGltZU5vZGU6Y2MuTm9kZSxcbiAgICAgICAgbWF0Y2hpbmdOb2RlOmNjLk5vZGUsXG4gICAgICAgIHdhaXRpbmdQcmVmYWI6IGNjLlByZWZhYixcbiAgICAgICAgYWxlcnRQcmVmYWI6IGNjLlByZWZhYixcblxuICAgICAgICB0aXNoaTpjYy5Ob2RlLFxuXG4gICAgICAgIF91c2VySWQ6IG51bGwsXG4gICAgICAgIF9yZXNwb25zZTogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl91c2VySWQgPSBTb2NrZXQuaW5zdGFuY2UudXNlckluZm8uaWQ7XG4gICAgICBjYy5pc1Jvb21WaWV3U2hvdyA9IHRydWU7XG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlRGVza0luZm8sIHRoaXMuX3NvY2tldFJlY2VpdmVEZXNrSW5mbyAsdGhpcyk7XG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5Tb2NrZXREaXNjb25uZWN0LCB0aGlzLl9zb2NrZXREaXNjb25uZWN0LCB0aGlzKTtcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LlNvY2tldENvbm5lY3RTdWNjZXNzZWQsIHRoaXMuX3NvY2tldENvbm5lY3RlZCwgdGhpcyk7XG4gICAgICBLUUdsb2JhbEV2ZW50Lm9uKFNvY2tldC5FdmVudC5SZWNlaXZlSW50ZXJSYW5kb20sIHRoaXMuX3NvY2tldFJlY2VpdmVJbnRlclJhbmRvbSwgdGhpcyk7XG4gICAgfSxcblxuICAgIF9zb2NrZXRSZWNlaXZlRGVza0luZm86IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKCFyZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ3BsYXknKTtcbiAgICB9LFxuXG4gICAgX3NvY2tldFJlY2VpdmVJbnRlclJhbmRvbTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgLy/mnI3liqHlmajlj5HpgIEgIHsnYWN0aW9uJzonaW50ZXJSYW5kb20nLCdyZXN1bHQnOmZhbHNlLCdkYXRhJzp7J3JlYXNvbic6cmVhc29ufX1cbiAgICAgICAgdGhpcy5fcmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlKHRoaXMuX3RpbWVvdXRSYW5kb21BY3Rpb24pO1xuICAgICAgICAvLyDlpITnkIbpmo/mnLrlnLrljLnphY3kuI3miJDlip/nmoTmg4XlhrVcbiAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlYXNvbiA9IHJlc3BvbnNlLmRhdGEucmVhc29uIHx8IFwi5Yqg5YWl6ZqP5py65Zy65aSx6LSlXCI7XG4gICAgICAgIHRoaXMuc2hvd0FsZXJ0TWVzc2FnZShyZWFzb24pO1xuXG4gICAgICAgIGlmIChyZWFzb24gPT0gJ+S9oOW3sue7j+WcqOWMuemFjemYn+WIlycpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dNYXRjaGluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faGlkZU1hdGNoaW5nKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NvY2tldERpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8g6L+e5o6l5bey5pat5byAXG4gICAgICB0aGlzLm1hdGNoaW5nTm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2hvd05ldHdvcmtNZXNzYWdlKCfnvZHnu5zpk77mjqXmlq3lvIDvvIzph43mlrDov57mjqXkuK0uLi4nKTtcbiAgICB9LFxuXG4gICAgX3NvY2tldENvbm5lY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmhpZGRlbk5ldHdvcmtNZXNzYWdlKCk7XG4gICAgfSxcblxuXG4gICAgb25EZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBLUUdsb2JhbEV2ZW50Lm9mZlRhcmdldCh0aGlzKTtcbiAgICB9LFxuXG4gICAgY2xpY2tFeGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZSgnaGFsbCcpO1xuICAgIH0sXG5cbiAgICBjbGlja1N0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBTb2NrZXQuc2VuZEVudGVyUmFuZG9tKHRoaXMuX3VzZXJJZCk7XG4gICAgICB0aGlzLl9zaG93TWF0Y2hpbmcoKTtcblxuICAgICAgLyojIyMjI2JlZ2luKi9cbiAgICAgIC8vcmVhc29u5piv5pyN5Yqh5Zmo5Y+R6YCB5Zue5p2l55qEXG4gICAgICAvKmlmKHRoaXMuX3Jlc3BvbnNlLmRhdGEucmVhc29uID09IFwi5L2g55qE6ZK755+z5LiN6LazXCIpe1xuICAgICAgICAgIHRoaXMudGlzaGkuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH0qL1xuICAgICAgLyojIyMjI2VuZCovXG5cbiAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMuX3RpbWVvdXRSYW5kb21BY3Rpb24sIDUpO1xuICAgIH0sXG4gICAgLyojIyMjI+eCueWHu+epuueZveWcsOaWue+8jOegluefs+S4jei2s+aPkOekuua2iOWksSovXG4gICAgLypvbkJ0bktvbmc6ZnVuY3Rpb24gKCkge1xuICAgICAgICBpZih0aGlzLnRpc2hpLmFjdGl2ZSl7XG4gICAgICAgICAgICB0aGlzLnRpc2hpLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8v5LuA5LmI5Lmf5LiN5YGaXG4gICAgICAgIH1cbiAgICB9LCovXG4gICAgLyrlj5bmtojljLnphY0qL1xuICAgIGNsaWNrQ2FuY2VsOmZ1bmN0aW9uICgpIHtcbiAgICAgIFNvY2tldC5zZW5kQ2FuY2VsUmFuZG9tKHRoaXMuX3VzZXJJZCk7XG5cbiAgICAgIHRoaXMuX2hpZGVNYXRjaGluZygpO1xuICAgIH0sXG5cbiAgICBfdGltZW91dFJhbmRvbUFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2hpZGVNYXRjaGluZygpO1xuICAgICAgICB0aGlzLnNob3dBbGVydE1lc3NhZ2UoJ+i/m+WFpeWMuemFjeWksei0pScpO1xuICAgIH0sXG5cbiAgICBfc2hvd01hdGNoaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbXAgPSB0aGlzLm1hdGNoaW5nTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jyk7XG4gICAgICAgIGNvbXAuYWxlcnQoKTtcbiAgICAgICAgdGhpcy5tYXRjaGluZ0xhYmVsLnN0cmluZyA9ICfmraPlnKjljLnphY3kuK3vvIzor7fnqI3lkI4uLi4nO1xuICAgICAgICBsZXQgbnVtID0gMDtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG51bSA9IG51bSArIDAuNTtcbiAgICAgICAgICAgIHRoaXMudGltZU5vZGUucm90YXRpb24gPSBudW07XG4gICAgICAgICB9LCAwLjAxKTtcbiAgICB9LFxuXG4gICAgX2hpZGVNYXRjaGluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb21wID0gdGhpcy5tYXRjaGluZ05vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xuICAgICAgICBjb21wLmRpc21pc3NBY3Rpb24oKTtcbiAgICB9LFxuXG4gICAgIHNob3dOZXR3b3JrTWVzc2FnZTpmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlKHRoaXMuX3RpbWVvdXRSYW5kb21BY3Rpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLm5ldHdvcmtOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciByZW1vdmVTZWxmQWN0aW9uID0gY2MucmVtb3ZlU2VsZigpO1xuICAgICAgICAgICAgdGhpcy5uZXR3b3JrTm9kZS5ydW5BY3Rpb24ocmVtb3ZlU2VsZkFjdGlvbik7XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmtOb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5ldHdvcmtOb2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy53YWl0aW5nUHJlZmFiKTtcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMubmV0d29ya05vZGUpO1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMubmV0d29ya05vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbXAub25EaXNtaXNzQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYubmV0d29ya05vZGUgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBjb21wLnNldE1lc3NhZ2UobXNnKTtcbiAgICAgICAgY29tcC5hbGVydCgpO1xuICAgIH0sXG5cbiAgICBoaWRkZW5OZXR3b3JrTWVzc2FnZTpmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubmV0d29ya05vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5uZXR3b3JrTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0JykuZGlzbWlzc0FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dBbGVydE1lc3NhZ2U6IGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgY2MuZXJyb3IoXCLkuI3og73mmL7npLrkuLrnqbrnmoTkv6Hmga9cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYWxlcnRNZXNzYWdlTm9kZSkge1xuICAgICAgICAgICAgdGhpcy5hbGVydE1lc3NhZ2VOb2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy5hbGVydFByZWZhYik7XG4gICAgICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQodGhpcy5hbGVydE1lc3NhZ2VOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWxlcnRNZXNzYWdlTm9kZS5nZXRDb21wb25lbnQoJ2FsZXJ0Jykuc2V0TWVzc2FnZShtc2cpO1xuICAgICAgICB0aGlzLmFsZXJ0TWVzc2FnZU5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpLmFsZXJ0KCk7XG4gICAgfSxcbn0pO1xuIiwiY29uc3QgU29ja2V0ID0gcmVxdWlyZSgnc29ja2V0Jyk7XG5jb25zdCBQbGF5YmFjayA9IHJlcXVpcmUoJ1BsYXliYWNrJyk7XG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRpbWVMYWJlbDpjYy5MYWJlbCxcbiAgICAgICAgbmlja25hbWVMYWJlbHM6W2NjLkxhYmVsXSxcbiAgICAgICAgc2NvcmVMYWJlbHM6W2NjLkxhYmVsXSxcbiAgICAgICAgbnVtTm9kZTpjYy5MYWJlbCxcbiAgICAgICAgX3BhcmVudElkOiBudWxsLFxuICAgICAgICBwbGF5YmFja05vZGU6Y2MuTm9kZSwvL+WbnuaUvuaMiemSrlxuICAgICAgICB3YXRjaE5vZGU6Y2MuTm9kZSwvL+afpeeci+aMiemSrlxuXG4gICAgICAgIF9yZWNvcmRJdGVtSW5mbzogbnVsbCxcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuXG4gICAgc2V0SW5mbzogZnVuY3Rpb24gKHJlY29yZEluZm8pIHtcbiAgICAgIHRoaXMuX3BhcmVudElkID0gcmVjb3JkSW5mby5pZDtcbiAgICAgIHRoaXMucGxheWJhY2tOb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy53YXRjaE5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGlmIChyZWNvcmRJbmZvLnBsYXllcnNJbmZvLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHBsYXllcnNJbmZvID0gSlNPTi5wYXJzZShyZWNvcmRJbmZvLnBsYXllcnNJbmZvKTtcbiAgICAgIHRoaXMudGltZUxhYmVsLnN0cmluZyA9IFwi5a+55oiY5pe26Ze077yaXCIgKyBwbGF5ZXJzSW5mby50aW1lO1xuICAgICAgZm9yICh2YXIgaSA9IDA7aSA8IHBsYXllcnNJbmZvLnBsYXllcnMubGVuZ3RoO2krKykge1xuICAgICAgICB0aGlzLm5pY2tuYW1lTGFiZWxzW2ldLnN0cmluZyA9IHBsYXllcnNJbmZvLnBsYXllcnNbaV0ubmlja25hbWU7XG4gICAgICAgIHRoaXMuc2NvcmVMYWJlbHNbaV0uc3RyaW5nID0gcGxheWVyc0luZm8ucGxheWVyc1tpXS50b3RhbFNjb3JlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbGlja0FjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fcmVjb3JkSXRlbUluZm8pIHtcbiAgICAgICAgY2MubG9nKFwi54K55Ye75LqG6K6w5b2V6K+m5oOFIGl0ZW3vvIzlvIDlkK/lm57mlL5cIik7XG4gICAgICAgIHRoaXMuX3N0YXJ0UGxheWJhY2sodGhpcy5fcmVjb3JkSXRlbUluZm8uX2luZm84QXJyYXkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICAgU29ja2V0LnNlbmRHZXRJdGVtUmVjb3JkKFNvY2tldC5pbnN0YW5jZS51c2VySW5mby5pZCx0aGlzLl9wYXJlbnRJZCk7XG4gICAgfSxcblxuICAgIF9zdGFydFBsYXliYWNrOiBmdW5jdGlvbiAocGxheUJhY2tJbmZvKSB7XG4gICAgICBQbGF5YmFjay5pbnN0YW5jZS5zZXRQbGF5YmFja0RhdGFzKHBsYXlCYWNrSW5mbyk7XG4gICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoJ3BsYXknKTtcbiAgICB9LFxuXG4gICAgZGV0YWlsQWN0aW9uOiBmdW5jdGlvbihyZWNvcmRJdGVtSW5mbywgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fcmVjb3JkSXRlbUluZm8gPSByZWNvcmRJdGVtSW5mbztcbiAgICAgICAgdGhpcy5wbGF5YmFja05vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53YXRjaE5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubnVtTm9kZS5zdHJpbmcgPSBcIuesrFwiICsgKGluZGV4ICsgMSkgKyBcIuWxgFwiO1xuICAgICAgICB0aGlzLnRpbWVMYWJlbC5zdHJpbmcgPSBcIuWvueaImOaXtumXtO+8mlwiICsgcmVjb3JkSXRlbUluZm8uY3JlYXRBdDtcbiAgICAgICAgbGV0IG9iakFycmF5ID0gSlNPTi5wYXJzZShyZWNvcmRJdGVtSW5mby5pbmZvOCk7XG4gICAgICAgIHRoaXMuX3JlY29yZEl0ZW1JbmZvLl9pbmZvOEFycmF5ID0gb2JqQXJyYXk7XG4gICAgICAgIGxldCBwbGF5ZXJzQXJyYXkgPSBvYmpBcnJheS5tYXAoZnVuY3Rpb24oc3RyKXtcbiAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcGxheWVycyA9IHBsYXllcnNBcnJheVtwbGF5ZXJzQXJyYXkubGVuZ3RoLTFdLmRhdGEucGxheWVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7aSA8IHBsYXllcnMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgdGhpcy5uaWNrbmFtZUxhYmVsc1tpXS5zdHJpbmcgPSBwbGF5ZXJzW2ldLm5pY2tuYW1lO1xuICAgICAgICAgICAgdGhpcy5zY29yZUxhYmVsc1tpXS5zdHJpbmcgPSBwbGF5ZXJzW2ldLmNTY29yZTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxufSk7XG4iLCJjb25zdCBLUUdsb2JhbEV2ZW50ID0gcmVxdWlyZSgnS1FHbG9iYWxFdmVudCcpO1xuY29uc3QgU29ja2V0ID0gcmVxdWlyZSgnc29ja2V0Jyk7XG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBzY3JvbGxWaWV3OmNjLk5vZGUsXG4gICAgICAgIHN1YlNjcm9sbFZpZXc6Y2MuTm9kZSxcbiAgICAgICAgcmVjb3JkSXRlbTpjYy5QcmVmYWIsXG4gICAgICAgIHN1YlJlY29yZEl0ZW06Y2MuUHJlZmFiLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N1YlBhZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdWJTY3JvbGxWaWV3LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjcm9sbFZpZXdDb250ZW50ID0gdGhpcy5zY3JvbGxWaWV3LmdldENvbXBvbmVudChjYy5TY3JvbGxWaWV3KS5jb250ZW50O1xuICAgICAgICB0aGlzLnN1YlNjcm9sbFZpZXdDb250ZW50ID0gdGhpcy5zdWJTY3JvbGxWaWV3LmdldENvbXBvbmVudChjYy5TY3JvbGxWaWV3KS5jb250ZW50O1xuXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyU29ja2V0RXZlbnQoKTtcbiAgICB9LFxuXG4gICAgX3JlZ2lzdGVyU29ja2V0RXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIEtRR2xvYmFsRXZlbnQub24oU29ja2V0LkV2ZW50LkdldFJlY29yZCwgdGhpcy5fUmVjZWl2ZVJlY29yZEluZm8sIHRoaXMpO1xuICAgICAgS1FHbG9iYWxFdmVudC5vbihTb2NrZXQuRXZlbnQuR2V0SXRlbVJlY29yZCwgdGhpcy5fUmVjZWl2ZVJlY29yZEl0ZW0sIHRoaXMpO1xuICAgIH0sXG5cbiAgICBfUmVjZWl2ZVJlY29yZEluZm86ZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5pc1N1YlBhZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdWJTY3JvbGxWaWV3LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjcm9sbFZpZXcuYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnNjcm9sbFZpZXdDb250ZW50LnJlbW92ZUFsbENoaWxkcmVuKCk7XG5cbiAgICAgICAgcmVzcG9uc2UuZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgIHJldHVybiByZWNvcmQucGxheWVyc0luZm8ubGVuZ3RoID4gMDtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkSW5mbykge1xuICAgICAgICAgIHZhciBpdGVtID0gY2MuaW5zdGFudGlhdGUodGhpcy5yZWNvcmRJdGVtKTtcbiAgICAgICAgICB0aGlzLnNjcm9sbFZpZXdDb250ZW50LmFkZENoaWxkKGl0ZW0pO1xuICAgICAgICAgIHZhciBjb21wID0gaXRlbS5nZXRDb21wb25lbnQoJ3JlY29yZEluZm8nKTtcbiAgICAgICAgICBjb21wLnNldEluZm8ocmVjb3JkSW5mbyk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIF9SZWNlaXZlUmVjb3JkSXRlbTpmdW5jdGlvbihSZWNvcmRJdGVtSW5mbykge1xuICAgICAgICB0aGlzLmlzU3ViUGFnZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc3ViU2Nyb2xsVmlldy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjcm9sbFZpZXcuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zdWJTY3JvbGxWaWV3Q29udGVudC5yZW1vdmVBbGxDaGlsZHJlbigpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFJlY29yZEl0ZW1JbmZvLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gY2MuaW5zdGFudGlhdGUodGhpcy5yZWNvcmRJdGVtKTtcbiAgICAgICAgICAgIHRoaXMuc3ViU2Nyb2xsVmlld0NvbnRlbnQuYWRkQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICB2YXIgY29tcCA9IGl0ZW0uZ2V0Q29tcG9uZW50KCdyZWNvcmRJbmZvJyk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IFJlY29yZEl0ZW1JbmZvLmRhdGFbaV07XG4gICAgICAgICAgICBjb21wLmRldGFpbEFjdGlvbihpbmZvLCBpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9zZUFjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdWJQYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3ViUGFnZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zdWJTY3JvbGxWaWV3LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxWaWV3LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KCdhbGVydCcpLmRpc21pc3NBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG59KTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgIHVybDogY2MuVGV4dHVyZTJELCAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgc2VyaWFsaXphYmxlOiB0cnVlLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vICAgIHZpc2libGU6IHRydWUsICAgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyAgICBkaXNwbGF5TmFtZTogJ0ZvbycsIC8vIG9wdGlvbmFsXG4gICAgICAgIC8vICAgIHJlYWRvbmx5OiBmYWxzZSwgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gLi4uXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgfSxcblxuICAgIGNsaWNrRXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgY2MuZGlyZWN0b3IubG9hZFNjZW5lKCdoYWxsJyk7XG4gICAgfSxcbn0pO1xuIiwiY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgc2VsZWN0Wmh1YW5nQmc6Y2MuTm9kZSxcbiAgICAgICAgc2VsZWN0Wmh1YW5nUmlnaHQ6Y2MuTm9kZSxcbiAgICAgICAgc2VsZWN0VGVTaHVQYWlCZzpjYy5Ob2RlLFxuICAgICAgICBzZWxlY3RUZVNodVBhaVJpZ2h0OmNjLk5vZGUsXG4gICAgICAgIF96aHVhbmdTZWxlY3RlZDpudWxsLCAgIC8v5bqE5a625qih5byP5piv5ZCm6YCJ5oupICBudWxs5Li65LiN6YCJ5oup77yMMOS4uumAieaLqVxuICAgICAgICBfdGVTaHVQYWlTZWxlY3RlZDpudWxsLCAvL+aXoOeJueauiueJjOaooeW8j+aYr+WQpumAieaLqSAgbnVsbOS4uuS4jemAieaLqe+8jDHkuLrpgInmi6lcbiAgICAgICAgc2VsZWN0SW5kZXg6bnVsbCwgICAgICAgLy/mmK/lkKbpgInmi6nluoTlrrbmqKHlvI/miJbogIXml6DnibnmrorniYwgIG51bGzkuLrkuKTogIXpg73kuI3pgIkgIDDkuLrpgInmi6nkuobluoTlrrbmqKHlvI8gIDHkuLrpgInmi6nkuobml6DnibnmrorniYzmqKHlvI9cbiAgICB9LFxuXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB9LFxuXG4gICAgICAgIC8qIyMjIyPngrnlh7vluoTlrrbmqKHlvI8qL1xuICAgIGNsaWNrWmh1YW5KaWFLdWFuZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZih0aGlzLl96aHVhbmdTZWxlY3RlZCA9PSAwKXtcbiAgICAgICAgICAgIC8v5rKh6YCJ5LiK5bqE5a625qih5byPXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFpodWFuZ1JpZ2h0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5femh1YW5nU2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZih0aGlzLl90ZVNodVBhaVNlbGVjdGVkID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0SW5kZXggPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL+mAieS6huaXoOeJueauiueJjOWwseS4jeiDvemAieW6hOWutuaooeW8j1xuICAgICAgICAgICAgaWYodGhpcy5fdGVTaHVQYWlTZWxlY3RlZCA9PSAwKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEluZGV4ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHRoaXMuX3podWFuZ1NlbGVjdGVkID09IG51bGwpe1xuICAgICAgICAgICAgLy/pgInkuIrnirbmgIFcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Wmh1YW5nUmlnaHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3podWFuZ1NlbGVjdGVkID0gMDtcbiAgICAgICAgICAgIC8v5bqE5a625qih5byP6YCJ5LiK55qE5pe25YCZ5peg54m55q6K54mM5b+F6aG75Li65LiN6YCJXG4gICAgICAgICAgICBpZih0aGlzLl90ZVNodVBhaVNlbGVjdGVkID09IDApe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGVTaHVQYWlSaWdodC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZVNodVBhaVNlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0SW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKiMjIyMj54K55Ye75peg54m55q6K54mM55qE6YCJ5oup5qGGKi9cbiAgICBjbGlja1RlU2h1UGFpS3Vhbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYodGhpcy5fdGVTaHVQYWlTZWxlY3RlZCA9PSAwKXtcbiAgICAgICAgICAgIC8v5rKh6YCJ5LiKXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRlU2h1UGFpUmlnaHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90ZVNodVBhaVNlbGVjdGVkID0gbnVsbDtcblxuICAgICAgICAgICAgLy/lpoLmnpzluoTlrrbmqKHlvI/kuZ/msqHpgInkuIpcbiAgICAgICAgICAgIGlmKHRoaXMuX3podWFuZ1NlbGVjdGVkID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0SW5kZXggPSBudWxsO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICAvL+eCueWHu+eahOaXtuWAmeaKiuWLvuWPt+aJk+W8gO+8jOWwseaYr+mAieS4iueKtuaAgVxuICAgICAgICBlbHNlIGlmKHRoaXMuX3RlU2h1UGFpU2VsZWN0ZWQgPT0gbnVsbCl7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRlU2h1UGFpUmlnaHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3RlU2h1UGFpU2VsZWN0ZWQgPSAwO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RJbmRleCA9IDE7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX3podWFuZ1NlbGVjdGVkID09IDApe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Wmh1YW5nUmlnaHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5femh1YW5nU2VsZWN0ZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0SW5kZXggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2VsZWN0SW5kZXgpO1xuICAgIH0sXG59KTtcbiIsImNjLkNsYXNzKHtcclxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgLy8gZm9vOiB7XHJcbiAgICAgICAgLy8gICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgLy8gICAgdXJsOiBjYy5UZXh0dXJlMkQsICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxyXG4gICAgICAgIC8vICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICAgIC8vICAgIHZpc2libGU6IHRydWUsICAgICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgICAgIC8vICAgIGRpc3BsYXlOYW1lOiAnRm9vJywgLy8gb3B0aW9uYWxcclxuICAgICAgICAvLyAgICByZWFkb25seTogZmFsc2UsICAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIGZhbHNlXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAuLi5cclxuICAgICAgICBwYWk6Y2MuTm9kZSxcclxuICAgICAgICBtYXBhaTp7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6W10sXHJcbiAgICAgICAgICAgIHR5cGU6Y2MuU3ByaXRlRnJhbWUsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXHJcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdE1hID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChcInNlbGVjdF9tYVwiKTtcclxuICAgICAgICB0aGlzLnNlbGVjdE1hLm9uTG9hZCgpO1xyXG4gICAgICAgIHRoaXMuY29tID0gdGhpcy5wYWkuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjbGlja0J0bkNvbWZpcm06ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jb20uc3ByaXRlRnJhbWUgPSB0aGlzLm1hcGFpW2NjLmZyb20ubWFdO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5jb20uc3ByaXRlRnJhbWUpO1xyXG4gICAgfSxcclxuICAgIFxyXG5cclxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXHJcbiAgICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xyXG5cclxuICAgIC8vIH0sXHJcbn0pO1xyXG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICByaWdodEljb246W2NjLk5vZGVdLFxuICAgICAgICBtYXBhaVJpZ2h0OmNjLk5vZGVcbiAgICB9LFxuXG4gICAgLy8gdXNlIHRoaXMgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKGNjLmZyb20gPT0gbnVsbCl7XG4gICAgICAgICAgICBjYy5mcm9tID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy/lpoLmnpzkuI3luKbpqazvvIzliJnpqazniYzkuLrnqbpcbiAgICAgICAgaWYodGhpcy5tYXBhaVJpZ2h0LmFjdGl2ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICBjYy5mcm9tLmlzVXNlTWEgPSBmYWxzZTtcbiAgICAgICAgICAgIGNjLmZyb20ubWEgPSBudWxsO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGNjLmZyb20uaXNVc2VNYSA9IHRydWU7XG4gICAgICAgICAgICAvL+WQpuWImemprOeJjOm7mOiupOS4uuesrDDkuKrvvIzljbPpu5HmoYM1XG4gICAgICAgICAgICBjYy5mcm9tLm1hID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIGk9MDtpPHRoaXMucmlnaHRJY29uLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGlmKGk9PTApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0SWNvbltpXS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNjLmZyb20ubWEgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ID0gdGhpcy5yaWdodEljb25baV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0SWNvbltpXS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9LFxuICAgIG9uTWFQYWlDbGljazpmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciB0YXJnZXROYW1lID0gZS50YXJnZXQubmFtZTtcbiAgICAgICAgY2MubG9nKHRhcmdldE5hbWUpXG4gICAgICAgIGlmKHRhcmdldE5hbWUgIT0gdGhpcy5zZWxlY3QucGFyZW50Lm5hbWUpIHtcbiAgICAgICAgICAgIGlmKHRhcmdldE5hbWUgPT0gXCJzZWxlY3Rfa3VhbmcxXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdCA9IHRoaXMucmlnaHRJY29uWzJdO1xuICAgICAgICAgICAgICAgIGNjLmZyb20ubWEgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZih0YXJnZXROYW1lID09IFwic2VsZWN0X2t1YW5nMlwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QgPSB0aGlzLnJpZ2h0SWNvblsxXTtcbiAgICAgICAgICAgICAgICBjYy5mcm9tLm1hID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYodGFyZ2V0TmFtZSA9PSBcInNlbGVjdF9rdWFuZzNcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ID0gdGhpcy5yaWdodEljb25bMF07XG4gICAgICAgICAgICAgICAgY2MuZnJvbS5tYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IodmFyIGk9MDtpPHRoaXMucmlnaHRJY29uLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRJY29uW2ldLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWxlY3QuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhjYy5mcm9tLm1hKTtcbiAgICB9XG5cblxufSk7XG4iLCJjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBiZ05vZGU6Y2MuTm9kZSwgICAvL+mAieaLqeahhlxuICAgICAgICBzZWxlY3RlZE5vZGU6Y2MuTm9kZSwgIC8v5a+55Y+3XG4gICAgICAgIHBhaTpjYy5Ob2RlLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRydWU7XG4gICAgfSxcbiAgICBcbiAgICBjbGlja0FjdGlvbjpmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9ICF0aGlzLnNlbGVjdGVkO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZS5hY3RpdmUgPSB0aGlzLnNlbGVjdGVkO1xuICAgIH0sXG4gICAgXG4gICAgc2V0U2VsZWN0ZWQ6ZnVuY3Rpb24oc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTm9kZS5hY3RpdmUgPSB0aGlzLnNlbGVjdGVkO1xuICAgIH0sXG5cblxuICAgIC8qIyMjIyMqL1xuICAgIGNsaWNrU2VsZWN0S3Vhbmc6ZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSAhdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGUuYWN0aXZlID0gdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgY2MuZnJvbS5pc1VzZU1hID0gdGhpcy5zZWxlY3RlZDtcbiAgICAgICAgdmFyIG1hcGFpQ29tID0gdGhpcy5wYWkuZ2V0Q29tcG9uZW50KGNjLkJ1dHRvbik7XG4gICAgICAgIGlmKHRoaXMuc2VsZWN0ZWROb2RlLmFjdGl2ZSA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgbWFwYWlDb20uaW50ZXJhY3RhYmxlID0gZmFsc2U7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbWFwYWlDb20uaW50ZXJhY3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8vIGNhbGxlZCBldmVyeSBmcmFtZSwgdW5jb21tZW50IHRoaXMgZnVuY3Rpb24gdG8gYWN0aXZhdGUgdXBkYXRlIGNhbGxiYWNrXG4gICAgLy8gdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcblxuICAgIC8vIH0sXG59KTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIG5vZGVzOltjYy5Ob2RlXSxcbiAgICAgICAgc2VsZWN0ZWRJbmRleDogMCxcbiAgICB9LFxuLyrljp/mnaXnmoQqL1xuLyogICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaXNTZWxlY3RlZCA9ICh0aGlzLnNlbGVjdGVkSW5kZXggPT0gaSk7XG4gICAgICAgICAgICB0aGlzLm5vZGVzW2ldLmdldENvbXBvbmVudCgnc2VsZWN0Jykuc2V0U2VsZWN0ZWQoaXNTZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdENvbXAgPSB0aGlzLm5vZGVzW2ldLmdldENvbXBvbmVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICB0Q29tcC5pbmRleCA9IGk7XG4gICAgICAgICAgICB0Q29tcC5jbGlja0FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcCA9IHNlbGYubm9kZXNbaV0uZ2V0Q29tcG9uZW50KCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcC5zZXRTZWxlY3RlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBzZWxmLm9uU2VsZWN0Q2hhbmdlKHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG4qL1xuICAgIC8qIyMjIyovXG4gICAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaXNTZWxlY3RlZCA9ICh0aGlzLnNlbGVjdGVkSW5kZXggPT0gaSk7XG4gICAgICAgICAgICB0aGlzLm5vZGVzW2ldLmdldENvbXBvbmVudCgnc2VsZWN0Jykuc2V0U2VsZWN0ZWQoaXNTZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdENvbXAgPSB0aGlzLm5vZGVzW2ldLmdldENvbXBvbmVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICB0Q29tcC5pbmRleCA9IGk7XG4gICAgICAgICAgICB0Q29tcC5jbGlja0FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcCA9IHNlbGYubm9kZXNbaV0uZ2V0Q29tcG9uZW50KCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcC5zZXRTZWxlY3RlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICBzZWxmLm9uU2VsZWN0Q2hhbmdlKHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvblNlbGVjdENoYW5nZTogZnVuY3Rpb24gKHNlbGVjdEluZGV4KSB7XG4gICAgICAgIGNjLmxvZyhzZWxlY3RJbmRleCk7XG4gICAgfSxcbiAgICBcbn0pO1xuIiwiY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgaW5kaWNhdG9yTm9kZTpjYy5Ob2RlLFxuICAgICAgICBiYWNrZ3JvdW5kTm9kZTpjYy5Ob2RlLFxuICAgICAgICBzZWxlY3RlZE5vZGU6Y2MuTm9kZSxcblxuICAgICAgICB2YWx1ZTowLFxuICAgIH0sXG5cbiAgICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmluZGljYXRvck5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3JOb2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX01PVkUsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwdCA9IHNlbGYubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2UoY2MudjIoZXZlbnQuZ2V0TG9jYXRpb25YKCksZXZlbnQuZ2V0TG9jYXRpb25ZKCkpKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU2xpZGVyKHB0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yTm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwdCA9IHNlbGYubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2UoY2MudjIoZXZlbnQuZ2V0TG9jYXRpb25YKCksZXZlbnQuZ2V0TG9jYXRpb25ZKCkpKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU2xpZGVyKHB0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yTm9kZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwdCA9IHNlbGYubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2UoY2MudjIoZXZlbnQuZ2V0TG9jYXRpb25YKCksZXZlbnQuZ2V0TG9jYXRpb25ZKCkpKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU2xpZGVyKHB0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy90aGlzLm1heFdpZHRoID0gdGhpcy5ub2RlLndpZHRoIC0gNDA7XG4gICAgICAgIHRoaXMubWF4V2lkdGggPSB0aGlzLm5vZGUud2lkdGgtMjg7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy52YWx1ZSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZVNsaWRlcjpmdW5jdGlvbihwdCkge1xuICAgICAgICB2YXIgeCA9IHB0Lng7XG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeCA+IHRoaXMubWF4V2lkdGgpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0VmFsdWUoeC90aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKjAgLSAxKi9cbiAgICBzZXRWYWx1ZTpmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvL3RoaXMubWF4V2lkdGggPSB0aGlzLm5vZGUud2lkdGggLSAzODtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHRoaXMubm9kZS53aWR0aC0yODtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3JOb2RlLnggPSB0aGlzLnZhbHVlICogdGhpcy5tYXhXaWR0aCsxMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5vZGUud2lkdGggPSB0aGlzLnZhbHVlICogdGhpcy5tYXhXaWR0aCArIHRoaXMuaW5kaWNhdG9yTm9kZS53aWR0aC8yO1xuICAgIH0sXG5cbiAgICBvblZhbHVlQ2hhbmdlOmZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNjLmxvZyh2YWx1ZSk7XG4gICAgfSxcbn0pO1xuIiwidmFyIG1hbmFnZXIgPSByZXF1aXJlKCdtYW5hZ2VyJyk7XG5jb25zdCBLUUdsb2JhbEV2ZW50ID0gcmVxdWlyZSgnS1FHbG9iYWxFdmVudCcpO1xuY29uc3QgS1FOYXRpdmVJbnZva2UgPSByZXF1aXJlKCdLUU5hdGl2ZUludm9rZScpO1xuXG5sZXQgU29ja2V0Q29uc3RhbnQgPSB7XG4gIE1heFJlY29ubmVjdENoZWNrSW50ZXJ2YWw6IDUsIC8vIOmHjei/nuajgOa1i+aXtumXtOeJh1xufTtcblxuLyoqXG4gKiDov5nmmK/lr7kgV2ViU29ja2V0IOeahOS4gOS4quWwgeijhVxuICogXG4gKiDph4zpnaLljIXlkKvoh6rliqjph43ov57nmoTlip/og71cbiAqL1xubGV0IFNvY2tldCA9IGNjLkNsYXNzKHtcbiAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gIHByb3BlcnRpZXM6IHtcbiAgICBfbGFzdFJlY2VpdmVNc2dUaW1lOiAwLCAvLyDmnIDlkI7kuIDmrKHmlLbliLDmtojmga/ml7bpl7Qo5q+r56eSKVxuICAgIF90aW1lb3V0OiA4LCAvLyDotoXml7bml7bplb8g77yI56eS77yJXG4gIH0sXG5cbiAgc3RhdGljczoge1xuICAgIGluc3RhbmNlOiBudWxsLFxuICAgIHVybDogJ3dzOi8vMzkuMTA4LjExMi4xMTo1MDAxJyxcbiAgICAgLy91cmw6XCJ3czovLzE5Mi4xNjguMC4xMjA6NTAwMVwiLFxuICAgIC8vdXJsOlwid3M6Ly8xODMuMy4yMDUuMTQ5OjUwMDJcIixcbiAgfSxcblxuICAvLyB1c2UgdGhpcyBmb3IgaW5pdGlhbGl6YXRpb25cbiAgb25Mb2FkOiBmdW5jdGlvbiAoKSB7XG4gICAgU29ja2V0Lmluc3RhbmNlID0gdGhpcztcblxuICAgIHRoaXMubmFtZSA9IFwic29ja2V0XCI7XG5cbiAgICBjYy5nYW1lLmFkZFBlcnNpc3RSb290Tm9kZSh0aGlzLm5vZGUpO1xuICAgIGlmIChjYy5nYW1lLmlzUGVyc2lzdFJvb3ROb2RlKHRoaXMubm9kZSkpIHtcbiAgICAgIGNjLmxvZygn5re75Yqg5YWo5bGA6IqC54K5IFNvY2tldCDmiJDlip8nKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWdpc3RlckFwcEFjdGl2ZUNoYW5nZSgpO1xuXG4gICAgdGhpcy5pc0NyZWF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5jcmVhdGVJbmRleCA9IDA7XG4gICAgdGhpcy5jcmVhdGVTb2NrZXQoKTtcblxuICAgIHRoaXMuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpb24oKTtcbiAgICB9LCA1KTtcblxuICAgIHRoaXMucmVjdlRpbWUgPSBEYXRlLm5vdygpOyAvL+aOpeaUtuWIsOacgOaWsOS4gOadoeacjeWKoeWZqOeahOS/oeaBr+eahOaXtumXtFxuICAgIC8vY2MubG9nKG1hbmFnZXIudmVyc2lvbik7XG5cbiAgICB0aGlzLl9jaGVja1NvY2tldCgpO1xuICB9LFxuXG4gIGNoZWNrQ29ubmVjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIC8v5a6i5oi356uv5a6a5pe257uZ5pyN5Yqh56uv5Y+R6YCB54K55pWw5o2u77yM6Ziy5q2i6L+e5o6l55Sx5LqO6ZW/5pe26Ze05rKh5pyJ6YCa6K6v6ICM6KKr5p+Q5Lqb6IqC54K555qE6Ziy54Gr5aKZ5YWz6Zet5a+86Ie06L+e5o6l5pat5byA55qE5oOF5Ya144CCXG4gICAgdGhpcy5zZW5kTWVzc2FnZSgnY2hlY2tBY3Rpb24nLCAnJyk7XG4gIH0sXG5cbiAgY3JlYXRlU29ja2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuY3JlYXRlSW5kZXgrKzsgLy/liJvlu7rmrKHmlbDliqAxXG4gICAgaWYgKHRoaXMuY3JlYXRlSW5kZXggPiA1KSB7XG4gICAgICB0aGlzLm5ldHdvcmtFcnJvcigpO1xuICAgICAgS1FOYXRpdmVJbnZva2UuZm9yY2VFeGl0QXBwKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNDcmVhdGluZyA9IHRydWU7XG5cbiAgICBLUUdsb2JhbEV2ZW50LmVtaXQoU29ja2V0LkV2ZW50LlNvY2tldENvbm5lY3RpbmcpO1xuICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KFNvY2tldC51cmwpO1xuICAgIGlmICh0aGlzLndzID09PSBudWxsKSB7XG4gICAgICB0aGlzLm5ldHdvcmtFcnJvcigpO1xuICAgICAgS1FHbG9iYWxFdmVudC5lbWl0KFNvY2tldC5FdmVudC5Tb2NrZXRDb25uZWN0RXJyb3IsIHsnZGF0YSc6ICdTb2NrZXQg5Yib5bu65aSx6LSlJ30pO1xuICAgICAgS1FOYXRpdmVJbnZva2UuZm9yY2VFeGl0QXBwKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc29ja2V0RXJyb3IgPSBmYWxzZTtcblxuICAgIC8vIHNvY2tldCDov57mjqXmiJDlip9cbiAgICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy9jYy5sb2coXCJXZWJTb2NrZXQg6L+e5o6l5oiQ5Yqf77yaXCIsIGV2ZW50KTtcbiAgICAgIFxuICAgICAgc2VsZi5fbGFzdFJlY2VpdmVNc2dUaW1lID0gY2Muc3lzLm5vdygpO1xuICAgICAgS1FHbG9iYWxFdmVudC5lbWl0KFNvY2tldC5FdmVudC5Tb2NrZXRDb25uZWN0U3VjY2Vzc2VkLCBldmVudCk7XG5cbiAgICAgIHNlbGYuaXNDcmVhdGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5zb2NrZXRFcnJvciA9IGZhbHNlO1xuICAgICAgc2VsZi5jcmVhdGVJbmRleCA9IDA7XG4gICAgICBzZWxmLmNvbm5lY3Rpb25TdWNjZXNzKCk7XG4gICAgICBzZWxmLnNlbmRSZWNvbm5lY3RJbmZvKCk7XG4gICAgfTtcblxuICAgIC8vIHNvY2tldCDmjqXmlLbliLDmtojmga9cbiAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc2VsZi5fbGFzdFJlY2VpdmVNc2dUaW1lID0gY2Muc3lzLm5vdygpO1xuICAgICAgS1FHbG9iYWxFdmVudC5lbWl0KFNvY2tldC5FdmVudC5Tb2NrZXRSZWNlaXZlTWVzc2FnZSwgZXZlbnQuZGF0YSk7XG5cbiAgICAgIHNlbGYuaXNDcmVhdGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5zb2NrZXRFcnJvciA9IGZhbHNlO1xuICAgICAgc2VsZi5yZWNldmljZU1lc3NhZ2UoZXZlbnQuZGF0YSk7XG4gICAgICBzZWxmLl9kaXNwYXRjaFJlc3BvbnNlKGV2ZW50LmRhdGEpO1xuICAgICAgc2VsZi5yZWN2VGltZSA9IERhdGUubm93KCk7IC8v5o6l5pS25pyA5paw5LiA5p2h5L+h5oGv55qE5pe26Ze0XG5cbiAgICAgIC8qKi9cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogc29ja2V0IOWPkeeUn+mUmeivr1xuICAgICAqIFxuICAgICAqIHNvY2tldCDmnKzouqvmnIkgYG9uZXJyb3JgIOWbnuiwg++8jOS9huS6i+WunuivgeaYju+8jOWFtuS4jemdoOiwse+8jFxuICAgICAqIOacieW+iOWkp+eahOacuueOh+acieivr+aKpeeahOihjOS4uu+8jOW4uOW4uOWcqOayoeaciemUmeivr+aXtu+8jOS8mue7memUmeivr+Wbnuiwg+OAglxuICAgICAqIOS4lOS4jeiDveWumuWItui2heaXtuaXtumVv1xuICAgICAqIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFxuICAgICAqL1xuICAgIHRoaXMud3MuX2txX29uZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgY2MuZXJyb3IoYFdlYlNvY2tldCDov57mjqXplJnor6/vvJoke21lc3NhZ2V9YCk7XG5cbiAgICAgIEtRR2xvYmFsRXZlbnQuZW1pdChTb2NrZXQuRXZlbnQuU29ja2V0Q29ubmVjdEVycm9yLCB7ZGF0YTogbWVzc2FnZX0pO1xuICAgICAgc2VsZi53cy5jbG9zZSgpO1xuICAgICAgaWYgKCFzZWxmLndzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8g6Jm954S26LCD55So5LqGIHdlYnNvY2tldCDnmoQgY2xvc2Ug5pa55rOV77yM5L2G5pivXG4gICAgICAvLyDlroPlubbkvJrnq4vljbPosIPnlKggb25jbG9zZSDlm57osIPvvIzogIzmmK/lnKjmnKrmnaXnmoTmn5BcbiAgICAgIC8vIOS4gOaXtumXtOWGjeWbnuiwgyBvbmNsb3Nl77yb5L2G6L+Z6YeM5piO5pi+5Y+v5Lul55u05o6l5Zue6LCD5LqG44CCXG4gICAgICBsZXQgd3MgPSBzZWxmLndzO1xuXG4gICAgICBzZWxmLndzLm9uY2xvc2UoKTtcbiAgICAgIHdzLm9uY2xvc2UgPSBmdW5jdGlvbigpe307XG4gICAgfTtcblxuICAgIC8vIHNvY2tlIOW3suWFs+mXrVxuICAgIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy9jYy5sb2coJ1dlYlNvY2tldCDlt7LlhbPpl60gY2xvc2UgdGltZT0nICsgRGF0ZS5ub3coKSArIFwiIGV2ZW50OiBcIiArIGV2ZW50KTtcblxuXG4gICAgICBzZWxmLmlzQ3JlYXRpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYuc29ja2V0RXJyb3IgPSB0cnVlO1xuICAgICAgc2VsZi53cyA9IG51bGw7XG4gICAgICBzZWxmLmNvbm5lY3Rpb25EaXNjb25uZWN0KCk7XG4gICAgICBLUUdsb2JhbEV2ZW50LmVtaXQoU29ja2V0LkV2ZW50LlNvY2tldERpc2Nvbm5lY3QsIGV2ZW50KTtcbiAgICAgIC8vY2MubG9nKCdzb2NrZXQgY2xvc2UnK0pTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gICAgfTtcbiAgfSxcblxuICByZWNvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzZWxmLmlzQ3JlYXRpbmcgJiYgc2VsZi5zb2NrZXRFcnJvcikge1xuICAgICAgICBzZWxmLmNyZWF0ZVNvY2tldCgpO1xuICAgICAgfVxuICAgIH0sIDIpO1xuICB9LFxuXG4gIHNlbmRSZWNvbm5lY3RJbmZvOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnVzZXJJbmZvICE9IG51bGwpIHtcbiAgICAgICAgdmFyIHVzZXJJZCA9IHNlbGYudXNlckluZm8udXNlcl9pZCB8fCBzZWxmLnVzZXJJbmZvLmlkO1xuICAgICAgICBzZWxmLnNlbmRNZXNzYWdlKCdyZWNvbm5lY3QnLCB7XG4gICAgICAgICAgJ3VzZXJJZCc6IHVzZXJJZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCAxKTtcbiAgfSxcblxuICByZWNldmljZU1lc3NhZ2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gIH0sXG5cbiAgY29ubmVjdGlvbkRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIGNvbm5lY3Rpb25TdWNjZXNzOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICBuZXR3b3JrRXJyb3I6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIGNoZWNrTmV0d29ya1N0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICBjaGVja05ldHdvcmtFbmQ6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIF9kaXNwYXRjaFJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2VTdHJpbmcpIHtcbiAgICAvL2NjLmxvZyhcIldlYlNvY2tldCDmjqXmlLbliLDmnI3liqHlmajmtojmga/vvJpcIiwgcmVzcG9uc2VTdHJpbmcpO1xuICAgIGxldCByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2VTdHJpbmcpO1xuICAgIGxldCBhY3Rpb24gPSByZXNwb25zZVtcImFjdGlvblwiXTtcbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBLUUdsb2JhbEV2ZW50LmVtaXQoYWN0aW9uLCByZXNwb25zZSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIE1BUks6IOWJjeWQjuWPsOaTjeS9nFxuICBfcmVnaXN0ZXJBcHBBY3RpdmVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAvL2NjLmxvZyhcIldlYlNvY2tldCDms6jlhozlupTnlKjov5vlhaXliY3jgIHlkI7lj7Dkuovku7ZcIik7XG4gICAgY2MuZ2FtZS5vbihjYy5nYW1lLkVWRU5UX0hJREUsIHRoaXMuX2FwcEVudGVyQmFja2dyb3VuZCwgdGhpcyk7XG4gICAgY2MuZ2FtZS5vbihjYy5nYW1lLkVWRU5UX1NIT1csIHRoaXMuX2FwcEJlY29tQWN0aXZlLCB0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICog6L+b5YWl5ZCO5Y+wXG4gICAqL1xuICBfYXBwRW50ZXJCYWNrZ3JvdW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG5vdyA9IGNjLnN5cy5ub3coKTtcbiAgICBpZiAobm93IC0gdGhpcy5fbGFzdEFwcEVudGVyQmFja2dyb3VuZFRpbWUgPCAxMDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEFwcEVudGVyQmFja2dyb3VuZFRpbWUgPSBub3c7XG4gICAgXG4gICAgLy9jYy5sb2coXCJXZWJTb2NrZXQg5qOA5rWL5Yiw5bqU55So6L+b5YWl5ZCO5Y+w77yaXCIsIG5ldyBEYXRlKCkpO1xuICAgIGxldCBpZCA9IHRoaXMudXNlckluZm8gPyB0aGlzLnVzZXJJbmZvLmlkIDogdW5kZWZpbmVkO1xuICAgIFNvY2tldC5zZW5kQXBwUGF1c2UoaWQpO1xuICAgIHRoaXMuX2NhbmNlbENoZWNrU29ja2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOi/m+WFpeWJjeWPsCBcbiAgICovXG4gIF9hcHBCZWNvbUFjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgIGxldCBub3cgPSBjYy5zeXMubm93KCk7XG4gICAgaWYgKG5vdyAtIHRoaXMuX2xhc3RBcHBCZWNvbUFjdGl2ZVRpbWUgPCAxMDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEFwcEJlY29tQWN0aXZlVGltZSA9IG5vdztcblxuICAgIC8vY2MubG9nKFwiV2ViU29ja2V0IOajgOa1i+WIsOW6lOeUqOi/m+WFpeWJjeWPsO+8mlwiLCBuZXcgRGF0ZSgpKTtcbiAgICBsZXQgaWQgPSB0aGlzLnVzZXJJbmZvID8gdGhpcy51c2VySW5mby5pZCA6IHVuZGVmaW5lZDtcbiAgICBTb2NrZXQuc2VuZEFwcEFjdGl2ZShpZCk7XG4gICAgdGhpcy5fY2hlY2tTb2NrZXQoKTtcblxuICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY2hlY2tTb2NrZXRFeGVjdXRlKCk7XG4gICAgfS5iaW5kKHRoaXMpLCAxLjUpO1xuICB9LFxuXG4gIC8v6L+b5YWl5ZCO5Y+w5pON5L2cXG4gIGVudGVyYmFja2dyb3VkQWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYXBwRW50ZXJCYWNrZ3JvdW5kKCk7XG4gIH0sXG5cbiAgLy/ov5vlhaXliY3lj7Dmk43kvZxcbiAgcmVzdW1lQWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgLy/mo4Dmn6XnvZHnu5xcbiAgICB0aGlzLl9jaGVja05ldHdvcmsoKTtcbiAgICB0aGlzLl9hcHBCZWNvbUFjdGl2ZSgpO1xuICB9LFxuXG4gIHNlbmRNZXNzYWdlOiBmdW5jdGlvbiAoYWN0aW9uLCBkYXRhKSB7XG4gICAgZGF0YSA9IHRoaXMuX3N0cm9uZ1ZlcmlmeURhdGEoZGF0YSk7XG5cbiAgICBpZiAodGhpcy5zb2NrZXRFcnJvcikge1xuICAgICAgY2MuZXJyb3IoXCJzb2NrZXQg6L+e5o6l6ZSZ6K+v77yaXCIgKyB0aGlzLnNvY2tldEVycm9yKTtcbiAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vY2MubG9nKCdXZWJTb2NrZXQg5Y+R6YCB5raI5oGv77yaJyArIGFjdGlvbiwgZGF0YSk7XG4gICAgaWYgKGNjLnN5cy5pc09iamVjdFZhbGlkKHRoaXMud3MpKSB7XG4gICAgICBpZiAodGhpcy53cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICB0aGlzLndzLnNlbmQodGhpcy5fY29udmVydFBhcmFtZXRlclRvU3RyaW5nKGFjdGlvbiwgZGF0YSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25EaXNjb25uZWN0KCk7XG4gICAgfVxuICB9LFxuXG4gIF9zdHJvbmdWZXJpZnlEYXRhOiBmdW5jdGlvbihkYXRhID0ge30pIHtcbiAgICBpZiAoKHR5cGVvZiBkYXRhKSA9PSAnc3RyaW5nJykge1xuICAgICAgZGF0YSA9IHtcInN0cmluZ1wiOiBkYXRhfTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICBkYXRhID0ge307XG4gICAgfVxuXG4gICAgaWYgKCFkYXRhW1widXNlcklkXCJdKSB7XG4gICAgICBpZiAodGhpcy51c2VySW5mbyAmJiAodHlwZW9mIHRoaXMudXNlckluZm8pID09ICdvYmplY3QnICYmIHRoaXMudXNlckluZm8uaWQpIHtcbiAgICAgICAgZGF0YVtcInVzZXJJZFwiXSA9IHRoaXMudXNlckluZm8uaWQ7XG4gICAgICB9XG5cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0sXG5cbiAgX2NvbnZlcnRQYXJhbWV0ZXJUb1N0cmluZzogZnVuY3Rpb24gKGFjdGlvbiwgZGF0YSA9IHt9KSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIG9iai5hY3Rpb24gPSBhY3Rpb247XG4gICAgb2JqLmRhdGEgPSBkYXRhO1xuICAgIFxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xuICB9LFxuXG4gIC8vIOajgOafpee9kee7nFxuICBfY2hlY2tOZXR3b3JrOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tOZXR3b3JrTm93KSB7XG4gICAgICB0aGlzLmNoZWNrTmV0d29ya05vdygpO1xuICAgIH1cblxuICAgIHRoaXMuc2hvdWxkQ2hlY2sgPSB0cnVlO1xuICAgIGlmICghdGhpcy5zb2NrZXRFcnJvcikge1xuICAgICAgdGhpcy5yZWN2VGltZSA9IDA7XG4gICAgICB0aGlzLnNlbmRNZXNzYWdlKCdjaGVja0FjdGlvbicsICcnKTtcbiAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jaGVja05ldHdvcmtFbmQoKTtcbiAgICAgICAgdGhpcy5zaG91bGRDaGVjayA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5yZWN2VGltZSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbkRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSwgMi41KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25uZWN0aW9uRGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfSxcblxuICAvLyBNQVJLOiBzb2NrZXQg5o6J57q/5bC95pep56Gu6K6kXG4gIF9jaGVja1NvY2tldDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2NoZWR1bGUodGhpcy5fY2hlY2tTb2NrZXRFeGVjdXRlLCBTb2NrZXRDb25zdGFudC5NYXhSZWNvbm5lY3RDaGVja0ludGVydmFsLCBjYy5tYWNyby5SRVBFQVRfRk9SRVZFUik7XG4gIH0sXG5cbiAgX2NhbmNlbENoZWNrU29ja2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51bnNjaGVkdWxlKHRoaXMuX2NoZWNrU29ja2V0RXhlY3V0ZSk7XG4gIH0sXG5cbiAgX2NoZWNrU29ja2V0RXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9pc1NvY2tldFRpbWVvdXQoKSAmJiB0aGlzLndzKSB7XG4gICAgICB0aGlzLndzLl9rcV9vbmVycm9yKCfov57mjqXotoXml7YnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0sXG5cbiAgLy8gc29ja2V0IOaYr+WQpuW3sui2heaXtlxuICBfaXNTb2NrZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RSZWNlaXZlTWVzc2FnZUludGVydmFsKCkgPj0gdGhpcy5fdGltZW91dDtcbiAgfSxcblxuICAvLyDkuIrkuIDmrKHmlLbliLDmtojmga/liLDnjrDlnKjnmoTml7bpl7Tpl7TpmpRcbiAgX2xhc3RSZWNlaXZlTWVzc2FnZUludGVydmFsOiBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG5vdyA9IGNjLnN5cy5ub3coKTtcbiAgICBsZXQgaW50ZXJ2YWwgPSAobm93IC0gdGhpcy5fbGFzdFJlY2VpdmVNc2dUaW1lKSAvIDEwMDA7XG4gICAgLy9jYy5sb2coYFdlYlNvY2tldCDnjrDlnKjot53kuIrkuIDmnaHmlLbliLDmtojmga/nmoTml7bpl7Tpl7TpmpTmmK/vvJoke2ludGVydmFsfSDnp5JgKTtcbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH0sXG5cbn0pO1xuXG4vLyBNQVJLOiBTb2NrZXQg5LqL5Lu25a6a5LmJXG5Tb2NrZXQuRXZlbnQgPSB7XG4gIFNvY2tldENvbm5lY3Rpbmc6IFwiU29ja2V0Q29ubmVjdGluZ1wiLCAgICAgICAgICAgICAvLyBTb2NrZXQg5q2j5Zyo6L+e5o6lXG4gIFNvY2tldENvbm5lY3RTdWNjZXNzZWQ6IFwiU29ja2V0Q29ubmVjdFN1Y2Nlc3NlZFwiLCAvLyDov57mjqXmiJDlip9cbiAgU29ja2V0RGlzY29ubmVjdDogXCJTb2NrZXREaXNjb25uZWN0XCIsICAgICAgICAgLy8gU29ja2V0IOaWreW8gOi/nuaOpVxuICBTb2NrZXRDb25uZWN0RXJyb3I6IFwiU29ja2V0Q29ubmVjdEVycm9yXCIsICAgICAvLyBTb2NrZXQg6L+e5o6l6ZSZ6K+vXG4gIFNvY2tldFJlY2VpdmVNZXNzYWdlOiBcIlNvY2tldFJlY2VpdmVNZXNzYWdlXCIsIC8vIFNvY2tldCDmjqXmlLbliLDmtojmga9cblxuICBJbnZpdGVDb2RlOiBcImludml0ZUNvZGVcIiwgICAgICAgICAgICAgLy8g5a6i5oi356uv5Y+R6YCBICAg6YKA6K+356CBXG4gIEpvaW5EZXNrOiBcImpvaW5EZXNrXCIsICAgICAgICAgICAgICAgICAvLyDlrqLmiLfnq6/lj5HpgIFcbiAgQ3JlYXRlRGVzazogXCJjcmVhdGVEZXNrXCIsICAgICAgICAgICAgIC8vIOWuouaIt+err+WPkemAgVxuICBMZWF2ZURlc2s6IFwibGVhdmVEZXNrXCIsICAgICAgICAgICAgICAgLy8g56a75byA5qGM5a2QXG4gIERpc3NvbHZlRGVzazogXCJkaXNzb2x2ZURlc2tcIiwgICAgICAgICAvLyDop6PmlaPmoYzlrZBcbiAgQW5zd2VyRGlzc29sdmU6IFwiYW5zd2VyRGlzc29sdmVcIiwgICAgIC8vIOWbnuetlOivt+axgumAgOWHuuWRveS7pFxuICBHZXREZXNrSW5mbzogXCJnZXREZXNrSW5mb1wiLCAgICAgICAgICAgLy8g5a6i5oi356uv5Y+R6YCBXG4gIFNlbmRJbWFnZTogXCJzZW5kSW1hZ2VcIiwgICAgICAgICAgICAgICAvLyDlrqLmiLfnq6/lj5HpgIFcbiAgU2VuZFRleHQ6IFwic2VuZFRleHRcIiwgICAgICAgICAgICAgICAgIC8vIOWuouaIt+err+WPkemAgVxuICBTZW5kQXVkaW9NZXNzYWdlOiBcInNlbmRBdWRpb01lc3NhZ2VcIiwgLy8g5a6i5oi356uv5Y+R6YCBICDlj5HpgIHor63pn7Pmtojmga9cbiAgR2V0UmVjb3JkOiBcImdldFJlY29yZFwiLCAgICAgICAgICAgICAgIC8vIOiOt+WPluaImOe7qeS/oeaBr1xuICBHZXRJdGVtUmVjb3JkOiBcImdldEl0ZW1SZWNvcmRcIiwgICAgICAgLy8g6I635Y+W5oiY57up5L+h5oGvXG4gIFBsYXlDYXJkOiBcInBsYXlDYXJkXCIsICAgICAgICAgICAgICAgICAvLyDlrqLmiLfnq6/lj5HpgIHvvIznlKjmiLfmiZPlh7rniYxcbiAgVGltZW91dERpc3NvbHZlOiBcInRpbWVvdXREaXNzb2x2ZVwiLCAgIC8vIOivt+axgumAgOWHuui2heaXtuaXtu+8jOmcgOimgeWPkeWHuueahOa2iOaBr1xuICBGZWVkYmFjazogXCJmZWVkYmFja1wiLCAgICAgICAgIC8vIOWuouaIt+err+WPkemAgSAg5Y+N6aaI5L+h5oGvXG4gIFNoYXJlUG5nOiBcInNoYXJlUG5nXCIsICAgICAgICAgLy8g5a6i5oi356uv5Y+R6YCBICDliIbkuqvpooblj5bnoJbnn7NcbiAgRW50ZXJSYW5kb206IFwiaW50ZXJSYW5kb21cIiwgICAvLyDlrqLmiLfnq6/lj5HpgIEgIOi/m+WFpemaj+acuuWculxuICBDYW5jZWxSYW5kb206IFwiY2FuY2VsUmFuZG9tXCIsIC8vIOWuouaIt+err+WPkemAgSAg5Y+W5raI6L+b5YWl6ZqP5py65Zy6XG4gIEZvcmNlRXhpdFJhbmRvbTogXCJkaXNzb2x2ZVwiLCAgLy8g5a6i5oi356uv5Y+R6YCBIOW8uuWItumAgOWHuumaj+acuuWculxuICBSZWFkeTogXCJyZWFkeVwiLCAgICAgICAgICAgICAgIC8vIOWuouaIt+err+WPkemAgSDlh4blpIdcbiAgR2V0SGFsbEluZm86IFwiZ2V0SGFsbEluZm9cIiwgICAvLyDlrqLmiLfnq6/lj5HpgIEg6I635Y+W5aSn5Y6F5L+h5oGvXG4gIEdldFVzZXJJbmZvOiBcImdldFVzZXJJbmZvXCIsICAgLy8g5a6i5oi356uv5Y+R6YCBIOiOt+WPlueUqOaIt+S/oeaBr1xuICBDaGVja0FjdGlvbjogXCJjaGVja0FjdGlvblwiLCAgIC8vIOWuouaIt+err+WPkemAge+8jOeUqOadpeajgOa1i+S4juacjeWKoeWZqOeahOi/numAmuaAp1xuICBQYXVzZTogXCJwYXVzZVwiLCAgICAgICAgICAgICAgIC8vIOWuouaIt+err+i/m+WFpeWQjuWPsOaXtuimgeWPkemAgeeahOa2iOaBr1xuICBBY3RpdmU6IFwiYWN0aXZlXCIsICAgICAgICAgICAgIC8vIOWuouaIt+err+WbnuWIsOWJjeWPsOaXtuimgeWPkemAgeeahOa2iOaBr1xuXG4gIFJlY2VpdmVSZXF1ZXN0RGlzc29sdmU6IFwicmVxdWVzdERpc3NvbHZlXCIsIC8vIOivt+axguino+aVo+ahjOWtkCDmnI3liqHlmajlj5HpgIFcbiAgUmVjZWl2ZVJlcXVlc3REaXNzb2x2ZVJlc3VsdDogXCJyZXF1ZXN0RGlzc29sdmVSZXN1bHRcIiwgLy8g6K+35rGC6Kej5pWj5qGM5a2Q57uT5p6cXG4gIFJlY2VpdmVDaGF0VGV4dDogXCJzZW5kVGV4dFwiLCAvLyDmnI3liqHlmajlj5HpgIFcbiAgUmVjZWl2ZURlc2tJbmZvOiBcImRlc2tJbmZvXCIsIC8vIOacjeWKoeWZqOWPkemAgVxuICBSZWNlaXZlR2FtZU92ZXI6IFwiZ2FtZU92ZXJcIiwgLy8g5pyN5Yqh5Zmo5Y+R6YCBXG4gIFJlY2VpdmVGYVBhaTogXCJmYXBhaVwiLCAvLyDmnI3liqHlmajlj5HpgIFcbiAgUmVjZWl2ZVNoYXJlUG5nOiBcInNoYXJlUG5nc1wiLCAvLyDmnI3liqHlmajlj5HpgIFcbiAgUmVjZWl2ZU9ubGluZVN0YXR1czogXCJzZW5kT25saW5lU3RhdHVzXCIsIC8vIOacjeWKoeWZqOWPkemAgVxuICBSZWNlaXZlQXVkaW9NZXNzYWdlOiBcInNlbmRBdWRpb01lc3NhZ2VcIiwgLy8g5pyN5Yqh5Zmo5Y+R6YCB77yM5o6l5pS25Yiw55So5oi35Y+R6YCB5LqG6K+t6Z+z5raI5oGvXG4gIFJlY2VpdmVQbGF5Q2FyZDogXCJwbGF5Q2FyZFwiLCAvLyDmnI3liqHlmajlj5HpgIHvvIzmnInnlKjmiLflt7Lnu4/lh4blpIflpb3niYxcbiAgUmVjZWl2ZUNyZWF0ZURlc2s6IFwiY3JlYXRlRGVza1wiLCAvLyDmnI3liqHlmajlj5HpgIHvvIzliJvlu7rmiL/pl7TnmoTlm57osINcbiAgUmVjZWl2ZVJlYWR5OiBcInJlYWR5XCIsIC8vIOacjeWKoeWZqOWPkemAge+8jOacieeUqOaIt+eCueWHu+S6huWHhuWkh1xuICBSZWNlaXZlSGFsbEluZm86IFwiZ2V0SGFsbEluZm9cIiwgLy8g5pyN5Yqh5Zmo5Y+R6YCBXG4gIFJlY2VpdmVHZXRVc2VySW5mbzogXCJnZXRVc2VySW5mb1wiLCAvLyDmnI3liqHlmajlj5HpgIEg6I635Y+W55So5oi35L+h5oGvXG4gIFJlY2VpdmVDaGVja0FjdGlvbjogXCJjaGVja0FjdGlvblwiLCAvLyDmnI3liqHlmajlj5HpgIEgIOeUqOadpeehruiupCBTb2NrZXQg6L+Y5Zyo6L+e552AXG4gIFJlY2VpdmVGb3JjZUV4aXQ6IFwiZm9yY2VFeGl0XCIsIC8vIOacjeWKoeWZqOWPkemAgSAg55So5p2l5L2/5a6i5oi356uv5by66YCAXG4gIFJlY2VpdmVEaXNzb2x2ZURlc2s6IFwiZGlzc29sdmVEZXNrXCIsIC8vIOacjeWKoeWZqOWPkemAgSAgIOW9k+aIv+S4u+mAgOWHuuaXtu+8jOino+aVo+ahjOWtkFxuICBSZWNlaXZlSW50ZXJSYW5kb206IFwiaW50ZXJSYW5kb21cIiwgICAvLyDmnI3liqHlmajlj5HpgIEgICDov5vlhaXpmo/mnLrlnLrnmoTlj43ppohcbiAgUmVjZWl2ZVBhdXNlOiBcInBhdXNlXCIsICAgICAgICAgICAgICAgLy8g5pyN5Yqh5Zmo5Y+R6YCBICAg5b2T5pyJ55So5oi36K6+5aSH6L+b5YWl5ZCO5Y+w5pe277yM5Lya5pS25Yiw6L+Z5p2h5raI5oGvXG4gIFJlY2VpdmVJbnZpdGVDb2RlOiAnaW52aXRlQ29kZScsICAgICAvLyDmnI3liqHlmajlj5HpgIHvvIzmlLbliLDpgoDor7fnoIHnmoTmtojmga9cbiAgLyoqL1xuICBSZWNlaXZlTGVhdmVEZXNrOiAnbGVhdmVEZXNrJywgLy8g5pyN5Yqh5Zmo5Y+R6YCB77yM5pS25Yiw6ZyA6KaB56a75byA5qGM5a2Q55qE5raI5oGvXG4gIC8qKi9cbn07XG5cbi8vIE1BUks6IFNvY2tldCDmj5DkvpvnmoTlj6/lj5Hnu5nmnI3liqHlmajmtojmga/nmoTmlrnms5VcblxuU29ja2V0LnNlbmRDaGVja0FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuQ2hlY2tBY3Rpb24sIG51bGwpO1xufTtcbi8qKi9cblNvY2tldC5zZW5kRGlkUmVjZWl2ZUdhbWVPdmVyQWN0aW9uID0gZnVuY3Rpb24gKHVzZXJJZCkge1xuICBjb25zdCBwYXJhbSA9IHVzZXJJZCA/IHtcInVzZXJJZFwiOiB1c2VySWR9IDogbnVsbDtcbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZShTb2NrZXQuRXZlbnQuRGlkUmVjZWl2ZUdhbWVPdmVyQWN0aW9uLCBwYXJhbSk7XG59O1xuLyoqL1xuXG5cbi8qKlxuICog5b2TIEFQUCDov5vlhaXlkI7lj7Dml7bopoHlj5HpgIHnmoTmtojmga9cbiAqL1xuU29ja2V0LnNlbmRBcHBQYXVzZSA9IGZ1bmN0aW9uKHVzZXJJZCkge1xuICBsZXQgcGFyYW0gPSB1c2VySWQgPyB7XCJ1c2VySWRcIjogdXNlcklkfSA6IG51bGw7XG4gIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5QYXVzZSwgcGFyYW0pO1xufTtcblxuLyoqXG4gKiDlvZMgQVBQIOi/m+WFpeWJjeWPsOaXtuWPkemAgeeahOa2iOaBr1xuICovXG5Tb2NrZXQuc2VuZEFwcEFjdGl2ZSA9IGZ1bmN0aW9uKHVzZXJJZCkge1xuICBsZXQgcGFyYW0gPSB1c2VySWQgPyB7XCJ1c2VySWRcIjogdXNlcklkfSA6IG51bGw7XG4gIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5BY3RpdmUsIHBhcmFtKTtcbn07XG5cbi8vIOW8gOaIv1xuU29ja2V0LnNlbmRDcmVhdGVEZXNrID0gZnVuY3Rpb24gKGNyZWF0ZURlc2NJbmZvLCB1c2VySWQpIHtcbiAgY2MuYXNzZXJ0KGNyZWF0ZURlc2NJbmZvKTtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG5cbiAgY3JlYXRlRGVzY0luZm9bXCJ1c2VySWRcIl0gPSB1c2VySWQ7XG4gIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5DcmVhdGVEZXNrLCBjcmVhdGVEZXNjSW5mbyk7XG59O1xuXG4vLyDliqDlhaXmiL/pl7RcblNvY2tldC5zZW5kSm9pbkRlc2sgPSBmdW5jdGlvbiAocm9vbUlkLCB1c2VySWQpIHtcbiAgY2MuYXNzZXJ0KHJvb21JZCk7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuXG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInJvb21JZFwiOiByb29tSWQsXG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuSm9pbkRlc2ssIHBhcmFtKTtcbn07XG5cbi8vIOWPkemAgemCgOivt+eggVxuU29ja2V0LnNlbmRJbnZpdGVDb2RlID0gZnVuY3Rpb24oaW52aXRlQ29kZSx1c2VySWQpe1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJpbnZpdGVDb2RlXCI6IGludml0ZUNvZGUsXG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuSW52aXRlQ29kZSwgcGFyYW0pO1xufTtcblxuLy8g6I635Y+W5oi/6Ze05L+h5oGvXG5Tb2NrZXQuc2VuZEdldERlc2NrSW5mbyA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gIH07XG5cbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LkdldERlc2tJbmZvLCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZFRleHQgPSBmdW5jdGlvbiAodXNlcklkLCB0ZXh0KSB7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuICBjYy5hc3NlcnQodGV4dCk7XG4gIGxldCBwYXJhbSA9IHtcbiAgICBcIm1zZ1wiOiB0ZXh0LFxuICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgfTtcbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LlNlbmRUZXh0LCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZEF1ZGlvTWVzc2FnZSA9IGZ1bmN0aW9uICh1c2VySWQsIHVybCA9IFwiXCIpIHtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG4gIGNjLmFzc2VydCh1cmwubGVuZ3RoID4gMCk7XG5cbiAgaWYgKHVybC5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInVybFwiOiB1cmwsXG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuU2VuZEF1ZGlvTWVzc2FnZSwgcGFyYW0pO1xufTtcblxuU29ja2V0LnNlbmRJbWFnZSA9IGZ1bmN0aW9uICh1c2VySWQsIGltYWdlKSB7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuICBjYy5hc3NlcnQoaW1hZ2UpO1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJtc2dcIjogaW1hZ2UsXG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuU2VuZEltYWdlLCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZEdldFJlY3JvZCA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gIH07XG5cbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LkdldFJlY29yZCwgcGFyYW0pO1xufTtcblxuU29ja2V0LnNlbmREaXNzb2x2ZURlc2sgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuRGlzc29sdmVEZXNrLCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZEdldEl0ZW1SZWNvcmQgPSBmdW5jdGlvbiAodXNlcklkLCBwYXJlbnRJZCkge1xuICBjYy5hc3NlcnQodXNlcklkKTtcbiAgY2MuYXNzZXJ0KHBhcmVudElkKTtcbiAgbGV0IHBhcmFtID0ge1xuICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgICBcInBhcmVudElkXCI6IHBhcmVudElkLFxuICB9O1xuXG4gIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5HZXRJdGVtUmVjb3JkLCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZExlYXZlRGVzayA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICBjYy5hc3NlcnQodXNlcklkKTtcbiAgICBsZXQgcGFyYW0gPSB7XG4gICAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gICAgfTtcblxuICAgIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5MZWF2ZURlc2ssIHBhcmFtKTtcbn0sXG5cbi8qKlxuICog5Zue562U6YCA5oi/6K+35rGCXG4gKiBcbiAqIEBwYXJhbSAge051bWJlcn0gdXNlcklkIOW9k+WJjeeUqOaItyBpZFxuICogQHBhcmFtICB7TlVtYmVyfSBhbnN3ZXI9MSDlm57nrZTjgIIxIOihqOekuuWQjOaEj++8myAwIOihqOekuuaLkue7ne+8myAtMSDooajnpLrmnKrpgInmi6lcbiAqL1xuU29ja2V0LnNlbmRBbnN3ZXJEaXNzb2x2ZSA9IGZ1bmN0aW9uICh1c2VySWQsIGFuc3dlciA9IDApIHtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gICAgXCJhbnN3ZXJcIjogYW5zd2VyXG4gIH07XG5cbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LkFuc3dlckRpc3NvbHZlLCBwYXJhbSk7XG59LFxuXG4gIFNvY2tldC5zZW5kRm9yY2VFeGl0Um9vbSA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICBjYy5hc3NlcnQodXNlcklkKTtcbiAgICBsZXQgcGFyYW0gPSB7XG4gICAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gICAgfTtcblxuICAgIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5EaXNzb2x2ZURlc2ssIHBhcmFtKTtcbiAgfSxcblxuICAvLyDljYHkuInlvKDkuK1cbiAgLy8gY2FyZEluZm8g57G75Ly85LqO77yaXG4gIC8vIFt7XG4gIC8vICAgICAgICAgJ2NhcmRzJzpbeydzdWl0JzpzdWl0LCdudW1iZXInOm51bWJlcn0se31dLC8v54m55q6K54mM5LiN55So5LygXG4gIC8vICAgICAgICAgJ3R5cGUnOjAsXG4gIC8vICAgICAgICAgJ3ZhbHVlJzo0LFxuICAvLyAgICAgICAgICdpc0NvbnRhaW5FeHRyYSc6dHJ1ZSwvLyDnibnmrorniYzmmK/lkKbljIXlkKvnibnmrorniYxcbiAgLy8gICAgIH0sXG4gIC8vICAgICB7XG4gIC8vICAgICAgICAgJ2NhcmRzJzpbeydzdWl0JzpzdWl0LCdudW1iZXInOm51bWJlcn0se31dLFxuICAvLyAgICAgICAgICd0eXBlJzowLFxuICAvLyAgICAgICAgICd2YWx1ZSc6NFxuICAvLyAgICAgfV1cblNvY2tldC5zZW5kUGxheUNhcmQgPSBmdW5jdGlvbiAodXNlcklkLCBjYXJkSW5mbykge1xuICAgIGNjLmFzc2VydCh1c2VySWQpO1xuICAgIGxldCBwYXJhbSA9IHtcbiAgICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgICAgIFwiY2FyZFwiOiBjYXJkSW5mb1xuICAgIH07XG5cbiAgICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuUGxheUNhcmQsIHBhcmFtKTtcbn07XG5cblNvY2tldC5zZW5kVGltZW91dERpc3NvbHZlID0gZnVuY3Rpb24gKHVzZXJJZCkge1xuICBjYy5hc3NlcnQodXNlcklkKTtcbiAgbGV0IHBhcmFtID0ge1xuICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgfTtcblxuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuVGltZW91dERpc3NvbHZlLCBwYXJhbSk7XG59O1xuXG5Tb2NrZXQuc2VuZEZlZWRiYWNrID0gZnVuY3Rpb24gKHVzZXJJZCwgdGV4dCkge1xuICBjYy5hc3NlcnQodXNlcklkKTtcbiAgY2MuYXNzZXJ0KHRleHQpO1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICAgIFwidGV4dFwiOiB0ZXh0XG4gIH07XG5cbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LkZlZWRiYWNrLCBwYXJhbSk7XG59XG5cblNvY2tldC5zZW5kU2hhcmVQbmcgPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuU2hhcmVQbmcsIHBhcmFtKTtcbn07XG4vLyDlvIDlp4vljLnphY3pmo/mnLrlnLpcblNvY2tldC5zZW5kRW50ZXJSYW5kb20gPSBmdW5jdGlvbiAodXNlcklkKSB7XG4gIGNjLmFzc2VydCh1c2VySWQpO1xuICBsZXQgcGFyYW0gPSB7XG4gICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICB9O1xuXG4gIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5FbnRlclJhbmRvbSwgcGFyYW0pO1xufTtcblxuLy8g5Y+W5raI5Yy56YWN6ZqP5py65Zy6XG5Tb2NrZXQuc2VuZENhbmNlbFJhbmRvbSA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgY2MuYXNzZXJ0KHVzZXJJZCk7XG4gIGxldCBwYXJhbSA9IHtcbiAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gIH07XG5cbiAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LkNhbmNlbFJhbmRvbSwgcGFyYW0pO1xufTtcblxuLy8g5YeG5aSHXG5Tb2NrZXQuc2VuZFJlYWR5ID0gZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgIGNjLmFzc2VydCh1c2VySWQpO1xuICAgIGxldCBwYXJhbSA9IHtcbiAgICAgIFwidXNlcklkXCI6IHVzZXJJZCxcbiAgICB9O1xuXG4gICAgdGhpcy5pbnN0YW5jZS5zZW5kTWVzc2FnZSh0aGlzLkV2ZW50LlJlYWR5LCBwYXJhbSk7XG4gIH0sXG5cbi8vIOiOt+WPluWkp+WOheS/oeaBr1xuU29ja2V0LnNlbmRHZXRIYWxsSW5mbyA9IGZ1bmN0aW9uICh1c2VySWQpIHtcbiAgICBsZXQgcGFyYW0gPSB7XG4gICAgICBcInVzZXJJZFwiOiB1c2VySWQsXG4gICAgfTtcblxuICAgIHRoaXMuaW5zdGFuY2Uuc2VuZE1lc3NhZ2UodGhpcy5FdmVudC5HZXRIYWxsSW5mbywgcGFyYW0pO1xufSxcblxuLy8g6I635Y+W55So5oi35L+h5oGvXG5Tb2NrZXQuc2VuZEdldFVzZXJJbmZvID0gZnVuY3Rpb24gKHVzZXJJZCwgb3BlbklkKSB7XG4gICAgbGV0IHBhcmFtID0ge1xuICAgICAgXCJ1c2VySWRcIjogdXNlcklkLFxuICAgICAgXCJvcGVuSWRcIjogb3BlbklkLFxuICAgIH07XG5cbiAgICB0aGlzLmluc3RhbmNlLnNlbmRNZXNzYWdlKHRoaXMuRXZlbnQuR2V0VXNlckluZm8sIHBhcmFtKTtcbn0sXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0OyIsImNvbnNvbGUubG9nKDI8MikiLCJjb25zdCBBdWRpb01hbmFnZXIgPSByZXF1aXJlKCdBdWRpb01hbmFnZXInKTtcbmNvbnN0IFBsYXliYWNrID0gcmVxdWlyZSgnUGxheWJhY2snKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgc3ByaXRlQXZhdGFyOiBjYy5TcHJpdGUsXG4gICAgICAgIGxhYmVsTmlja25hbWU6IGNjLkxhYmVsLFxuICAgICAgICBsYWJlbFNjb3JlOiBjYy5MYWJlbCxcbiAgICAgICAgc3ByaXRlT2ZmbGluZTogY2MuU3ByaXRlLFxuICAgICAgICB2b2ljZU5vZGU6IGNjLk5vZGUsXG4gICAgICAgIGhvbWVSdW5Ob2RlOiBjYy5Ob2RlLFxuICAgICAgICByZWFkeU5vZGU6IGNjLk5vZGUsXG4gICAgICAgIHNob290Tm9kZXM6IFtjYy5Ob2RlXSxcbiAgICAgICAgYmFua2VyTm9kZTogY2MuTm9kZSxcbiAgICAgICAgZmFuZ1podU5vZGU6IGNjLk5vZGUsXG4gICAgfSxcblxuICAgIC8vIHVzZSB0aGlzIGZvciBpbml0aWFsaXphdGlvblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy51cGRhdGVTY29yZSgpO1xuICAgIH0sXG5cbiAgICBzZXRSZWFkeU5vZGVWaXNpYmxlOiBmdW5jdGlvbiAodmlzaWJsZSA9IGZhbHNlKSB7XG4gICAgICB0aGlzLnJlYWR5Tm9kZS5hY3RpdmUgPSAodmlzaWJsZSAhPSBmYWxzZSk7XG4gICAgfSxcblxuICAgIHNldEZhbmdaaHVOb2RlVmlzaWJsZTogZnVuY3Rpb24gKHZpc2libGUgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmZhbmdaaHVOb2RlLmFjdGl2ZSA9ICh2aXNpYmxlICE9IGZhbHNlKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlU2NvcmU6IGZ1bmN0aW9uIChzY29yZSA9IDApIHtcbiAgICAgICAgdGhpcy5sYWJlbFNjb3JlLnN0cmluZyA9IFwiXCIgKyBzY29yZTtcbiAgICB9LFxuXG4gICAgdXBkYXRlTmlja25hbWU6IGZ1bmN0aW9uKG5pY2tuYW1lID0gXCJcIikge1xuICAgICAgdGhpcy5sYWJlbE5pY2tuYW1lLnN0cmluZyA9IG5pY2tuYW1lO1xuICAgIH0sXG5cbiAgICB1cGRhdGVBdmF0YXI6IGZ1bmN0aW9uIChhdmF0YXIpIHtcbiAgICAgIGlmIChhdmF0YXIuZW5kc1dpdGgoXCJwbmdcIilcbiAgICAgIHx8IGF2YXRhci5lbmRzV2l0aChcImpwZ1wiKVxuICAgICAgfHwgYXZhdGFyLmVuZHNXaXRoKFwiZ2lmXCIpKSB7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF2YXRhciA9IGF2YXRhciArIFwiLnBuZ1wiO1xuICAgICAgfVxuXG4gICAgICBjYy5sb2FkZXIubG9hZChhdmF0YXIsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZShkYXRhKTtcbiAgICAgICAgdGhpcy5zcHJpdGVBdmF0YXIuc3ByaXRlRnJhbWUgPSBmcmFtZTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIHNldE9mZmxpbmVWaXNpYmxlOiBmdW5jdGlvbiAodmlzaWJsZSA9IGZhbHNlKSB7XG4gICAgICBpZiAoUGxheWJhY2suaW5zdGFuY2UuaXNQbGF5YmFja2luZygpKSB7XG4gICAgICAgIC8vIOWmguaenOaYr+WkhOeQhuWbnuaUvueKtuaAge+8jOWwseS4jeeUqOWGjeWkhOeQhuemu+e6v+a2iOaBr+S6hlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3ByaXRlT2ZmbGluZS5ub2RlLmFjdGl2ZSA9IHZpc2libGU7XG4gICAgfSxcblxuICAgIHNldElzQmFua2VyOiBmdW5jdGlvbihpc0JhbmtlciA9IGZhbHNlKSB7XG4gICAgICB0aGlzLmJhbmtlck5vZGUuYWN0aXZlID0gaXNCYW5rZXI7XG4gICAgfSxcblxuICAgIHBsYXlTaG9vdEFuaW1hdGlvbjogZnVuY3Rpb24gKHRvSW5kZXggPSAwKSB7XG4gICAgICBsZXQgc2hvb3ROb2RlID0gdGhpcy5zaG9vdE5vZGVzW3RvSW5kZXhdO1xuICAgICAgc2hvb3ROb2RlLmFjdGl2ZSA9IHRydWU7XG4gICAgICBsZXQgYW5pbSA9IHNob290Tm9kZS5nZXRDb21wb25lbnQoY2MuQW5pbWF0aW9uKTtcbiAgICAgIGFuaW0ucGxheSgnc2hvb3QnKS5vbignZmluaXNoZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNob290Tm9kZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH0sIHRoaXMpO1xuXG4gICAgICBBdWRpb01hbmFnZXIuaW5zdGFuY2UucGxheURhUWlhbmcoKTtcbiAgICB9LFxuXG4gICAgcGxheUJ1bGxldEhvbGVBbmltYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBidWxsZXRIb2xlTm9kZSA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZSgnYnVsbGV0SG9sZScpO1xuICAgICAgYnVsbGV0SG9sZU5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGxldCBhbmltID0gYnVsbGV0SG9sZU5vZGUuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICBhbmltLnBsYXkoJ2J1bGxldEhvbGUnKS5vbignZmluaXNoZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJ1bGxldEhvbGVOb2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSxcblxuICAgIHBsYXlTcGVha0FuaW1hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52b2ljZU5vZGUuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52b2ljZU5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9LmJpbmQodGhpcyksIDQpO1xuICAgIH0sXG5cbiAgICAvLyDmkq3mlL7lhajlnpLmiZPliqjnlLtcbiAgICBwbGF5SG9tZVJ1bkFpbWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgYWxlcnQgPSB0aGlzLmhvbWVSdW5Ob2RlLmdldENvbXBvbmVudCgnYWxlcnQnKTtcbiAgICAgIGFsZXJ0LmFsZXJ0KCk7XG4gICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaG9tZVJ1bk5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9LmJpbmQodGhpcyksIDIpO1xuICAgIH0sXG59KTtcbiIsImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHpodWFuTnVtTGFiZWw6Y2MuTGFiZWwsXG4gICAgICAgIGp1c2h1OmNjLk5vZGUsXG4gICAgICAgIEFBOmNjLk5vZGUsXG4gICAgICAgIF9zZWxlY3RlZFBlb3BsZUluZGV4Om51bGwsXG4gICAgICAgIF9zZWxlY3RlZEp1c2h1SW5kZXg6bnVsbCxcbiAgICAgICAgX3NlbGVjdGVkQUFJbmRleDpudWxsXG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jdHJsKCk7XG4gICAgfSxcblxuICAgIGNsaWNrUGVvcGxlQWN0aW9uOmZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jdHJsKCk7XG4gICAgfSxcblxuICAgIGNsaWNrQUFBY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY3RybCgpO1xuICAgIH0sXG5cbiAgICBjbGlja0p1c2h1QWN0aW9uOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY3RybCgpO1xuICAgIH0sXG5cbiAgICAgX2N0cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZFBlb3BsZUluZGV4ID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChcInNpbmdsZVNlbGVjdFwiKS5zZWxlY3RlZEluZGV4O1xuICAgICAgICB0aGlzLl9zZWxlY3RlZEp1c2h1SW5kZXggPSB0aGlzLmp1c2h1LmdldENvbXBvbmVudChcInNpbmdsZVNlbGVjdFwiKS5zZWxlY3RlZEluZGV4O1xuICAgICAgICB0aGlzLl9zZWxlY3RlZEFBSW5kZXggPSB0aGlzLkFBLmdldENvbXBvbmVudChcImNoZWNrU2VsZWN0XCIpLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgIC8v5Lq65pWw6YCJMuS6uuaXtuS4lOayoemAieS4ikFB5Yi25pS26LS5XG4gICAgICAgICB2YXIgcmVuU2h1ID0gMjtcbiAgICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkUGVvcGxlSW5kZXggPT0gMCl7XG4gICAgICAgICAgICAgcmVuU2h1ID0gMjtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYodGhpcy5fc2VsZWN0ZWRQZW9wbGVJbmRleCA9PSAxKXtcbiAgICAgICAgICAgICByZW5TaHUgPSAzO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZih0aGlzLl9zZWxlY3RlZFBlb3BsZUluZGV4ID09IDIpe1xuICAgICAgICAgICAgIHJlblNodSA9IDQ7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmKHRoaXMuX3NlbGVjdGVkUGVvcGxlSW5kZXggPT0gMyl7XG4gICAgICAgICAgICAgcmVuU2h1ID0gNTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciB6aHVhbmdTaGkgPSAyMDtcbiAgICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAwKXtcbiAgICAgICAgICAgICB6aHVhbmdTaGkgPSAyMDtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDEpe1xuICAgICAgICAgICAgIHpodWFuZ1NoaSA9IDQwO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZih0aGlzLl9zZWxlY3RlZEp1c2h1SW5kZXggPT0gMil7XG4gICAgICAgICAgICAgemh1YW5nU2hpID0gODA7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAzKXtcbiAgICAgICAgICAgICB6aHVhbmdTaGkgPSAxMDtcbiAgICAgICAgIH1cbiAgICAgICAgIC8vQUFcbiAgICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkQUFJbmRleCAhPSBudWxsKXtcbiAgICAgICAgICAgICB6aHVhbmdTaGkgPSBNYXRoLmNlaWwoemh1YW5nU2hpIC8gcmVuU2h1KTtcbiAgICAgICAgIH1cbiAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSB6aHVhbmdTaGk7XG4gICAgICAgIC8vaWYodGhpcy5fc2VsZWN0ZWRQZW9wbGVJbmRleCA9PSAwKXtcbiAgICAgICAgLy8gICAgaWYodGhpcy5fc2VsZWN0ZWRBQUluZGV4ID09IG51bGwpe1xuICAgICAgICAgICAgICAgIC8v5bGA5pWw6YCJMTDlsYDml7ZcbiAgICAgICAgICAgICAgICAvL2lmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAwKXtcbiAgICAgICAgICAgICAgICAvLyAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCIxMFwiO1xuICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgIC8vLy/lsYDmlbDpgIkyMOWxgOaXtlxuICAgICAgICAgICAgICAgIC8vaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDEpe1xuICAgICAgICAgICAgICAgIC8vICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjMwXCI7XG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgLy8vL+WxgOaVsOmAiTMw5bGA5pe2XG4gICAgICAgICAgICAgICAgLy9pZih0aGlzLl9zZWxlY3RlZEp1c2h1SW5kZXggPT0gMil7XG4gICAgICAgICAgICAgICAgLy8gICAgdGhpcy56aHVhbk51bUxhYmVsLnN0cmluZyA9IFwiODBcIjtcbiAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgIC8vfVxuICAgICAgICAvLyAgICBlbHNle1xuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkxMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDApe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjhcIjtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgIC8v5bGA5pWw6YCJMjDlsYDml7ZcbiAgICAgICAgLy8gICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgICAgICAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCIxNVwiO1xuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkzMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDIpe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjIzXCI7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy99XG4gICAgICAgIC8v5Lq65pWw6YCJM+S6ulxuICAgICAgICAvL2Vsc2UgaWYodGhpcy5fc2VsZWN0ZWRQZW9wbGVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgLy/msqHpgInkuIpBQeWItuaUtui0uVxuICAgICAgICAvLyAgICBpZih0aGlzLl9zZWxlY3RlZEFBSW5kZXggPT0gbnVsbCl7XG4gICAgICAgIC8vICAgICAgICAvL+WxgOaVsOmAiTEw5bGA5pe2XG4gICAgICAgIC8vICAgICAgICBpZih0aGlzLl9zZWxlY3RlZEp1c2h1SW5kZXggPT0gMCl7XG4gICAgICAgIC8vICAgICAgICAgICAgdGhpcy56aHVhbk51bUxhYmVsLnN0cmluZyA9IFwiMjFcIjtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgIC8v5bGA5pWw6YCJMjDlsYDml7ZcbiAgICAgICAgLy8gICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgICAgICAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCI0MlwiO1xuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkzMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDIpe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjYwXCI7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy8gICAgLy/pgInkuoZBQeaUtui0uVxuICAgICAgICAvLyAgICBlbHNle1xuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkxMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDApe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjdcIjtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgIC8v5bGA5pWw6YCJMjDlsYDml7ZcbiAgICAgICAgLy8gICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgICAgICAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCIxNFwiO1xuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkzMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDIpe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjIwXCI7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy99XG4gICAgICAgIC8vLy/kurrmlbDpgIk05Lq65LiU5rKh6YCJ5LiKQUHliLbmlLbotLlcbiAgICAgICAgLy9lbHNle1xuICAgICAgICAvLyAgICBpZih0aGlzLl9zZWxlY3RlZEFBSW5kZXggPT0gbnVsbCl7XG4gICAgICAgIC8vICAgICAgICAvL+WxgOaVsOmAiTEw5bGA5pe2XG4gICAgICAgIC8vICAgICAgICBpZih0aGlzLl9zZWxlY3RlZEp1c2h1SW5kZXggPT0gMCl7XG4gICAgICAgIC8vICAgICAgICAgICAgdGhpcy56aHVhbk51bUxhYmVsLnN0cmluZyA9IFwiMjhcIjtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgIC8v5bGA5pWw6YCJMjDlsYDml7ZcbiAgICAgICAgLy8gICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgICAgICAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCI1NlwiO1xuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkzMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDIpe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjg0XCI7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy8gICAgLy9BQeWItuaUtui0uemAieS4iuS6hlxuICAgICAgICAvLyAgICBlbHNle1xuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkxMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDApe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjdcIjtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgIC8v5bGA5pWw6YCJMjDlsYDml7ZcbiAgICAgICAgLy8gICAgICAgIGlmKHRoaXMuX3NlbGVjdGVkSnVzaHVJbmRleCA9PSAxKXtcbiAgICAgICAgLy8gICAgICAgICAgICB0aGlzLnpodWFuTnVtTGFiZWwuc3RyaW5nID0gXCIxNFwiO1xuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgLy/lsYDmlbDpgIkzMOWxgOaXtlxuICAgICAgICAvLyAgICAgICAgaWYodGhpcy5fc2VsZWN0ZWRKdXNodUluZGV4ID09IDIpe1xuICAgICAgICAvLyAgICAgICAgICAgIHRoaXMuemh1YW5OdW1MYWJlbC5zdHJpbmcgPSBcIjIxXCI7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy99XG4gICAgfSxcbn0pO1xuIl19