{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/C,IAAM,yBAAyB,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACvE,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,iBAAS,EAAE;AACP,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,KAAK;SACjB;KACJ;;;AAGD,UAAM,EAAE,kBAAY;AAChB,qBAAa,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;;;KAGrF;AACD,0BAAsB,EAAE,gCAAU,QAAQ,EAAE;AACxC,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AAClB,mBAAO;SACV;AACD,YAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AACpC,YAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;;;;;AAKzB,YAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;KAC5C;CAKJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const Socket = require('socket');\r\nconst KQGlobalEvent = require('KQGlobalEvent');\r\nconst KQGlabolSocketEventHander = require('KQGlabolSocketEventHander');\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        agreement: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        KQGlobalEvent.on(Socket.Event.ReceiveHallInfo, this._socketReceiveHallInfo, this);\r\n        // cc.log('----61')\r\n        //  cc.log(this.agreement)\r\n    },\r\n    _socketReceiveHallInfo: function (response) {\r\n        if (!response.result) {\r\n            return;\r\n        }\r\n        var s = cc.find('Canvas/agreement');\r\n        let data = response.data;\r\n        //this._info1 = response.data;\r\n        // cc.log(this.agreement)\r\n        // cc.log(s)\r\n        // cc.log('----61')\r\n        this.agreement.string = data.info1 || \"\";\r\n    },\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}